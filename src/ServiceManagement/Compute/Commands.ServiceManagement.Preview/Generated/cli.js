/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

function beautify(jsonText) {
  var obj = JSON.parse(jsonText);
  return JSON.stringify(obj, null, 2);
}

function capitalize(str) {
  if (str && str.length >= 1) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  else {
    return str;
  }
}

function makeTuple(k, v, d) {
  return { key : k, value : v, depth : d };
}

function displayImpl(o, key, depth, arr) {
  if ((!!o) && (o.constructor === Object || o.constructor === Array)) {
    arr.push(makeTuple(key, '', depth));
    var len = 0;
    Object.keys(o).forEach(function(k1) {
      var v1 = o[k1];
      var p1 = o.constructor === Array ? '#' : '';
      var w = displayImpl(v1, p1 + k1, depth + 1, arr);
      if (w > len) {
        len = w;
      }
    });
    return len;
  }
  else {
    arr.push(makeTuple(key, o ? o.toString() : '', depth));
    return depth * 2 + (key ? key.length : 0);
  }
}

function display(cli, o) {
  var arr = [];
  var width = displayImpl(o, '', 0, arr);
  for (var t in arr) {
    var prebuf = new Array(arr[t].depth * 2).join(' ');
    var key = arr[t].key ? arr[t].key : '';
    var postbuf = new Array(width - (prebuf.length + key.length)).join(' ');
    var str = prebuf + capitalize(key) + postbuf;
    if (arr[t].value) {
      str += ' : ' + arr[t].value;
    }
    cli.output.data(str);
  }
}

exports.init = function (cli) {

/*
  Deployment ChangeConfigurationByName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "configuration":"",
  "extendedProperties":{
  },
  "extensionConfiguration":{
    "allRoles":[
      {
        "id":"",
        "state":""
      }
    ],
    "namedRoles":[
      {
        "extensions":[
          {
            "id":"",
            "state":""
          }
        ],
        "roleName":""
      }
    ]
  },
  "mode":null,
  "treatWarningsAsError":null
}
*/
  var deploymentChangeConfigurationByName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentChangeConfigurationByName.command('change-configuration-by-name [service-name] [deployment-name] [parameters]')
  .description($('The Change Deployment Configuration By Name operation initiates a change to the deployment configuration. This operation is an asynchronous operation. To determine whether the Management service has finished processing the request, call Get Operation Status. For more information on asynchronous operations, see Tracking Asynchronous Service Management Requests at http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.changeConfigurationByName(serviceName, deploymentName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var deploymentChangeConfigurationByNamechangeConfigurationByNameParameters2 = deploymentChangeConfigurationByName.category('change-configuration-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  deploymentChangeConfigurationByNamechangeConfigurationByNameParameters2.command('generate')
  .description($('Generate deploymentChangeConfigurationByName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"configuration\":\"\",\"extendedProperties\":{},\"extensionConfiguration\":{\"allRoles\":[{\"id\":\"\",\"state\":\"\"}],\"namedRoles\":[{\"extensions\":[{\"id\":\"\",\"state\":\"\"}],\"roleName\":\"\"}]},\"mode\":null,\"treatWarningsAsError\":null}', _);
    var filePath = 'deploymentChangeConfigurationByName_changeConfigurationByName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"configuration\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"extensionConfiguration\":{\r\n\"allRoles\":[\r\n{\r\n\"id\":\"\",\r\n\"state\":\"\"\r\n}\r\n],\r\n\"namedRoles\":[\r\n{\r\n\"extensions\":[\r\n{\r\n\"id\":\"\",\r\n\"state\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\"\r\n}\r\n]\r\n},\r\n\"mode\":null,\r\n\"treatWarningsAsError\":null\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  deploymentChangeConfigurationByNamechangeConfigurationByNameParameters2.command('patch')
  .description($('Command to patch deploymentChangeConfigurationByName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-name-parameters set deployment-change-configuration-parameters
  var catparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters0 = catparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters0.category('change-configuration-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters0 = parametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters0.category('deployment-change-configuration-parameters')
  .description($('Commands to set components of deployment in change-configuration-by-name-parameters file.'));
  setparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters0.command('set')
  .description($('Set deployment-change-configuration-parameters in change-configuration-by-name-parameters string or files, e.g. \r\n{\r\n  "configuration":"",\r\n  "extendedProperties":{\r\n  },\r\n  "extensionConfiguration":{\r\n    "allRoles":[\r\n      {\r\n        "id":"",\r\n        "state":""\r\n      }\r\n    ],\r\n    "namedRoles":[\r\n      {\r\n        "extensions":[\r\n          {\r\n            "id":"",\r\n            "state":""\r\n          }\r\n        ],\r\n        "roleName":""\r\n      }\r\n    ]\r\n  },\r\n  "mode":null,\r\n  "treatWarningsAsError":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--configuration <configuration>', $('Set the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Set the extension-configuration value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Set the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'configuration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'extensionConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = options.path + '/' + 'treatWarningsAsError';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-name-parameters delete deployment-change-configuration-parameters
  var catparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters1 = catparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters1.category('change-configuration-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters1 = parametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters1.category('deployment-change-configuration-parameters')
  .description($('Commands to delete components of deployment in change-configuration-by-name-parameters file.'));
  deleteparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters1.command('delete')
  .description($('Remove deployment-change-configuration-parameters in change-configuration-by-name-parameters string or files, e.g. \r\n{\r\n  "configuration":"",\r\n  "extendedProperties":{\r\n  },\r\n  "extensionConfiguration":{\r\n    "allRoles":[\r\n      {\r\n        "id":"",\r\n        "state":""\r\n      }\r\n    ],\r\n    "namedRoles":[\r\n      {\r\n        "extensions":[\r\n          {\r\n            "id":"",\r\n            "state":""\r\n          }\r\n        ],\r\n        "roleName":""\r\n      }\r\n    ]\r\n  },\r\n  "mode":null,\r\n  "treatWarningsAsError":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration', $('Remove the configuration value.'))
  .option('--extended-properties', $('Remove the extended-properties value.'))
  .option('--extension-configuration', $('Remove the extension-configuration value.'))
  .option('--mode', $('Remove the mode value.'))
  .option('--treat-warnings-as-error', $('Remove the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.configuration || options.extendedProperties || options.extensionConfiguration || options.mode || options.treatWarningsAsError;
    if (anySubItem) {
      var subItemPath = null;
      if (options.configuration) {
        subItemPath = options.path + '/configuration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extendedProperties) {
        subItemPath = options.path + '/extendedProperties';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionConfiguration) {
        subItemPath = options.path + '/extensionConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mode) {
        subItemPath = options.path + '/mode';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.treatWarningsAsError) {
        subItemPath = options.path + '/treatWarningsAsError';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //change-configuration-by-name-parameters add deployment-change-configuration-parameters
  var catparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters2 = catparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters2.category('change-configuration-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters2 = parametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters2.category('deployment-change-configuration-parameters')
  .description($('Commands to add components of deployment in change-configuration-by-name-parameters file.'));
  addparametersChangeConfigurationByNameDeploymentDeploymentChangeConfigurationParameters2.command('add')
  .description($('Add deployment-change-configuration-parameters in change-configuration-by-name-parameters string or files, e.g. \r\n{\r\n  "configuration":"",\r\n  "extendedProperties":{\r\n  },\r\n  "extensionConfiguration":{\r\n    "allRoles":[\r\n      {\r\n        "id":"",\r\n        "state":""\r\n      }\r\n    ],\r\n    "namedRoles":[\r\n      {\r\n        "extensions":[\r\n          {\r\n            "id":"",\r\n            "state":""\r\n          }\r\n        ],\r\n        "roleName":""\r\n      }\r\n    ]\r\n  },\r\n  "mode":null,\r\n  "treatWarningsAsError":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--configuration <configuration>', $('Add the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Add the extension-configuration value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Add the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'configuration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'extensionConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = '' + '/' + 'treatWarningsAsError';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-name-parameters delete extension-configuration
  var catparametersChangeConfigurationByNameDeploymentExtensionConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentExtensionConfiguration1 = catparametersChangeConfigurationByNameDeploymentExtensionConfiguration1.category('change-configuration-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersChangeConfigurationByNameDeploymentExtensionConfiguration1 = parametersChangeConfigurationByNameDeploymentExtensionConfiguration1.category('extension-configuration')
  .description($('Commands to delete components of deployment in change-configuration-by-name-parameters file.'));
  deleteparametersChangeConfigurationByNameDeploymentExtensionConfiguration1.command('delete')
  .description($('Remove extension-configuration in change-configuration-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionConfiguration" : {\r\n             "allRoles":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "namedRoles":[\r\n               {\r\n                 "extensions":[\r\n                   {\r\n                     "id":"",\r\n                     "state":""\r\n                   }\r\n                 ],\r\n                 "roleName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--all-roles', $('Remove the all-roles value.'))
  .option('--named-roles', $('Remove the named-roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration';
    var anySubItem = false || options.allRoles || options.namedRoles;
    if (anySubItem) {
      var subItemPath = null;
      if (options.allRoles) {
        subItemPath = options.path + '/allRoles';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.namedRoles) {
        subItemPath = options.path + '/namedRoles';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //change-configuration-by-name-parameters add extension-configuration
  var catparametersChangeConfigurationByNameDeploymentExtensionConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentExtensionConfiguration2 = catparametersChangeConfigurationByNameDeploymentExtensionConfiguration2.category('change-configuration-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersChangeConfigurationByNameDeploymentExtensionConfiguration2 = parametersChangeConfigurationByNameDeploymentExtensionConfiguration2.category('extension-configuration')
  .description($('Commands to add components of deployment in change-configuration-by-name-parameters file.'));
  addparametersChangeConfigurationByNameDeploymentExtensionConfiguration2.command('add')
  .description($('Add extension-configuration in change-configuration-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionConfiguration" : {\r\n             "allRoles":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "namedRoles":[\r\n               {\r\n                 "extensions":[\r\n                   {\r\n                     "id":"",\r\n                     "state":""\r\n                   }\r\n                 ],\r\n                 "roleName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--all-roles <allRoles>', $('Add the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Add the named-roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration' + '/' + 'allRoles';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = '/extensionConfiguration' + '/' + 'namedRoles';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-name-parameters set all-roles
  var catparametersChangeConfigurationByNameDeploymentAllRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentAllRoles0 = catparametersChangeConfigurationByNameDeploymentAllRoles0.category('change-configuration-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersChangeConfigurationByNameDeploymentAllRoles0 = parametersChangeConfigurationByNameDeploymentAllRoles0.category('all-roles')
  .description($('Commands to set components of deployment in change-configuration-by-name-parameters file.'));
  setparametersChangeConfigurationByNameDeploymentAllRoles0.command('set')
  .description($('Set all-roles in change-configuration-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "allRoles" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--state <state>', $('Set the state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'state';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-name-parameters delete all-roles
  var catparametersChangeConfigurationByNameDeploymentAllRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentAllRoles1 = catparametersChangeConfigurationByNameDeploymentAllRoles1.category('change-configuration-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersChangeConfigurationByNameDeploymentAllRoles1 = parametersChangeConfigurationByNameDeploymentAllRoles1.category('all-roles')
  .description($('Commands to delete components of deployment in change-configuration-by-name-parameters file.'));
  deleteparametersChangeConfigurationByNameDeploymentAllRoles1.command('delete')
  .description($('Remove all-roles in change-configuration-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "allRoles" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id', $('Remove the id value.'))
  .option('--state', $('Remove the state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id || options.state;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.state) {
        subItemPath = options.path + '/state';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //change-configuration-by-name-parameters add all-roles
  var catparametersChangeConfigurationByNameDeploymentAllRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentAllRoles2 = catparametersChangeConfigurationByNameDeploymentAllRoles2.category('change-configuration-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersChangeConfigurationByNameDeploymentAllRoles2 = parametersChangeConfigurationByNameDeploymentAllRoles2.category('all-roles')
  .description($('Commands to add components of deployment in change-configuration-by-name-parameters file.'));
  addparametersChangeConfigurationByNameDeploymentAllRoles2.command('add')
  .description($('Add all-roles in change-configuration-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "allRoles" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--state <state>', $('Add the state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'state';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-name-parameters set named-roles
  var catparametersChangeConfigurationByNameDeploymentNamedRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentNamedRoles0 = catparametersChangeConfigurationByNameDeploymentNamedRoles0.category('change-configuration-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersChangeConfigurationByNameDeploymentNamedRoles0 = parametersChangeConfigurationByNameDeploymentNamedRoles0.category('named-roles')
  .description($('Commands to set components of deployment in change-configuration-by-name-parameters file.'));
  setparametersChangeConfigurationByNameDeploymentNamedRoles0.command('set')
  .description($('Set named-roles in change-configuration-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "namedRoles" : {\r\n             "extensions":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "roleName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'extensions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-name-parameters delete named-roles
  var catparametersChangeConfigurationByNameDeploymentNamedRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentNamedRoles1 = catparametersChangeConfigurationByNameDeploymentNamedRoles1.category('change-configuration-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersChangeConfigurationByNameDeploymentNamedRoles1 = parametersChangeConfigurationByNameDeploymentNamedRoles1.category('named-roles')
  .description($('Commands to delete components of deployment in change-configuration-by-name-parameters file.'));
  deleteparametersChangeConfigurationByNameDeploymentNamedRoles1.command('delete')
  .description($('Remove named-roles in change-configuration-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "namedRoles" : {\r\n             "extensions":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "roleName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions', $('Remove the extensions value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.extensions || options.roleName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.extensions) {
        subItemPath = options.path + '/extensions';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        subItemPath = options.path + '/roleName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //change-configuration-by-name-parameters add named-roles
  var catparametersChangeConfigurationByNameDeploymentNamedRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentNamedRoles2 = catparametersChangeConfigurationByNameDeploymentNamedRoles2.category('change-configuration-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersChangeConfigurationByNameDeploymentNamedRoles2 = parametersChangeConfigurationByNameDeploymentNamedRoles2.category('named-roles')
  .description($('Commands to add components of deployment in change-configuration-by-name-parameters file.'));
  addparametersChangeConfigurationByNameDeploymentNamedRoles2.command('add')
  .description($('Add named-roles in change-configuration-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "namedRoles" : {\r\n             "extensions":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "roleName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--extensions <extensions>', $('Add the extensions value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'extensions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-name-parameters set extensions
  var catparametersChangeConfigurationByNameDeploymentExtensions0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentExtensions0 = catparametersChangeConfigurationByNameDeploymentExtensions0.category('change-configuration-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersChangeConfigurationByNameDeploymentExtensions0 = parametersChangeConfigurationByNameDeploymentExtensions0.category('extensions')
  .description($('Commands to set components of deployment in change-configuration-by-name-parameters file.'));
  setparametersChangeConfigurationByNameDeploymentExtensions0.command('set')
  .description($('Set extensions in change-configuration-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-name-parameters delete extensions
  var catparametersChangeConfigurationByNameDeploymentExtensions1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentExtensions1 = catparametersChangeConfigurationByNameDeploymentExtensions1.category('change-configuration-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersChangeConfigurationByNameDeploymentExtensions1 = parametersChangeConfigurationByNameDeploymentExtensions1.category('extensions')
  .description($('Commands to delete components of deployment in change-configuration-by-name-parameters file.'));
  deleteparametersChangeConfigurationByNameDeploymentExtensions1.command('delete')
  .description($('Remove extensions in change-configuration-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //change-configuration-by-name-parameters add extensions
  var catparametersChangeConfigurationByNameDeploymentExtensions2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationByNameDeploymentExtensions2 = catparametersChangeConfigurationByNameDeploymentExtensions2.category('change-configuration-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersChangeConfigurationByNameDeploymentExtensions2 = parametersChangeConfigurationByNameDeploymentExtensions2.category('extensions')
  .description($('Commands to add components of deployment in change-configuration-by-name-parameters file.'));
  addparametersChangeConfigurationByNameDeploymentExtensions2.command('add')
  .description($('Add extensions in change-configuration-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  Deployment ChangeConfigurationBySlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "configuration":"",
  "extendedProperties":{
  },
  "extensionConfiguration":{
    "allRoles":[
      {
        "id":"",
        "state":""
      }
    ],
    "namedRoles":[
      {
        "extensions":[
          {
            "id":"",
            "state":""
          }
        ],
        "roleName":""
      }
    ]
  },
  "mode":null,
  "treatWarningsAsError":null
}
*/
  var deploymentChangeConfigurationBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentChangeConfigurationBySlot.command('change-configuration-by-slot [service-name] [deployment-slot] [parameters]')
  .description($('The Change Deployment Configuration By Slot operation initiates a change to the deployment configuration. This operation is an asynchronous operation. To determine whether the Management service has finished processing the request, call Get Operation Status. For more information on asynchronous operations, see Tracking Asynchronous Service Management Requests at http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx for more information)'))
  .usage('[options] <service-name> <deployment-slot> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentSlot, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentSlot) {
      deploymentSlot = cli.interaction.promptIfNotGiven($('deployment-slot : '), deploymentSlot, _);
    }

    cli.output.verbose('deploymentSlot = ' + deploymentSlot);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.changeConfigurationBySlot(serviceName, deploymentSlot, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var deploymentChangeConfigurationBySlotchangeConfigurationBySlotParameters2 = deploymentChangeConfigurationBySlot.category('change-configuration-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  deploymentChangeConfigurationBySlotchangeConfigurationBySlotParameters2.command('generate')
  .description($('Generate deploymentChangeConfigurationBySlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"configuration\":\"\",\"extendedProperties\":{},\"extensionConfiguration\":{\"allRoles\":[{\"id\":\"\",\"state\":\"\"}],\"namedRoles\":[{\"extensions\":[{\"id\":\"\",\"state\":\"\"}],\"roleName\":\"\"}]},\"mode\":null,\"treatWarningsAsError\":null}', _);
    var filePath = 'deploymentChangeConfigurationBySlot_changeConfigurationBySlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"configuration\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"extensionConfiguration\":{\r\n\"allRoles\":[\r\n{\r\n\"id\":\"\",\r\n\"state\":\"\"\r\n}\r\n],\r\n\"namedRoles\":[\r\n{\r\n\"extensions\":[\r\n{\r\n\"id\":\"\",\r\n\"state\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\"\r\n}\r\n]\r\n},\r\n\"mode\":null,\r\n\"treatWarningsAsError\":null\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  deploymentChangeConfigurationBySlotchangeConfigurationBySlotParameters2.command('patch')
  .description($('Command to patch deploymentChangeConfigurationBySlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-slot-parameters set deployment-change-configuration-parameters
  var catparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters0 = catparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters0.category('change-configuration-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters0 = parametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters0.category('deployment-change-configuration-parameters')
  .description($('Commands to set components of deployment in change-configuration-by-slot-parameters file.'));
  setparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters0.command('set')
  .description($('Set deployment-change-configuration-parameters in change-configuration-by-slot-parameters string or files, e.g. \r\n{\r\n  "configuration":"",\r\n  "extendedProperties":{\r\n  },\r\n  "extensionConfiguration":{\r\n    "allRoles":[\r\n      {\r\n        "id":"",\r\n        "state":""\r\n      }\r\n    ],\r\n    "namedRoles":[\r\n      {\r\n        "extensions":[\r\n          {\r\n            "id":"",\r\n            "state":""\r\n          }\r\n        ],\r\n        "roleName":""\r\n      }\r\n    ]\r\n  },\r\n  "mode":null,\r\n  "treatWarningsAsError":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--configuration <configuration>', $('Set the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Set the extension-configuration value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Set the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'configuration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'extensionConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = options.path + '/' + 'treatWarningsAsError';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-slot-parameters delete deployment-change-configuration-parameters
  var catparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters1 = catparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters1.category('change-configuration-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters1 = parametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters1.category('deployment-change-configuration-parameters')
  .description($('Commands to delete components of deployment in change-configuration-by-slot-parameters file.'));
  deleteparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters1.command('delete')
  .description($('Remove deployment-change-configuration-parameters in change-configuration-by-slot-parameters string or files, e.g. \r\n{\r\n  "configuration":"",\r\n  "extendedProperties":{\r\n  },\r\n  "extensionConfiguration":{\r\n    "allRoles":[\r\n      {\r\n        "id":"",\r\n        "state":""\r\n      }\r\n    ],\r\n    "namedRoles":[\r\n      {\r\n        "extensions":[\r\n          {\r\n            "id":"",\r\n            "state":""\r\n          }\r\n        ],\r\n        "roleName":""\r\n      }\r\n    ]\r\n  },\r\n  "mode":null,\r\n  "treatWarningsAsError":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration', $('Remove the configuration value.'))
  .option('--extended-properties', $('Remove the extended-properties value.'))
  .option('--extension-configuration', $('Remove the extension-configuration value.'))
  .option('--mode', $('Remove the mode value.'))
  .option('--treat-warnings-as-error', $('Remove the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.configuration || options.extendedProperties || options.extensionConfiguration || options.mode || options.treatWarningsAsError;
    if (anySubItem) {
      var subItemPath = null;
      if (options.configuration) {
        subItemPath = options.path + '/configuration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extendedProperties) {
        subItemPath = options.path + '/extendedProperties';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionConfiguration) {
        subItemPath = options.path + '/extensionConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mode) {
        subItemPath = options.path + '/mode';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.treatWarningsAsError) {
        subItemPath = options.path + '/treatWarningsAsError';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //change-configuration-by-slot-parameters add deployment-change-configuration-parameters
  var catparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters2 = catparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters2.category('change-configuration-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters2 = parametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters2.category('deployment-change-configuration-parameters')
  .description($('Commands to add components of deployment in change-configuration-by-slot-parameters file.'));
  addparametersChangeConfigurationBySlotDeploymentDeploymentChangeConfigurationParameters2.command('add')
  .description($('Add deployment-change-configuration-parameters in change-configuration-by-slot-parameters string or files, e.g. \r\n{\r\n  "configuration":"",\r\n  "extendedProperties":{\r\n  },\r\n  "extensionConfiguration":{\r\n    "allRoles":[\r\n      {\r\n        "id":"",\r\n        "state":""\r\n      }\r\n    ],\r\n    "namedRoles":[\r\n      {\r\n        "extensions":[\r\n          {\r\n            "id":"",\r\n            "state":""\r\n          }\r\n        ],\r\n        "roleName":""\r\n      }\r\n    ]\r\n  },\r\n  "mode":null,\r\n  "treatWarningsAsError":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--configuration <configuration>', $('Add the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Add the extension-configuration value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Add the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'configuration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'extensionConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = '' + '/' + 'treatWarningsAsError';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-slot-parameters delete extension-configuration
  var catparametersChangeConfigurationBySlotDeploymentExtensionConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentExtensionConfiguration1 = catparametersChangeConfigurationBySlotDeploymentExtensionConfiguration1.category('change-configuration-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersChangeConfigurationBySlotDeploymentExtensionConfiguration1 = parametersChangeConfigurationBySlotDeploymentExtensionConfiguration1.category('extension-configuration')
  .description($('Commands to delete components of deployment in change-configuration-by-slot-parameters file.'));
  deleteparametersChangeConfigurationBySlotDeploymentExtensionConfiguration1.command('delete')
  .description($('Remove extension-configuration in change-configuration-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionConfiguration" : {\r\n             "allRoles":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "namedRoles":[\r\n               {\r\n                 "extensions":[\r\n                   {\r\n                     "id":"",\r\n                     "state":""\r\n                   }\r\n                 ],\r\n                 "roleName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--all-roles', $('Remove the all-roles value.'))
  .option('--named-roles', $('Remove the named-roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration';
    var anySubItem = false || options.allRoles || options.namedRoles;
    if (anySubItem) {
      var subItemPath = null;
      if (options.allRoles) {
        subItemPath = options.path + '/allRoles';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.namedRoles) {
        subItemPath = options.path + '/namedRoles';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //change-configuration-by-slot-parameters add extension-configuration
  var catparametersChangeConfigurationBySlotDeploymentExtensionConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentExtensionConfiguration2 = catparametersChangeConfigurationBySlotDeploymentExtensionConfiguration2.category('change-configuration-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersChangeConfigurationBySlotDeploymentExtensionConfiguration2 = parametersChangeConfigurationBySlotDeploymentExtensionConfiguration2.category('extension-configuration')
  .description($('Commands to add components of deployment in change-configuration-by-slot-parameters file.'));
  addparametersChangeConfigurationBySlotDeploymentExtensionConfiguration2.command('add')
  .description($('Add extension-configuration in change-configuration-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionConfiguration" : {\r\n             "allRoles":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "namedRoles":[\r\n               {\r\n                 "extensions":[\r\n                   {\r\n                     "id":"",\r\n                     "state":""\r\n                   }\r\n                 ],\r\n                 "roleName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--all-roles <allRoles>', $('Add the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Add the named-roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration' + '/' + 'allRoles';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = '/extensionConfiguration' + '/' + 'namedRoles';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-slot-parameters set all-roles
  var catparametersChangeConfigurationBySlotDeploymentAllRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentAllRoles0 = catparametersChangeConfigurationBySlotDeploymentAllRoles0.category('change-configuration-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersChangeConfigurationBySlotDeploymentAllRoles0 = parametersChangeConfigurationBySlotDeploymentAllRoles0.category('all-roles')
  .description($('Commands to set components of deployment in change-configuration-by-slot-parameters file.'));
  setparametersChangeConfigurationBySlotDeploymentAllRoles0.command('set')
  .description($('Set all-roles in change-configuration-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "allRoles" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--state <state>', $('Set the state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'state';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-slot-parameters delete all-roles
  var catparametersChangeConfigurationBySlotDeploymentAllRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentAllRoles1 = catparametersChangeConfigurationBySlotDeploymentAllRoles1.category('change-configuration-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersChangeConfigurationBySlotDeploymentAllRoles1 = parametersChangeConfigurationBySlotDeploymentAllRoles1.category('all-roles')
  .description($('Commands to delete components of deployment in change-configuration-by-slot-parameters file.'));
  deleteparametersChangeConfigurationBySlotDeploymentAllRoles1.command('delete')
  .description($('Remove all-roles in change-configuration-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "allRoles" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id', $('Remove the id value.'))
  .option('--state', $('Remove the state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id || options.state;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.state) {
        subItemPath = options.path + '/state';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //change-configuration-by-slot-parameters add all-roles
  var catparametersChangeConfigurationBySlotDeploymentAllRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentAllRoles2 = catparametersChangeConfigurationBySlotDeploymentAllRoles2.category('change-configuration-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersChangeConfigurationBySlotDeploymentAllRoles2 = parametersChangeConfigurationBySlotDeploymentAllRoles2.category('all-roles')
  .description($('Commands to add components of deployment in change-configuration-by-slot-parameters file.'));
  addparametersChangeConfigurationBySlotDeploymentAllRoles2.command('add')
  .description($('Add all-roles in change-configuration-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "allRoles" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--state <state>', $('Add the state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'state';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-slot-parameters set named-roles
  var catparametersChangeConfigurationBySlotDeploymentNamedRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentNamedRoles0 = catparametersChangeConfigurationBySlotDeploymentNamedRoles0.category('change-configuration-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersChangeConfigurationBySlotDeploymentNamedRoles0 = parametersChangeConfigurationBySlotDeploymentNamedRoles0.category('named-roles')
  .description($('Commands to set components of deployment in change-configuration-by-slot-parameters file.'));
  setparametersChangeConfigurationBySlotDeploymentNamedRoles0.command('set')
  .description($('Set named-roles in change-configuration-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "namedRoles" : {\r\n             "extensions":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "roleName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'extensions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-slot-parameters delete named-roles
  var catparametersChangeConfigurationBySlotDeploymentNamedRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentNamedRoles1 = catparametersChangeConfigurationBySlotDeploymentNamedRoles1.category('change-configuration-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersChangeConfigurationBySlotDeploymentNamedRoles1 = parametersChangeConfigurationBySlotDeploymentNamedRoles1.category('named-roles')
  .description($('Commands to delete components of deployment in change-configuration-by-slot-parameters file.'));
  deleteparametersChangeConfigurationBySlotDeploymentNamedRoles1.command('delete')
  .description($('Remove named-roles in change-configuration-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "namedRoles" : {\r\n             "extensions":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "roleName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions', $('Remove the extensions value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.extensions || options.roleName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.extensions) {
        subItemPath = options.path + '/extensions';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        subItemPath = options.path + '/roleName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //change-configuration-by-slot-parameters add named-roles
  var catparametersChangeConfigurationBySlotDeploymentNamedRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentNamedRoles2 = catparametersChangeConfigurationBySlotDeploymentNamedRoles2.category('change-configuration-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersChangeConfigurationBySlotDeploymentNamedRoles2 = parametersChangeConfigurationBySlotDeploymentNamedRoles2.category('named-roles')
  .description($('Commands to add components of deployment in change-configuration-by-slot-parameters file.'));
  addparametersChangeConfigurationBySlotDeploymentNamedRoles2.command('add')
  .description($('Add named-roles in change-configuration-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "namedRoles" : {\r\n             "extensions":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "roleName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--extensions <extensions>', $('Add the extensions value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'extensions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-slot-parameters set extensions
  var catparametersChangeConfigurationBySlotDeploymentExtensions0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentExtensions0 = catparametersChangeConfigurationBySlotDeploymentExtensions0.category('change-configuration-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersChangeConfigurationBySlotDeploymentExtensions0 = parametersChangeConfigurationBySlotDeploymentExtensions0.category('extensions')
  .description($('Commands to set components of deployment in change-configuration-by-slot-parameters file.'));
  setparametersChangeConfigurationBySlotDeploymentExtensions0.command('set')
  .description($('Set extensions in change-configuration-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //change-configuration-by-slot-parameters delete extensions
  var catparametersChangeConfigurationBySlotDeploymentExtensions1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentExtensions1 = catparametersChangeConfigurationBySlotDeploymentExtensions1.category('change-configuration-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersChangeConfigurationBySlotDeploymentExtensions1 = parametersChangeConfigurationBySlotDeploymentExtensions1.category('extensions')
  .description($('Commands to delete components of deployment in change-configuration-by-slot-parameters file.'));
  deleteparametersChangeConfigurationBySlotDeploymentExtensions1.command('delete')
  .description($('Remove extensions in change-configuration-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //change-configuration-by-slot-parameters add extensions
  var catparametersChangeConfigurationBySlotDeploymentExtensions2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersChangeConfigurationBySlotDeploymentExtensions2 = catparametersChangeConfigurationBySlotDeploymentExtensions2.category('change-configuration-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersChangeConfigurationBySlotDeploymentExtensions2 = parametersChangeConfigurationBySlotDeploymentExtensions2.category('extensions')
  .description($('Commands to add components of deployment in change-configuration-by-slot-parameters file.'));
  addparametersChangeConfigurationBySlotDeploymentExtensions2.command('add')
  .description($('Add extensions in change-configuration-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  Deployment Create
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "configuration":"",
  "extendedProperties":{
  },
  "extensionConfiguration":{
    "allRoles":[
      {
        "id":"",
        "state":""
      }
    ],
    "namedRoles":[
      {
        "extensions":[
          {
            "id":"",
            "state":""
          }
        ],
        "roleName":""
      }
    ]
  },
  "label":"",
  "name":"",
  "packageUri":"",
  "startDeployment":null,
  "treatWarningsAsError":null
}
*/
  var deploymentCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentCreate.command('create [service-name] [deployment-slot] [parameters]')
  .description($('The Create Deployment operation uploads a new service package and creates a new deployment in the staging or production environments. This operation is an asynchronous operation. To determine whether the management service has finished processing the request, call Get Operation Status. For more information on asynchronous operations, see Tracking Asynchronous Service Management Requests at http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx for more information)'))
  .usage('[options] <service-name> <deployment-slot> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentSlot, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentSlot) {
      deploymentSlot = cli.interaction.promptIfNotGiven($('deployment-slot : '), deploymentSlot, _);
    }

    cli.output.verbose('deploymentSlot = ' + deploymentSlot);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.create(serviceName, deploymentSlot, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var deploymentCreatecreateParameters2 = deploymentCreate.category('create-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  deploymentCreatecreateParameters2.command('generate')
  .description($('Generate deploymentCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"configuration\":\"\",\"extendedProperties\":{},\"extensionConfiguration\":{\"allRoles\":[{\"id\":\"\",\"state\":\"\"}],\"namedRoles\":[{\"extensions\":[{\"id\":\"\",\"state\":\"\"}],\"roleName\":\"\"}]},\"label\":\"\",\"name\":\"\",\"packageUri\":\"\",\"startDeployment\":null,\"treatWarningsAsError\":null}', _);
    var filePath = 'deploymentCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"configuration\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"extensionConfiguration\":{\r\n\"allRoles\":[\r\n{\r\n\"id\":\"\",\r\n\"state\":\"\"\r\n}\r\n],\r\n\"namedRoles\":[\r\n{\r\n\"extensions\":[\r\n{\r\n\"id\":\"\",\r\n\"state\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\"\r\n}\r\n]\r\n},\r\n\"label\":\"\",\r\n\"name\":\"\",\r\n\"packageUri\":\"\",\r\n\"startDeployment\":null,\r\n\"treatWarningsAsError\":null\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  deploymentCreatecreateParameters2.command('patch')
  .description($('Command to patch deploymentCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set deployment-create-parameters
  var catparametersCreateDeploymentDeploymentCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentDeploymentCreateParameters0 = catparametersCreateDeploymentDeploymentCreateParameters0.category('create-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersCreateDeploymentDeploymentCreateParameters0 = parametersCreateDeploymentDeploymentCreateParameters0.category('deployment-create-parameters')
  .description($('Commands to set components of deployment in create-parameters file.'));
  setparametersCreateDeploymentDeploymentCreateParameters0.command('set')
  .description($('Set deployment-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "configuration":"",\r\n  "extendedProperties":{\r\n  },\r\n  "extensionConfiguration":{\r\n    "allRoles":[\r\n      {\r\n        "id":"",\r\n        "state":""\r\n      }\r\n    ],\r\n    "namedRoles":[\r\n      {\r\n        "extensions":[\r\n          {\r\n            "id":"",\r\n            "state":""\r\n          }\r\n        ],\r\n        "roleName":""\r\n      }\r\n    ]\r\n  },\r\n  "label":"",\r\n  "name":"",\r\n  "packageUri":"",\r\n  "startDeployment":null,\r\n  "treatWarningsAsError":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--configuration <configuration>', $('Set the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Set the extension-configuration value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--package-uri <packageUri>', $('Set the package-uri value.'))
  .option('--start-deployment <startDeployment>', $('Set the start-deployment value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Set the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'configuration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'extensionConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'packageUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = options.path + '/' + 'startDeployment';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.startDeployment) {
      if (options.parse && options.startDeployment) {
        options.startDeployment = JSON.parse(options.startDeployment);
      }
        options.startDeployment = JSON.parse(options.startDeployment);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.startDeployment}]);
    }
    paramPath = options.path + '/' + 'treatWarningsAsError';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete deployment-create-parameters
  var catparametersCreateDeploymentDeploymentCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentDeploymentCreateParameters1 = catparametersCreateDeploymentDeploymentCreateParameters1.category('create-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersCreateDeploymentDeploymentCreateParameters1 = parametersCreateDeploymentDeploymentCreateParameters1.category('deployment-create-parameters')
  .description($('Commands to delete components of deployment in create-parameters file.'));
  deleteparametersCreateDeploymentDeploymentCreateParameters1.command('delete')
  .description($('Remove deployment-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "configuration":"",\r\n  "extendedProperties":{\r\n  },\r\n  "extensionConfiguration":{\r\n    "allRoles":[\r\n      {\r\n        "id":"",\r\n        "state":""\r\n      }\r\n    ],\r\n    "namedRoles":[\r\n      {\r\n        "extensions":[\r\n          {\r\n            "id":"",\r\n            "state":""\r\n          }\r\n        ],\r\n        "roleName":""\r\n      }\r\n    ]\r\n  },\r\n  "label":"",\r\n  "name":"",\r\n  "packageUri":"",\r\n  "startDeployment":null,\r\n  "treatWarningsAsError":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration', $('Remove the configuration value.'))
  .option('--extended-properties', $('Remove the extended-properties value.'))
  .option('--extension-configuration', $('Remove the extension-configuration value.'))
  .option('--label', $('Remove the label value.'))
  .option('--name', $('Remove the name value.'))
  .option('--package-uri', $('Remove the package-uri value.'))
  .option('--start-deployment', $('Remove the start-deployment value.'))
  .option('--treat-warnings-as-error', $('Remove the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.configuration || options.extendedProperties || options.extensionConfiguration || options.label || options.name || options.packageUri || options.startDeployment || options.treatWarningsAsError;
    if (anySubItem) {
      var subItemPath = null;
      if (options.configuration) {
        subItemPath = options.path + '/configuration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extendedProperties) {
        subItemPath = options.path + '/extendedProperties';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionConfiguration) {
        subItemPath = options.path + '/extensionConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.packageUri) {
        subItemPath = options.path + '/packageUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.startDeployment) {
        subItemPath = options.path + '/startDeployment';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.treatWarningsAsError) {
        subItemPath = options.path + '/treatWarningsAsError';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add deployment-create-parameters
  var catparametersCreateDeploymentDeploymentCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentDeploymentCreateParameters2 = catparametersCreateDeploymentDeploymentCreateParameters2.category('create-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersCreateDeploymentDeploymentCreateParameters2 = parametersCreateDeploymentDeploymentCreateParameters2.category('deployment-create-parameters')
  .description($('Commands to add components of deployment in create-parameters file.'));
  addparametersCreateDeploymentDeploymentCreateParameters2.command('add')
  .description($('Add deployment-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "configuration":"",\r\n  "extendedProperties":{\r\n  },\r\n  "extensionConfiguration":{\r\n    "allRoles":[\r\n      {\r\n        "id":"",\r\n        "state":""\r\n      }\r\n    ],\r\n    "namedRoles":[\r\n      {\r\n        "extensions":[\r\n          {\r\n            "id":"",\r\n            "state":""\r\n          }\r\n        ],\r\n        "roleName":""\r\n      }\r\n    ]\r\n  },\r\n  "label":"",\r\n  "name":"",\r\n  "packageUri":"",\r\n  "startDeployment":null,\r\n  "treatWarningsAsError":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--configuration <configuration>', $('Add the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Add the extension-configuration value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--package-uri <packageUri>', $('Add the package-uri value.'))
  .option('--start-deployment <startDeployment>', $('Add the start-deployment value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Add the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'configuration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'extensionConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'packageUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = '' + '/' + 'startDeployment';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.startDeployment) {
      if (options.parse && options.startDeployment) {
        options.startDeployment = JSON.parse(options.startDeployment);
      }
        options.startDeployment = JSON.parse(options.startDeployment);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.startDeployment}]);
    }
    paramPath = '' + '/' + 'treatWarningsAsError';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete extension-configuration
  var catparametersCreateDeploymentExtensionConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentExtensionConfiguration1 = catparametersCreateDeploymentExtensionConfiguration1.category('create-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersCreateDeploymentExtensionConfiguration1 = parametersCreateDeploymentExtensionConfiguration1.category('extension-configuration')
  .description($('Commands to delete components of deployment in create-parameters file.'));
  deleteparametersCreateDeploymentExtensionConfiguration1.command('delete')
  .description($('Remove extension-configuration in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionConfiguration" : {\r\n             "allRoles":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "namedRoles":[\r\n               {\r\n                 "extensions":[\r\n                   {\r\n                     "id":"",\r\n                     "state":""\r\n                   }\r\n                 ],\r\n                 "roleName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--all-roles', $('Remove the all-roles value.'))
  .option('--named-roles', $('Remove the named-roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration';
    var anySubItem = false || options.allRoles || options.namedRoles;
    if (anySubItem) {
      var subItemPath = null;
      if (options.allRoles) {
        subItemPath = options.path + '/allRoles';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.namedRoles) {
        subItemPath = options.path + '/namedRoles';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add extension-configuration
  var catparametersCreateDeploymentExtensionConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentExtensionConfiguration2 = catparametersCreateDeploymentExtensionConfiguration2.category('create-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersCreateDeploymentExtensionConfiguration2 = parametersCreateDeploymentExtensionConfiguration2.category('extension-configuration')
  .description($('Commands to add components of deployment in create-parameters file.'));
  addparametersCreateDeploymentExtensionConfiguration2.command('add')
  .description($('Add extension-configuration in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionConfiguration" : {\r\n             "allRoles":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "namedRoles":[\r\n               {\r\n                 "extensions":[\r\n                   {\r\n                     "id":"",\r\n                     "state":""\r\n                   }\r\n                 ],\r\n                 "roleName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--all-roles <allRoles>', $('Add the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Add the named-roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration' + '/' + 'allRoles';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = '/extensionConfiguration' + '/' + 'namedRoles';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set all-roles
  var catparametersCreateDeploymentAllRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentAllRoles0 = catparametersCreateDeploymentAllRoles0.category('create-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersCreateDeploymentAllRoles0 = parametersCreateDeploymentAllRoles0.category('all-roles')
  .description($('Commands to set components of deployment in create-parameters file.'));
  setparametersCreateDeploymentAllRoles0.command('set')
  .description($('Set all-roles in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "allRoles" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--state <state>', $('Set the state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'state';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete all-roles
  var catparametersCreateDeploymentAllRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentAllRoles1 = catparametersCreateDeploymentAllRoles1.category('create-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersCreateDeploymentAllRoles1 = parametersCreateDeploymentAllRoles1.category('all-roles')
  .description($('Commands to delete components of deployment in create-parameters file.'));
  deleteparametersCreateDeploymentAllRoles1.command('delete')
  .description($('Remove all-roles in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "allRoles" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id', $('Remove the id value.'))
  .option('--state', $('Remove the state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id || options.state;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.state) {
        subItemPath = options.path + '/state';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add all-roles
  var catparametersCreateDeploymentAllRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentAllRoles2 = catparametersCreateDeploymentAllRoles2.category('create-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersCreateDeploymentAllRoles2 = parametersCreateDeploymentAllRoles2.category('all-roles')
  .description($('Commands to add components of deployment in create-parameters file.'));
  addparametersCreateDeploymentAllRoles2.command('add')
  .description($('Add all-roles in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "allRoles" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--state <state>', $('Add the state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'state';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set named-roles
  var catparametersCreateDeploymentNamedRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentNamedRoles0 = catparametersCreateDeploymentNamedRoles0.category('create-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersCreateDeploymentNamedRoles0 = parametersCreateDeploymentNamedRoles0.category('named-roles')
  .description($('Commands to set components of deployment in create-parameters file.'));
  setparametersCreateDeploymentNamedRoles0.command('set')
  .description($('Set named-roles in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "namedRoles" : {\r\n             "extensions":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "roleName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'extensions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete named-roles
  var catparametersCreateDeploymentNamedRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentNamedRoles1 = catparametersCreateDeploymentNamedRoles1.category('create-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersCreateDeploymentNamedRoles1 = parametersCreateDeploymentNamedRoles1.category('named-roles')
  .description($('Commands to delete components of deployment in create-parameters file.'));
  deleteparametersCreateDeploymentNamedRoles1.command('delete')
  .description($('Remove named-roles in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "namedRoles" : {\r\n             "extensions":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "roleName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions', $('Remove the extensions value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.extensions || options.roleName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.extensions) {
        subItemPath = options.path + '/extensions';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        subItemPath = options.path + '/roleName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add named-roles
  var catparametersCreateDeploymentNamedRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentNamedRoles2 = catparametersCreateDeploymentNamedRoles2.category('create-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersCreateDeploymentNamedRoles2 = parametersCreateDeploymentNamedRoles2.category('named-roles')
  .description($('Commands to add components of deployment in create-parameters file.'));
  addparametersCreateDeploymentNamedRoles2.command('add')
  .description($('Add named-roles in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "namedRoles" : {\r\n             "extensions":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "roleName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--extensions <extensions>', $('Add the extensions value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'extensions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set extensions
  var catparametersCreateDeploymentExtensions0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentExtensions0 = catparametersCreateDeploymentExtensions0.category('create-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersCreateDeploymentExtensions0 = parametersCreateDeploymentExtensions0.category('extensions')
  .description($('Commands to set components of deployment in create-parameters file.'));
  setparametersCreateDeploymentExtensions0.command('set')
  .description($('Set extensions in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete extensions
  var catparametersCreateDeploymentExtensions1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentExtensions1 = catparametersCreateDeploymentExtensions1.category('create-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersCreateDeploymentExtensions1 = parametersCreateDeploymentExtensions1.category('extensions')
  .description($('Commands to delete components of deployment in create-parameters file.'));
  deleteparametersCreateDeploymentExtensions1.command('delete')
  .description($('Remove extensions in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add extensions
  var catparametersCreateDeploymentExtensions2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersCreateDeploymentExtensions2 = catparametersCreateDeploymentExtensions2.category('create-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersCreateDeploymentExtensions2 = parametersCreateDeploymentExtensions2.category('extensions')
  .description($('Commands to add components of deployment in create-parameters file.'));
  addparametersCreateDeploymentExtensions2.command('add')
  .description($('Add extensions in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  Deployment DeleteByName
  --service-name
  --deployment-name
  --delete-from-storage
*/
  var deploymentDeleteByName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentDeleteByName.command('delete-by-name [service-name] [deployment-name]')
  .description($('The Delete Deployment By Name operation deletes the specified deployment. This operation is an asynchronous operation. To determine whether the Management service has finished processing the request, call Get Operation Status. For more information on asynchronous operations, see Tracking Asynchronous Service Management Requests at http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var deleteFromStorageFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(deleteFromStorageFileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.verbose('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.deleteByName(serviceName, deploymentName, deleteFromStorage, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Deployment DeleteBySlot
  --service-name
  --deployment-slot
=============================================
0
*/
  var deploymentDeleteBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentDeleteBySlot.command('delete-by-slot [service-name] [deployment-slot]')
  .description($('The Delete Deployment By Slot operation deletes the specified deployment. This operation is an asynchronous operation. To determine whether the Management service has finished processing the request, call Get Operation Status. For more information on asynchronous operations, see Tracking Asynchronous Service Management Requests.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx for more information)'))
  .usage('[options] <service-name> <deployment-slot>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentSlot, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentSlot) {
      deploymentSlot = cli.interaction.promptIfNotGiven($('deployment-slot : '), deploymentSlot, _);
    }

    cli.output.verbose('deploymentSlot = ' + deploymentSlot);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.deleteBySlot(serviceName, deploymentSlot, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Deployment DeleteRoleInstanceByDeploymentName
  --service-name
  --deployment-name
  --role-instance-name
=============================================
{
  "name":[
    ""
  ]
}
*/
  var deploymentDeleteRoleInstanceByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentDeleteRoleInstanceByDeploymentName.command('delete-role-instance-by-deployment-name [service-name] [deployment-name] [role-instance-name]')
  .description($('The Delete Role Instances operation deletes a role instance from a deployment in a cloud service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <role-instance-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, roleInstanceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!roleInstanceName) {
      roleInstanceName = cli.interaction.promptIfNotGiven($('role-instance-name : '), roleInstanceName, _);
    }

    cli.output.verbose('roleInstanceName = ' + roleInstanceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.deleteRoleInstanceByDeploymentName(serviceName, deploymentName, roleInstanceName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Deployment DeleteRoleInstanceByDeploymentSlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "name":[
    ""
  ]
}
*/
  var deploymentDeleteRoleInstanceByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentDeleteRoleInstanceByDeploymentSlot.command('delete-role-instance-by-deployment-slot [service-name] [deployment-slot] [parameters]')
  .description($('The Delete Role Instances operation deletes the role instances from a deployment in a cloud service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx for more information)'))
  .usage('[options] <service-name> <deployment-slot> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentSlot, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentSlot) {
      deploymentSlot = cli.interaction.promptIfNotGiven($('deployment-slot : '), deploymentSlot, _);
    }

    cli.output.verbose('deploymentSlot = ' + deploymentSlot);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      var parametersValArr = parameters ? parameters.split(',') : [];
      cli.output.verbose('parameters : ' + parametersValArr);
      parametersObj = [];
      for (var item in parametersValArr) {
        parametersObj.push(parametersValArr[item]);
      }
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.deleteRoleInstanceByDeploymentSlot(serviceName, deploymentSlot, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var deploymentDeleteRoleInstanceByDeploymentSlotdeleteRoleInstanceByDeploymentSlotParameters2 = deploymentDeleteRoleInstanceByDeploymentSlot.category('delete-role-instance-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  deploymentDeleteRoleInstanceByDeploymentSlotdeleteRoleInstanceByDeploymentSlotParameters2.command('generate')
  .description($('Generate deploymentDeleteRoleInstanceByDeploymentSlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"name\":[\"\"]}', _);
    var filePath = 'deploymentDeleteRoleInstanceByDeploymentSlot_deleteRoleInstanceByDeploymentSlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"name\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  deploymentDeleteRoleInstanceByDeploymentSlotdeleteRoleInstanceByDeploymentSlotParameters2.command('patch')
  .description($('Command to patch deploymentDeleteRoleInstanceByDeploymentSlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //delete-role-instance-by-deployment-slot-parameters set deployment-delete-role-instance-parameters
  var catparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters0 = catparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters0.category('delete-role-instance-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters0 = parametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters0.category('deployment-delete-role-instance-parameters')
  .description($('Commands to set components of deployment in delete-role-instance-by-deployment-slot-parameters file.'));
  setparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters0.command('set')
  .description($('Set deployment-delete-role-instance-parameters in delete-role-instance-by-deployment-slot-parameters string or files, e.g. \r\n{\r\n  "name":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //delete-role-instance-by-deployment-slot-parameters delete deployment-delete-role-instance-parameters
  var catparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters1 = catparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters1.category('delete-role-instance-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters1 = parametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters1.category('deployment-delete-role-instance-parameters')
  .description($('Commands to delete components of deployment in delete-role-instance-by-deployment-slot-parameters file.'));
  deleteparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters1.command('delete')
  .description($('Remove deployment-delete-role-instance-parameters in delete-role-instance-by-deployment-slot-parameters string or files, e.g. \r\n{\r\n  "name":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //delete-role-instance-by-deployment-slot-parameters add deployment-delete-role-instance-parameters
  var catparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters2 = catparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters2.category('delete-role-instance-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters2 = parametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters2.category('deployment-delete-role-instance-parameters')
  .description($('Commands to add components of deployment in delete-role-instance-by-deployment-slot-parameters file.'));
  addparametersDeleteRoleInstanceByDeploymentSlotDeploymentDeploymentDeleteRoleInstanceParameters2.command('add')
  .description($('Add deployment-delete-role-instance-parameters in delete-role-instance-by-deployment-slot-parameters string or files, e.g. \r\n{\r\n  "name":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //delete-role-instance-by-deployment-slot-parameters set name
  var catparametersDeleteRoleInstanceByDeploymentSlotDeploymentName0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeleteRoleInstanceByDeploymentSlotDeploymentName0 = catparametersDeleteRoleInstanceByDeploymentSlotDeploymentName0.category('delete-role-instance-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersDeleteRoleInstanceByDeploymentSlotDeploymentName0 = parametersDeleteRoleInstanceByDeploymentSlotDeploymentName0.category('name')
  .description($('Commands to set components of deployment in delete-role-instance-by-deployment-slot-parameters file.'));
  setparametersDeleteRoleInstanceByDeploymentSlotDeploymentName0.command('set')
  .description($('Set name in delete-role-instance-by-deployment-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "name" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/name' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //delete-role-instance-by-deployment-slot-parameters delete name
  var catparametersDeleteRoleInstanceByDeploymentSlotDeploymentName1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeleteRoleInstanceByDeploymentSlotDeploymentName1 = catparametersDeleteRoleInstanceByDeploymentSlotDeploymentName1.category('delete-role-instance-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersDeleteRoleInstanceByDeploymentSlotDeploymentName1 = parametersDeleteRoleInstanceByDeploymentSlotDeploymentName1.category('name')
  .description($('Commands to delete components of deployment in delete-role-instance-by-deployment-slot-parameters file.'));
  deleteparametersDeleteRoleInstanceByDeploymentSlotDeploymentName1.command('delete')
  .description($('Remove name in delete-role-instance-by-deployment-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "name" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/name' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //delete-role-instance-by-deployment-slot-parameters add name
  var catparametersDeleteRoleInstanceByDeploymentSlotDeploymentName2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeleteRoleInstanceByDeploymentSlotDeploymentName2 = catparametersDeleteRoleInstanceByDeploymentSlotDeploymentName2.category('delete-role-instance-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersDeleteRoleInstanceByDeploymentSlotDeploymentName2 = parametersDeleteRoleInstanceByDeploymentSlotDeploymentName2.category('name')
  .description($('Commands to add components of deployment in delete-role-instance-by-deployment-slot-parameters file.'));
  addparametersDeleteRoleInstanceByDeploymentSlotDeploymentName2.command('add')
  .description($('Add name in delete-role-instance-by-deployment-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "name" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/name' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  Deployment GetByName
  --service-name
  --deployment-name
*/
  var deploymentGetByName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentGetByName.command('get-by-name [service-name] [deployment-name]')
  .description($('The Get Deployment By Name operation returns configuration information, status, and system properties for a deployment.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.getByName(serviceName, deploymentName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Deployment GetBySlot
  --service-name
  --deployment-slot
=============================================
0
*/
  var deploymentGetBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentGetBySlot.command('get-by-slot [service-name] [deployment-slot]')
  .description($('The Get Deployment By Slot operation returns configuration information, status, and system properties for a deployment.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx for more information)'))
  .usage('[options] <service-name> <deployment-slot>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentSlot, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentSlot) {
      deploymentSlot = cli.interaction.promptIfNotGiven($('deployment-slot : '), deploymentSlot, _);
    }

    cli.output.verbose('deploymentSlot = ' + deploymentSlot);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.getBySlot(serviceName, deploymentSlot, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Deployment GetPackageByName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "containerUri":"",
  "overwriteExisting":null
}
*/
  var deploymentGetPackageByName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentGetPackageByName.command('get-package-by-name [service-name] [deployment-name] [parameters]')
  .description($('The Get Package By Name operation retrieves a cloud service package for a deployment and stores the package files in Azure Blob storage. The following package files are placed in storage: the cloud service configuration file (.cscfg), providing configuration settings for the cloud service and individual roles, including the number of role instances; and the service package (.cspkg), containing the application code and the service definition file. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.getPackageByName(serviceName, deploymentName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var deploymentGetPackageByNamegetPackageByNameParameters2 = deploymentGetPackageByName.category('get-package-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  deploymentGetPackageByNamegetPackageByNameParameters2.command('generate')
  .description($('Generate deploymentGetPackageByName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"containerUri\":\"\",\"overwriteExisting\":null}', _);
    var filePath = 'deploymentGetPackageByName_getPackageByName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"containerUri\":\"\",\r\n\"overwriteExisting\":null\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  deploymentGetPackageByNamegetPackageByNameParameters2.command('patch')
  .description($('Command to patch deploymentGetPackageByName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //get-package-by-name-parameters set deployment-get-package-parameters
  var catparametersGetPackageByNameDeploymentDeploymentGetPackageParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersGetPackageByNameDeploymentDeploymentGetPackageParameters0 = catparametersGetPackageByNameDeploymentDeploymentGetPackageParameters0.category('get-package-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersGetPackageByNameDeploymentDeploymentGetPackageParameters0 = parametersGetPackageByNameDeploymentDeploymentGetPackageParameters0.category('deployment-get-package-parameters')
  .description($('Commands to set components of deployment in get-package-by-name-parameters file.'));
  setparametersGetPackageByNameDeploymentDeploymentGetPackageParameters0.command('set')
  .description($('Set deployment-get-package-parameters in get-package-by-name-parameters string or files, e.g. \r\n{\r\n  "containerUri":"",\r\n  "overwriteExisting":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--container-uri <containerUri>', $('Set the container-uri value.'))
  .option('--overwrite-existing <overwriteExisting>', $('Set the overwrite-existing value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'containerUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.containerUri) {
      if (options.parse && options.containerUri) {
        options.containerUri = JSON.parse(options.containerUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.containerUri}]);
    }
    paramPath = options.path + '/' + 'overwriteExisting';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.overwriteExisting) {
      if (options.parse && options.overwriteExisting) {
        options.overwriteExisting = JSON.parse(options.overwriteExisting);
      }
        options.overwriteExisting = JSON.parse(options.overwriteExisting);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.overwriteExisting}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //get-package-by-name-parameters delete deployment-get-package-parameters
  var catparametersGetPackageByNameDeploymentDeploymentGetPackageParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersGetPackageByNameDeploymentDeploymentGetPackageParameters1 = catparametersGetPackageByNameDeploymentDeploymentGetPackageParameters1.category('get-package-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersGetPackageByNameDeploymentDeploymentGetPackageParameters1 = parametersGetPackageByNameDeploymentDeploymentGetPackageParameters1.category('deployment-get-package-parameters')
  .description($('Commands to delete components of deployment in get-package-by-name-parameters file.'));
  deleteparametersGetPackageByNameDeploymentDeploymentGetPackageParameters1.command('delete')
  .description($('Remove deployment-get-package-parameters in get-package-by-name-parameters string or files, e.g. \r\n{\r\n  "containerUri":"",\r\n  "overwriteExisting":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--container-uri', $('Remove the container-uri value.'))
  .option('--overwrite-existing', $('Remove the overwrite-existing value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.containerUri || options.overwriteExisting;
    if (anySubItem) {
      var subItemPath = null;
      if (options.containerUri) {
        subItemPath = options.path + '/containerUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.overwriteExisting) {
        subItemPath = options.path + '/overwriteExisting';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //get-package-by-name-parameters add deployment-get-package-parameters
  var catparametersGetPackageByNameDeploymentDeploymentGetPackageParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersGetPackageByNameDeploymentDeploymentGetPackageParameters2 = catparametersGetPackageByNameDeploymentDeploymentGetPackageParameters2.category('get-package-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersGetPackageByNameDeploymentDeploymentGetPackageParameters2 = parametersGetPackageByNameDeploymentDeploymentGetPackageParameters2.category('deployment-get-package-parameters')
  .description($('Commands to add components of deployment in get-package-by-name-parameters file.'));
  addparametersGetPackageByNameDeploymentDeploymentGetPackageParameters2.command('add')
  .description($('Add deployment-get-package-parameters in get-package-by-name-parameters string or files, e.g. \r\n{\r\n  "containerUri":"",\r\n  "overwriteExisting":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--container-uri <containerUri>', $('Add the container-uri value.'))
  .option('--overwrite-existing <overwriteExisting>', $('Add the overwrite-existing value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'containerUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.containerUri) {
      if (options.parse && options.containerUri) {
        options.containerUri = JSON.parse(options.containerUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.containerUri}]);
    }
    paramPath = '' + '/' + 'overwriteExisting';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.overwriteExisting) {
      if (options.parse && options.overwriteExisting) {
        options.overwriteExisting = JSON.parse(options.overwriteExisting);
      }
        options.overwriteExisting = JSON.parse(options.overwriteExisting);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.overwriteExisting}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  Deployment GetPackageBySlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "containerUri":"",
  "overwriteExisting":null
}
*/
  var deploymentGetPackageBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentGetPackageBySlot.command('get-package-by-slot [service-name] [deployment-slot] [parameters]')
  .description($('The Get Package By Slot operation retrieves a cloud service package for a deployment and stores the package files in Azure Blob storage. The following package files are placed in storage: the cloud service configuration file (.cscfg), providing configuration settings for the cloud service and individual roles, including the number of role instances; and the service package (.cspkg), containing the application code and the service definition file. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx for more information)'))
  .usage('[options] <service-name> <deployment-slot> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentSlot, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentSlot) {
      deploymentSlot = cli.interaction.promptIfNotGiven($('deployment-slot : '), deploymentSlot, _);
    }

    cli.output.verbose('deploymentSlot = ' + deploymentSlot);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.getPackageBySlot(serviceName, deploymentSlot, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var deploymentGetPackageBySlotgetPackageBySlotParameters2 = deploymentGetPackageBySlot.category('get-package-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  deploymentGetPackageBySlotgetPackageBySlotParameters2.command('generate')
  .description($('Generate deploymentGetPackageBySlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"containerUri\":\"\",\"overwriteExisting\":null}', _);
    var filePath = 'deploymentGetPackageBySlot_getPackageBySlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"containerUri\":\"\",\r\n\"overwriteExisting\":null\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  deploymentGetPackageBySlotgetPackageBySlotParameters2.command('patch')
  .description($('Command to patch deploymentGetPackageBySlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //get-package-by-slot-parameters set deployment-get-package-parameters
  var catparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersGetPackageBySlotDeploymentDeploymentGetPackageParameters0 = catparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters0.category('get-package-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters0 = parametersGetPackageBySlotDeploymentDeploymentGetPackageParameters0.category('deployment-get-package-parameters')
  .description($('Commands to set components of deployment in get-package-by-slot-parameters file.'));
  setparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters0.command('set')
  .description($('Set deployment-get-package-parameters in get-package-by-slot-parameters string or files, e.g. \r\n{\r\n  "containerUri":"",\r\n  "overwriteExisting":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--container-uri <containerUri>', $('Set the container-uri value.'))
  .option('--overwrite-existing <overwriteExisting>', $('Set the overwrite-existing value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'containerUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.containerUri) {
      if (options.parse && options.containerUri) {
        options.containerUri = JSON.parse(options.containerUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.containerUri}]);
    }
    paramPath = options.path + '/' + 'overwriteExisting';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.overwriteExisting) {
      if (options.parse && options.overwriteExisting) {
        options.overwriteExisting = JSON.parse(options.overwriteExisting);
      }
        options.overwriteExisting = JSON.parse(options.overwriteExisting);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.overwriteExisting}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //get-package-by-slot-parameters delete deployment-get-package-parameters
  var catparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersGetPackageBySlotDeploymentDeploymentGetPackageParameters1 = catparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters1.category('get-package-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters1 = parametersGetPackageBySlotDeploymentDeploymentGetPackageParameters1.category('deployment-get-package-parameters')
  .description($('Commands to delete components of deployment in get-package-by-slot-parameters file.'));
  deleteparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters1.command('delete')
  .description($('Remove deployment-get-package-parameters in get-package-by-slot-parameters string or files, e.g. \r\n{\r\n  "containerUri":"",\r\n  "overwriteExisting":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--container-uri', $('Remove the container-uri value.'))
  .option('--overwrite-existing', $('Remove the overwrite-existing value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.containerUri || options.overwriteExisting;
    if (anySubItem) {
      var subItemPath = null;
      if (options.containerUri) {
        subItemPath = options.path + '/containerUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.overwriteExisting) {
        subItemPath = options.path + '/overwriteExisting';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //get-package-by-slot-parameters add deployment-get-package-parameters
  var catparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersGetPackageBySlotDeploymentDeploymentGetPackageParameters2 = catparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters2.category('get-package-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters2 = parametersGetPackageBySlotDeploymentDeploymentGetPackageParameters2.category('deployment-get-package-parameters')
  .description($('Commands to add components of deployment in get-package-by-slot-parameters file.'));
  addparametersGetPackageBySlotDeploymentDeploymentGetPackageParameters2.command('add')
  .description($('Add deployment-get-package-parameters in get-package-by-slot-parameters string or files, e.g. \r\n{\r\n  "containerUri":"",\r\n  "overwriteExisting":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--container-uri <containerUri>', $('Add the container-uri value.'))
  .option('--overwrite-existing <overwriteExisting>', $('Add the overwrite-existing value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'containerUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.containerUri) {
      if (options.parse && options.containerUri) {
        options.containerUri = JSON.parse(options.containerUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.containerUri}]);
    }
    paramPath = '' + '/' + 'overwriteExisting';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.overwriteExisting) {
      if (options.parse && options.overwriteExisting) {
        options.overwriteExisting = JSON.parse(options.overwriteExisting);
      }
        options.overwriteExisting = JSON.parse(options.overwriteExisting);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.overwriteExisting}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  Deployment ListEvents
  --service-name
  --deployment-name
  --start-time
  --end-time
*/
  var deploymentListEvents = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentListEvents.command('list-events [service-name] [deployment-name] [start-time] [end-time]')
  .description($('Identifies the list of reboot events due to planned maintenance that impacted a deployment in the optionally provided timeframe.'))
  .usage('[options] <service-name> <deployment-name> <start-time> <end-time>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--start-time <start-time>', $('start-time'))
  .option('--end-time <end-time>', $('end-time'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, startTime, endTime, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!startTime) {
      startTime = cli.interaction.promptIfNotGiven($('start-time : '), startTime, _);
    }

    cli.output.verbose('startTime = ' + startTime);
    if (!endTime) {
      endTime = cli.interaction.promptIfNotGiven($('end-time : '), endTime, _);
    }

    cli.output.verbose('endTime = ' + endTime);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.listEvents(serviceName, deploymentName, startTime, endTime, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Deployment ListEventsBySlot
  --service-name
  --deployment-slot
  --start-time
  --end-time
=============================================
0
*/
  var deploymentListEventsBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentListEventsBySlot.command('list-events-by-slot [service-name] [deployment-slot] [start-time] [end-time]')
  .description($('Identifies the list of reboot events due to planned maintenance that impacted a deployment in the optionally provided timeframe.'))
  .usage('[options] <service-name> <deployment-slot> <start-time> <end-time>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--start-time <start-time>', $('start-time'))
  .option('--end-time <end-time>', $('end-time'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentSlot, startTime, endTime, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentSlot) {
      deploymentSlot = cli.interaction.promptIfNotGiven($('deployment-slot : '), deploymentSlot, _);
    }

    cli.output.verbose('deploymentSlot = ' + deploymentSlot);
    if (!startTime) {
      startTime = cli.interaction.promptIfNotGiven($('start-time : '), startTime, _);
    }

    cli.output.verbose('startTime = ' + startTime);
    if (!endTime) {
      endTime = cli.interaction.promptIfNotGiven($('end-time : '), endTime, _);
    }

    cli.output.verbose('endTime = ' + endTime);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.listEventsBySlot(serviceName, deploymentSlot, startTime, endTime, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Deployment RebootRoleInstanceByDeploymentName
  --service-name
  --deployment-name
  --role-instance-name
*/
  var deploymentRebootRoleInstanceByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentRebootRoleInstanceByDeploymentName.command('reboot-role-instance-by-deployment-name [service-name] [deployment-name] [role-instance-name]')
  .description($('The Reboot Role Instance By Deployment Name operation requests a reboot of a role instance that is running in a deployment. This operation is an asynchronous operation. To determine whether the Management service has finished processing the request, call Get Operation Status. For more information on asynchronous operations, see Tracking Asynchronous Service Management Requests at http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <role-instance-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, roleInstanceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!roleInstanceName) {
      roleInstanceName = cli.interaction.promptIfNotGiven($('role-instance-name : '), roleInstanceName, _);
    }

    cli.output.verbose('roleInstanceName = ' + roleInstanceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.rebootRoleInstanceByDeploymentName(serviceName, deploymentName, roleInstanceName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Deployment RebootRoleInstanceByDeploymentSlot
  --service-name
  --deployment-slot
  --role-instance-name
=============================================
0
*/
  var deploymentRebootRoleInstanceByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentRebootRoleInstanceByDeploymentSlot.command('reboot-role-instance-by-deployment-slot [service-name] [deployment-slot] [role-instance-name]')
  .description($('The Reboot Role Instance By Deployment Slot operation requests a reboot of a role instance that is running in a deployment. This operation is an asynchronous operation. To determine whether the Management service has finished processing the request, call Get Operation Status. For more information on asynchronous operations, see Tracking Asynchronous Service Management Requests at http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx for more information)'))
  .usage('[options] <service-name> <deployment-slot> <role-instance-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentSlot, roleInstanceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentSlot) {
      deploymentSlot = cli.interaction.promptIfNotGiven($('deployment-slot : '), deploymentSlot, _);
    }

    cli.output.verbose('deploymentSlot = ' + deploymentSlot);
    if (!roleInstanceName) {
      roleInstanceName = cli.interaction.promptIfNotGiven($('role-instance-name : '), roleInstanceName, _);
    }

    cli.output.verbose('roleInstanceName = ' + roleInstanceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.rebootRoleInstanceByDeploymentSlot(serviceName, deploymentSlot, roleInstanceName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Deployment RebuildRoleInstanceByDeploymentName
  --service-name
  --deployment-name
  --role-instance-name
  --resources
*/
  var deploymentRebuildRoleInstanceByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentRebuildRoleInstanceByDeploymentName.command('rebuild-role-instance-by-deployment-name [service-name] [deployment-name] [role-instance-name] [resources]')
  .description($('The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles and initializes the storage resources that are used by them. If you do not want to initialize storage resources, you can use Reimage Role Instance athttp://msdn.microsoft.com/en-us/library/azure/gg441292.aspx.For more information on asynchronous operations, see Tracking Asynchronous Service Management Requests at http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. (see http://msdn.microsoft.com/en-us/library/azure/dn627518.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <role-instance-name> <resources>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--resources <resources>', $('resources'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, roleInstanceName, resources, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!roleInstanceName) {
      roleInstanceName = cli.interaction.promptIfNotGiven($('role-instance-name : '), roleInstanceName, _);
    }

    cli.output.verbose('roleInstanceName = ' + roleInstanceName);
    if (!resources) {
      resources = cli.interaction.promptIfNotGiven($('resources : '), resources, _);
    }

    cli.output.verbose('resources = ' + resources);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.rebuildRoleInstanceByDeploymentName(serviceName, deploymentName, roleInstanceName, resources, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Deployment RebuildRoleInstanceByDeploymentSlot
  --service-name
  --deployment-slot
  --role-instance-name
  --resources
*/
  var deploymentRebuildRoleInstanceByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentRebuildRoleInstanceByDeploymentSlot.command('rebuild-role-instance-by-deployment-slot [service-name] [deployment-slot] [role-instance-name] [resources]')
  .description($('The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles and initializes the storage resources that are used by them. If you do not want to initialize storage resources, you can use Reimage Role Instance athttp://msdn.microsoft.com/en-us/library/azure/gg441292.aspx.For more information on asynchronous operations, see Tracking Asynchronous Service Management Requests at http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. (see http://msdn.microsoft.com/en-us/library/azure/dn627518.aspx for more information)'))
  .usage('[options] <service-name> <deployment-slot> <role-instance-name> <resources>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--resources <resources>', $('resources'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentSlot, roleInstanceName, resources, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentSlot) {
      deploymentSlot = cli.interaction.promptIfNotGiven($('deployment-slot : '), deploymentSlot, _);
    }

    cli.output.verbose('deploymentSlot = ' + deploymentSlot);
    if (!roleInstanceName) {
      roleInstanceName = cli.interaction.promptIfNotGiven($('role-instance-name : '), roleInstanceName, _);
    }

    cli.output.verbose('roleInstanceName = ' + roleInstanceName);
    if (!resources) {
      resources = cli.interaction.promptIfNotGiven($('resources : '), resources, _);
    }

    cli.output.verbose('resources = ' + resources);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.rebuildRoleInstanceByDeploymentSlot(serviceName, deploymentSlot, roleInstanceName, resources, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Deployment ReimageRoleInstanceByDeploymentName
  --service-name
  --deployment-name
  --role-instance-name
*/
  var deploymentReimageRoleInstanceByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentReimageRoleInstanceByDeploymentName.command('reimage-role-instance-by-deployment-name [service-name] [deployment-name] [role-instance-name]')
  .description($('The Reimage Role Instance By Deployment Name operation requests a reimage of a role instance that is running in a deployment.This operation is an asynchronous operation. To determine whether the Management service has finished processing the request, call Get Operation Status. For more information on asynchronous operations, see Tracking Asynchronous Service Management Requests at http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <role-instance-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, roleInstanceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!roleInstanceName) {
      roleInstanceName = cli.interaction.promptIfNotGiven($('role-instance-name : '), roleInstanceName, _);
    }

    cli.output.verbose('roleInstanceName = ' + roleInstanceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.reimageRoleInstanceByDeploymentName(serviceName, deploymentName, roleInstanceName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Deployment ReimageRoleInstanceByDeploymentSlot
  --service-name
  --deployment-slot
  --role-instance-name
=============================================
0
*/
  var deploymentReimageRoleInstanceByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentReimageRoleInstanceByDeploymentSlot.command('reimage-role-instance-by-deployment-slot [service-name] [deployment-slot] [role-instance-name]')
  .description($('The Reimage Role Instance By Deployment Slot operation requests a reimage of a role instance that is running in a deployment. This operation is an asynchronous operation. To determine whether the Management service has finished processing the request, call Get Operation Status. For more information on asynchronous operations, see Tracking Asynchronous Service Management Requests at http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx for more information)'))
  .usage('[options] <service-name> <deployment-slot> <role-instance-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentSlot, roleInstanceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentSlot) {
      deploymentSlot = cli.interaction.promptIfNotGiven($('deployment-slot : '), deploymentSlot, _);
    }

    cli.output.verbose('deploymentSlot = ' + deploymentSlot);
    if (!roleInstanceName) {
      roleInstanceName = cli.interaction.promptIfNotGiven($('role-instance-name : '), roleInstanceName, _);
    }

    cli.output.verbose('roleInstanceName = ' + roleInstanceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.reimageRoleInstanceByDeploymentSlot(serviceName, deploymentSlot, roleInstanceName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Deployment RollbackUpdateOrUpgradeByDeploymentName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "force":false,
  "mode":0
}
*/
  var deploymentRollbackUpdateOrUpgradeByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentRollbackUpdateOrUpgradeByDeploymentName.command('rollback-update-or-upgrade-by-deployment-name [service-name] [deployment-name] [parameters]')
  .description($('The Rollback Update Or Upgrade By Deployment Name operation cancels an in-progress configuration update and returns the deployment to its state before the update was started. This operation can only be called when an update is in progress on the deployment. The deployment status can be detected by calling the Get Deployment operation or Get Hosted Service Properties operation and inspecting the RollbackAllowed element. If the value returned is true a rollback can be performed.  (see http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.rollbackUpdateOrUpgradeByDeploymentName(serviceName, deploymentName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var deploymentRollbackUpdateOrUpgradeByDeploymentNamerollbackUpdateOrUpgradeByDeploymentNameParameters2 = deploymentRollbackUpdateOrUpgradeByDeploymentName.category('rollback-update-or-upgrade-by-deployment-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  deploymentRollbackUpdateOrUpgradeByDeploymentNamerollbackUpdateOrUpgradeByDeploymentNameParameters2.command('generate')
  .description($('Generate deploymentRollbackUpdateOrUpgradeByDeploymentName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"force\":false,\"mode\":0}', _);
    var filePath = 'deploymentRollbackUpdateOrUpgradeByDeploymentName_rollbackUpdateOrUpgradeByDeploymentName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"force\":false,\r\n\"mode\":0\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  deploymentRollbackUpdateOrUpgradeByDeploymentNamerollbackUpdateOrUpgradeByDeploymentNameParameters2.command('patch')
  .description($('Command to patch deploymentRollbackUpdateOrUpgradeByDeploymentName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //rollback-update-or-upgrade-by-deployment-name-parameters set deployment-rollback-update-or-upgrade-parameters
  var catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.category('rollback-update-or-upgrade-by-deployment-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.category('deployment-rollback-update-or-upgrade-parameters')
  .description($('Commands to set components of deployment in rollback-update-or-upgrade-by-deployment-name-parameters file.'));
  setparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.command('set')
  .description($('Set deployment-rollback-update-or-upgrade-parameters in rollback-update-or-upgrade-by-deployment-name-parameters string or files, e.g. \r\n{\r\n  "force":false,\r\n  "mode":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--force <force>', $('Set the force value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'force';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //rollback-update-or-upgrade-by-deployment-name-parameters delete deployment-rollback-update-or-upgrade-parameters
  var catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.category('rollback-update-or-upgrade-by-deployment-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.category('deployment-rollback-update-or-upgrade-parameters')
  .description($('Commands to delete components of deployment in rollback-update-or-upgrade-by-deployment-name-parameters file.'));
  deleteparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.command('delete')
  .description($('Remove deployment-rollback-update-or-upgrade-parameters in rollback-update-or-upgrade-by-deployment-name-parameters string or files, e.g. \r\n{\r\n  "force":false,\r\n  "mode":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--force', $('Remove the force value.'))
  .option('--mode', $('Remove the mode value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.force || options.mode;
    if (anySubItem) {
      var subItemPath = null;
      if (options.force) {
        subItemPath = options.path + '/force';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mode) {
        subItemPath = options.path + '/mode';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //rollback-update-or-upgrade-by-deployment-name-parameters add deployment-rollback-update-or-upgrade-parameters
  var catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.category('rollback-update-or-upgrade-by-deployment-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.category('deployment-rollback-update-or-upgrade-parameters')
  .description($('Commands to add components of deployment in rollback-update-or-upgrade-by-deployment-name-parameters file.'));
  addparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.command('add')
  .description($('Add deployment-rollback-update-or-upgrade-parameters in rollback-update-or-upgrade-by-deployment-name-parameters string or files, e.g. \r\n{\r\n  "force":false,\r\n  "mode":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--force <force>', $('Add the force value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'force';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //rollback-update-or-upgrade-by-deployment-name-parameters delete mode
  var catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode1 = catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode1.category('rollback-update-or-upgrade-by-deployment-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode1 = parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode1.category('mode')
  .description($('Commands to delete components of deployment in rollback-update-or-upgrade-by-deployment-name-parameters file.'));
  deleteparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode1.command('delete')
  .description($('Remove mode in rollback-update-or-upgrade-by-deployment-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "mode" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/mode';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //rollback-update-or-upgrade-by-deployment-name-parameters add mode
  var catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode2 = catparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode2.category('rollback-update-or-upgrade-by-deployment-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode2 = parametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode2.category('mode')
  .description($('Commands to add components of deployment in rollback-update-or-upgrade-by-deployment-name-parameters file.'));
  addparametersRollbackUpdateOrUpgradeByDeploymentNameDeploymentMode2.command('add')
  .description($('Add mode in rollback-update-or-upgrade-by-deployment-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "mode" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/mode' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  Deployment RollbackUpdateOrUpgradeByDeploymentSlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "force":false,
  "mode":0
}
*/
  var deploymentRollbackUpdateOrUpgradeByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentRollbackUpdateOrUpgradeByDeploymentSlot.command('rollback-update-or-upgrade-by-deployment-slot [service-name] [deployment-slot] [parameters]')
  .description($('The Rollback Update Or Upgrade By Deployment Slot operation cancels an in-progress configuration update and returns the deployment to its state before the update was started. This operation can only be called when an update is in progress on the deployment. The deployment status can be detected by calling the Get Deployment operation or Get Hosted Service Properties operation and inspecting the RollbackAllowed element. If the value returned is true a rollback can be performed.  (see http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx for more information)'))
  .usage('[options] <service-name> <deployment-slot> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentSlot, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentSlot) {
      deploymentSlot = cli.interaction.promptIfNotGiven($('deployment-slot : '), deploymentSlot, _);
    }

    cli.output.verbose('deploymentSlot = ' + deploymentSlot);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.rollbackUpdateOrUpgradeByDeploymentSlot(serviceName, deploymentSlot, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var deploymentRollbackUpdateOrUpgradeByDeploymentSlotrollbackUpdateOrUpgradeByDeploymentSlotParameters2 = deploymentRollbackUpdateOrUpgradeByDeploymentSlot.category('rollback-update-or-upgrade-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  deploymentRollbackUpdateOrUpgradeByDeploymentSlotrollbackUpdateOrUpgradeByDeploymentSlotParameters2.command('generate')
  .description($('Generate deploymentRollbackUpdateOrUpgradeByDeploymentSlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"force\":false,\"mode\":0}', _);
    var filePath = 'deploymentRollbackUpdateOrUpgradeByDeploymentSlot_rollbackUpdateOrUpgradeByDeploymentSlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"force\":false,\r\n\"mode\":0\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  deploymentRollbackUpdateOrUpgradeByDeploymentSlotrollbackUpdateOrUpgradeByDeploymentSlotParameters2.command('patch')
  .description($('Command to patch deploymentRollbackUpdateOrUpgradeByDeploymentSlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //rollback-update-or-upgrade-by-deployment-slot-parameters set deployment-rollback-update-or-upgrade-parameters
  var catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.category('rollback-update-or-upgrade-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.category('deployment-rollback-update-or-upgrade-parameters')
  .description($('Commands to set components of deployment in rollback-update-or-upgrade-by-deployment-slot-parameters file.'));
  setparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.command('set')
  .description($('Set deployment-rollback-update-or-upgrade-parameters in rollback-update-or-upgrade-by-deployment-slot-parameters string or files, e.g. \r\n{\r\n  "force":false,\r\n  "mode":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--force <force>', $('Set the force value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'force';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //rollback-update-or-upgrade-by-deployment-slot-parameters delete deployment-rollback-update-or-upgrade-parameters
  var catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.category('rollback-update-or-upgrade-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.category('deployment-rollback-update-or-upgrade-parameters')
  .description($('Commands to delete components of deployment in rollback-update-or-upgrade-by-deployment-slot-parameters file.'));
  deleteparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.command('delete')
  .description($('Remove deployment-rollback-update-or-upgrade-parameters in rollback-update-or-upgrade-by-deployment-slot-parameters string or files, e.g. \r\n{\r\n  "force":false,\r\n  "mode":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--force', $('Remove the force value.'))
  .option('--mode', $('Remove the mode value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.force || options.mode;
    if (anySubItem) {
      var subItemPath = null;
      if (options.force) {
        subItemPath = options.path + '/force';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mode) {
        subItemPath = options.path + '/mode';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //rollback-update-or-upgrade-by-deployment-slot-parameters add deployment-rollback-update-or-upgrade-parameters
  var catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.category('rollback-update-or-upgrade-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.category('deployment-rollback-update-or-upgrade-parameters')
  .description($('Commands to add components of deployment in rollback-update-or-upgrade-by-deployment-slot-parameters file.'));
  addparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.command('add')
  .description($('Add deployment-rollback-update-or-upgrade-parameters in rollback-update-or-upgrade-by-deployment-slot-parameters string or files, e.g. \r\n{\r\n  "force":false,\r\n  "mode":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--force <force>', $('Add the force value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'force';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //rollback-update-or-upgrade-by-deployment-slot-parameters delete mode
  var catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode1 = catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode1.category('rollback-update-or-upgrade-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode1 = parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode1.category('mode')
  .description($('Commands to delete components of deployment in rollback-update-or-upgrade-by-deployment-slot-parameters file.'));
  deleteparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode1.command('delete')
  .description($('Remove mode in rollback-update-or-upgrade-by-deployment-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "mode" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/mode';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //rollback-update-or-upgrade-by-deployment-slot-parameters add mode
  var catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode2 = catparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode2.category('rollback-update-or-upgrade-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode2 = parametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode2.category('mode')
  .description($('Commands to add components of deployment in rollback-update-or-upgrade-by-deployment-slot-parameters file.'));
  addparametersRollbackUpdateOrUpgradeByDeploymentSlotDeploymentMode2.command('add')
  .description($('Add mode in rollback-update-or-upgrade-by-deployment-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "mode" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/mode' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  Deployment Swap
  --service-name
  --parameters
=============================================
{
  "productionDeployment":"",
  "sourceDeployment":""
}
*/
  var deploymentSwap = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentSwap.command('swap [service-name] [production-deployment] [source-deployment]')
  .description($('The Swap Deployment operation initiates a virtual IP address swap between the staging and production deployment environments for a service. If the service is currently running in the staging environment, it will be swapped to the production environment. If it is running in the production environment, it will be swapped to staging. For more information on this type of upgrade, see Performing Virtual IP Swap Upgrades at http://msdn.microsoft.com/en-us/library/windowsazure/ee517253.aspx. (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx for more information)'))
  .usage('[options] <service-name> <production-deployment> <source-deployment>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--production-deployment <production-deployment>', $('production-deployment'))
  .option('--source-deployment <source-deployment>', $('source-deployment'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, productionDeployment, sourceDeployment, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.verbose('productionDeployment = ' + productionDeployment);
      parametersObj.productionDeployment = productionDeployment;
      cli.output.verbose('sourceDeployment = ' + sourceDeployment);
      parametersObj.sourceDeployment = sourceDeployment;
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.swap(serviceName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Deployment UpdateStatusByDeploymentName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "status":0
}
*/
  var deploymentUpdateStatusByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentUpdateStatusByDeploymentName.command('update-status-by-deployment-name [service-name] [deployment-name] [parameters]')
  .description($('The Update Deployment Status By Deployment Name operation initiates a change in the running status of a deployment. The status of a deployment can be running or suspended. This operation is an asynchronous operation. To determine whether the Management service has finished processing the request, call Get Operation Status. For more information on asynchronous operations, see Tracking Asynchronous Service Management Requests at http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.updateStatusByDeploymentName(serviceName, deploymentName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var deploymentUpdateStatusByDeploymentNameupdateStatusByDeploymentNameParameters2 = deploymentUpdateStatusByDeploymentName.category('update-status-by-deployment-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  deploymentUpdateStatusByDeploymentNameupdateStatusByDeploymentNameParameters2.command('generate')
  .description($('Generate deploymentUpdateStatusByDeploymentName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"status\":0}', _);
    var filePath = 'deploymentUpdateStatusByDeploymentName_updateStatusByDeploymentName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"status\":0\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  deploymentUpdateStatusByDeploymentNameupdateStatusByDeploymentNameParameters2.command('patch')
  .description($('Command to patch deploymentUpdateStatusByDeploymentName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-status-by-deployment-name-parameters delete deployment-update-status-parameters
  var catparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters1 = catparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters1.category('update-status-by-deployment-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters1 = parametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters1.category('deployment-update-status-parameters')
  .description($('Commands to delete components of deployment in update-status-by-deployment-name-parameters file.'));
  deleteparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters1.command('delete')
  .description($('Remove deployment-update-status-parameters in update-status-by-deployment-name-parameters string or files, e.g. \r\n{\r\n  "status":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--status', $('Remove the status value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.status;
    if (anySubItem) {
      var subItemPath = null;
      if (options.status) {
        subItemPath = options.path + '/status';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-status-by-deployment-name-parameters add deployment-update-status-parameters
  var catparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters2 = catparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters2.category('update-status-by-deployment-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters2 = parametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters2.category('deployment-update-status-parameters')
  .description($('Commands to add components of deployment in update-status-by-deployment-name-parameters file.'));
  addparametersUpdateStatusByDeploymentNameDeploymentDeploymentUpdateStatusParameters2.command('add')
  .description($('Add deployment-update-status-parameters in update-status-by-deployment-name-parameters string or files, e.g. \r\n{\r\n  "status":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--status <status>', $('Add the status value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'status';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.status) {
      if (options.parse && options.status) {
        options.status = JSON.parse(options.status);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.status}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-status-by-deployment-name-parameters delete status
  var catparametersUpdateStatusByDeploymentNameDeploymentStatus1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentNameDeploymentStatus1 = catparametersUpdateStatusByDeploymentNameDeploymentStatus1.category('update-status-by-deployment-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersUpdateStatusByDeploymentNameDeploymentStatus1 = parametersUpdateStatusByDeploymentNameDeploymentStatus1.category('status')
  .description($('Commands to delete components of deployment in update-status-by-deployment-name-parameters file.'));
  deleteparametersUpdateStatusByDeploymentNameDeploymentStatus1.command('delete')
  .description($('Remove status in update-status-by-deployment-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "status" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/status';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-status-by-deployment-name-parameters add status
  var catparametersUpdateStatusByDeploymentNameDeploymentStatus2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentNameDeploymentStatus2 = catparametersUpdateStatusByDeploymentNameDeploymentStatus2.category('update-status-by-deployment-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersUpdateStatusByDeploymentNameDeploymentStatus2 = parametersUpdateStatusByDeploymentNameDeploymentStatus2.category('status')
  .description($('Commands to add components of deployment in update-status-by-deployment-name-parameters file.'));
  addparametersUpdateStatusByDeploymentNameDeploymentStatus2.command('add')
  .description($('Add status in update-status-by-deployment-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "status" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/status' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  Deployment UpdateStatusByDeploymentSlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "status":0
}
*/
  var deploymentUpdateStatusByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentUpdateStatusByDeploymentSlot.command('update-status-by-deployment-slot [service-name] [deployment-slot] [parameters]')
  .description($('The Update Deployment Status By Deployment Slot operation initiates a change in the running status of a deployment. The status of a deployment can be running or suspended. This operation is an asynchronous operation. To determine whether the Management service has finished processing the request, call Get Operation Status. For more information on asynchronous operations, see Tracking Asynchronous Service Management Requests at http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx for more information)'))
  .usage('[options] <service-name> <deployment-slot> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentSlot, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentSlot) {
      deploymentSlot = cli.interaction.promptIfNotGiven($('deployment-slot : '), deploymentSlot, _);
    }

    cli.output.verbose('deploymentSlot = ' + deploymentSlot);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.updateStatusByDeploymentSlot(serviceName, deploymentSlot, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var deploymentUpdateStatusByDeploymentSlotupdateStatusByDeploymentSlotParameters2 = deploymentUpdateStatusByDeploymentSlot.category('update-status-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  deploymentUpdateStatusByDeploymentSlotupdateStatusByDeploymentSlotParameters2.command('generate')
  .description($('Generate deploymentUpdateStatusByDeploymentSlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"status\":0}', _);
    var filePath = 'deploymentUpdateStatusByDeploymentSlot_updateStatusByDeploymentSlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"status\":0\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  deploymentUpdateStatusByDeploymentSlotupdateStatusByDeploymentSlotParameters2.command('patch')
  .description($('Command to patch deploymentUpdateStatusByDeploymentSlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-status-by-deployment-slot-parameters delete deployment-update-status-parameters
  var catparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters1 = catparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters1.category('update-status-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters1 = parametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters1.category('deployment-update-status-parameters')
  .description($('Commands to delete components of deployment in update-status-by-deployment-slot-parameters file.'));
  deleteparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters1.command('delete')
  .description($('Remove deployment-update-status-parameters in update-status-by-deployment-slot-parameters string or files, e.g. \r\n{\r\n  "status":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--status', $('Remove the status value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.status;
    if (anySubItem) {
      var subItemPath = null;
      if (options.status) {
        subItemPath = options.path + '/status';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-status-by-deployment-slot-parameters add deployment-update-status-parameters
  var catparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters2 = catparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters2.category('update-status-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters2 = parametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters2.category('deployment-update-status-parameters')
  .description($('Commands to add components of deployment in update-status-by-deployment-slot-parameters file.'));
  addparametersUpdateStatusByDeploymentSlotDeploymentDeploymentUpdateStatusParameters2.command('add')
  .description($('Add deployment-update-status-parameters in update-status-by-deployment-slot-parameters string or files, e.g. \r\n{\r\n  "status":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--status <status>', $('Add the status value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'status';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.status) {
      if (options.parse && options.status) {
        options.status = JSON.parse(options.status);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.status}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-status-by-deployment-slot-parameters delete status
  var catparametersUpdateStatusByDeploymentSlotDeploymentStatus1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentSlotDeploymentStatus1 = catparametersUpdateStatusByDeploymentSlotDeploymentStatus1.category('update-status-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersUpdateStatusByDeploymentSlotDeploymentStatus1 = parametersUpdateStatusByDeploymentSlotDeploymentStatus1.category('status')
  .description($('Commands to delete components of deployment in update-status-by-deployment-slot-parameters file.'));
  deleteparametersUpdateStatusByDeploymentSlotDeploymentStatus1.command('delete')
  .description($('Remove status in update-status-by-deployment-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "status" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/status';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-status-by-deployment-slot-parameters add status
  var catparametersUpdateStatusByDeploymentSlotDeploymentStatus2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpdateStatusByDeploymentSlotDeploymentStatus2 = catparametersUpdateStatusByDeploymentSlotDeploymentStatus2.category('update-status-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersUpdateStatusByDeploymentSlotDeploymentStatus2 = parametersUpdateStatusByDeploymentSlotDeploymentStatus2.category('status')
  .description($('Commands to add components of deployment in update-status-by-deployment-slot-parameters file.'));
  addparametersUpdateStatusByDeploymentSlotDeploymentStatus2.command('add')
  .description($('Add status in update-status-by-deployment-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "status" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/status' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  Deployment UpgradeByName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "configuration":"",
  "extendedProperties":{
  },
  "extensionConfiguration":{
    "allRoles":[
      {
        "id":"",
        "state":""
      }
    ],
    "namedRoles":[
      {
        "extensions":[
          {
            "id":"",
            "state":""
          }
        ],
        "roleName":""
      }
    ]
  },
  "force":false,
  "label":"",
  "mode":0,
  "packageUri":"",
  "roleToUpgrade":""
}
*/
  var deploymentUpgradeByName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentUpgradeByName.command('upgrade-by-name [service-name] [deployment-name] [parameters]')
  .description($('The Upgrade Deployment By Name operation initiates an update of role instances in a deployment using the package and configuration that you specify. For more information about updating role instances, see Update an Azure Service at http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx. This operation is an asynchronous operation. To determine whether the request has been processed, call Get Operation Status. For more information on asynchronous operations, see Tracking Asynchronous Service Management Requests at http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. To perform an automatic update of a deployment, call Upgrade Deployment or Change Deployment Configuration with the Mode element set to automatic. The update proceeds from that point without a need for further input. You can call Get Operation Status to determine when the update is complete. To perform a manual update, first call Upgrade Deployment with the Mode element set to manual. Next, call Walk Upgrade Domain to update each domain within the deployment. You should make sure that the operation is complete by calling Get Operation Status before updating the next domain. Important: An update that adds or removes role instances will result in a configuration update to all roles that are deployed in the cloud service. Existing role instances need to be notified of new role instances so that all role instances can communicate together in the cloud service. By default, a cloud service is deployed with five update domains, which are updated one at a time during an in-place update. For information on modifying the number of update domains in the service definition file, see the Azure Service Definition Schema (.csdef File). To determine the update domain in which a particular instance is running in Windows Azure, use the UpdateDomain property of the RoleInstance class. See the Azure Managed Library Reference at http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx for more information.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.upgradeByName(serviceName, deploymentName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var deploymentUpgradeByNameupgradeByNameParameters2 = deploymentUpgradeByName.category('upgrade-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  deploymentUpgradeByNameupgradeByNameParameters2.command('generate')
  .description($('Generate deploymentUpgradeByName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"configuration\":\"\",\"extendedProperties\":{},\"extensionConfiguration\":{\"allRoles\":[{\"id\":\"\",\"state\":\"\"}],\"namedRoles\":[{\"extensions\":[{\"id\":\"\",\"state\":\"\"}],\"roleName\":\"\"}]},\"force\":false,\"label\":\"\",\"mode\":0,\"packageUri\":\"\",\"roleToUpgrade\":\"\"}', _);
    var filePath = 'deploymentUpgradeByName_upgradeByName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"configuration\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"extensionConfiguration\":{\r\n\"allRoles\":[\r\n{\r\n\"id\":\"\",\r\n\"state\":\"\"\r\n}\r\n],\r\n\"namedRoles\":[\r\n{\r\n\"extensions\":[\r\n{\r\n\"id\":\"\",\r\n\"state\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\"\r\n}\r\n]\r\n},\r\n\"force\":false,\r\n\"label\":\"\",\r\n\"mode\":0,\r\n\"packageUri\":\"\",\r\n\"roleToUpgrade\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  deploymentUpgradeByNameupgradeByNameParameters2.command('patch')
  .description($('Command to patch deploymentUpgradeByName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-name-parameters set deployment-upgrade-parameters
  var catparametersUpgradeByNameDeploymentDeploymentUpgradeParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentDeploymentUpgradeParameters0 = catparametersUpgradeByNameDeploymentDeploymentUpgradeParameters0.category('upgrade-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersUpgradeByNameDeploymentDeploymentUpgradeParameters0 = parametersUpgradeByNameDeploymentDeploymentUpgradeParameters0.category('deployment-upgrade-parameters')
  .description($('Commands to set components of deployment in upgrade-by-name-parameters file.'));
  setparametersUpgradeByNameDeploymentDeploymentUpgradeParameters0.command('set')
  .description($('Set deployment-upgrade-parameters in upgrade-by-name-parameters string or files, e.g. \r\n{\r\n  "configuration":"",\r\n  "extendedProperties":{\r\n  },\r\n  "extensionConfiguration":{\r\n    "allRoles":[\r\n      {\r\n        "id":"",\r\n        "state":""\r\n      }\r\n    ],\r\n    "namedRoles":[\r\n      {\r\n        "extensions":[\r\n          {\r\n            "id":"",\r\n            "state":""\r\n          }\r\n        ],\r\n        "roleName":""\r\n      }\r\n    ]\r\n  },\r\n  "force":false,\r\n  "label":"",\r\n  "mode":0,\r\n  "packageUri":"",\r\n  "roleToUpgrade":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--configuration <configuration>', $('Set the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Set the extension-configuration value.'))
  .option('--force <force>', $('Set the force value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .option('--package-uri <packageUri>', $('Set the package-uri value.'))
  .option('--role-to-upgrade <roleToUpgrade>', $('Set the role-to-upgrade value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'configuration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'extensionConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = options.path + '/' + 'force';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = options.path + '/' + 'packageUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = options.path + '/' + 'roleToUpgrade';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleToUpgrade) {
      if (options.parse && options.roleToUpgrade) {
        options.roleToUpgrade = JSON.parse(options.roleToUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleToUpgrade}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-name-parameters delete deployment-upgrade-parameters
  var catparametersUpgradeByNameDeploymentDeploymentUpgradeParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentDeploymentUpgradeParameters1 = catparametersUpgradeByNameDeploymentDeploymentUpgradeParameters1.category('upgrade-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersUpgradeByNameDeploymentDeploymentUpgradeParameters1 = parametersUpgradeByNameDeploymentDeploymentUpgradeParameters1.category('deployment-upgrade-parameters')
  .description($('Commands to delete components of deployment in upgrade-by-name-parameters file.'));
  deleteparametersUpgradeByNameDeploymentDeploymentUpgradeParameters1.command('delete')
  .description($('Remove deployment-upgrade-parameters in upgrade-by-name-parameters string or files, e.g. \r\n{\r\n  "configuration":"",\r\n  "extendedProperties":{\r\n  },\r\n  "extensionConfiguration":{\r\n    "allRoles":[\r\n      {\r\n        "id":"",\r\n        "state":""\r\n      }\r\n    ],\r\n    "namedRoles":[\r\n      {\r\n        "extensions":[\r\n          {\r\n            "id":"",\r\n            "state":""\r\n          }\r\n        ],\r\n        "roleName":""\r\n      }\r\n    ]\r\n  },\r\n  "force":false,\r\n  "label":"",\r\n  "mode":0,\r\n  "packageUri":"",\r\n  "roleToUpgrade":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration', $('Remove the configuration value.'))
  .option('--extended-properties', $('Remove the extended-properties value.'))
  .option('--extension-configuration', $('Remove the extension-configuration value.'))
  .option('--force', $('Remove the force value.'))
  .option('--label', $('Remove the label value.'))
  .option('--mode', $('Remove the mode value.'))
  .option('--package-uri', $('Remove the package-uri value.'))
  .option('--role-to-upgrade', $('Remove the role-to-upgrade value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.configuration || options.extendedProperties || options.extensionConfiguration || options.force || options.label || options.mode || options.packageUri || options.roleToUpgrade;
    if (anySubItem) {
      var subItemPath = null;
      if (options.configuration) {
        subItemPath = options.path + '/configuration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extendedProperties) {
        subItemPath = options.path + '/extendedProperties';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionConfiguration) {
        subItemPath = options.path + '/extensionConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.force) {
        subItemPath = options.path + '/force';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mode) {
        subItemPath = options.path + '/mode';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.packageUri) {
        subItemPath = options.path + '/packageUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleToUpgrade) {
        subItemPath = options.path + '/roleToUpgrade';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //upgrade-by-name-parameters add deployment-upgrade-parameters
  var catparametersUpgradeByNameDeploymentDeploymentUpgradeParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentDeploymentUpgradeParameters2 = catparametersUpgradeByNameDeploymentDeploymentUpgradeParameters2.category('upgrade-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersUpgradeByNameDeploymentDeploymentUpgradeParameters2 = parametersUpgradeByNameDeploymentDeploymentUpgradeParameters2.category('deployment-upgrade-parameters')
  .description($('Commands to add components of deployment in upgrade-by-name-parameters file.'));
  addparametersUpgradeByNameDeploymentDeploymentUpgradeParameters2.command('add')
  .description($('Add deployment-upgrade-parameters in upgrade-by-name-parameters string or files, e.g. \r\n{\r\n  "configuration":"",\r\n  "extendedProperties":{\r\n  },\r\n  "extensionConfiguration":{\r\n    "allRoles":[\r\n      {\r\n        "id":"",\r\n        "state":""\r\n      }\r\n    ],\r\n    "namedRoles":[\r\n      {\r\n        "extensions":[\r\n          {\r\n            "id":"",\r\n            "state":""\r\n          }\r\n        ],\r\n        "roleName":""\r\n      }\r\n    ]\r\n  },\r\n  "force":false,\r\n  "label":"",\r\n  "mode":0,\r\n  "packageUri":"",\r\n  "roleToUpgrade":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--configuration <configuration>', $('Add the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Add the extension-configuration value.'))
  .option('--force <force>', $('Add the force value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .option('--package-uri <packageUri>', $('Add the package-uri value.'))
  .option('--role-to-upgrade <roleToUpgrade>', $('Add the role-to-upgrade value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'configuration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'extensionConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = '' + '/' + 'force';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = '' + '/' + 'packageUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = '' + '/' + 'roleToUpgrade';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleToUpgrade) {
      if (options.parse && options.roleToUpgrade) {
        options.roleToUpgrade = JSON.parse(options.roleToUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleToUpgrade}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-name-parameters delete extension-configuration
  var catparametersUpgradeByNameDeploymentExtensionConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentExtensionConfiguration1 = catparametersUpgradeByNameDeploymentExtensionConfiguration1.category('upgrade-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersUpgradeByNameDeploymentExtensionConfiguration1 = parametersUpgradeByNameDeploymentExtensionConfiguration1.category('extension-configuration')
  .description($('Commands to delete components of deployment in upgrade-by-name-parameters file.'));
  deleteparametersUpgradeByNameDeploymentExtensionConfiguration1.command('delete')
  .description($('Remove extension-configuration in upgrade-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionConfiguration" : {\r\n             "allRoles":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "namedRoles":[\r\n               {\r\n                 "extensions":[\r\n                   {\r\n                     "id":"",\r\n                     "state":""\r\n                   }\r\n                 ],\r\n                 "roleName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--all-roles', $('Remove the all-roles value.'))
  .option('--named-roles', $('Remove the named-roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration';
    var anySubItem = false || options.allRoles || options.namedRoles;
    if (anySubItem) {
      var subItemPath = null;
      if (options.allRoles) {
        subItemPath = options.path + '/allRoles';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.namedRoles) {
        subItemPath = options.path + '/namedRoles';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //upgrade-by-name-parameters add extension-configuration
  var catparametersUpgradeByNameDeploymentExtensionConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentExtensionConfiguration2 = catparametersUpgradeByNameDeploymentExtensionConfiguration2.category('upgrade-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersUpgradeByNameDeploymentExtensionConfiguration2 = parametersUpgradeByNameDeploymentExtensionConfiguration2.category('extension-configuration')
  .description($('Commands to add components of deployment in upgrade-by-name-parameters file.'));
  addparametersUpgradeByNameDeploymentExtensionConfiguration2.command('add')
  .description($('Add extension-configuration in upgrade-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionConfiguration" : {\r\n             "allRoles":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "namedRoles":[\r\n               {\r\n                 "extensions":[\r\n                   {\r\n                     "id":"",\r\n                     "state":""\r\n                   }\r\n                 ],\r\n                 "roleName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--all-roles <allRoles>', $('Add the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Add the named-roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration' + '/' + 'allRoles';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = '/extensionConfiguration' + '/' + 'namedRoles';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-name-parameters set all-roles
  var catparametersUpgradeByNameDeploymentAllRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentAllRoles0 = catparametersUpgradeByNameDeploymentAllRoles0.category('upgrade-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersUpgradeByNameDeploymentAllRoles0 = parametersUpgradeByNameDeploymentAllRoles0.category('all-roles')
  .description($('Commands to set components of deployment in upgrade-by-name-parameters file.'));
  setparametersUpgradeByNameDeploymentAllRoles0.command('set')
  .description($('Set all-roles in upgrade-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "allRoles" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--state <state>', $('Set the state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'state';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-name-parameters delete all-roles
  var catparametersUpgradeByNameDeploymentAllRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentAllRoles1 = catparametersUpgradeByNameDeploymentAllRoles1.category('upgrade-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersUpgradeByNameDeploymentAllRoles1 = parametersUpgradeByNameDeploymentAllRoles1.category('all-roles')
  .description($('Commands to delete components of deployment in upgrade-by-name-parameters file.'));
  deleteparametersUpgradeByNameDeploymentAllRoles1.command('delete')
  .description($('Remove all-roles in upgrade-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "allRoles" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id', $('Remove the id value.'))
  .option('--state', $('Remove the state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id || options.state;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.state) {
        subItemPath = options.path + '/state';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //upgrade-by-name-parameters add all-roles
  var catparametersUpgradeByNameDeploymentAllRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentAllRoles2 = catparametersUpgradeByNameDeploymentAllRoles2.category('upgrade-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersUpgradeByNameDeploymentAllRoles2 = parametersUpgradeByNameDeploymentAllRoles2.category('all-roles')
  .description($('Commands to add components of deployment in upgrade-by-name-parameters file.'));
  addparametersUpgradeByNameDeploymentAllRoles2.command('add')
  .description($('Add all-roles in upgrade-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "allRoles" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--state <state>', $('Add the state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'state';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-name-parameters set named-roles
  var catparametersUpgradeByNameDeploymentNamedRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentNamedRoles0 = catparametersUpgradeByNameDeploymentNamedRoles0.category('upgrade-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersUpgradeByNameDeploymentNamedRoles0 = parametersUpgradeByNameDeploymentNamedRoles0.category('named-roles')
  .description($('Commands to set components of deployment in upgrade-by-name-parameters file.'));
  setparametersUpgradeByNameDeploymentNamedRoles0.command('set')
  .description($('Set named-roles in upgrade-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "namedRoles" : {\r\n             "extensions":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "roleName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'extensions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-name-parameters delete named-roles
  var catparametersUpgradeByNameDeploymentNamedRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentNamedRoles1 = catparametersUpgradeByNameDeploymentNamedRoles1.category('upgrade-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersUpgradeByNameDeploymentNamedRoles1 = parametersUpgradeByNameDeploymentNamedRoles1.category('named-roles')
  .description($('Commands to delete components of deployment in upgrade-by-name-parameters file.'));
  deleteparametersUpgradeByNameDeploymentNamedRoles1.command('delete')
  .description($('Remove named-roles in upgrade-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "namedRoles" : {\r\n             "extensions":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "roleName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions', $('Remove the extensions value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.extensions || options.roleName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.extensions) {
        subItemPath = options.path + '/extensions';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        subItemPath = options.path + '/roleName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //upgrade-by-name-parameters add named-roles
  var catparametersUpgradeByNameDeploymentNamedRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentNamedRoles2 = catparametersUpgradeByNameDeploymentNamedRoles2.category('upgrade-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersUpgradeByNameDeploymentNamedRoles2 = parametersUpgradeByNameDeploymentNamedRoles2.category('named-roles')
  .description($('Commands to add components of deployment in upgrade-by-name-parameters file.'));
  addparametersUpgradeByNameDeploymentNamedRoles2.command('add')
  .description($('Add named-roles in upgrade-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "namedRoles" : {\r\n             "extensions":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "roleName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--extensions <extensions>', $('Add the extensions value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'extensions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-name-parameters set extensions
  var catparametersUpgradeByNameDeploymentExtensions0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentExtensions0 = catparametersUpgradeByNameDeploymentExtensions0.category('upgrade-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersUpgradeByNameDeploymentExtensions0 = parametersUpgradeByNameDeploymentExtensions0.category('extensions')
  .description($('Commands to set components of deployment in upgrade-by-name-parameters file.'));
  setparametersUpgradeByNameDeploymentExtensions0.command('set')
  .description($('Set extensions in upgrade-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-name-parameters delete extensions
  var catparametersUpgradeByNameDeploymentExtensions1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentExtensions1 = catparametersUpgradeByNameDeploymentExtensions1.category('upgrade-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersUpgradeByNameDeploymentExtensions1 = parametersUpgradeByNameDeploymentExtensions1.category('extensions')
  .description($('Commands to delete components of deployment in upgrade-by-name-parameters file.'));
  deleteparametersUpgradeByNameDeploymentExtensions1.command('delete')
  .description($('Remove extensions in upgrade-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //upgrade-by-name-parameters add extensions
  var catparametersUpgradeByNameDeploymentExtensions2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentExtensions2 = catparametersUpgradeByNameDeploymentExtensions2.category('upgrade-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersUpgradeByNameDeploymentExtensions2 = parametersUpgradeByNameDeploymentExtensions2.category('extensions')
  .description($('Commands to add components of deployment in upgrade-by-name-parameters file.'));
  addparametersUpgradeByNameDeploymentExtensions2.command('add')
  .description($('Add extensions in upgrade-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-name-parameters delete mode
  var catparametersUpgradeByNameDeploymentMode1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentMode1 = catparametersUpgradeByNameDeploymentMode1.category('upgrade-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersUpgradeByNameDeploymentMode1 = parametersUpgradeByNameDeploymentMode1.category('mode')
  .description($('Commands to delete components of deployment in upgrade-by-name-parameters file.'));
  deleteparametersUpgradeByNameDeploymentMode1.command('delete')
  .description($('Remove mode in upgrade-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "mode" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/mode';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //upgrade-by-name-parameters add mode
  var catparametersUpgradeByNameDeploymentMode2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeByNameDeploymentMode2 = catparametersUpgradeByNameDeploymentMode2.category('upgrade-by-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersUpgradeByNameDeploymentMode2 = parametersUpgradeByNameDeploymentMode2.category('mode')
  .description($('Commands to add components of deployment in upgrade-by-name-parameters file.'));
  addparametersUpgradeByNameDeploymentMode2.command('add')
  .description($('Add mode in upgrade-by-name-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "mode" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/mode' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  Deployment UpgradeBySlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "configuration":"",
  "extendedProperties":{
  },
  "extensionConfiguration":{
    "allRoles":[
      {
        "id":"",
        "state":""
      }
    ],
    "namedRoles":[
      {
        "extensions":[
          {
            "id":"",
            "state":""
          }
        ],
        "roleName":""
      }
    ]
  },
  "force":false,
  "label":"",
  "mode":0,
  "packageUri":"",
  "roleToUpgrade":""
}
*/
  var deploymentUpgradeBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentUpgradeBySlot.command('upgrade-by-slot [service-name] [deployment-slot] [parameters]')
  .description($('The Upgrade Deployment By Slot operation initiates an update of role instances in a deployment using the package and configuration that you specify. For more information about updating role instances, see Update an Azure Service at http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx. This operation is an asynchronous operation. To determine whether the request has been processed, call Get Operation Status. For more information on asynchronous operations, see Tracking Asynchronous Service Management Requests at http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. To perform an automatic update of a deployment, call Upgrade Deployment or Change Deployment Configuration with the Mode element set to automatic. The update proceeds from that point without a need for further input. You can call Get Operation Status to determine when the update is complete. To perform a manual update, first call Upgrade Deployment with the Mode element set to manual. Next, call Walk Upgrade Domain to update each domain within the deployment. You should make sure that the operation is complete by calling Get Operation Status before updating the next domain. Important: An update that adds or removes role instances will result in a configuration update to all roles that are deployed in the cloud service. Existing role instances need to be notified of new role instances so that all role instances can communicate together in the cloud service. By default, a cloud service is deployed with five update domains, which are updated one at a time during an in-place update. For information on modifying the number of update domains in the service definition file, see the Azure Service Definition Schema (.csdef File). To determine the update domain in which a particular instance is running in Windows Azure, use the UpdateDomain property of the RoleInstance class. See the Azure Managed Library Reference at http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx for more information.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx for more information)'))
  .usage('[options] <service-name> <deployment-slot> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentSlot, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentSlot) {
      deploymentSlot = cli.interaction.promptIfNotGiven($('deployment-slot : '), deploymentSlot, _);
    }

    cli.output.verbose('deploymentSlot = ' + deploymentSlot);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.upgradeBySlot(serviceName, deploymentSlot, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var deploymentUpgradeBySlotupgradeBySlotParameters2 = deploymentUpgradeBySlot.category('upgrade-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  deploymentUpgradeBySlotupgradeBySlotParameters2.command('generate')
  .description($('Generate deploymentUpgradeBySlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"configuration\":\"\",\"extendedProperties\":{},\"extensionConfiguration\":{\"allRoles\":[{\"id\":\"\",\"state\":\"\"}],\"namedRoles\":[{\"extensions\":[{\"id\":\"\",\"state\":\"\"}],\"roleName\":\"\"}]},\"force\":false,\"label\":\"\",\"mode\":0,\"packageUri\":\"\",\"roleToUpgrade\":\"\"}', _);
    var filePath = 'deploymentUpgradeBySlot_upgradeBySlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"configuration\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"extensionConfiguration\":{\r\n\"allRoles\":[\r\n{\r\n\"id\":\"\",\r\n\"state\":\"\"\r\n}\r\n],\r\n\"namedRoles\":[\r\n{\r\n\"extensions\":[\r\n{\r\n\"id\":\"\",\r\n\"state\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\"\r\n}\r\n]\r\n},\r\n\"force\":false,\r\n\"label\":\"\",\r\n\"mode\":0,\r\n\"packageUri\":\"\",\r\n\"roleToUpgrade\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  deploymentUpgradeBySlotupgradeBySlotParameters2.command('patch')
  .description($('Command to patch deploymentUpgradeBySlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-slot-parameters set deployment-upgrade-parameters
  var catparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentDeploymentUpgradeParameters0 = catparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters0.category('upgrade-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters0 = parametersUpgradeBySlotDeploymentDeploymentUpgradeParameters0.category('deployment-upgrade-parameters')
  .description($('Commands to set components of deployment in upgrade-by-slot-parameters file.'));
  setparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters0.command('set')
  .description($('Set deployment-upgrade-parameters in upgrade-by-slot-parameters string or files, e.g. \r\n{\r\n  "configuration":"",\r\n  "extendedProperties":{\r\n  },\r\n  "extensionConfiguration":{\r\n    "allRoles":[\r\n      {\r\n        "id":"",\r\n        "state":""\r\n      }\r\n    ],\r\n    "namedRoles":[\r\n      {\r\n        "extensions":[\r\n          {\r\n            "id":"",\r\n            "state":""\r\n          }\r\n        ],\r\n        "roleName":""\r\n      }\r\n    ]\r\n  },\r\n  "force":false,\r\n  "label":"",\r\n  "mode":0,\r\n  "packageUri":"",\r\n  "roleToUpgrade":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--configuration <configuration>', $('Set the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Set the extension-configuration value.'))
  .option('--force <force>', $('Set the force value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .option('--package-uri <packageUri>', $('Set the package-uri value.'))
  .option('--role-to-upgrade <roleToUpgrade>', $('Set the role-to-upgrade value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'configuration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'extensionConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = options.path + '/' + 'force';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = options.path + '/' + 'packageUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = options.path + '/' + 'roleToUpgrade';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleToUpgrade) {
      if (options.parse && options.roleToUpgrade) {
        options.roleToUpgrade = JSON.parse(options.roleToUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleToUpgrade}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-slot-parameters delete deployment-upgrade-parameters
  var catparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentDeploymentUpgradeParameters1 = catparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters1.category('upgrade-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters1 = parametersUpgradeBySlotDeploymentDeploymentUpgradeParameters1.category('deployment-upgrade-parameters')
  .description($('Commands to delete components of deployment in upgrade-by-slot-parameters file.'));
  deleteparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters1.command('delete')
  .description($('Remove deployment-upgrade-parameters in upgrade-by-slot-parameters string or files, e.g. \r\n{\r\n  "configuration":"",\r\n  "extendedProperties":{\r\n  },\r\n  "extensionConfiguration":{\r\n    "allRoles":[\r\n      {\r\n        "id":"",\r\n        "state":""\r\n      }\r\n    ],\r\n    "namedRoles":[\r\n      {\r\n        "extensions":[\r\n          {\r\n            "id":"",\r\n            "state":""\r\n          }\r\n        ],\r\n        "roleName":""\r\n      }\r\n    ]\r\n  },\r\n  "force":false,\r\n  "label":"",\r\n  "mode":0,\r\n  "packageUri":"",\r\n  "roleToUpgrade":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration', $('Remove the configuration value.'))
  .option('--extended-properties', $('Remove the extended-properties value.'))
  .option('--extension-configuration', $('Remove the extension-configuration value.'))
  .option('--force', $('Remove the force value.'))
  .option('--label', $('Remove the label value.'))
  .option('--mode', $('Remove the mode value.'))
  .option('--package-uri', $('Remove the package-uri value.'))
  .option('--role-to-upgrade', $('Remove the role-to-upgrade value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.configuration || options.extendedProperties || options.extensionConfiguration || options.force || options.label || options.mode || options.packageUri || options.roleToUpgrade;
    if (anySubItem) {
      var subItemPath = null;
      if (options.configuration) {
        subItemPath = options.path + '/configuration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extendedProperties) {
        subItemPath = options.path + '/extendedProperties';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionConfiguration) {
        subItemPath = options.path + '/extensionConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.force) {
        subItemPath = options.path + '/force';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mode) {
        subItemPath = options.path + '/mode';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.packageUri) {
        subItemPath = options.path + '/packageUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleToUpgrade) {
        subItemPath = options.path + '/roleToUpgrade';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //upgrade-by-slot-parameters add deployment-upgrade-parameters
  var catparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentDeploymentUpgradeParameters2 = catparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters2.category('upgrade-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters2 = parametersUpgradeBySlotDeploymentDeploymentUpgradeParameters2.category('deployment-upgrade-parameters')
  .description($('Commands to add components of deployment in upgrade-by-slot-parameters file.'));
  addparametersUpgradeBySlotDeploymentDeploymentUpgradeParameters2.command('add')
  .description($('Add deployment-upgrade-parameters in upgrade-by-slot-parameters string or files, e.g. \r\n{\r\n  "configuration":"",\r\n  "extendedProperties":{\r\n  },\r\n  "extensionConfiguration":{\r\n    "allRoles":[\r\n      {\r\n        "id":"",\r\n        "state":""\r\n      }\r\n    ],\r\n    "namedRoles":[\r\n      {\r\n        "extensions":[\r\n          {\r\n            "id":"",\r\n            "state":""\r\n          }\r\n        ],\r\n        "roleName":""\r\n      }\r\n    ]\r\n  },\r\n  "force":false,\r\n  "label":"",\r\n  "mode":0,\r\n  "packageUri":"",\r\n  "roleToUpgrade":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--configuration <configuration>', $('Add the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Add the extension-configuration value.'))
  .option('--force <force>', $('Add the force value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .option('--package-uri <packageUri>', $('Add the package-uri value.'))
  .option('--role-to-upgrade <roleToUpgrade>', $('Add the role-to-upgrade value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'configuration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'extensionConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = '' + '/' + 'force';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = '' + '/' + 'packageUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = '' + '/' + 'roleToUpgrade';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleToUpgrade) {
      if (options.parse && options.roleToUpgrade) {
        options.roleToUpgrade = JSON.parse(options.roleToUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleToUpgrade}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-slot-parameters delete extension-configuration
  var catparametersUpgradeBySlotDeploymentExtensionConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentExtensionConfiguration1 = catparametersUpgradeBySlotDeploymentExtensionConfiguration1.category('upgrade-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersUpgradeBySlotDeploymentExtensionConfiguration1 = parametersUpgradeBySlotDeploymentExtensionConfiguration1.category('extension-configuration')
  .description($('Commands to delete components of deployment in upgrade-by-slot-parameters file.'));
  deleteparametersUpgradeBySlotDeploymentExtensionConfiguration1.command('delete')
  .description($('Remove extension-configuration in upgrade-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionConfiguration" : {\r\n             "allRoles":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "namedRoles":[\r\n               {\r\n                 "extensions":[\r\n                   {\r\n                     "id":"",\r\n                     "state":""\r\n                   }\r\n                 ],\r\n                 "roleName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--all-roles', $('Remove the all-roles value.'))
  .option('--named-roles', $('Remove the named-roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration';
    var anySubItem = false || options.allRoles || options.namedRoles;
    if (anySubItem) {
      var subItemPath = null;
      if (options.allRoles) {
        subItemPath = options.path + '/allRoles';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.namedRoles) {
        subItemPath = options.path + '/namedRoles';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //upgrade-by-slot-parameters add extension-configuration
  var catparametersUpgradeBySlotDeploymentExtensionConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentExtensionConfiguration2 = catparametersUpgradeBySlotDeploymentExtensionConfiguration2.category('upgrade-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersUpgradeBySlotDeploymentExtensionConfiguration2 = parametersUpgradeBySlotDeploymentExtensionConfiguration2.category('extension-configuration')
  .description($('Commands to add components of deployment in upgrade-by-slot-parameters file.'));
  addparametersUpgradeBySlotDeploymentExtensionConfiguration2.command('add')
  .description($('Add extension-configuration in upgrade-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionConfiguration" : {\r\n             "allRoles":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "namedRoles":[\r\n               {\r\n                 "extensions":[\r\n                   {\r\n                     "id":"",\r\n                     "state":""\r\n                   }\r\n                 ],\r\n                 "roleName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--all-roles <allRoles>', $('Add the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Add the named-roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration' + '/' + 'allRoles';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = '/extensionConfiguration' + '/' + 'namedRoles';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-slot-parameters set all-roles
  var catparametersUpgradeBySlotDeploymentAllRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentAllRoles0 = catparametersUpgradeBySlotDeploymentAllRoles0.category('upgrade-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersUpgradeBySlotDeploymentAllRoles0 = parametersUpgradeBySlotDeploymentAllRoles0.category('all-roles')
  .description($('Commands to set components of deployment in upgrade-by-slot-parameters file.'));
  setparametersUpgradeBySlotDeploymentAllRoles0.command('set')
  .description($('Set all-roles in upgrade-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "allRoles" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--state <state>', $('Set the state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'state';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-slot-parameters delete all-roles
  var catparametersUpgradeBySlotDeploymentAllRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentAllRoles1 = catparametersUpgradeBySlotDeploymentAllRoles1.category('upgrade-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersUpgradeBySlotDeploymentAllRoles1 = parametersUpgradeBySlotDeploymentAllRoles1.category('all-roles')
  .description($('Commands to delete components of deployment in upgrade-by-slot-parameters file.'));
  deleteparametersUpgradeBySlotDeploymentAllRoles1.command('delete')
  .description($('Remove all-roles in upgrade-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "allRoles" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id', $('Remove the id value.'))
  .option('--state', $('Remove the state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id || options.state;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.state) {
        subItemPath = options.path + '/state';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //upgrade-by-slot-parameters add all-roles
  var catparametersUpgradeBySlotDeploymentAllRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentAllRoles2 = catparametersUpgradeBySlotDeploymentAllRoles2.category('upgrade-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersUpgradeBySlotDeploymentAllRoles2 = parametersUpgradeBySlotDeploymentAllRoles2.category('all-roles')
  .description($('Commands to add components of deployment in upgrade-by-slot-parameters file.'));
  addparametersUpgradeBySlotDeploymentAllRoles2.command('add')
  .description($('Add all-roles in upgrade-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "allRoles" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--state <state>', $('Add the state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'state';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-slot-parameters set named-roles
  var catparametersUpgradeBySlotDeploymentNamedRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentNamedRoles0 = catparametersUpgradeBySlotDeploymentNamedRoles0.category('upgrade-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersUpgradeBySlotDeploymentNamedRoles0 = parametersUpgradeBySlotDeploymentNamedRoles0.category('named-roles')
  .description($('Commands to set components of deployment in upgrade-by-slot-parameters file.'));
  setparametersUpgradeBySlotDeploymentNamedRoles0.command('set')
  .description($('Set named-roles in upgrade-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "namedRoles" : {\r\n             "extensions":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "roleName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'extensions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-slot-parameters delete named-roles
  var catparametersUpgradeBySlotDeploymentNamedRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentNamedRoles1 = catparametersUpgradeBySlotDeploymentNamedRoles1.category('upgrade-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersUpgradeBySlotDeploymentNamedRoles1 = parametersUpgradeBySlotDeploymentNamedRoles1.category('named-roles')
  .description($('Commands to delete components of deployment in upgrade-by-slot-parameters file.'));
  deleteparametersUpgradeBySlotDeploymentNamedRoles1.command('delete')
  .description($('Remove named-roles in upgrade-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "namedRoles" : {\r\n             "extensions":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "roleName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions', $('Remove the extensions value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.extensions || options.roleName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.extensions) {
        subItemPath = options.path + '/extensions';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        subItemPath = options.path + '/roleName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //upgrade-by-slot-parameters add named-roles
  var catparametersUpgradeBySlotDeploymentNamedRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentNamedRoles2 = catparametersUpgradeBySlotDeploymentNamedRoles2.category('upgrade-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersUpgradeBySlotDeploymentNamedRoles2 = parametersUpgradeBySlotDeploymentNamedRoles2.category('named-roles')
  .description($('Commands to add components of deployment in upgrade-by-slot-parameters file.'));
  addparametersUpgradeBySlotDeploymentNamedRoles2.command('add')
  .description($('Add named-roles in upgrade-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "namedRoles" : {\r\n             "extensions":[\r\n               {\r\n                 "id":"",\r\n                 "state":""\r\n               }\r\n             ],\r\n             "roleName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--extensions <extensions>', $('Add the extensions value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'extensions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-slot-parameters set extensions
  var catparametersUpgradeBySlotDeploymentExtensions0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentExtensions0 = catparametersUpgradeBySlotDeploymentExtensions0.category('upgrade-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersUpgradeBySlotDeploymentExtensions0 = parametersUpgradeBySlotDeploymentExtensions0.category('extensions')
  .description($('Commands to set components of deployment in upgrade-by-slot-parameters file.'));
  setparametersUpgradeBySlotDeploymentExtensions0.command('set')
  .description($('Set extensions in upgrade-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-slot-parameters delete extensions
  var catparametersUpgradeBySlotDeploymentExtensions1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentExtensions1 = catparametersUpgradeBySlotDeploymentExtensions1.category('upgrade-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersUpgradeBySlotDeploymentExtensions1 = parametersUpgradeBySlotDeploymentExtensions1.category('extensions')
  .description($('Commands to delete components of deployment in upgrade-by-slot-parameters file.'));
  deleteparametersUpgradeBySlotDeploymentExtensions1.command('delete')
  .description($('Remove extensions in upgrade-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //upgrade-by-slot-parameters add extensions
  var catparametersUpgradeBySlotDeploymentExtensions2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentExtensions2 = catparametersUpgradeBySlotDeploymentExtensions2.category('upgrade-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersUpgradeBySlotDeploymentExtensions2 = parametersUpgradeBySlotDeploymentExtensions2.category('extensions')
  .description($('Commands to add components of deployment in upgrade-by-slot-parameters file.'));
  addparametersUpgradeBySlotDeploymentExtensions2.command('add')
  .description($('Add extensions in upgrade-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "id":"",\r\n             "state":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //upgrade-by-slot-parameters delete mode
  var catparametersUpgradeBySlotDeploymentMode1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentMode1 = catparametersUpgradeBySlotDeploymentMode1.category('upgrade-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersUpgradeBySlotDeploymentMode1 = parametersUpgradeBySlotDeploymentMode1.category('mode')
  .description($('Commands to delete components of deployment in upgrade-by-slot-parameters file.'));
  deleteparametersUpgradeBySlotDeploymentMode1.command('delete')
  .description($('Remove mode in upgrade-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "mode" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/mode';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //upgrade-by-slot-parameters add mode
  var catparametersUpgradeBySlotDeploymentMode2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersUpgradeBySlotDeploymentMode2 = catparametersUpgradeBySlotDeploymentMode2.category('upgrade-by-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersUpgradeBySlotDeploymentMode2 = parametersUpgradeBySlotDeploymentMode2.category('mode')
  .description($('Commands to add components of deployment in upgrade-by-slot-parameters file.'));
  addparametersUpgradeBySlotDeploymentMode2.command('add')
  .description($('Add mode in upgrade-by-slot-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "mode" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/mode' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  Deployment WalkUpgradeDomainByDeploymentName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "upgradeDomain":0
}
*/
  var deploymentWalkUpgradeDomainByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentWalkUpgradeDomainByDeploymentName.command('walk-upgrade-domain-by-deployment-name [service-name] [deployment-name] [parameters]')
  .description($('The Walk Upgrade Domain By Deployment Name operation specifies an update domain in which a role instance must be updated. For more information about updating role instances, see Update an Azure Service at http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx. This operation is an asynchronous operation. To determine whether the Management service has finished processing the request, call Get Operation Status. For more information on asynchronous operations, see Tracking Asynchronous Service Management Requests at http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. Prior to calling the Walk Upgrade Domain operation you must have called Upgrade Deployment, Change Deployment Configuration, or Rollback Update Or Upgrade. By default, a service is deployed with five update domains, which are updated one at a time during an in-place update. For information on modifying the number of update domains in the service definition file, see the Azure Service Definition Schema (.csdef File). To perform a manual update of your deployment, proceed in this order: Call Upgrade Deployment with the Mode element set to manual. Call Walk Upgrade Domain to update each domain within the deployment. Update domains must be updated in order. For example, begin with domain 0, proceed to domain 1, and so on. Important: An update that adds or removes role instances will result in a configuration update to all roles that are deployed in the cloud service. Existing role instances need to be notified of new role instances so that all role instances can communicate together in the cloud service. While an update is in progress, call Get Deployment to determine its status. If the update is in progress, Get Deployment returns an UpgradeStatus element that contains information about the update. If the update is complete, or if no update is in progress, then the UpgradeStatus element is null.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.walkUpgradeDomainByDeploymentName(serviceName, deploymentName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var deploymentWalkUpgradeDomainByDeploymentNamewalkUpgradeDomainByDeploymentNameParameters2 = deploymentWalkUpgradeDomainByDeploymentName.category('walk-upgrade-domain-by-deployment-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  deploymentWalkUpgradeDomainByDeploymentNamewalkUpgradeDomainByDeploymentNameParameters2.command('generate')
  .description($('Generate deploymentWalkUpgradeDomainByDeploymentName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"upgradeDomain\":0}', _);
    var filePath = 'deploymentWalkUpgradeDomainByDeploymentName_walkUpgradeDomainByDeploymentName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"upgradeDomain\":0\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  deploymentWalkUpgradeDomainByDeploymentNamewalkUpgradeDomainByDeploymentNameParameters2.command('patch')
  .description($('Command to patch deploymentWalkUpgradeDomainByDeploymentName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //walk-upgrade-domain-by-deployment-name-parameters set deployment-walk-upgrade-domain-parameters
  var catparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters0 = catparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters0.category('walk-upgrade-domain-by-deployment-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters0 = parametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters0.category('deployment-walk-upgrade-domain-parameters')
  .description($('Commands to set components of deployment in walk-upgrade-domain-by-deployment-name-parameters file.'));
  setparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters0.command('set')
  .description($('Set deployment-walk-upgrade-domain-parameters in walk-upgrade-domain-by-deployment-name-parameters string or files, e.g. \r\n{\r\n  "upgradeDomain":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--upgrade-domain <upgradeDomain>', $('Set the upgrade-domain value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'upgradeDomain';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.upgradeDomain) {
      if (options.parse && options.upgradeDomain) {
        options.upgradeDomain = JSON.parse(options.upgradeDomain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.upgradeDomain}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //walk-upgrade-domain-by-deployment-name-parameters delete deployment-walk-upgrade-domain-parameters
  var catparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters1 = catparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters1.category('walk-upgrade-domain-by-deployment-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters1 = parametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters1.category('deployment-walk-upgrade-domain-parameters')
  .description($('Commands to delete components of deployment in walk-upgrade-domain-by-deployment-name-parameters file.'));
  deleteparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters1.command('delete')
  .description($('Remove deployment-walk-upgrade-domain-parameters in walk-upgrade-domain-by-deployment-name-parameters string or files, e.g. \r\n{\r\n  "upgradeDomain":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--upgrade-domain', $('Remove the upgrade-domain value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.upgradeDomain;
    if (anySubItem) {
      var subItemPath = null;
      if (options.upgradeDomain) {
        subItemPath = options.path + '/upgradeDomain';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //walk-upgrade-domain-by-deployment-name-parameters add deployment-walk-upgrade-domain-parameters
  var catparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters2 = catparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters2.category('walk-upgrade-domain-by-deployment-name-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters2 = parametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters2.category('deployment-walk-upgrade-domain-parameters')
  .description($('Commands to add components of deployment in walk-upgrade-domain-by-deployment-name-parameters file.'));
  addparametersWalkUpgradeDomainByDeploymentNameDeploymentDeploymentWalkUpgradeDomainParameters2.command('add')
  .description($('Add deployment-walk-upgrade-domain-parameters in walk-upgrade-domain-by-deployment-name-parameters string or files, e.g. \r\n{\r\n  "upgradeDomain":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--upgrade-domain <upgradeDomain>', $('Add the upgrade-domain value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'upgradeDomain';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.upgradeDomain) {
      if (options.parse && options.upgradeDomain) {
        options.upgradeDomain = JSON.parse(options.upgradeDomain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.upgradeDomain}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  Deployment WalkUpgradeDomainByDeploymentSlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "upgradeDomain":0
}
*/
  var deploymentWalkUpgradeDomainByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment')
  .description($('Commands to manage your deployment.  '));
  deploymentWalkUpgradeDomainByDeploymentSlot.command('walk-upgrade-domain-by-deployment-slot [service-name] [deployment-slot] [parameters]')
  .description($('The Walk Upgrade Domain By Deployment Slot operation specifies an update domain in which a role instance must be updated. For more information about updating role instances, see Update an Azure Service at http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx. This operation is an asynchronous operation. To determine whether the Management service has finished processing the request, call Get Operation Status. For more information on asynchronous operations, see Tracking Asynchronous Service Management Requests at http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx. Prior to calling the Walk Upgrade Domain operation you must have called Upgrade Deployment, Change Deployment Configuration, or Rollback Update Or Upgrade. By default, a service is deployed with five update domains, which are updated one at a time during an in-place update. For information on modifying the number of update domains in the service definition file, see the Azure Service Definition Schema (.csdef File). To perform a manual update of your deployment, proceed in this order: Call Upgrade Deployment with the Mode element set to manual. Call Walk Upgrade Domain to update each domain within the deployment. Update domains must be updated in order. For example, begin with domain 0, proceed to domain 1, and so on. Important: An update that adds or removes role instances will result in a configuration update to all roles that are deployed in the cloud service. Existing role instances need to be notified of new role instances so that all role instances can communicate together in the cloud service. While an update is in progress, call Get Deployment to determine its status. If the update is in progress, Get Deployment returns an UpgradeStatus element that contains information about the update. If the update is complete, or if no update is in progress, then the UpgradeStatus element is null.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx for more information)'))
  .usage('[options] <service-name> <deployment-slot> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentSlot, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentSlot) {
      deploymentSlot = cli.interaction.promptIfNotGiven($('deployment-slot : '), deploymentSlot, _);
    }

    cli.output.verbose('deploymentSlot = ' + deploymentSlot);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployment.walkUpgradeDomainByDeploymentSlot(serviceName, deploymentSlot, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var deploymentWalkUpgradeDomainByDeploymentSlotwalkUpgradeDomainByDeploymentSlotParameters2 = deploymentWalkUpgradeDomainByDeploymentSlot.category('walk-upgrade-domain-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  deploymentWalkUpgradeDomainByDeploymentSlotwalkUpgradeDomainByDeploymentSlotParameters2.command('generate')
  .description($('Generate deploymentWalkUpgradeDomainByDeploymentSlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"upgradeDomain\":0}', _);
    var filePath = 'deploymentWalkUpgradeDomainByDeploymentSlot_walkUpgradeDomainByDeploymentSlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"upgradeDomain\":0\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  deploymentWalkUpgradeDomainByDeploymentSlotwalkUpgradeDomainByDeploymentSlotParameters2.command('patch')
  .description($('Command to patch deploymentWalkUpgradeDomainByDeploymentSlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //walk-upgrade-domain-by-deployment-slot-parameters set deployment-walk-upgrade-domain-parameters
  var catparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters0 = catparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters0.category('walk-upgrade-domain-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var setparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters0 = parametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters0.category('deployment-walk-upgrade-domain-parameters')
  .description($('Commands to set components of deployment in walk-upgrade-domain-by-deployment-slot-parameters file.'));
  setparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters0.command('set')
  .description($('Set deployment-walk-upgrade-domain-parameters in walk-upgrade-domain-by-deployment-slot-parameters string or files, e.g. \r\n{\r\n  "upgradeDomain":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--upgrade-domain <upgradeDomain>', $('Set the upgrade-domain value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'upgradeDomain';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.upgradeDomain) {
      if (options.parse && options.upgradeDomain) {
        options.upgradeDomain = JSON.parse(options.upgradeDomain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.upgradeDomain}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //walk-upgrade-domain-by-deployment-slot-parameters delete deployment-walk-upgrade-domain-parameters
  var catparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters1 = catparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters1.category('walk-upgrade-domain-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var deleteparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters1 = parametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters1.category('deployment-walk-upgrade-domain-parameters')
  .description($('Commands to delete components of deployment in walk-upgrade-domain-by-deployment-slot-parameters file.'));
  deleteparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters1.command('delete')
  .description($('Remove deployment-walk-upgrade-domain-parameters in walk-upgrade-domain-by-deployment-slot-parameters string or files, e.g. \r\n{\r\n  "upgradeDomain":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--upgrade-domain', $('Remove the upgrade-domain value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.upgradeDomain;
    if (anySubItem) {
      var subItemPath = null;
      if (options.upgradeDomain) {
        subItemPath = options.path + '/upgradeDomain';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //walk-upgrade-domain-by-deployment-slot-parameters add deployment-walk-upgrade-domain-parameters
  var catparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters2 = catparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters2.category('walk-upgrade-domain-by-deployment-slot-parameters')
  .description($('Commands to manage configuration of deployment in the parameter file.'));
  var addparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters2 = parametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters2.category('deployment-walk-upgrade-domain-parameters')
  .description($('Commands to add components of deployment in walk-upgrade-domain-by-deployment-slot-parameters file.'));
  addparametersWalkUpgradeDomainByDeploymentSlotDeploymentDeploymentWalkUpgradeDomainParameters2.command('add')
  .description($('Add deployment-walk-upgrade-domain-parameters in walk-upgrade-domain-by-deployment-slot-parameters string or files, e.g. \r\n{\r\n  "upgradeDomain":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--upgrade-domain <upgradeDomain>', $('Add the upgrade-domain value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'upgradeDomain';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.upgradeDomain) {
      if (options.parse && options.upgradeDomain) {
        options.upgradeDomain = JSON.parse(options.upgradeDomain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.upgradeDomain}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  DNSServer AddDNSServer
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "address":"",
  "name":""
}
*/
  var dnsServerAddDNSServer = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server')
  .description($('Commands to manage your dns server.  '));
  dnsServerAddDNSServer.command('add-dns-server [service-name] [deployment-name] [address] [name]')
  .description($('Add a definition for a DNS server to an existing deployment. VM's in this deployment will be programmed to use this DNS server for all DNS resolutions'))
  .usage('[options] <service-name> <deployment-name> <address> <name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--address <address>', $('address'))
  .option('-n, --name <name>', $('name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, address, name, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.verbose('address = ' + address);
      parametersObj.address = address;
      cli.output.verbose('name = ' + name);
      parametersObj.name = name;
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.dnsServer.addDNSServer(serviceName, deploymentName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  DNSServer DeleteDNSServer
  --service-name
  --deployment-name
  --dns-server-name
*/
  var dnsServerDeleteDNSServer = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server')
  .description($('Commands to manage your dns server.  '));
  dnsServerDeleteDNSServer.command('delete-dns-server [service-name] [deployment-name] [dns-server-name]')
  .description($('Deletes a definition for an existing DNS server from the deployment'))
  .usage('[options] <service-name> <deployment-name> <dns-server-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--dns-server-name <dns-server-name>', $('dns-server-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, dnsServerName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!dnsServerName) {
      dnsServerName = cli.interaction.promptIfNotGiven($('dns-server-name : '), dnsServerName, _);
    }

    cli.output.verbose('dnsServerName = ' + dnsServerName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.dnsServer.deleteDNSServer(serviceName, deploymentName, dnsServerName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  DNSServer UpdateDNSServer
  --service-name
  --deployment-name
  --dns-server-name
  --parameters
=============================================
{
  "address":"",
  "name":""
}
*/
  var dnsServerUpdateDNSServer = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server')
  .description($('Commands to manage your dns server.  '));
  dnsServerUpdateDNSServer.command('update-dns-server [service-name] [deployment-name] [dns-server-name] [address] [name]')
  .description($('Updates a definition for an existing DNS server. Updates to address is the only change allowed. DNS server name cannot be changed'))
  .usage('[options] <service-name> <deployment-name> <dns-server-name> <address> <name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--dns-server-name <dns-server-name>', $('dns-server-name'))
  .option('--address <address>', $('address'))
  .option('-n, --name <name>', $('name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, dnsServerName, address, name, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!dnsServerName) {
      dnsServerName = cli.interaction.promptIfNotGiven($('dns-server-name : '), dnsServerName, _);
    }

    cli.output.verbose('dnsServerName = ' + dnsServerName);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.verbose('address = ' + address);
      parametersObj.address = address;
      cli.output.verbose('name = ' + name);
      parametersObj.name = name;
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.dnsServer.updateDNSServer(serviceName, deploymentName, dnsServerName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  ExtensionImage Register
  --parameters
=============================================
{
  "blockRoleUponFailure":null,
  "certificate":{
    "storeLocation":"",
    "storeName":"",
    "thumbprintAlgorithm":"",
    "thumbprintRequired":null
  },
  "companyName":"",
  "description":"",
  "disallowMajorVersionUpgrade":null,
  "eula":"",
  "extensionEndpoints":{
    "inputEndpoints":[
      {
        "localPort":"",
        "name":"",
        "port":0,
        "protocol":""
      }
    ],
    "instanceInputEndpoints":[
      {
        "fixedPortMax":0,
        "fixedPortMin":0,
        "localPort":"",
        "name":"",
        "protocol":""
      }
    ],
    "internalEndpoints":[
      {
        "name":"",
        "port":0,
        "protocol":""
      }
    ]
  },
  "homepageUri":"",
  "hostingResources":"",
  "isInternalExtension":null,
  "isJsonExtension":null,
  "label":"",
  "localResources":[
    {
      "name":"",
      "sizeInMB":null
    }
  ],
  "mediaLink":"",
  "privacyUri":"",
  "privateConfigurationSchema":"",
  "providerNameSpace":"",
  "publicConfigurationSchema":"",
  "publishedDate":null,
  "publisherName":"",
  "regions":"",
  "replicationCompleted":null,
  "sampleConfig":"",
  "supportedOS":"",
  "type":"",
  "version":""
}
*/
  var extensionImageRegister = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image')
  .description($('Commands to manage your extension image.  '));
  extensionImageRegister.command('register [parameters]')
  .description($('Register a new extension. An extension is identified by the combination of its ProviderNamespace and Type (case-sensitive string). It is not allowed to register an extension with the same identity (i.e. combination of ProviderNamespace and Type) of an already-registered extension. To register new version of an existing extension, the Update Extension API should be used.'))
  .usage('[options] <parameters>')
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(parameters, options, _) {
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.extensionImage.register(parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var extensionImageRegisterregisterParameters0 = extensionImageRegister.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  extensionImageRegisterregisterParameters0.command('generate')
  .description($('Generate extensionImageRegister parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"blockRoleUponFailure\":null,\"certificate\":{\"storeLocation\":\"\",\"storeName\":\"\",\"thumbprintAlgorithm\":\"\",\"thumbprintRequired\":null},\"companyName\":\"\",\"description\":\"\",\"disallowMajorVersionUpgrade\":null,\"eula\":\"\",\"extensionEndpoints\":{\"inputEndpoints\":[{\"localPort\":\"\",\"name\":\"\",\"port\":0,\"protocol\":\"\"}],\"instanceInputEndpoints\":[{\"fixedPortMax\":0,\"fixedPortMin\":0,\"localPort\":\"\",\"name\":\"\",\"protocol\":\"\"}],\"internalEndpoints\":[{\"name\":\"\",\"port\":0,\"protocol\":\"\"}]},\"homepageUri\":\"\",\"hostingResources\":\"\",\"isInternalExtension\":null,\"isJsonExtension\":null,\"label\":\"\",\"localResources\":[{\"name\":\"\",\"sizeInMB\":null}],\"mediaLink\":\"\",\"privacyUri\":\"\",\"privateConfigurationSchema\":\"\",\"providerNameSpace\":\"\",\"publicConfigurationSchema\":\"\",\"publishedDate\":null,\"publisherName\":\"\",\"regions\":\"\",\"replicationCompleted\":null,\"sampleConfig\":\"\",\"supportedOS\":\"\",\"type\":\"\",\"version\":\"\"}', _);
    var filePath = 'extensionImageRegister_register.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"blockRoleUponFailure\":null,\r\n\"certificate\":{\r\n\"storeLocation\":\"\",\r\n\"storeName\":\"\",\r\n\"thumbprintAlgorithm\":\"\",\r\n\"thumbprintRequired\":null\r\n},\r\n\"companyName\":\"\",\r\n\"description\":\"\",\r\n\"disallowMajorVersionUpgrade\":null,\r\n\"eula\":\"\",\r\n\"extensionEndpoints\":{\r\n\"inputEndpoints\":[\r\n{\r\n\"localPort\":\"\",\r\n\"name\":\"\",\r\n\"port\":0,\r\n\"protocol\":\"\"\r\n}\r\n],\r\n\"instanceInputEndpoints\":[\r\n{\r\n\"fixedPortMax\":0,\r\n\"fixedPortMin\":0,\r\n\"localPort\":\"\",\r\n\"name\":\"\",\r\n\"protocol\":\"\"\r\n}\r\n],\r\n\"internalEndpoints\":[\r\n{\r\n\"name\":\"\",\r\n\"port\":0,\r\n\"protocol\":\"\"\r\n}\r\n]\r\n},\r\n\"homepageUri\":\"\",\r\n\"hostingResources\":\"\",\r\n\"isInternalExtension\":null,\r\n\"isJsonExtension\":null,\r\n\"label\":\"\",\r\n\"localResources\":[\r\n{\r\n\"name\":\"\",\r\n\"sizeInMB\":null\r\n}\r\n],\r\n\"mediaLink\":\"\",\r\n\"privacyUri\":\"\",\r\n\"privateConfigurationSchema\":\"\",\r\n\"providerNameSpace\":\"\",\r\n\"publicConfigurationSchema\":\"\",\r\n\"publishedDate\":null,\r\n\"publisherName\":\"\",\r\n\"regions\":\"\",\r\n\"replicationCompleted\":null,\r\n\"sampleConfig\":\"\",\r\n\"supportedOS\":\"\",\r\n\"type\":\"\",\r\n\"version\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  extensionImageRegisterregisterParameters0.command('patch')
  .description($('Command to patch extensionImageRegister parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters set extension-image-register-parameters
  var catparametersRegisterExtensionImageExtensionImageRegisterParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageExtensionImageRegisterParameters0 = catparametersRegisterExtensionImageExtensionImageRegisterParameters0.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersRegisterExtensionImageExtensionImageRegisterParameters0 = parametersRegisterExtensionImageExtensionImageRegisterParameters0.category('extension-image-register-parameters')
  .description($('Commands to set components of extension-image in register-parameters file.'));
  setparametersRegisterExtensionImageExtensionImageRegisterParameters0.command('set')
  .description($('Set extension-image-register-parameters in register-parameters string or files, e.g. \r\n{\r\n  "blockRoleUponFailure":null,\r\n  "certificate":{\r\n    "storeLocation":"",\r\n    "storeName":"",\r\n    "thumbprintAlgorithm":"",\r\n    "thumbprintRequired":null\r\n  },\r\n  "companyName":"",\r\n  "description":"",\r\n  "disallowMajorVersionUpgrade":null,\r\n  "eula":"",\r\n  "extensionEndpoints":{\r\n    "inputEndpoints":[\r\n      {\r\n        "localPort":"",\r\n        "name":"",\r\n        "port":0,\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "instanceInputEndpoints":[\r\n      {\r\n        "fixedPortMax":0,\r\n        "fixedPortMin":0,\r\n        "localPort":"",\r\n        "name":"",\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "internalEndpoints":[\r\n      {\r\n        "name":"",\r\n        "port":0,\r\n        "protocol":""\r\n      }\r\n    ]\r\n  },\r\n  "homepageUri":"",\r\n  "hostingResources":"",\r\n  "isInternalExtension":null,\r\n  "isJsonExtension":null,\r\n  "label":"",\r\n  "localResources":[\r\n    {\r\n      "name":"",\r\n      "sizeInMB":null\r\n    }\r\n  ],\r\n  "mediaLink":"",\r\n  "privacyUri":"",\r\n  "privateConfigurationSchema":"",\r\n  "providerNameSpace":"",\r\n  "publicConfigurationSchema":"",\r\n  "publishedDate":null,\r\n  "publisherName":"",\r\n  "regions":"",\r\n  "replicationCompleted":null,\r\n  "sampleConfig":"",\r\n  "supportedOS":"",\r\n  "type":"",\r\n  "version":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--block-role-upon-failure <blockRoleUponFailure>', $('Set the block-role-upon-failure value.'))
  .option('--certificate <certificate>', $('Set the certificate value.'))
  .option('--company-name <companyName>', $('Set the company-name value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--disallow-major-version-upgrade <disallowMajorVersionUpgrade>', $('Set the disallow-major-version-upgrade value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--extension-endpoints <extensionEndpoints>', $('Set the extension-endpoints value.'))
  .option('--homepage-uri <homepageUri>', $('Set the homepage-uri value.'))
  .option('--hosting-resources <hostingResources>', $('Set the hosting-resources value.'))
  .option('--is-internal-extension <isInternalExtension>', $('Set the is-internal-extension value.'))
  .option('--is-json-extension <isJsonExtension>', $('Set the is-json-extension value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--local-resources <localResources>', $('Set the local-resources value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--private-configuration-schema <privateConfigurationSchema>', $('Set the private-configuration-schema value.'))
  .option('--provider-name-space <providerNameSpace>', $('Set the provider-name-space value.'))
  .option('--public-configuration-schema <publicConfigurationSchema>', $('Set the public-configuration-schema value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--publisher-name <publisherName>', $('Set the publisher-name value.'))
  .option('--regions <regions>', $('Set the regions value.'))
  .option('--replication-completed <replicationCompleted>', $('Set the replication-completed value.'))
  .option('--sample-config <sampleConfig>', $('Set the sample-config value.'))
  .option('--supported-os <supportedOS>', $('Set the supported-os value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'blockRoleUponFailure';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.blockRoleUponFailure) {
      if (options.parse && options.blockRoleUponFailure) {
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      }
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.blockRoleUponFailure}]);
    }
    paramPath = options.path + '/' + 'certificate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificate) {
      if (options.parse && options.certificate) {
        options.certificate = JSON.parse(options.certificate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificate}]);
    }
    paramPath = options.path + '/' + 'companyName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.companyName) {
      if (options.parse && options.companyName) {
        options.companyName = JSON.parse(options.companyName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.companyName}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'disallowMajorVersionUpgrade';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.disallowMajorVersionUpgrade) {
      if (options.parse && options.disallowMajorVersionUpgrade) {
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      }
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disallowMajorVersionUpgrade}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'extensionEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensionEndpoints) {
      if (options.parse && options.extensionEndpoints) {
        options.extensionEndpoints = JSON.parse(options.extensionEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionEndpoints}]);
    }
    paramPath = options.path + '/' + 'homepageUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.homepageUri) {
      if (options.parse && options.homepageUri) {
        options.homepageUri = JSON.parse(options.homepageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.homepageUri}]);
    }
    paramPath = options.path + '/' + 'hostingResources';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostingResources) {
      if (options.parse && options.hostingResources) {
        options.hostingResources = JSON.parse(options.hostingResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostingResources}]);
    }
    paramPath = options.path + '/' + 'isInternalExtension';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.isInternalExtension) {
      if (options.parse && options.isInternalExtension) {
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      }
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isInternalExtension}]);
    }
    paramPath = options.path + '/' + 'isJsonExtension';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.isJsonExtension) {
      if (options.parse && options.isJsonExtension) {
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      }
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isJsonExtension}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'localResources';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localResources) {
      if (options.parse && options.localResources) {
        options.localResources = JSON.parse(options.localResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localResources}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'privateConfigurationSchema';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateConfigurationSchema) {
      if (options.parse && options.privateConfigurationSchema) {
        options.privateConfigurationSchema = JSON.parse(options.privateConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfigurationSchema}]);
    }
    paramPath = options.path + '/' + 'providerNameSpace';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.providerNameSpace) {
      if (options.parse && options.providerNameSpace) {
        options.providerNameSpace = JSON.parse(options.providerNameSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNameSpace}]);
    }
    paramPath = options.path + '/' + 'publicConfigurationSchema';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicConfigurationSchema) {
      if (options.parse && options.publicConfigurationSchema) {
        options.publicConfigurationSchema = JSON.parse(options.publicConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfigurationSchema}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'publisherName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisherName) {
      if (options.parse && options.publisherName) {
        options.publisherName = JSON.parse(options.publisherName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherName}]);
    }
    paramPath = options.path + '/' + 'regions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.regions) {
      if (options.parse && options.regions) {
        options.regions = JSON.parse(options.regions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.regions}]);
    }
    paramPath = options.path + '/' + 'replicationCompleted';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.replicationCompleted) {
      if (options.parse && options.replicationCompleted) {
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      }
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.replicationCompleted}]);
    }
    paramPath = options.path + '/' + 'sampleConfig';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sampleConfig) {
      if (options.parse && options.sampleConfig) {
        options.sampleConfig = JSON.parse(options.sampleConfig);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sampleConfig}]);
    }
    paramPath = options.path + '/' + 'supportedOS';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.supportedOS) {
      if (options.parse && options.supportedOS) {
        options.supportedOS = JSON.parse(options.supportedOS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.supportedOS}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters delete extension-image-register-parameters
  var catparametersRegisterExtensionImageExtensionImageRegisterParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageExtensionImageRegisterParameters1 = catparametersRegisterExtensionImageExtensionImageRegisterParameters1.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersRegisterExtensionImageExtensionImageRegisterParameters1 = parametersRegisterExtensionImageExtensionImageRegisterParameters1.category('extension-image-register-parameters')
  .description($('Commands to delete components of extension-image in register-parameters file.'));
  deleteparametersRegisterExtensionImageExtensionImageRegisterParameters1.command('delete')
  .description($('Remove extension-image-register-parameters in register-parameters string or files, e.g. \r\n{\r\n  "blockRoleUponFailure":null,\r\n  "certificate":{\r\n    "storeLocation":"",\r\n    "storeName":"",\r\n    "thumbprintAlgorithm":"",\r\n    "thumbprintRequired":null\r\n  },\r\n  "companyName":"",\r\n  "description":"",\r\n  "disallowMajorVersionUpgrade":null,\r\n  "eula":"",\r\n  "extensionEndpoints":{\r\n    "inputEndpoints":[\r\n      {\r\n        "localPort":"",\r\n        "name":"",\r\n        "port":0,\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "instanceInputEndpoints":[\r\n      {\r\n        "fixedPortMax":0,\r\n        "fixedPortMin":0,\r\n        "localPort":"",\r\n        "name":"",\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "internalEndpoints":[\r\n      {\r\n        "name":"",\r\n        "port":0,\r\n        "protocol":""\r\n      }\r\n    ]\r\n  },\r\n  "homepageUri":"",\r\n  "hostingResources":"",\r\n  "isInternalExtension":null,\r\n  "isJsonExtension":null,\r\n  "label":"",\r\n  "localResources":[\r\n    {\r\n      "name":"",\r\n      "sizeInMB":null\r\n    }\r\n  ],\r\n  "mediaLink":"",\r\n  "privacyUri":"",\r\n  "privateConfigurationSchema":"",\r\n  "providerNameSpace":"",\r\n  "publicConfigurationSchema":"",\r\n  "publishedDate":null,\r\n  "publisherName":"",\r\n  "regions":"",\r\n  "replicationCompleted":null,\r\n  "sampleConfig":"",\r\n  "supportedOS":"",\r\n  "type":"",\r\n  "version":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--block-role-upon-failure', $('Remove the block-role-upon-failure value.'))
  .option('--certificate', $('Remove the certificate value.'))
  .option('--company-name', $('Remove the company-name value.'))
  .option('--description', $('Remove the description value.'))
  .option('--disallow-major-version-upgrade', $('Remove the disallow-major-version-upgrade value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--extension-endpoints', $('Remove the extension-endpoints value.'))
  .option('--homepage-uri', $('Remove the homepage-uri value.'))
  .option('--hosting-resources', $('Remove the hosting-resources value.'))
  .option('--is-internal-extension', $('Remove the is-internal-extension value.'))
  .option('--is-json-extension', $('Remove the is-json-extension value.'))
  .option('--label', $('Remove the label value.'))
  .option('--local-resources', $('Remove the local-resources value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--private-configuration-schema', $('Remove the private-configuration-schema value.'))
  .option('--provider-name-space', $('Remove the provider-name-space value.'))
  .option('--public-configuration-schema', $('Remove the public-configuration-schema value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--publisher-name', $('Remove the publisher-name value.'))
  .option('--regions', $('Remove the regions value.'))
  .option('--replication-completed', $('Remove the replication-completed value.'))
  .option('--sample-config', $('Remove the sample-config value.'))
  .option('--supported-os', $('Remove the supported-os value.'))
  .option('--type', $('Remove the type value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.blockRoleUponFailure || options.certificate || options.companyName || options.description || options.disallowMajorVersionUpgrade || options.eula || options.extensionEndpoints || options.homepageUri || options.hostingResources || options.isInternalExtension || options.isJsonExtension || options.label || options.localResources || options.mediaLink || options.privacyUri || options.privateConfigurationSchema || options.providerNameSpace || options.publicConfigurationSchema || options.publishedDate || options.publisherName || options.regions || options.replicationCompleted || options.sampleConfig || options.supportedOS || options.type || options.version;
    if (anySubItem) {
      var subItemPath = null;
      if (options.blockRoleUponFailure) {
        subItemPath = options.path + '/blockRoleUponFailure';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.certificate) {
        subItemPath = options.path + '/certificate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.companyName) {
        subItemPath = options.path + '/companyName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disallowMajorVersionUpgrade) {
        subItemPath = options.path + '/disallowMajorVersionUpgrade';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        subItemPath = options.path + '/eula';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionEndpoints) {
        subItemPath = options.path + '/extensionEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.homepageUri) {
        subItemPath = options.path + '/homepageUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostingResources) {
        subItemPath = options.path + '/hostingResources';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isInternalExtension) {
        subItemPath = options.path + '/isInternalExtension';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isJsonExtension) {
        subItemPath = options.path + '/isJsonExtension';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localResources) {
        subItemPath = options.path + '/localResources';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        subItemPath = options.path + '/privacyUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateConfigurationSchema) {
        subItemPath = options.path + '/privateConfigurationSchema';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.providerNameSpace) {
        subItemPath = options.path + '/providerNameSpace';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicConfigurationSchema) {
        subItemPath = options.path + '/publicConfigurationSchema';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        subItemPath = options.path + '/publishedDate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisherName) {
        subItemPath = options.path + '/publisherName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.regions) {
        subItemPath = options.path + '/regions';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.replicationCompleted) {
        subItemPath = options.path + '/replicationCompleted';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sampleConfig) {
        subItemPath = options.path + '/sampleConfig';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.supportedOS) {
        subItemPath = options.path + '/supportedOS';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //register-parameters add extension-image-register-parameters
  var catparametersRegisterExtensionImageExtensionImageRegisterParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageExtensionImageRegisterParameters2 = catparametersRegisterExtensionImageExtensionImageRegisterParameters2.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var addparametersRegisterExtensionImageExtensionImageRegisterParameters2 = parametersRegisterExtensionImageExtensionImageRegisterParameters2.category('extension-image-register-parameters')
  .description($('Commands to add components of extension-image in register-parameters file.'));
  addparametersRegisterExtensionImageExtensionImageRegisterParameters2.command('add')
  .description($('Add extension-image-register-parameters in register-parameters string or files, e.g. \r\n{\r\n  "blockRoleUponFailure":null,\r\n  "certificate":{\r\n    "storeLocation":"",\r\n    "storeName":"",\r\n    "thumbprintAlgorithm":"",\r\n    "thumbprintRequired":null\r\n  },\r\n  "companyName":"",\r\n  "description":"",\r\n  "disallowMajorVersionUpgrade":null,\r\n  "eula":"",\r\n  "extensionEndpoints":{\r\n    "inputEndpoints":[\r\n      {\r\n        "localPort":"",\r\n        "name":"",\r\n        "port":0,\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "instanceInputEndpoints":[\r\n      {\r\n        "fixedPortMax":0,\r\n        "fixedPortMin":0,\r\n        "localPort":"",\r\n        "name":"",\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "internalEndpoints":[\r\n      {\r\n        "name":"",\r\n        "port":0,\r\n        "protocol":""\r\n      }\r\n    ]\r\n  },\r\n  "homepageUri":"",\r\n  "hostingResources":"",\r\n  "isInternalExtension":null,\r\n  "isJsonExtension":null,\r\n  "label":"",\r\n  "localResources":[\r\n    {\r\n      "name":"",\r\n      "sizeInMB":null\r\n    }\r\n  ],\r\n  "mediaLink":"",\r\n  "privacyUri":"",\r\n  "privateConfigurationSchema":"",\r\n  "providerNameSpace":"",\r\n  "publicConfigurationSchema":"",\r\n  "publishedDate":null,\r\n  "publisherName":"",\r\n  "regions":"",\r\n  "replicationCompleted":null,\r\n  "sampleConfig":"",\r\n  "supportedOS":"",\r\n  "type":"",\r\n  "version":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--block-role-upon-failure <blockRoleUponFailure>', $('Add the block-role-upon-failure value.'))
  .option('--certificate <certificate>', $('Add the certificate value.'))
  .option('--company-name <companyName>', $('Add the company-name value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--disallow-major-version-upgrade <disallowMajorVersionUpgrade>', $('Add the disallow-major-version-upgrade value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--extension-endpoints <extensionEndpoints>', $('Add the extension-endpoints value.'))
  .option('--homepage-uri <homepageUri>', $('Add the homepage-uri value.'))
  .option('--hosting-resources <hostingResources>', $('Add the hosting-resources value.'))
  .option('--is-internal-extension <isInternalExtension>', $('Add the is-internal-extension value.'))
  .option('--is-json-extension <isJsonExtension>', $('Add the is-json-extension value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--local-resources <localResources>', $('Add the local-resources value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--private-configuration-schema <privateConfigurationSchema>', $('Add the private-configuration-schema value.'))
  .option('--provider-name-space <providerNameSpace>', $('Add the provider-name-space value.'))
  .option('--public-configuration-schema <publicConfigurationSchema>', $('Add the public-configuration-schema value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--publisher-name <publisherName>', $('Add the publisher-name value.'))
  .option('--regions <regions>', $('Add the regions value.'))
  .option('--replication-completed <replicationCompleted>', $('Add the replication-completed value.'))
  .option('--sample-config <sampleConfig>', $('Add the sample-config value.'))
  .option('--supported-os <supportedOS>', $('Add the supported-os value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'blockRoleUponFailure';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.blockRoleUponFailure) {
      if (options.parse && options.blockRoleUponFailure) {
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      }
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.blockRoleUponFailure}]);
    }
    paramPath = '' + '/' + 'certificate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificate) {
      if (options.parse && options.certificate) {
        options.certificate = JSON.parse(options.certificate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificate}]);
    }
    paramPath = '' + '/' + 'companyName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.companyName) {
      if (options.parse && options.companyName) {
        options.companyName = JSON.parse(options.companyName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.companyName}]);
    }
    paramPath = '' + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'disallowMajorVersionUpgrade';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.disallowMajorVersionUpgrade) {
      if (options.parse && options.disallowMajorVersionUpgrade) {
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      }
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disallowMajorVersionUpgrade}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'extensionEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensionEndpoints) {
      if (options.parse && options.extensionEndpoints) {
        options.extensionEndpoints = JSON.parse(options.extensionEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionEndpoints}]);
    }
    paramPath = '' + '/' + 'homepageUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.homepageUri) {
      if (options.parse && options.homepageUri) {
        options.homepageUri = JSON.parse(options.homepageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.homepageUri}]);
    }
    paramPath = '' + '/' + 'hostingResources';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostingResources) {
      if (options.parse && options.hostingResources) {
        options.hostingResources = JSON.parse(options.hostingResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostingResources}]);
    }
    paramPath = '' + '/' + 'isInternalExtension';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.isInternalExtension) {
      if (options.parse && options.isInternalExtension) {
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      }
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isInternalExtension}]);
    }
    paramPath = '' + '/' + 'isJsonExtension';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.isJsonExtension) {
      if (options.parse && options.isJsonExtension) {
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      }
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isJsonExtension}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'localResources';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localResources) {
      if (options.parse && options.localResources) {
        options.localResources = JSON.parse(options.localResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localResources}]);
    }
    paramPath = '' + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'privateConfigurationSchema';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateConfigurationSchema) {
      if (options.parse && options.privateConfigurationSchema) {
        options.privateConfigurationSchema = JSON.parse(options.privateConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfigurationSchema}]);
    }
    paramPath = '' + '/' + 'providerNameSpace';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.providerNameSpace) {
      if (options.parse && options.providerNameSpace) {
        options.providerNameSpace = JSON.parse(options.providerNameSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNameSpace}]);
    }
    paramPath = '' + '/' + 'publicConfigurationSchema';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicConfigurationSchema) {
      if (options.parse && options.publicConfigurationSchema) {
        options.publicConfigurationSchema = JSON.parse(options.publicConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfigurationSchema}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'publisherName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisherName) {
      if (options.parse && options.publisherName) {
        options.publisherName = JSON.parse(options.publisherName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherName}]);
    }
    paramPath = '' + '/' + 'regions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.regions) {
      if (options.parse && options.regions) {
        options.regions = JSON.parse(options.regions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.regions}]);
    }
    paramPath = '' + '/' + 'replicationCompleted';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.replicationCompleted) {
      if (options.parse && options.replicationCompleted) {
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      }
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.replicationCompleted}]);
    }
    paramPath = '' + '/' + 'sampleConfig';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sampleConfig) {
      if (options.parse && options.sampleConfig) {
        options.sampleConfig = JSON.parse(options.sampleConfig);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sampleConfig}]);
    }
    paramPath = '' + '/' + 'supportedOS';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.supportedOS) {
      if (options.parse && options.supportedOS) {
        options.supportedOS = JSON.parse(options.supportedOS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.supportedOS}]);
    }
    paramPath = '' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '' + '/' + 'version';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters set certificate
  var catparametersRegisterExtensionImageCertificate0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageCertificate0 = catparametersRegisterExtensionImageCertificate0.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersRegisterExtensionImageCertificate0 = parametersRegisterExtensionImageCertificate0.category('certificate')
  .description($('Commands to set components of extension-image in register-parameters file.'));
  setparametersRegisterExtensionImageCertificate0.command('set')
  .description($('Set certificate in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "certificate" : {\r\n             "storeLocation":"",\r\n             "storeName":"",\r\n             "thumbprintAlgorithm":"",\r\n             "thumbprintRequired":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--store-location <storeLocation>', $('Set the store-location value.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Set the thumbprint-algorithm value.'))
  .option('--thumbprint-required <thumbprintRequired>', $('Set the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/certificate';
    var paramPath = options.path + '/' + 'storeLocation';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storeLocation) {
      if (options.parse && options.storeLocation) {
        options.storeLocation = JSON.parse(options.storeLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeLocation}]);
    }
    paramPath = options.path + '/' + 'storeName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprintAlgorithm';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = options.path + '/' + 'thumbprintRequired';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprintRequired) {
      if (options.parse && options.thumbprintRequired) {
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      }
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintRequired}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters delete certificate
  var catparametersRegisterExtensionImageCertificate1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageCertificate1 = catparametersRegisterExtensionImageCertificate1.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersRegisterExtensionImageCertificate1 = parametersRegisterExtensionImageCertificate1.category('certificate')
  .description($('Commands to delete components of extension-image in register-parameters file.'));
  deleteparametersRegisterExtensionImageCertificate1.command('delete')
  .description($('Remove certificate in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "certificate" : {\r\n             "storeLocation":"",\r\n             "storeName":"",\r\n             "thumbprintAlgorithm":"",\r\n             "thumbprintRequired":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--store-location', $('Remove the store-location value.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint-algorithm', $('Remove the thumbprint-algorithm value.'))
  .option('--thumbprint-required', $('Remove the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/certificate';
    var anySubItem = false || options.storeLocation || options.storeName || options.thumbprintAlgorithm || options.thumbprintRequired;
    if (anySubItem) {
      var subItemPath = null;
      if (options.storeLocation) {
        subItemPath = options.path + '/storeLocation';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storeName) {
        subItemPath = options.path + '/storeName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprintAlgorithm) {
        subItemPath = options.path + '/thumbprintAlgorithm';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprintRequired) {
        subItemPath = options.path + '/thumbprintRequired';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //register-parameters add certificate
  var catparametersRegisterExtensionImageCertificate2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageCertificate2 = catparametersRegisterExtensionImageCertificate2.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var addparametersRegisterExtensionImageCertificate2 = parametersRegisterExtensionImageCertificate2.category('certificate')
  .description($('Commands to add components of extension-image in register-parameters file.'));
  addparametersRegisterExtensionImageCertificate2.command('add')
  .description($('Add certificate in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "certificate" : {\r\n             "storeLocation":"",\r\n             "storeName":"",\r\n             "thumbprintAlgorithm":"",\r\n             "thumbprintRequired":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--store-location <storeLocation>', $('Add the store-location value.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Add the thumbprint-algorithm value.'))
  .option('--thumbprint-required <thumbprintRequired>', $('Add the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/certificate' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/certificate' + '/' + 'storeLocation';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storeLocation) {
      if (options.parse && options.storeLocation) {
        options.storeLocation = JSON.parse(options.storeLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeLocation}]);
    }
    paramPath = '/certificate' + '/' + 'storeName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/certificate' + '/' + 'thumbprintAlgorithm';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = '/certificate' + '/' + 'thumbprintRequired';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprintRequired) {
      if (options.parse && options.thumbprintRequired) {
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      }
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintRequired}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters delete extension-endpoints
  var catparametersRegisterExtensionImageExtensionEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageExtensionEndpoints1 = catparametersRegisterExtensionImageExtensionEndpoints1.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersRegisterExtensionImageExtensionEndpoints1 = parametersRegisterExtensionImageExtensionEndpoints1.category('extension-endpoints')
  .description($('Commands to delete components of extension-image in register-parameters file.'));
  deleteparametersRegisterExtensionImageExtensionEndpoints1.command('delete')
  .description($('Remove extension-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionEndpoints" : {\r\n             "inputEndpoints":[\r\n               {\r\n                 "localPort":"",\r\n                 "name":"",\r\n                 "port":0,\r\n                 "protocol":""\r\n               }\r\n             ],\r\n             "instanceInputEndpoints":[\r\n               {\r\n                 "fixedPortMax":0,\r\n                 "fixedPortMin":0,\r\n                 "localPort":"",\r\n                 "name":"",\r\n                 "protocol":""\r\n               }\r\n             ],\r\n             "internalEndpoints":[\r\n               {\r\n                 "name":"",\r\n                 "port":0,\r\n                 "protocol":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--instance-input-endpoints', $('Remove the instance-input-endpoints value.'))
  .option('--internal-endpoints', $('Remove the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints';
    var anySubItem = false || options.inputEndpoints || options.instanceInputEndpoints || options.internalEndpoints;
    if (anySubItem) {
      var subItemPath = null;
      if (options.inputEndpoints) {
        subItemPath = options.path + '/inputEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.instanceInputEndpoints) {
        subItemPath = options.path + '/instanceInputEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.internalEndpoints) {
        subItemPath = options.path + '/internalEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //register-parameters add extension-endpoints
  var catparametersRegisterExtensionImageExtensionEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageExtensionEndpoints2 = catparametersRegisterExtensionImageExtensionEndpoints2.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var addparametersRegisterExtensionImageExtensionEndpoints2 = parametersRegisterExtensionImageExtensionEndpoints2.category('extension-endpoints')
  .description($('Commands to add components of extension-image in register-parameters file.'));
  addparametersRegisterExtensionImageExtensionEndpoints2.command('add')
  .description($('Add extension-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionEndpoints" : {\r\n             "inputEndpoints":[\r\n               {\r\n                 "localPort":"",\r\n                 "name":"",\r\n                 "port":0,\r\n                 "protocol":""\r\n               }\r\n             ],\r\n             "instanceInputEndpoints":[\r\n               {\r\n                 "fixedPortMax":0,\r\n                 "fixedPortMin":0,\r\n                 "localPort":"",\r\n                 "name":"",\r\n                 "protocol":""\r\n               }\r\n             ],\r\n             "internalEndpoints":[\r\n               {\r\n                 "name":"",\r\n                 "port":0,\r\n                 "protocol":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--instance-input-endpoints <instanceInputEndpoints>', $('Add the instance-input-endpoints value.'))
  .option('--internal-endpoints <internalEndpoints>', $('Add the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints' + '/' + 'inputEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/extensionEndpoints' + '/' + 'instanceInputEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.instanceInputEndpoints) {
      if (options.parse && options.instanceInputEndpoints) {
        options.instanceInputEndpoints = JSON.parse(options.instanceInputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.instanceInputEndpoints}]);
    }
    paramPath = '/extensionEndpoints' + '/' + 'internalEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.internalEndpoints) {
      if (options.parse && options.internalEndpoints) {
        options.internalEndpoints = JSON.parse(options.internalEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.internalEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters set input-endpoints
  var catparametersRegisterExtensionImageInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInputEndpoints0 = catparametersRegisterExtensionImageInputEndpoints0.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersRegisterExtensionImageInputEndpoints0 = parametersRegisterExtensionImageInputEndpoints0.category('input-endpoints')
  .description($('Commands to set components of extension-image in register-parameters file.'));
  setparametersRegisterExtensionImageInputEndpoints0.command('set')
  .description($('Set input-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "localPort":"",\r\n             "name":"",\r\n             "port":0,\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters delete input-endpoints
  var catparametersRegisterExtensionImageInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInputEndpoints1 = catparametersRegisterExtensionImageInputEndpoints1.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersRegisterExtensionImageInputEndpoints1 = parametersRegisterExtensionImageInputEndpoints1.category('input-endpoints')
  .description($('Commands to delete components of extension-image in register-parameters file.'));
  deleteparametersRegisterExtensionImageInputEndpoints1.command('delete')
  .description($('Remove input-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "localPort":"",\r\n             "name":"",\r\n             "port":0,\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.localPort || options.name || options.port || options.protocol;
    if (anySubItem) {
      var subItemPath = null;
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //register-parameters add input-endpoints
  var catparametersRegisterExtensionImageInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInputEndpoints2 = catparametersRegisterExtensionImageInputEndpoints2.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var addparametersRegisterExtensionImageInputEndpoints2 = parametersRegisterExtensionImageInputEndpoints2.category('input-endpoints')
  .description($('Commands to add components of extension-image in register-parameters file.'));
  addparametersRegisterExtensionImageInputEndpoints2.command('add')
  .description($('Add input-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "localPort":"",\r\n             "name":"",\r\n             "port":0,\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters set instance-input-endpoints
  var catparametersRegisterExtensionImageInstanceInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInstanceInputEndpoints0 = catparametersRegisterExtensionImageInstanceInputEndpoints0.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersRegisterExtensionImageInstanceInputEndpoints0 = parametersRegisterExtensionImageInstanceInputEndpoints0.category('instance-input-endpoints')
  .description($('Commands to set components of extension-image in register-parameters file.'));
  setparametersRegisterExtensionImageInstanceInputEndpoints0.command('set')
  .description($('Set instance-input-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "instanceInputEndpoints" : {\r\n             "fixedPortMax":0,\r\n             "fixedPortMin":0,\r\n             "localPort":"",\r\n             "name":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fixed-port-max <fixedPortMax>', $('Set the fixed-port-max value.'))
  .option('--fixed-port-min <fixedPortMin>', $('Set the fixed-port-min value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fixedPortMax';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fixedPortMax) {
      if (options.parse && options.fixedPortMax) {
        options.fixedPortMax = JSON.parse(options.fixedPortMax);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMax}]);
    }
    paramPath = options.path + '/' + 'fixedPortMin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fixedPortMin) {
      if (options.parse && options.fixedPortMin) {
        options.fixedPortMin = JSON.parse(options.fixedPortMin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMin}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters delete instance-input-endpoints
  var catparametersRegisterExtensionImageInstanceInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInstanceInputEndpoints1 = catparametersRegisterExtensionImageInstanceInputEndpoints1.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersRegisterExtensionImageInstanceInputEndpoints1 = parametersRegisterExtensionImageInstanceInputEndpoints1.category('instance-input-endpoints')
  .description($('Commands to delete components of extension-image in register-parameters file.'));
  deleteparametersRegisterExtensionImageInstanceInputEndpoints1.command('delete')
  .description($('Remove instance-input-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "instanceInputEndpoints" : {\r\n             "fixedPortMax":0,\r\n             "fixedPortMin":0,\r\n             "localPort":"",\r\n             "name":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fixed-port-max', $('Remove the fixed-port-max value.'))
  .option('--fixed-port-min', $('Remove the fixed-port-min value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fixedPortMax || options.fixedPortMin || options.localPort || options.name || options.protocol;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fixedPortMax) {
        subItemPath = options.path + '/fixedPortMax';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.fixedPortMin) {
        subItemPath = options.path + '/fixedPortMin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //register-parameters add instance-input-endpoints
  var catparametersRegisterExtensionImageInstanceInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInstanceInputEndpoints2 = catparametersRegisterExtensionImageInstanceInputEndpoints2.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var addparametersRegisterExtensionImageInstanceInputEndpoints2 = parametersRegisterExtensionImageInstanceInputEndpoints2.category('instance-input-endpoints')
  .description($('Commands to add components of extension-image in register-parameters file.'));
  addparametersRegisterExtensionImageInstanceInputEndpoints2.command('add')
  .description($('Add instance-input-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "instanceInputEndpoints" : {\r\n             "fixedPortMax":0,\r\n             "fixedPortMin":0,\r\n             "localPort":"",\r\n             "name":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fixed-port-max <fixedPortMax>', $('Add the fixed-port-max value.'))
  .option('--fixed-port-min <fixedPortMin>', $('Add the fixed-port-min value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'fixedPortMax';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fixedPortMax) {
      if (options.parse && options.fixedPortMax) {
        options.fixedPortMax = JSON.parse(options.fixedPortMax);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMax}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'fixedPortMin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fixedPortMin) {
      if (options.parse && options.fixedPortMin) {
        options.fixedPortMin = JSON.parse(options.fixedPortMin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMin}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters set internal-endpoints
  var catparametersRegisterExtensionImageInternalEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInternalEndpoints0 = catparametersRegisterExtensionImageInternalEndpoints0.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersRegisterExtensionImageInternalEndpoints0 = parametersRegisterExtensionImageInternalEndpoints0.category('internal-endpoints')
  .description($('Commands to set components of extension-image in register-parameters file.'));
  setparametersRegisterExtensionImageInternalEndpoints0.command('set')
  .description($('Set internal-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "internalEndpoints" : {\r\n             "name":"",\r\n             "port":0,\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters delete internal-endpoints
  var catparametersRegisterExtensionImageInternalEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInternalEndpoints1 = catparametersRegisterExtensionImageInternalEndpoints1.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersRegisterExtensionImageInternalEndpoints1 = parametersRegisterExtensionImageInternalEndpoints1.category('internal-endpoints')
  .description($('Commands to delete components of extension-image in register-parameters file.'));
  deleteparametersRegisterExtensionImageInternalEndpoints1.command('delete')
  .description($('Remove internal-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "internalEndpoints" : {\r\n             "name":"",\r\n             "port":0,\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.port || options.protocol;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //register-parameters add internal-endpoints
  var catparametersRegisterExtensionImageInternalEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageInternalEndpoints2 = catparametersRegisterExtensionImageInternalEndpoints2.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var addparametersRegisterExtensionImageInternalEndpoints2 = parametersRegisterExtensionImageInternalEndpoints2.category('internal-endpoints')
  .description($('Commands to add components of extension-image in register-parameters file.'));
  addparametersRegisterExtensionImageInternalEndpoints2.command('add')
  .description($('Add internal-endpoints in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "internalEndpoints" : {\r\n             "name":"",\r\n             "port":0,\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters set local-resources
  var catparametersRegisterExtensionImageLocalResources0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageLocalResources0 = catparametersRegisterExtensionImageLocalResources0.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersRegisterExtensionImageLocalResources0 = parametersRegisterExtensionImageLocalResources0.category('local-resources')
  .description($('Commands to set components of extension-image in register-parameters file.'));
  setparametersRegisterExtensionImageLocalResources0.command('set')
  .description($('Set local-resources in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localResources" : {\r\n             "name":"",\r\n             "sizeInMB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--size-in-m-b <sizeInMB>', $('Set the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sizeInMB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sizeInMB) {
      if (options.parse && options.sizeInMB) {
        options.sizeInMB = JSON.parse(options.sizeInMB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sizeInMB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //register-parameters delete local-resources
  var catparametersRegisterExtensionImageLocalResources1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageLocalResources1 = catparametersRegisterExtensionImageLocalResources1.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersRegisterExtensionImageLocalResources1 = parametersRegisterExtensionImageLocalResources1.category('local-resources')
  .description($('Commands to delete components of extension-image in register-parameters file.'));
  deleteparametersRegisterExtensionImageLocalResources1.command('delete')
  .description($('Remove local-resources in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localResources" : {\r\n             "name":"",\r\n             "sizeInMB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--size-in-m-b', $('Remove the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.sizeInMB;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sizeInMB) {
        subItemPath = options.path + '/sizeInMB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //register-parameters add local-resources
  var catparametersRegisterExtensionImageLocalResources2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersRegisterExtensionImageLocalResources2 = catparametersRegisterExtensionImageLocalResources2.category('register-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var addparametersRegisterExtensionImageLocalResources2 = parametersRegisterExtensionImageLocalResources2.category('local-resources')
  .description($('Commands to add components of extension-image in register-parameters file.'));
  addparametersRegisterExtensionImageLocalResources2.command('add')
  .description($('Add local-resources in register-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localResources" : {\r\n             "name":"",\r\n             "sizeInMB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--size-in-m-b <sizeInMB>', $('Add the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + 'sizeInMB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sizeInMB) {
      if (options.parse && options.sizeInMB) {
        options.sizeInMB = JSON.parse(options.sizeInMB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sizeInMB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  ExtensionImage Unregister
  --provider-namespace
  --type
  --version
*/
  var extensionImageUnregister = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image')
  .description($('Commands to manage your extension image.  '));
  extensionImageUnregister.command('unregister [provider-namespace] [type] [version]')
  .description($('Unregister a version of an extension that was previously registered using either the Register Extension or Update Extension APIs. An extension version is identified by the combination of its ProviderNamespace, Type and Version which are specified when registering the extension. Unregistering is only allowed for internal extensions, that is, the extensions for which the IsInternalExtension field is set to 'true' during registration or during an update. There is a quota (15) on the number of extensions that can be registered per subscription. If your subscription runs out of quota, you will wither need to unregister some of the internal extensions or contact Azure (same email used to become a publisher)  to increase the quota.'))
  .usage('[options] <provider-namespace> <type> <version>')
  .option('--provider-namespace <provider-namespace>', $('provider-namespace'))
  .option('--type <type>', $('type'))
  .option('--version <version>', $('version'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(providerNamespace, type, version, options, _) {
    if (!providerNamespace) {
      providerNamespace = cli.interaction.promptIfNotGiven($('provider-namespace : '), providerNamespace, _);
    }

    cli.output.verbose('providerNamespace = ' + providerNamespace);
    if (!type) {
      type = cli.interaction.promptIfNotGiven($('type : '), type, _);
    }

    cli.output.verbose('type = ' + type);
    if (!version) {
      version = cli.interaction.promptIfNotGiven($('version : '), version, _);
    }

    cli.output.verbose('version = ' + version);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.extensionImage.unregister(providerNamespace, type, version, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  ExtensionImage Update
  --parameters
=============================================
{
  "blockRoleUponFailure":null,
  "certificate":{
    "storeLocation":"",
    "storeName":"",
    "thumbprintAlgorithm":"",
    "thumbprintRequired":null
  },
  "companyName":"",
  "description":"",
  "disallowMajorVersionUpgrade":null,
  "eula":"",
  "extensionEndpoints":{
    "inputEndpoints":[
      {
        "localPort":"",
        "name":"",
        "port":0,
        "protocol":""
      }
    ],
    "instanceInputEndpoints":[
      {
        "fixedPortMax":0,
        "fixedPortMin":0,
        "localPort":"",
        "name":"",
        "protocol":""
      }
    ],
    "internalEndpoints":[
      {
        "name":"",
        "port":0,
        "protocol":""
      }
    ]
  },
  "homepageUri":"",
  "hostingResources":"",
  "isInternalExtension":null,
  "isJsonExtension":null,
  "label":"",
  "localResources":[
    {
      "name":"",
      "sizeInMB":null
    }
  ],
  "mediaLink":"",
  "privacyUri":"",
  "privateConfigurationSchema":"",
  "providerNameSpace":"",
  "publicConfigurationSchema":"",
  "publishedDate":null,
  "publisherName":"",
  "regions":"",
  "replicationCompleted":null,
  "sampleConfig":"",
  "supportedOS":"",
  "type":"",
  "version":""
}
*/
  var extensionImageUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image')
  .description($('Commands to manage your extension image.  '));
  extensionImageUpdate.command('update [parameters]')
  .description($('Update a new extension. It is allowed to update an extension which had already been registered with the same identity (i.e. combination of ProviderNamespace and Type) but with different version. It will fail if the extension to update has an identity that has not been registered before, or there is already an extension with the same identity and same version.'))
  .usage('[options] <parameters>')
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(parameters, options, _) {
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.extensionImage.update(parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var extensionImageUpdateupdateParameters0 = extensionImageUpdate.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  extensionImageUpdateupdateParameters0.command('generate')
  .description($('Generate extensionImageUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"blockRoleUponFailure\":null,\"certificate\":{\"storeLocation\":\"\",\"storeName\":\"\",\"thumbprintAlgorithm\":\"\",\"thumbprintRequired\":null},\"companyName\":\"\",\"description\":\"\",\"disallowMajorVersionUpgrade\":null,\"eula\":\"\",\"extensionEndpoints\":{\"inputEndpoints\":[{\"localPort\":\"\",\"name\":\"\",\"port\":0,\"protocol\":\"\"}],\"instanceInputEndpoints\":[{\"fixedPortMax\":0,\"fixedPortMin\":0,\"localPort\":\"\",\"name\":\"\",\"protocol\":\"\"}],\"internalEndpoints\":[{\"name\":\"\",\"port\":0,\"protocol\":\"\"}]},\"homepageUri\":\"\",\"hostingResources\":\"\",\"isInternalExtension\":null,\"isJsonExtension\":null,\"label\":\"\",\"localResources\":[{\"name\":\"\",\"sizeInMB\":null}],\"mediaLink\":\"\",\"privacyUri\":\"\",\"privateConfigurationSchema\":\"\",\"providerNameSpace\":\"\",\"publicConfigurationSchema\":\"\",\"publishedDate\":null,\"publisherName\":\"\",\"regions\":\"\",\"replicationCompleted\":null,\"sampleConfig\":\"\",\"supportedOS\":\"\",\"type\":\"\",\"version\":\"\"}', _);
    var filePath = 'extensionImageUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"blockRoleUponFailure\":null,\r\n\"certificate\":{\r\n\"storeLocation\":\"\",\r\n\"storeName\":\"\",\r\n\"thumbprintAlgorithm\":\"\",\r\n\"thumbprintRequired\":null\r\n},\r\n\"companyName\":\"\",\r\n\"description\":\"\",\r\n\"disallowMajorVersionUpgrade\":null,\r\n\"eula\":\"\",\r\n\"extensionEndpoints\":{\r\n\"inputEndpoints\":[\r\n{\r\n\"localPort\":\"\",\r\n\"name\":\"\",\r\n\"port\":0,\r\n\"protocol\":\"\"\r\n}\r\n],\r\n\"instanceInputEndpoints\":[\r\n{\r\n\"fixedPortMax\":0,\r\n\"fixedPortMin\":0,\r\n\"localPort\":\"\",\r\n\"name\":\"\",\r\n\"protocol\":\"\"\r\n}\r\n],\r\n\"internalEndpoints\":[\r\n{\r\n\"name\":\"\",\r\n\"port\":0,\r\n\"protocol\":\"\"\r\n}\r\n]\r\n},\r\n\"homepageUri\":\"\",\r\n\"hostingResources\":\"\",\r\n\"isInternalExtension\":null,\r\n\"isJsonExtension\":null,\r\n\"label\":\"\",\r\n\"localResources\":[\r\n{\r\n\"name\":\"\",\r\n\"sizeInMB\":null\r\n}\r\n],\r\n\"mediaLink\":\"\",\r\n\"privacyUri\":\"\",\r\n\"privateConfigurationSchema\":\"\",\r\n\"providerNameSpace\":\"\",\r\n\"publicConfigurationSchema\":\"\",\r\n\"publishedDate\":null,\r\n\"publisherName\":\"\",\r\n\"regions\":\"\",\r\n\"replicationCompleted\":null,\r\n\"sampleConfig\":\"\",\r\n\"supportedOS\":\"\",\r\n\"type\":\"\",\r\n\"version\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  extensionImageUpdateupdateParameters0.command('patch')
  .description($('Command to patch extensionImageUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set extension-image-update-parameters
  var catparametersUpdateExtensionImageExtensionImageUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageExtensionImageUpdateParameters0 = catparametersUpdateExtensionImageExtensionImageUpdateParameters0.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersUpdateExtensionImageExtensionImageUpdateParameters0 = parametersUpdateExtensionImageExtensionImageUpdateParameters0.category('extension-image-update-parameters')
  .description($('Commands to set components of extension-image in update-parameters file.'));
  setparametersUpdateExtensionImageExtensionImageUpdateParameters0.command('set')
  .description($('Set extension-image-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "blockRoleUponFailure":null,\r\n  "certificate":{\r\n    "storeLocation":"",\r\n    "storeName":"",\r\n    "thumbprintAlgorithm":"",\r\n    "thumbprintRequired":null\r\n  },\r\n  "companyName":"",\r\n  "description":"",\r\n  "disallowMajorVersionUpgrade":null,\r\n  "eula":"",\r\n  "extensionEndpoints":{\r\n    "inputEndpoints":[\r\n      {\r\n        "localPort":"",\r\n        "name":"",\r\n        "port":0,\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "instanceInputEndpoints":[\r\n      {\r\n        "fixedPortMax":0,\r\n        "fixedPortMin":0,\r\n        "localPort":"",\r\n        "name":"",\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "internalEndpoints":[\r\n      {\r\n        "name":"",\r\n        "port":0,\r\n        "protocol":""\r\n      }\r\n    ]\r\n  },\r\n  "homepageUri":"",\r\n  "hostingResources":"",\r\n  "isInternalExtension":null,\r\n  "isJsonExtension":null,\r\n  "label":"",\r\n  "localResources":[\r\n    {\r\n      "name":"",\r\n      "sizeInMB":null\r\n    }\r\n  ],\r\n  "mediaLink":"",\r\n  "privacyUri":"",\r\n  "privateConfigurationSchema":"",\r\n  "providerNameSpace":"",\r\n  "publicConfigurationSchema":"",\r\n  "publishedDate":null,\r\n  "publisherName":"",\r\n  "regions":"",\r\n  "replicationCompleted":null,\r\n  "sampleConfig":"",\r\n  "supportedOS":"",\r\n  "type":"",\r\n  "version":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--block-role-upon-failure <blockRoleUponFailure>', $('Set the block-role-upon-failure value.'))
  .option('--certificate <certificate>', $('Set the certificate value.'))
  .option('--company-name <companyName>', $('Set the company-name value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--disallow-major-version-upgrade <disallowMajorVersionUpgrade>', $('Set the disallow-major-version-upgrade value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--extension-endpoints <extensionEndpoints>', $('Set the extension-endpoints value.'))
  .option('--homepage-uri <homepageUri>', $('Set the homepage-uri value.'))
  .option('--hosting-resources <hostingResources>', $('Set the hosting-resources value.'))
  .option('--is-internal-extension <isInternalExtension>', $('Set the is-internal-extension value.'))
  .option('--is-json-extension <isJsonExtension>', $('Set the is-json-extension value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--local-resources <localResources>', $('Set the local-resources value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--private-configuration-schema <privateConfigurationSchema>', $('Set the private-configuration-schema value.'))
  .option('--provider-name-space <providerNameSpace>', $('Set the provider-name-space value.'))
  .option('--public-configuration-schema <publicConfigurationSchema>', $('Set the public-configuration-schema value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--publisher-name <publisherName>', $('Set the publisher-name value.'))
  .option('--regions <regions>', $('Set the regions value.'))
  .option('--replication-completed <replicationCompleted>', $('Set the replication-completed value.'))
  .option('--sample-config <sampleConfig>', $('Set the sample-config value.'))
  .option('--supported-os <supportedOS>', $('Set the supported-os value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'blockRoleUponFailure';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.blockRoleUponFailure) {
      if (options.parse && options.blockRoleUponFailure) {
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      }
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.blockRoleUponFailure}]);
    }
    paramPath = options.path + '/' + 'certificate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificate) {
      if (options.parse && options.certificate) {
        options.certificate = JSON.parse(options.certificate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificate}]);
    }
    paramPath = options.path + '/' + 'companyName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.companyName) {
      if (options.parse && options.companyName) {
        options.companyName = JSON.parse(options.companyName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.companyName}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'disallowMajorVersionUpgrade';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.disallowMajorVersionUpgrade) {
      if (options.parse && options.disallowMajorVersionUpgrade) {
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      }
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disallowMajorVersionUpgrade}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'extensionEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensionEndpoints) {
      if (options.parse && options.extensionEndpoints) {
        options.extensionEndpoints = JSON.parse(options.extensionEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionEndpoints}]);
    }
    paramPath = options.path + '/' + 'homepageUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.homepageUri) {
      if (options.parse && options.homepageUri) {
        options.homepageUri = JSON.parse(options.homepageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.homepageUri}]);
    }
    paramPath = options.path + '/' + 'hostingResources';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostingResources) {
      if (options.parse && options.hostingResources) {
        options.hostingResources = JSON.parse(options.hostingResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostingResources}]);
    }
    paramPath = options.path + '/' + 'isInternalExtension';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.isInternalExtension) {
      if (options.parse && options.isInternalExtension) {
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      }
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isInternalExtension}]);
    }
    paramPath = options.path + '/' + 'isJsonExtension';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.isJsonExtension) {
      if (options.parse && options.isJsonExtension) {
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      }
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isJsonExtension}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'localResources';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localResources) {
      if (options.parse && options.localResources) {
        options.localResources = JSON.parse(options.localResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localResources}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'privateConfigurationSchema';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateConfigurationSchema) {
      if (options.parse && options.privateConfigurationSchema) {
        options.privateConfigurationSchema = JSON.parse(options.privateConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfigurationSchema}]);
    }
    paramPath = options.path + '/' + 'providerNameSpace';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.providerNameSpace) {
      if (options.parse && options.providerNameSpace) {
        options.providerNameSpace = JSON.parse(options.providerNameSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNameSpace}]);
    }
    paramPath = options.path + '/' + 'publicConfigurationSchema';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicConfigurationSchema) {
      if (options.parse && options.publicConfigurationSchema) {
        options.publicConfigurationSchema = JSON.parse(options.publicConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfigurationSchema}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'publisherName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisherName) {
      if (options.parse && options.publisherName) {
        options.publisherName = JSON.parse(options.publisherName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherName}]);
    }
    paramPath = options.path + '/' + 'regions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.regions) {
      if (options.parse && options.regions) {
        options.regions = JSON.parse(options.regions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.regions}]);
    }
    paramPath = options.path + '/' + 'replicationCompleted';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.replicationCompleted) {
      if (options.parse && options.replicationCompleted) {
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      }
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.replicationCompleted}]);
    }
    paramPath = options.path + '/' + 'sampleConfig';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sampleConfig) {
      if (options.parse && options.sampleConfig) {
        options.sampleConfig = JSON.parse(options.sampleConfig);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sampleConfig}]);
    }
    paramPath = options.path + '/' + 'supportedOS';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.supportedOS) {
      if (options.parse && options.supportedOS) {
        options.supportedOS = JSON.parse(options.supportedOS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.supportedOS}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete extension-image-update-parameters
  var catparametersUpdateExtensionImageExtensionImageUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageExtensionImageUpdateParameters1 = catparametersUpdateExtensionImageExtensionImageUpdateParameters1.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersUpdateExtensionImageExtensionImageUpdateParameters1 = parametersUpdateExtensionImageExtensionImageUpdateParameters1.category('extension-image-update-parameters')
  .description($('Commands to delete components of extension-image in update-parameters file.'));
  deleteparametersUpdateExtensionImageExtensionImageUpdateParameters1.command('delete')
  .description($('Remove extension-image-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "blockRoleUponFailure":null,\r\n  "certificate":{\r\n    "storeLocation":"",\r\n    "storeName":"",\r\n    "thumbprintAlgorithm":"",\r\n    "thumbprintRequired":null\r\n  },\r\n  "companyName":"",\r\n  "description":"",\r\n  "disallowMajorVersionUpgrade":null,\r\n  "eula":"",\r\n  "extensionEndpoints":{\r\n    "inputEndpoints":[\r\n      {\r\n        "localPort":"",\r\n        "name":"",\r\n        "port":0,\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "instanceInputEndpoints":[\r\n      {\r\n        "fixedPortMax":0,\r\n        "fixedPortMin":0,\r\n        "localPort":"",\r\n        "name":"",\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "internalEndpoints":[\r\n      {\r\n        "name":"",\r\n        "port":0,\r\n        "protocol":""\r\n      }\r\n    ]\r\n  },\r\n  "homepageUri":"",\r\n  "hostingResources":"",\r\n  "isInternalExtension":null,\r\n  "isJsonExtension":null,\r\n  "label":"",\r\n  "localResources":[\r\n    {\r\n      "name":"",\r\n      "sizeInMB":null\r\n    }\r\n  ],\r\n  "mediaLink":"",\r\n  "privacyUri":"",\r\n  "privateConfigurationSchema":"",\r\n  "providerNameSpace":"",\r\n  "publicConfigurationSchema":"",\r\n  "publishedDate":null,\r\n  "publisherName":"",\r\n  "regions":"",\r\n  "replicationCompleted":null,\r\n  "sampleConfig":"",\r\n  "supportedOS":"",\r\n  "type":"",\r\n  "version":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--block-role-upon-failure', $('Remove the block-role-upon-failure value.'))
  .option('--certificate', $('Remove the certificate value.'))
  .option('--company-name', $('Remove the company-name value.'))
  .option('--description', $('Remove the description value.'))
  .option('--disallow-major-version-upgrade', $('Remove the disallow-major-version-upgrade value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--extension-endpoints', $('Remove the extension-endpoints value.'))
  .option('--homepage-uri', $('Remove the homepage-uri value.'))
  .option('--hosting-resources', $('Remove the hosting-resources value.'))
  .option('--is-internal-extension', $('Remove the is-internal-extension value.'))
  .option('--is-json-extension', $('Remove the is-json-extension value.'))
  .option('--label', $('Remove the label value.'))
  .option('--local-resources', $('Remove the local-resources value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--private-configuration-schema', $('Remove the private-configuration-schema value.'))
  .option('--provider-name-space', $('Remove the provider-name-space value.'))
  .option('--public-configuration-schema', $('Remove the public-configuration-schema value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--publisher-name', $('Remove the publisher-name value.'))
  .option('--regions', $('Remove the regions value.'))
  .option('--replication-completed', $('Remove the replication-completed value.'))
  .option('--sample-config', $('Remove the sample-config value.'))
  .option('--supported-os', $('Remove the supported-os value.'))
  .option('--type', $('Remove the type value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.blockRoleUponFailure || options.certificate || options.companyName || options.description || options.disallowMajorVersionUpgrade || options.eula || options.extensionEndpoints || options.homepageUri || options.hostingResources || options.isInternalExtension || options.isJsonExtension || options.label || options.localResources || options.mediaLink || options.privacyUri || options.privateConfigurationSchema || options.providerNameSpace || options.publicConfigurationSchema || options.publishedDate || options.publisherName || options.regions || options.replicationCompleted || options.sampleConfig || options.supportedOS || options.type || options.version;
    if (anySubItem) {
      var subItemPath = null;
      if (options.blockRoleUponFailure) {
        subItemPath = options.path + '/blockRoleUponFailure';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.certificate) {
        subItemPath = options.path + '/certificate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.companyName) {
        subItemPath = options.path + '/companyName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disallowMajorVersionUpgrade) {
        subItemPath = options.path + '/disallowMajorVersionUpgrade';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        subItemPath = options.path + '/eula';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionEndpoints) {
        subItemPath = options.path + '/extensionEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.homepageUri) {
        subItemPath = options.path + '/homepageUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostingResources) {
        subItemPath = options.path + '/hostingResources';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isInternalExtension) {
        subItemPath = options.path + '/isInternalExtension';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isJsonExtension) {
        subItemPath = options.path + '/isJsonExtension';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localResources) {
        subItemPath = options.path + '/localResources';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        subItemPath = options.path + '/privacyUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateConfigurationSchema) {
        subItemPath = options.path + '/privateConfigurationSchema';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.providerNameSpace) {
        subItemPath = options.path + '/providerNameSpace';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicConfigurationSchema) {
        subItemPath = options.path + '/publicConfigurationSchema';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        subItemPath = options.path + '/publishedDate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisherName) {
        subItemPath = options.path + '/publisherName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.regions) {
        subItemPath = options.path + '/regions';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.replicationCompleted) {
        subItemPath = options.path + '/replicationCompleted';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sampleConfig) {
        subItemPath = options.path + '/sampleConfig';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.supportedOS) {
        subItemPath = options.path + '/supportedOS';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add extension-image-update-parameters
  var catparametersUpdateExtensionImageExtensionImageUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageExtensionImageUpdateParameters2 = catparametersUpdateExtensionImageExtensionImageUpdateParameters2.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var addparametersUpdateExtensionImageExtensionImageUpdateParameters2 = parametersUpdateExtensionImageExtensionImageUpdateParameters2.category('extension-image-update-parameters')
  .description($('Commands to add components of extension-image in update-parameters file.'));
  addparametersUpdateExtensionImageExtensionImageUpdateParameters2.command('add')
  .description($('Add extension-image-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "blockRoleUponFailure":null,\r\n  "certificate":{\r\n    "storeLocation":"",\r\n    "storeName":"",\r\n    "thumbprintAlgorithm":"",\r\n    "thumbprintRequired":null\r\n  },\r\n  "companyName":"",\r\n  "description":"",\r\n  "disallowMajorVersionUpgrade":null,\r\n  "eula":"",\r\n  "extensionEndpoints":{\r\n    "inputEndpoints":[\r\n      {\r\n        "localPort":"",\r\n        "name":"",\r\n        "port":0,\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "instanceInputEndpoints":[\r\n      {\r\n        "fixedPortMax":0,\r\n        "fixedPortMin":0,\r\n        "localPort":"",\r\n        "name":"",\r\n        "protocol":""\r\n      }\r\n    ],\r\n    "internalEndpoints":[\r\n      {\r\n        "name":"",\r\n        "port":0,\r\n        "protocol":""\r\n      }\r\n    ]\r\n  },\r\n  "homepageUri":"",\r\n  "hostingResources":"",\r\n  "isInternalExtension":null,\r\n  "isJsonExtension":null,\r\n  "label":"",\r\n  "localResources":[\r\n    {\r\n      "name":"",\r\n      "sizeInMB":null\r\n    }\r\n  ],\r\n  "mediaLink":"",\r\n  "privacyUri":"",\r\n  "privateConfigurationSchema":"",\r\n  "providerNameSpace":"",\r\n  "publicConfigurationSchema":"",\r\n  "publishedDate":null,\r\n  "publisherName":"",\r\n  "regions":"",\r\n  "replicationCompleted":null,\r\n  "sampleConfig":"",\r\n  "supportedOS":"",\r\n  "type":"",\r\n  "version":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--block-role-upon-failure <blockRoleUponFailure>', $('Add the block-role-upon-failure value.'))
  .option('--certificate <certificate>', $('Add the certificate value.'))
  .option('--company-name <companyName>', $('Add the company-name value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--disallow-major-version-upgrade <disallowMajorVersionUpgrade>', $('Add the disallow-major-version-upgrade value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--extension-endpoints <extensionEndpoints>', $('Add the extension-endpoints value.'))
  .option('--homepage-uri <homepageUri>', $('Add the homepage-uri value.'))
  .option('--hosting-resources <hostingResources>', $('Add the hosting-resources value.'))
  .option('--is-internal-extension <isInternalExtension>', $('Add the is-internal-extension value.'))
  .option('--is-json-extension <isJsonExtension>', $('Add the is-json-extension value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--local-resources <localResources>', $('Add the local-resources value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--private-configuration-schema <privateConfigurationSchema>', $('Add the private-configuration-schema value.'))
  .option('--provider-name-space <providerNameSpace>', $('Add the provider-name-space value.'))
  .option('--public-configuration-schema <publicConfigurationSchema>', $('Add the public-configuration-schema value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--publisher-name <publisherName>', $('Add the publisher-name value.'))
  .option('--regions <regions>', $('Add the regions value.'))
  .option('--replication-completed <replicationCompleted>', $('Add the replication-completed value.'))
  .option('--sample-config <sampleConfig>', $('Add the sample-config value.'))
  .option('--supported-os <supportedOS>', $('Add the supported-os value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'blockRoleUponFailure';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.blockRoleUponFailure) {
      if (options.parse && options.blockRoleUponFailure) {
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      }
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.blockRoleUponFailure}]);
    }
    paramPath = '' + '/' + 'certificate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificate) {
      if (options.parse && options.certificate) {
        options.certificate = JSON.parse(options.certificate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificate}]);
    }
    paramPath = '' + '/' + 'companyName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.companyName) {
      if (options.parse && options.companyName) {
        options.companyName = JSON.parse(options.companyName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.companyName}]);
    }
    paramPath = '' + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'disallowMajorVersionUpgrade';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.disallowMajorVersionUpgrade) {
      if (options.parse && options.disallowMajorVersionUpgrade) {
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      }
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disallowMajorVersionUpgrade}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'extensionEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensionEndpoints) {
      if (options.parse && options.extensionEndpoints) {
        options.extensionEndpoints = JSON.parse(options.extensionEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionEndpoints}]);
    }
    paramPath = '' + '/' + 'homepageUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.homepageUri) {
      if (options.parse && options.homepageUri) {
        options.homepageUri = JSON.parse(options.homepageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.homepageUri}]);
    }
    paramPath = '' + '/' + 'hostingResources';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostingResources) {
      if (options.parse && options.hostingResources) {
        options.hostingResources = JSON.parse(options.hostingResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostingResources}]);
    }
    paramPath = '' + '/' + 'isInternalExtension';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.isInternalExtension) {
      if (options.parse && options.isInternalExtension) {
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      }
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isInternalExtension}]);
    }
    paramPath = '' + '/' + 'isJsonExtension';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.isJsonExtension) {
      if (options.parse && options.isJsonExtension) {
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      }
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isJsonExtension}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'localResources';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localResources) {
      if (options.parse && options.localResources) {
        options.localResources = JSON.parse(options.localResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localResources}]);
    }
    paramPath = '' + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'privateConfigurationSchema';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateConfigurationSchema) {
      if (options.parse && options.privateConfigurationSchema) {
        options.privateConfigurationSchema = JSON.parse(options.privateConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfigurationSchema}]);
    }
    paramPath = '' + '/' + 'providerNameSpace';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.providerNameSpace) {
      if (options.parse && options.providerNameSpace) {
        options.providerNameSpace = JSON.parse(options.providerNameSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNameSpace}]);
    }
    paramPath = '' + '/' + 'publicConfigurationSchema';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicConfigurationSchema) {
      if (options.parse && options.publicConfigurationSchema) {
        options.publicConfigurationSchema = JSON.parse(options.publicConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfigurationSchema}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'publisherName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisherName) {
      if (options.parse && options.publisherName) {
        options.publisherName = JSON.parse(options.publisherName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherName}]);
    }
    paramPath = '' + '/' + 'regions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.regions) {
      if (options.parse && options.regions) {
        options.regions = JSON.parse(options.regions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.regions}]);
    }
    paramPath = '' + '/' + 'replicationCompleted';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.replicationCompleted) {
      if (options.parse && options.replicationCompleted) {
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      }
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.replicationCompleted}]);
    }
    paramPath = '' + '/' + 'sampleConfig';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sampleConfig) {
      if (options.parse && options.sampleConfig) {
        options.sampleConfig = JSON.parse(options.sampleConfig);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sampleConfig}]);
    }
    paramPath = '' + '/' + 'supportedOS';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.supportedOS) {
      if (options.parse && options.supportedOS) {
        options.supportedOS = JSON.parse(options.supportedOS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.supportedOS}]);
    }
    paramPath = '' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '' + '/' + 'version';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set certificate
  var catparametersUpdateExtensionImageCertificate0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageCertificate0 = catparametersUpdateExtensionImageCertificate0.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersUpdateExtensionImageCertificate0 = parametersUpdateExtensionImageCertificate0.category('certificate')
  .description($('Commands to set components of extension-image in update-parameters file.'));
  setparametersUpdateExtensionImageCertificate0.command('set')
  .description($('Set certificate in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "certificate" : {\r\n             "storeLocation":"",\r\n             "storeName":"",\r\n             "thumbprintAlgorithm":"",\r\n             "thumbprintRequired":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--store-location <storeLocation>', $('Set the store-location value.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Set the thumbprint-algorithm value.'))
  .option('--thumbprint-required <thumbprintRequired>', $('Set the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/certificate';
    var paramPath = options.path + '/' + 'storeLocation';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storeLocation) {
      if (options.parse && options.storeLocation) {
        options.storeLocation = JSON.parse(options.storeLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeLocation}]);
    }
    paramPath = options.path + '/' + 'storeName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprintAlgorithm';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = options.path + '/' + 'thumbprintRequired';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprintRequired) {
      if (options.parse && options.thumbprintRequired) {
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      }
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintRequired}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete certificate
  var catparametersUpdateExtensionImageCertificate1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageCertificate1 = catparametersUpdateExtensionImageCertificate1.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersUpdateExtensionImageCertificate1 = parametersUpdateExtensionImageCertificate1.category('certificate')
  .description($('Commands to delete components of extension-image in update-parameters file.'));
  deleteparametersUpdateExtensionImageCertificate1.command('delete')
  .description($('Remove certificate in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "certificate" : {\r\n             "storeLocation":"",\r\n             "storeName":"",\r\n             "thumbprintAlgorithm":"",\r\n             "thumbprintRequired":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--store-location', $('Remove the store-location value.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint-algorithm', $('Remove the thumbprint-algorithm value.'))
  .option('--thumbprint-required', $('Remove the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/certificate';
    var anySubItem = false || options.storeLocation || options.storeName || options.thumbprintAlgorithm || options.thumbprintRequired;
    if (anySubItem) {
      var subItemPath = null;
      if (options.storeLocation) {
        subItemPath = options.path + '/storeLocation';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storeName) {
        subItemPath = options.path + '/storeName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprintAlgorithm) {
        subItemPath = options.path + '/thumbprintAlgorithm';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprintRequired) {
        subItemPath = options.path + '/thumbprintRequired';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add certificate
  var catparametersUpdateExtensionImageCertificate2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageCertificate2 = catparametersUpdateExtensionImageCertificate2.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var addparametersUpdateExtensionImageCertificate2 = parametersUpdateExtensionImageCertificate2.category('certificate')
  .description($('Commands to add components of extension-image in update-parameters file.'));
  addparametersUpdateExtensionImageCertificate2.command('add')
  .description($('Add certificate in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "certificate" : {\r\n             "storeLocation":"",\r\n             "storeName":"",\r\n             "thumbprintAlgorithm":"",\r\n             "thumbprintRequired":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--store-location <storeLocation>', $('Add the store-location value.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Add the thumbprint-algorithm value.'))
  .option('--thumbprint-required <thumbprintRequired>', $('Add the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/certificate' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/certificate' + '/' + 'storeLocation';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storeLocation) {
      if (options.parse && options.storeLocation) {
        options.storeLocation = JSON.parse(options.storeLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeLocation}]);
    }
    paramPath = '/certificate' + '/' + 'storeName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/certificate' + '/' + 'thumbprintAlgorithm';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = '/certificate' + '/' + 'thumbprintRequired';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprintRequired) {
      if (options.parse && options.thumbprintRequired) {
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      }
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintRequired}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete extension-endpoints
  var catparametersUpdateExtensionImageExtensionEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageExtensionEndpoints1 = catparametersUpdateExtensionImageExtensionEndpoints1.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersUpdateExtensionImageExtensionEndpoints1 = parametersUpdateExtensionImageExtensionEndpoints1.category('extension-endpoints')
  .description($('Commands to delete components of extension-image in update-parameters file.'));
  deleteparametersUpdateExtensionImageExtensionEndpoints1.command('delete')
  .description($('Remove extension-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionEndpoints" : {\r\n             "inputEndpoints":[\r\n               {\r\n                 "localPort":"",\r\n                 "name":"",\r\n                 "port":0,\r\n                 "protocol":""\r\n               }\r\n             ],\r\n             "instanceInputEndpoints":[\r\n               {\r\n                 "fixedPortMax":0,\r\n                 "fixedPortMin":0,\r\n                 "localPort":"",\r\n                 "name":"",\r\n                 "protocol":""\r\n               }\r\n             ],\r\n             "internalEndpoints":[\r\n               {\r\n                 "name":"",\r\n                 "port":0,\r\n                 "protocol":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--instance-input-endpoints', $('Remove the instance-input-endpoints value.'))
  .option('--internal-endpoints', $('Remove the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints';
    var anySubItem = false || options.inputEndpoints || options.instanceInputEndpoints || options.internalEndpoints;
    if (anySubItem) {
      var subItemPath = null;
      if (options.inputEndpoints) {
        subItemPath = options.path + '/inputEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.instanceInputEndpoints) {
        subItemPath = options.path + '/instanceInputEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.internalEndpoints) {
        subItemPath = options.path + '/internalEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add extension-endpoints
  var catparametersUpdateExtensionImageExtensionEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageExtensionEndpoints2 = catparametersUpdateExtensionImageExtensionEndpoints2.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var addparametersUpdateExtensionImageExtensionEndpoints2 = parametersUpdateExtensionImageExtensionEndpoints2.category('extension-endpoints')
  .description($('Commands to add components of extension-image in update-parameters file.'));
  addparametersUpdateExtensionImageExtensionEndpoints2.command('add')
  .description($('Add extension-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionEndpoints" : {\r\n             "inputEndpoints":[\r\n               {\r\n                 "localPort":"",\r\n                 "name":"",\r\n                 "port":0,\r\n                 "protocol":""\r\n               }\r\n             ],\r\n             "instanceInputEndpoints":[\r\n               {\r\n                 "fixedPortMax":0,\r\n                 "fixedPortMin":0,\r\n                 "localPort":"",\r\n                 "name":"",\r\n                 "protocol":""\r\n               }\r\n             ],\r\n             "internalEndpoints":[\r\n               {\r\n                 "name":"",\r\n                 "port":0,\r\n                 "protocol":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--instance-input-endpoints <instanceInputEndpoints>', $('Add the instance-input-endpoints value.'))
  .option('--internal-endpoints <internalEndpoints>', $('Add the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints' + '/' + 'inputEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/extensionEndpoints' + '/' + 'instanceInputEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.instanceInputEndpoints) {
      if (options.parse && options.instanceInputEndpoints) {
        options.instanceInputEndpoints = JSON.parse(options.instanceInputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.instanceInputEndpoints}]);
    }
    paramPath = '/extensionEndpoints' + '/' + 'internalEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.internalEndpoints) {
      if (options.parse && options.internalEndpoints) {
        options.internalEndpoints = JSON.parse(options.internalEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.internalEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set input-endpoints
  var catparametersUpdateExtensionImageInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInputEndpoints0 = catparametersUpdateExtensionImageInputEndpoints0.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersUpdateExtensionImageInputEndpoints0 = parametersUpdateExtensionImageInputEndpoints0.category('input-endpoints')
  .description($('Commands to set components of extension-image in update-parameters file.'));
  setparametersUpdateExtensionImageInputEndpoints0.command('set')
  .description($('Set input-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "localPort":"",\r\n             "name":"",\r\n             "port":0,\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete input-endpoints
  var catparametersUpdateExtensionImageInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInputEndpoints1 = catparametersUpdateExtensionImageInputEndpoints1.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersUpdateExtensionImageInputEndpoints1 = parametersUpdateExtensionImageInputEndpoints1.category('input-endpoints')
  .description($('Commands to delete components of extension-image in update-parameters file.'));
  deleteparametersUpdateExtensionImageInputEndpoints1.command('delete')
  .description($('Remove input-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "localPort":"",\r\n             "name":"",\r\n             "port":0,\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.localPort || options.name || options.port || options.protocol;
    if (anySubItem) {
      var subItemPath = null;
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add input-endpoints
  var catparametersUpdateExtensionImageInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInputEndpoints2 = catparametersUpdateExtensionImageInputEndpoints2.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var addparametersUpdateExtensionImageInputEndpoints2 = parametersUpdateExtensionImageInputEndpoints2.category('input-endpoints')
  .description($('Commands to add components of extension-image in update-parameters file.'));
  addparametersUpdateExtensionImageInputEndpoints2.command('add')
  .description($('Add input-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "localPort":"",\r\n             "name":"",\r\n             "port":0,\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set instance-input-endpoints
  var catparametersUpdateExtensionImageInstanceInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInstanceInputEndpoints0 = catparametersUpdateExtensionImageInstanceInputEndpoints0.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersUpdateExtensionImageInstanceInputEndpoints0 = parametersUpdateExtensionImageInstanceInputEndpoints0.category('instance-input-endpoints')
  .description($('Commands to set components of extension-image in update-parameters file.'));
  setparametersUpdateExtensionImageInstanceInputEndpoints0.command('set')
  .description($('Set instance-input-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "instanceInputEndpoints" : {\r\n             "fixedPortMax":0,\r\n             "fixedPortMin":0,\r\n             "localPort":"",\r\n             "name":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fixed-port-max <fixedPortMax>', $('Set the fixed-port-max value.'))
  .option('--fixed-port-min <fixedPortMin>', $('Set the fixed-port-min value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fixedPortMax';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fixedPortMax) {
      if (options.parse && options.fixedPortMax) {
        options.fixedPortMax = JSON.parse(options.fixedPortMax);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMax}]);
    }
    paramPath = options.path + '/' + 'fixedPortMin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fixedPortMin) {
      if (options.parse && options.fixedPortMin) {
        options.fixedPortMin = JSON.parse(options.fixedPortMin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMin}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete instance-input-endpoints
  var catparametersUpdateExtensionImageInstanceInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInstanceInputEndpoints1 = catparametersUpdateExtensionImageInstanceInputEndpoints1.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersUpdateExtensionImageInstanceInputEndpoints1 = parametersUpdateExtensionImageInstanceInputEndpoints1.category('instance-input-endpoints')
  .description($('Commands to delete components of extension-image in update-parameters file.'));
  deleteparametersUpdateExtensionImageInstanceInputEndpoints1.command('delete')
  .description($('Remove instance-input-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "instanceInputEndpoints" : {\r\n             "fixedPortMax":0,\r\n             "fixedPortMin":0,\r\n             "localPort":"",\r\n             "name":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fixed-port-max', $('Remove the fixed-port-max value.'))
  .option('--fixed-port-min', $('Remove the fixed-port-min value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fixedPortMax || options.fixedPortMin || options.localPort || options.name || options.protocol;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fixedPortMax) {
        subItemPath = options.path + '/fixedPortMax';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.fixedPortMin) {
        subItemPath = options.path + '/fixedPortMin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add instance-input-endpoints
  var catparametersUpdateExtensionImageInstanceInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInstanceInputEndpoints2 = catparametersUpdateExtensionImageInstanceInputEndpoints2.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var addparametersUpdateExtensionImageInstanceInputEndpoints2 = parametersUpdateExtensionImageInstanceInputEndpoints2.category('instance-input-endpoints')
  .description($('Commands to add components of extension-image in update-parameters file.'));
  addparametersUpdateExtensionImageInstanceInputEndpoints2.command('add')
  .description($('Add instance-input-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "instanceInputEndpoints" : {\r\n             "fixedPortMax":0,\r\n             "fixedPortMin":0,\r\n             "localPort":"",\r\n             "name":"",\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fixed-port-max <fixedPortMax>', $('Add the fixed-port-max value.'))
  .option('--fixed-port-min <fixedPortMin>', $('Add the fixed-port-min value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'fixedPortMax';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fixedPortMax) {
      if (options.parse && options.fixedPortMax) {
        options.fixedPortMax = JSON.parse(options.fixedPortMax);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMax}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'fixedPortMin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fixedPortMin) {
      if (options.parse && options.fixedPortMin) {
        options.fixedPortMin = JSON.parse(options.fixedPortMin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMin}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set internal-endpoints
  var catparametersUpdateExtensionImageInternalEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInternalEndpoints0 = catparametersUpdateExtensionImageInternalEndpoints0.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersUpdateExtensionImageInternalEndpoints0 = parametersUpdateExtensionImageInternalEndpoints0.category('internal-endpoints')
  .description($('Commands to set components of extension-image in update-parameters file.'));
  setparametersUpdateExtensionImageInternalEndpoints0.command('set')
  .description($('Set internal-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "internalEndpoints" : {\r\n             "name":"",\r\n             "port":0,\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete internal-endpoints
  var catparametersUpdateExtensionImageInternalEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInternalEndpoints1 = catparametersUpdateExtensionImageInternalEndpoints1.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersUpdateExtensionImageInternalEndpoints1 = parametersUpdateExtensionImageInternalEndpoints1.category('internal-endpoints')
  .description($('Commands to delete components of extension-image in update-parameters file.'));
  deleteparametersUpdateExtensionImageInternalEndpoints1.command('delete')
  .description($('Remove internal-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "internalEndpoints" : {\r\n             "name":"",\r\n             "port":0,\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.port || options.protocol;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add internal-endpoints
  var catparametersUpdateExtensionImageInternalEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageInternalEndpoints2 = catparametersUpdateExtensionImageInternalEndpoints2.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var addparametersUpdateExtensionImageInternalEndpoints2 = parametersUpdateExtensionImageInternalEndpoints2.category('internal-endpoints')
  .description($('Commands to add components of extension-image in update-parameters file.'));
  addparametersUpdateExtensionImageInternalEndpoints2.command('add')
  .description($('Add internal-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "internalEndpoints" : {\r\n             "name":"",\r\n             "port":0,\r\n             "protocol":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set local-resources
  var catparametersUpdateExtensionImageLocalResources0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageLocalResources0 = catparametersUpdateExtensionImageLocalResources0.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var setparametersUpdateExtensionImageLocalResources0 = parametersUpdateExtensionImageLocalResources0.category('local-resources')
  .description($('Commands to set components of extension-image in update-parameters file.'));
  setparametersUpdateExtensionImageLocalResources0.command('set')
  .description($('Set local-resources in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localResources" : {\r\n             "name":"",\r\n             "sizeInMB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--size-in-m-b <sizeInMB>', $('Set the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sizeInMB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sizeInMB) {
      if (options.parse && options.sizeInMB) {
        options.sizeInMB = JSON.parse(options.sizeInMB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sizeInMB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete local-resources
  var catparametersUpdateExtensionImageLocalResources1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageLocalResources1 = catparametersUpdateExtensionImageLocalResources1.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var deleteparametersUpdateExtensionImageLocalResources1 = parametersUpdateExtensionImageLocalResources1.category('local-resources')
  .description($('Commands to delete components of extension-image in update-parameters file.'));
  deleteparametersUpdateExtensionImageLocalResources1.command('delete')
  .description($('Remove local-resources in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localResources" : {\r\n             "name":"",\r\n             "sizeInMB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--size-in-m-b', $('Remove the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.sizeInMB;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sizeInMB) {
        subItemPath = options.path + '/sizeInMB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add local-resources
  var catparametersUpdateExtensionImageLocalResources2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersUpdateExtensionImageLocalResources2 = catparametersUpdateExtensionImageLocalResources2.category('update-parameters')
  .description($('Commands to manage configuration of extension-image in the parameter file.'));
  var addparametersUpdateExtensionImageLocalResources2 = parametersUpdateExtensionImageLocalResources2.category('local-resources')
  .description($('Commands to add components of extension-image in update-parameters file.'));
  addparametersUpdateExtensionImageLocalResources2.command('add')
  .description($('Add local-resources in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localResources" : {\r\n             "name":"",\r\n             "sizeInMB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--size-in-m-b <sizeInMB>', $('Add the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + 'sizeInMB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sizeInMB) {
      if (options.parse && options.sizeInMB) {
        options.sizeInMB = JSON.parse(options.sizeInMB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sizeInMB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  HostedService AddExtension
  --service-name
  --parameters
=============================================
{
  "id":"",
  "privateConfiguration":"",
  "providerNamespace":"",
  "publicConfiguration":"",
  "thumbprint":"",
  "thumbprintAlgorithm":"",
  "type":"",
  "version":""
}
*/
  var hostedServiceAddExtension = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceAddExtension.command('add-extension [service-name] [id] [private-configuration] [provider-namespace] [public-configuration] [thumbprint] [thumbprint-algorithm] [type] [version]')
  .description($('The Add Extension operation adds an available extension to your cloud service. In Azure, a process can run as an extension of a cloud service. For example, Remote Desktop Access or the Azure Diagnostics Agent can run as extensions to the cloud service. You can find the available extension by using the List Available Extensions operation.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn169558.aspx for more information)'))
  .usage('[options] <service-name> <id> <private-configuration> <provider-namespace> <public-configuration> <thumbprint> <thumbprint-algorithm> <type> <version>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--id <id>', $('id'))
  .option('--private-configuration <private-configuration>', $('private-configuration'))
  .option('--provider-namespace <provider-namespace>', $('provider-namespace'))
  .option('--public-configuration <public-configuration>', $('public-configuration'))
  .option('--thumbprint <thumbprint>', $('thumbprint'))
  .option('--thumbprint-algorithm <thumbprint-algorithm>', $('thumbprint-algorithm'))
  .option('--type <type>', $('type'))
  .option('--version <version>', $('version'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, id, privateConfiguration, providerNamespace, publicConfiguration, thumbprint, thumbprintAlgorithm, type, version, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.verbose('id = ' + id);
      parametersObj.id = id;
      cli.output.verbose('privateConfiguration = ' + privateConfiguration);
      parametersObj.privateConfiguration = privateConfiguration;
      cli.output.verbose('providerNamespace = ' + providerNamespace);
      parametersObj.providerNamespace = providerNamespace;
      cli.output.verbose('publicConfiguration = ' + publicConfiguration);
      parametersObj.publicConfiguration = publicConfiguration;
      cli.output.verbose('thumbprint = ' + thumbprint);
      parametersObj.thumbprint = thumbprint;
      cli.output.verbose('thumbprintAlgorithm = ' + thumbprintAlgorithm);
      parametersObj.thumbprintAlgorithm = thumbprintAlgorithm;
      cli.output.verbose('type = ' + type);
      parametersObj.type = type;
      cli.output.verbose('version = ' + version);
      parametersObj.version = version;
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedService.addExtension(serviceName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService CheckNameAvailability
  --service-name
*/
  var hostedServiceCheckNameAvailability = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceCheckNameAvailability.command('check-name-availability [service-name]')
  .description($('The Check Hosted Service Name Availability operation checks for the availability of the specified cloud service name.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154116.aspx for more information)'))
  .usage('[options] <service-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedService.checkNameAvailability(serviceName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService Create
  --parameters
=============================================
{
  "affinityGroup":"",
  "description":"",
  "extendedProperties":{
  },
  "label":"",
  "location":"",
  "reverseDnsFqdn":"",
  "serviceName":""
}
*/
  var hostedServiceCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceCreate.command('create [parameters]')
  .description($('The Create Hosted Service operation creates a new cloud service in Azure.  (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441304.aspx for more information)'))
  .usage('[options] <parameters>')
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(parameters, options, _) {
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedService.create(parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var hostedServiceCreatecreateParameters0 = hostedServiceCreate.category('create-parameters')
  .description($('Commands to manage configuration of hosted-service in the parameter file.'));
  hostedServiceCreatecreateParameters0.command('generate')
  .description($('Generate hostedServiceCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"affinityGroup\":\"\",\"description\":\"\",\"extendedProperties\":{},\"label\":\"\",\"location\":\"\",\"reverseDnsFqdn\":\"\",\"serviceName\":\"\"}', _);
    var filePath = 'hostedServiceCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"affinityGroup\":\"\",\r\n\"description\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"label\":\"\",\r\n\"location\":\"\",\r\n\"reverseDnsFqdn\":\"\",\r\n\"serviceName\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  hostedServiceCreatecreateParameters0.command('patch')
  .description($('Command to patch hostedServiceCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set hosted-service-create-parameters
  var catparametersCreateHostedServiceHostedServiceCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersCreateHostedServiceHostedServiceCreateParameters0 = catparametersCreateHostedServiceHostedServiceCreateParameters0.category('create-parameters')
  .description($('Commands to manage configuration of hosted-service in the parameter file.'));
  var setparametersCreateHostedServiceHostedServiceCreateParameters0 = parametersCreateHostedServiceHostedServiceCreateParameters0.category('hosted-service-create-parameters')
  .description($('Commands to set components of hosted-service in create-parameters file.'));
  setparametersCreateHostedServiceHostedServiceCreateParameters0.command('set')
  .description($('Set hosted-service-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "affinityGroup":"",\r\n  "description":"",\r\n  "extendedProperties":{\r\n  },\r\n  "label":"",\r\n  "location":"",\r\n  "reverseDnsFqdn":"",\r\n  "serviceName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--affinity-group <affinityGroup>', $('Set the affinity-group value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--reverse-dns-fqdn <reverseDnsFqdn>', $('Set the reverse-dns-fqdn value.'))
  .option('--service-name <serviceName>', $('Set the service-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'affinityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.affinityGroup) {
      if (options.parse && options.affinityGroup) {
        options.affinityGroup = JSON.parse(options.affinityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.affinityGroup}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'reverseDnsFqdn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.reverseDnsFqdn) {
      if (options.parse && options.reverseDnsFqdn) {
        options.reverseDnsFqdn = JSON.parse(options.reverseDnsFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reverseDnsFqdn}]);
    }
    paramPath = options.path + '/' + 'serviceName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.serviceName) {
      if (options.parse && options.serviceName) {
        options.serviceName = JSON.parse(options.serviceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serviceName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete hosted-service-create-parameters
  var catparametersCreateHostedServiceHostedServiceCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersCreateHostedServiceHostedServiceCreateParameters1 = catparametersCreateHostedServiceHostedServiceCreateParameters1.category('create-parameters')
  .description($('Commands to manage configuration of hosted-service in the parameter file.'));
  var deleteparametersCreateHostedServiceHostedServiceCreateParameters1 = parametersCreateHostedServiceHostedServiceCreateParameters1.category('hosted-service-create-parameters')
  .description($('Commands to delete components of hosted-service in create-parameters file.'));
  deleteparametersCreateHostedServiceHostedServiceCreateParameters1.command('delete')
  .description($('Remove hosted-service-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "affinityGroup":"",\r\n  "description":"",\r\n  "extendedProperties":{\r\n  },\r\n  "label":"",\r\n  "location":"",\r\n  "reverseDnsFqdn":"",\r\n  "serviceName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--affinity-group', $('Remove the affinity-group value.'))
  .option('--description', $('Remove the description value.'))
  .option('--extended-properties', $('Remove the extended-properties value.'))
  .option('--label', $('Remove the label value.'))
  .option('--location', $('Remove the location value.'))
  .option('--reverse-dns-fqdn', $('Remove the reverse-dns-fqdn value.'))
  .option('--service-name', $('Remove the service-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.affinityGroup || options.description || options.extendedProperties || options.label || options.location || options.reverseDnsFqdn || options.serviceName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.affinityGroup) {
        subItemPath = options.path + '/affinityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extendedProperties) {
        subItemPath = options.path + '/extendedProperties';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.reverseDnsFqdn) {
        subItemPath = options.path + '/reverseDnsFqdn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.serviceName) {
        subItemPath = options.path + '/serviceName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add hosted-service-create-parameters
  var catparametersCreateHostedServiceHostedServiceCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersCreateHostedServiceHostedServiceCreateParameters2 = catparametersCreateHostedServiceHostedServiceCreateParameters2.category('create-parameters')
  .description($('Commands to manage configuration of hosted-service in the parameter file.'));
  var addparametersCreateHostedServiceHostedServiceCreateParameters2 = parametersCreateHostedServiceHostedServiceCreateParameters2.category('hosted-service-create-parameters')
  .description($('Commands to add components of hosted-service in create-parameters file.'));
  addparametersCreateHostedServiceHostedServiceCreateParameters2.command('add')
  .description($('Add hosted-service-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "affinityGroup":"",\r\n  "description":"",\r\n  "extendedProperties":{\r\n  },\r\n  "label":"",\r\n  "location":"",\r\n  "reverseDnsFqdn":"",\r\n  "serviceName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--affinity-group <affinityGroup>', $('Add the affinity-group value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--reverse-dns-fqdn <reverseDnsFqdn>', $('Add the reverse-dns-fqdn value.'))
  .option('--service-name <serviceName>', $('Add the service-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'affinityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.affinityGroup) {
      if (options.parse && options.affinityGroup) {
        options.affinityGroup = JSON.parse(options.affinityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.affinityGroup}]);
    }
    paramPath = '' + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '' + '/' + 'reverseDnsFqdn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.reverseDnsFqdn) {
      if (options.parse && options.reverseDnsFqdn) {
        options.reverseDnsFqdn = JSON.parse(options.reverseDnsFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reverseDnsFqdn}]);
    }
    paramPath = '' + '/' + 'serviceName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.serviceName) {
      if (options.parse && options.serviceName) {
        options.serviceName = JSON.parse(options.serviceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serviceName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  HostedService Delete
  --service-name
*/
  var hostedServiceDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceDelete.command('delete [service-name]')
  .description($('The Delete Hosted Service operation deletes the specified cloud service from Azure.  (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441305.aspx for more information)'))
  .usage('[options] <service-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedService.deleteMethod(serviceName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService DeleteAll
  --service-name
*/
  var hostedServiceDeleteAll = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceDeleteAll.command('delete-all [service-name]')
  .description($('The DeleteAll Hosted Service operation deletes the specified cloud service as well as operating system disk, attached data disks, and the source blobs for the disks from storage from Microsoft Azure. (see 'http://msdn.microsoft.com/en-us/library/windowsazure/gg441305.aspx' for more information)'))
  .usage('[options] <service-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedService.deleteAll(serviceName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService DeleteExtension
  --service-name
  --extension-id
*/
  var hostedServiceDeleteExtension = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceDeleteExtension.command('delete-extension [service-name] [extension-id]')
  .description($('The Delete Extension operation deletes the specified extension from a cloud service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn169560.aspx for more information)'))
  .usage('[options] <service-name> <extension-id>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--extension-id <extension-id>', $('extension-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, extensionId, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!extensionId) {
      extensionId = cli.interaction.promptIfNotGiven($('extension-id : '), extensionId, _);
    }

    cli.output.verbose('extensionId = ' + extensionId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedService.deleteExtension(serviceName, extensionId, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService Get
  --service-name
*/
  var hostedServiceGet = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceGet.command('get [service-name]')
  .description($('The Get Hosted Service Properties operation retrieves system properties for the specified cloud service. These properties include the service name and service type; and the name of the affinity group to which the service belongs, or its location if it is not part of an affinity group.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460806.aspx for more information)'))
  .usage('[options] <service-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedService.get(serviceName, _);
    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      display(cli, result);
    }
  });
/*
  HostedService GetDetailed
  --service-name
*/
  var hostedServiceGetDetailed = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceGetDetailed.command('get-detailed [service-name]')
  .description($('The Get Detailed Hosted Service Properties operation retrieves system properties for the specified cloud service. These properties include the service name and service type; the name of the affinity group to which the service belongs, or its location if it is not part of an affinity group; and information on the deployments of the service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460806.aspx for more information)'))
  .usage('[options] <service-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedService.getDetailed(serviceName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService GetExtension
  --service-name
  --extension-id
*/
  var hostedServiceGetExtension = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceGetExtension.command('get-extension [service-name] [extension-id]')
  .description($('The Get Extension operation retrieves information about a specified extension that was added to a cloud service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn169557.aspx for more information)'))
  .usage('[options] <service-name> <extension-id>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--extension-id <extension-id>', $('extension-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, extensionId, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!extensionId) {
      extensionId = cli.interaction.promptIfNotGiven($('extension-id : '), extensionId, _);
    }

    cli.output.verbose('extensionId = ' + extensionId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedService.getExtension(serviceName, extensionId, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService List
*/
  var hostedServiceList = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceList.command('list')
  .description($('The List Hosted Services operation lists the cloud services available under the current subscription.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460781.aspx for more information)'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedService.list(_);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService ListAvailableExtensions
*/
  var hostedServiceListAvailableExtensions = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceListAvailableExtensions.command('list-available-extensions')
  .description($('The List Available Extensions operation lists the extensions that are available to add to your cloud service. In Windows Azure, a process can run as an extension of a cloud service. For example, Remote Desktop Access or the Azure Diagnostics Agent can run as extensions to the cloud service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn169559.aspx for more information)'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedService.listAvailableExtensions(_);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService ListExtensions
  --service-name
*/
  var hostedServiceListExtensions = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceListExtensions.command('list-extensions [service-name]')
  .description($('The List Extensions operation lists all of the extensions that were added to a cloud service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn169561.aspx for more information)'))
  .usage('[options] <service-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedService.listExtensions(serviceName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService ListExtensionVersions
  --provider-namespace
  --extension-type
*/
  var hostedServiceListExtensionVersions = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceListExtensionVersions.command('list-extension-versions [provider-namespace] [extension-type]')
  .description($('The List Extension Versions operation lists the versions of an extension that are available to add to a cloud service. In Azure, a process can run as an extension of a cloud service. For example, Remote Desktop Access or the Azure Diagnostics Agent can run as extensions to the cloud service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn495437.aspx for more information)'))
  .usage('[options] <provider-namespace> <extension-type>')
  .option('--provider-namespace <provider-namespace>', $('provider-namespace'))
  .option('--extension-type <extension-type>', $('extension-type'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(providerNamespace, extensionType, options, _) {
    if (!providerNamespace) {
      providerNamespace = cli.interaction.promptIfNotGiven($('provider-namespace : '), providerNamespace, _);
    }

    cli.output.verbose('providerNamespace = ' + providerNamespace);
    if (!extensionType) {
      extensionType = cli.interaction.promptIfNotGiven($('extension-type : '), extensionType, _);
    }

    cli.output.verbose('extensionType = ' + extensionType);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedService.listExtensionVersions(providerNamespace, extensionType, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService ListPublisherExtensions
*/
  var hostedServiceListPublisherExtensions = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceListPublisherExtensions.command('list-publisher-extensions')
  .description($('The List Available Extensions operation lists the extensions that are available to add to your cloud service. In Windows Azure, a process can run as an extension of a cloud service. For example, Remote Desktop Access or the Azure Diagnostics Agent can run as extensions to the cloud service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn169559.aspx for more information)'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedService.listPublisherExtensions(_);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  HostedService Update
  --service-name
  --parameters
=============================================
{
  "description":"",
  "extendedProperties":{
  },
  "label":"",
  "reverseDnsFqdn":""
}
*/
  var hostedServiceUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service')
  .description($('Commands to manage your hosted service.  '));
  hostedServiceUpdate.command('update [service-name] [parameters]')
  .description($('The Update Hosted Service operation can update the label or description of a cloud service in Azure.  (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441303.aspx for more information)'))
  .usage('[options] <service-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedService.update(serviceName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var hostedServiceUpdateupdateParameters1 = hostedServiceUpdate.category('update-parameters')
  .description($('Commands to manage configuration of hosted-service in the parameter file.'));
  hostedServiceUpdateupdateParameters1.command('generate')
  .description($('Generate hostedServiceUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"description\":\"\",\"extendedProperties\":{},\"label\":\"\",\"reverseDnsFqdn\":\"\"}', _);
    var filePath = 'hostedServiceUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"description\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"label\":\"\",\r\n\"reverseDnsFqdn\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  hostedServiceUpdateupdateParameters1.command('patch')
  .description($('Command to patch hostedServiceUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set hosted-service-update-parameters
  var catparametersUpdateHostedServiceHostedServiceUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersUpdateHostedServiceHostedServiceUpdateParameters0 = catparametersUpdateHostedServiceHostedServiceUpdateParameters0.category('update-parameters')
  .description($('Commands to manage configuration of hosted-service in the parameter file.'));
  var setparametersUpdateHostedServiceHostedServiceUpdateParameters0 = parametersUpdateHostedServiceHostedServiceUpdateParameters0.category('hosted-service-update-parameters')
  .description($('Commands to set components of hosted-service in update-parameters file.'));
  setparametersUpdateHostedServiceHostedServiceUpdateParameters0.command('set')
  .description($('Set hosted-service-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "description":"",\r\n  "extendedProperties":{\r\n  },\r\n  "label":"",\r\n  "reverseDnsFqdn":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--reverse-dns-fqdn <reverseDnsFqdn>', $('Set the reverse-dns-fqdn value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'reverseDnsFqdn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.reverseDnsFqdn) {
      if (options.parse && options.reverseDnsFqdn) {
        options.reverseDnsFqdn = JSON.parse(options.reverseDnsFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reverseDnsFqdn}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete hosted-service-update-parameters
  var catparametersUpdateHostedServiceHostedServiceUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersUpdateHostedServiceHostedServiceUpdateParameters1 = catparametersUpdateHostedServiceHostedServiceUpdateParameters1.category('update-parameters')
  .description($('Commands to manage configuration of hosted-service in the parameter file.'));
  var deleteparametersUpdateHostedServiceHostedServiceUpdateParameters1 = parametersUpdateHostedServiceHostedServiceUpdateParameters1.category('hosted-service-update-parameters')
  .description($('Commands to delete components of hosted-service in update-parameters file.'));
  deleteparametersUpdateHostedServiceHostedServiceUpdateParameters1.command('delete')
  .description($('Remove hosted-service-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "description":"",\r\n  "extendedProperties":{\r\n  },\r\n  "label":"",\r\n  "reverseDnsFqdn":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--description', $('Remove the description value.'))
  .option('--extended-properties', $('Remove the extended-properties value.'))
  .option('--label', $('Remove the label value.'))
  .option('--reverse-dns-fqdn', $('Remove the reverse-dns-fqdn value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.description || options.extendedProperties || options.label || options.reverseDnsFqdn;
    if (anySubItem) {
      var subItemPath = null;
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extendedProperties) {
        subItemPath = options.path + '/extendedProperties';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.reverseDnsFqdn) {
        subItemPath = options.path + '/reverseDnsFqdn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add hosted-service-update-parameters
  var catparametersUpdateHostedServiceHostedServiceUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersUpdateHostedServiceHostedServiceUpdateParameters2 = catparametersUpdateHostedServiceHostedServiceUpdateParameters2.category('update-parameters')
  .description($('Commands to manage configuration of hosted-service in the parameter file.'));
  var addparametersUpdateHostedServiceHostedServiceUpdateParameters2 = parametersUpdateHostedServiceHostedServiceUpdateParameters2.category('hosted-service-update-parameters')
  .description($('Commands to add components of hosted-service in update-parameters file.'));
  addparametersUpdateHostedServiceHostedServiceUpdateParameters2.command('add')
  .description($('Add hosted-service-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "description":"",\r\n  "extendedProperties":{\r\n  },\r\n  "label":"",\r\n  "reverseDnsFqdn":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--reverse-dns-fqdn <reverseDnsFqdn>', $('Add the reverse-dns-fqdn value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'reverseDnsFqdn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.reverseDnsFqdn) {
      if (options.parse && options.reverseDnsFqdn) {
        options.reverseDnsFqdn = JSON.parse(options.reverseDnsFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reverseDnsFqdn}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  LoadBalancer Create
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "frontendIPConfiguration":{
    "staticVirtualNetworkIPAddress":"",
    "subnetName":"",
    "type":""
  },
  "name":""
}
*/
  var loadBalancerCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer')
  .description($('Commands to manage your load balancer.  '));
  loadBalancerCreate.command('create [service-name] [deployment-name] [parameters]')
  .description($('Add an internal load balancer to a an existing deployment. When used by an input endpoint, the internal load balancer will provide an additional private VIP that can be used for load balancing to the roles in this deployment.'))
  .usage('[options] <service-name> <deployment-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.loadBalancer.create(serviceName, deploymentName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var loadBalancerCreatecreateParameters2 = loadBalancerCreate.category('create-parameters')
  .description($('Commands to manage configuration of load-balancer in the parameter file.'));
  loadBalancerCreatecreateParameters2.command('generate')
  .description($('Generate loadBalancerCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"frontendIPConfiguration\":{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\",\"type\":\"\"},\"name\":\"\"}', _);
    var filePath = 'loadBalancerCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"frontendIPConfiguration\":{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\",\r\n\"type\":\"\"\r\n},\r\n\"name\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  loadBalancerCreatecreateParameters2.command('patch')
  .description($('Command to patch loadBalancerCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set load-balancer-create-parameters
  var catparametersCreateLoadBalancerLoadBalancerCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersCreateLoadBalancerLoadBalancerCreateParameters0 = catparametersCreateLoadBalancerLoadBalancerCreateParameters0.category('create-parameters')
  .description($('Commands to manage configuration of load-balancer in the parameter file.'));
  var setparametersCreateLoadBalancerLoadBalancerCreateParameters0 = parametersCreateLoadBalancerLoadBalancerCreateParameters0.category('load-balancer-create-parameters')
  .description($('Commands to set components of load-balancer in create-parameters file.'));
  setparametersCreateLoadBalancerLoadBalancerCreateParameters0.command('set')
  .description($('Set load-balancer-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "frontendIPConfiguration":{\r\n    "staticVirtualNetworkIPAddress":"",\r\n    "subnetName":"",\r\n    "type":""\r\n  },\r\n  "name":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete load-balancer-create-parameters
  var catparametersCreateLoadBalancerLoadBalancerCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersCreateLoadBalancerLoadBalancerCreateParameters1 = catparametersCreateLoadBalancerLoadBalancerCreateParameters1.category('create-parameters')
  .description($('Commands to manage configuration of load-balancer in the parameter file.'));
  var deleteparametersCreateLoadBalancerLoadBalancerCreateParameters1 = parametersCreateLoadBalancerLoadBalancerCreateParameters1.category('load-balancer-create-parameters')
  .description($('Commands to delete components of load-balancer in create-parameters file.'));
  deleteparametersCreateLoadBalancerLoadBalancerCreateParameters1.command('delete')
  .description($('Remove load-balancer-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "frontendIPConfiguration":{\r\n    "staticVirtualNetworkIPAddress":"",\r\n    "subnetName":"",\r\n    "type":""\r\n  },\r\n  "name":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--frontend-ip-configuration', $('Remove the frontend-ip-configuration value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.frontendIPConfiguration || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.frontendIPConfiguration) {
        subItemPath = options.path + '/frontendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add load-balancer-create-parameters
  var catparametersCreateLoadBalancerLoadBalancerCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersCreateLoadBalancerLoadBalancerCreateParameters2 = catparametersCreateLoadBalancerLoadBalancerCreateParameters2.category('create-parameters')
  .description($('Commands to manage configuration of load-balancer in the parameter file.'));
  var addparametersCreateLoadBalancerLoadBalancerCreateParameters2 = parametersCreateLoadBalancerLoadBalancerCreateParameters2.category('load-balancer-create-parameters')
  .description($('Commands to add components of load-balancer in create-parameters file.'));
  addparametersCreateLoadBalancerLoadBalancerCreateParameters2.command('add')
  .description($('Add load-balancer-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "frontendIPConfiguration":{\r\n    "staticVirtualNetworkIPAddress":"",\r\n    "subnetName":"",\r\n    "type":""\r\n  },\r\n  "name":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Add the frontend-ip-configuration value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set frontend-ip-configuration
  var catparametersCreateLoadBalancerFrontendIPConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersCreateLoadBalancerFrontendIPConfiguration0 = catparametersCreateLoadBalancerFrontendIPConfiguration0.category('create-parameters')
  .description($('Commands to manage configuration of load-balancer in the parameter file.'));
  var setparametersCreateLoadBalancerFrontendIPConfiguration0 = parametersCreateLoadBalancerFrontendIPConfiguration0.category('frontend-ip-configuration')
  .description($('Commands to set components of load-balancer in create-parameters file.'));
  setparametersCreateLoadBalancerFrontendIPConfiguration0.command('set')
  .description($('Set frontend-ip-configuration in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":"",\r\n             "type":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .option('--type <type>', $('Set the type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/frontendIPConfiguration';
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete frontend-ip-configuration
  var catparametersCreateLoadBalancerFrontendIPConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersCreateLoadBalancerFrontendIPConfiguration1 = catparametersCreateLoadBalancerFrontendIPConfiguration1.category('create-parameters')
  .description($('Commands to manage configuration of load-balancer in the parameter file.'));
  var deleteparametersCreateLoadBalancerFrontendIPConfiguration1 = parametersCreateLoadBalancerFrontendIPConfiguration1.category('frontend-ip-configuration')
  .description($('Commands to delete components of load-balancer in create-parameters file.'));
  deleteparametersCreateLoadBalancerFrontendIPConfiguration1.command('delete')
  .description($('Remove frontend-ip-configuration in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":"",\r\n             "type":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .option('--type', $('Remove the type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/frontendIPConfiguration';
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName || options.type;
    if (anySubItem) {
      var subItemPath = null;
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        subItemPath = options.path + '/subnetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add frontend-ip-configuration
  var catparametersCreateLoadBalancerFrontendIPConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersCreateLoadBalancerFrontendIPConfiguration2 = catparametersCreateLoadBalancerFrontendIPConfiguration2.category('create-parameters')
  .description($('Commands to manage configuration of load-balancer in the parameter file.'));
  var addparametersCreateLoadBalancerFrontendIPConfiguration2 = parametersCreateLoadBalancerFrontendIPConfiguration2.category('frontend-ip-configuration')
  .description($('Commands to add components of load-balancer in create-parameters file.'));
  addparametersCreateLoadBalancerFrontendIPConfiguration2.command('add')
  .description($('Add frontend-ip-configuration in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":"",\r\n             "type":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .option('--type <type>', $('Add the type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/frontendIPConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/frontendIPConfiguration' + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/frontendIPConfiguration' + '/' + 'subnetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = '/frontendIPConfiguration' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  LoadBalancer Delete
  --service-name
  --deployment-name
  --load-balancer-name
*/
  var loadBalancerDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer')
  .description($('Commands to manage your load balancer.  '));
  loadBalancerDelete.command('delete [service-name] [deployment-name] [load-balancer-name]')
  .description($('Delete an internal load balancer from the deployment.'))
  .usage('[options] <service-name> <deployment-name> <load-balancer-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--load-balancer-name <load-balancer-name>', $('load-balancer-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, loadBalancerName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!loadBalancerName) {
      loadBalancerName = cli.interaction.promptIfNotGiven($('load-balancer-name : '), loadBalancerName, _);
    }

    cli.output.verbose('loadBalancerName = ' + loadBalancerName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.loadBalancer.deleteMethod(serviceName, deploymentName, loadBalancerName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  LoadBalancer Update
  --service-name
  --deployment-name
  --load-balancer-name
  --parameters
=============================================
{
  "frontendIPConfiguration":{
    "staticVirtualNetworkIPAddress":"",
    "subnetName":"",
    "type":""
  },
  "name":""
}
*/
  var loadBalancerUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer')
  .description($('Commands to manage your load balancer.  '));
  loadBalancerUpdate.command('update [service-name] [deployment-name] [load-balancer-name] [parameters]')
  .description($('Updates an internal load balancer associated with an existing deployment.'))
  .usage('[options] <service-name> <deployment-name> <load-balancer-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--load-balancer-name <load-balancer-name>', $('load-balancer-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, loadBalancerName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!loadBalancerName) {
      loadBalancerName = cli.interaction.promptIfNotGiven($('load-balancer-name : '), loadBalancerName, _);
    }

    cli.output.verbose('loadBalancerName = ' + loadBalancerName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.loadBalancer.update(serviceName, deploymentName, loadBalancerName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var loadBalancerUpdateupdateParameters3 = loadBalancerUpdate.category('update-parameters')
  .description($('Commands to manage configuration of load-balancer in the parameter file.'));
  loadBalancerUpdateupdateParameters3.command('generate')
  .description($('Generate loadBalancerUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"frontendIPConfiguration\":{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\",\"type\":\"\"},\"name\":\"\"}', _);
    var filePath = 'loadBalancerUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"frontendIPConfiguration\":{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\",\r\n\"type\":\"\"\r\n},\r\n\"name\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  loadBalancerUpdateupdateParameters3.command('patch')
  .description($('Command to patch loadBalancerUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set load-balancer-update-parameters
  var catparametersUpdateLoadBalancerLoadBalancerUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersUpdateLoadBalancerLoadBalancerUpdateParameters0 = catparametersUpdateLoadBalancerLoadBalancerUpdateParameters0.category('update-parameters')
  .description($('Commands to manage configuration of load-balancer in the parameter file.'));
  var setparametersUpdateLoadBalancerLoadBalancerUpdateParameters0 = parametersUpdateLoadBalancerLoadBalancerUpdateParameters0.category('load-balancer-update-parameters')
  .description($('Commands to set components of load-balancer in update-parameters file.'));
  setparametersUpdateLoadBalancerLoadBalancerUpdateParameters0.command('set')
  .description($('Set load-balancer-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "frontendIPConfiguration":{\r\n    "staticVirtualNetworkIPAddress":"",\r\n    "subnetName":"",\r\n    "type":""\r\n  },\r\n  "name":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete load-balancer-update-parameters
  var catparametersUpdateLoadBalancerLoadBalancerUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersUpdateLoadBalancerLoadBalancerUpdateParameters1 = catparametersUpdateLoadBalancerLoadBalancerUpdateParameters1.category('update-parameters')
  .description($('Commands to manage configuration of load-balancer in the parameter file.'));
  var deleteparametersUpdateLoadBalancerLoadBalancerUpdateParameters1 = parametersUpdateLoadBalancerLoadBalancerUpdateParameters1.category('load-balancer-update-parameters')
  .description($('Commands to delete components of load-balancer in update-parameters file.'));
  deleteparametersUpdateLoadBalancerLoadBalancerUpdateParameters1.command('delete')
  .description($('Remove load-balancer-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "frontendIPConfiguration":{\r\n    "staticVirtualNetworkIPAddress":"",\r\n    "subnetName":"",\r\n    "type":""\r\n  },\r\n  "name":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--frontend-ip-configuration', $('Remove the frontend-ip-configuration value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.frontendIPConfiguration || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.frontendIPConfiguration) {
        subItemPath = options.path + '/frontendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add load-balancer-update-parameters
  var catparametersUpdateLoadBalancerLoadBalancerUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersUpdateLoadBalancerLoadBalancerUpdateParameters2 = catparametersUpdateLoadBalancerLoadBalancerUpdateParameters2.category('update-parameters')
  .description($('Commands to manage configuration of load-balancer in the parameter file.'));
  var addparametersUpdateLoadBalancerLoadBalancerUpdateParameters2 = parametersUpdateLoadBalancerLoadBalancerUpdateParameters2.category('load-balancer-update-parameters')
  .description($('Commands to add components of load-balancer in update-parameters file.'));
  addparametersUpdateLoadBalancerLoadBalancerUpdateParameters2.command('add')
  .description($('Add load-balancer-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "frontendIPConfiguration":{\r\n    "staticVirtualNetworkIPAddress":"",\r\n    "subnetName":"",\r\n    "type":""\r\n  },\r\n  "name":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Add the frontend-ip-configuration value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set frontend-ip-configuration
  var catparametersUpdateLoadBalancerFrontendIPConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersUpdateLoadBalancerFrontendIPConfiguration0 = catparametersUpdateLoadBalancerFrontendIPConfiguration0.category('update-parameters')
  .description($('Commands to manage configuration of load-balancer in the parameter file.'));
  var setparametersUpdateLoadBalancerFrontendIPConfiguration0 = parametersUpdateLoadBalancerFrontendIPConfiguration0.category('frontend-ip-configuration')
  .description($('Commands to set components of load-balancer in update-parameters file.'));
  setparametersUpdateLoadBalancerFrontendIPConfiguration0.command('set')
  .description($('Set frontend-ip-configuration in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":"",\r\n             "type":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .option('--type <type>', $('Set the type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/frontendIPConfiguration';
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete frontend-ip-configuration
  var catparametersUpdateLoadBalancerFrontendIPConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersUpdateLoadBalancerFrontendIPConfiguration1 = catparametersUpdateLoadBalancerFrontendIPConfiguration1.category('update-parameters')
  .description($('Commands to manage configuration of load-balancer in the parameter file.'));
  var deleteparametersUpdateLoadBalancerFrontendIPConfiguration1 = parametersUpdateLoadBalancerFrontendIPConfiguration1.category('frontend-ip-configuration')
  .description($('Commands to delete components of load-balancer in update-parameters file.'));
  deleteparametersUpdateLoadBalancerFrontendIPConfiguration1.command('delete')
  .description($('Remove frontend-ip-configuration in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":"",\r\n             "type":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .option('--type', $('Remove the type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/frontendIPConfiguration';
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName || options.type;
    if (anySubItem) {
      var subItemPath = null;
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        subItemPath = options.path + '/subnetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add frontend-ip-configuration
  var catparametersUpdateLoadBalancerFrontendIPConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersUpdateLoadBalancerFrontendIPConfiguration2 = catparametersUpdateLoadBalancerFrontendIPConfiguration2.category('update-parameters')
  .description($('Commands to manage configuration of load-balancer in the parameter file.'));
  var addparametersUpdateLoadBalancerFrontendIPConfiguration2 = parametersUpdateLoadBalancerFrontendIPConfiguration2.category('frontend-ip-configuration')
  .description($('Commands to add components of load-balancer in update-parameters file.'));
  addparametersUpdateLoadBalancerFrontendIPConfiguration2.command('add')
  .description($('Add frontend-ip-configuration in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":"",\r\n             "type":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .option('--type <type>', $('Add the type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/frontendIPConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/frontendIPConfiguration' + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/frontendIPConfiguration' + '/' + 'subnetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = '/frontendIPConfiguration' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  OperatingSystem List
*/
  var operatingSystemList = cli.category('invoke').description('Commands to invoke service management operations.').category('operating-system')
  .description($('Commands to manage your operating system.  '));
  operatingSystemList.command('list')
  .description($('The List Operating Systems operation lists the versions of the guest operating system that are currently available in Windows Azure. The 2010-10-28 version of List Operating Systems also indicates what family an operating system version belongs to. Currently Azure supports two operating system families: the Azure guest operating system that is substantially compatible with Windows Server 2008 SP2, and the Azure guest operating system that is substantially compatible with Windows Server 2008 R2.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ff684168.aspx for more information)'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.operatingSystem.list(_);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  OperatingSystem ListFamilies
*/
  var operatingSystemListFamilies = cli.category('invoke').description('Commands to invoke service management operations.').category('operating-system')
  .description($('Commands to manage your operating system.  '));
  operatingSystemListFamilies.command('list-families')
  .description($('The List OS Families operation lists the guest operating system families available in Azure, and also lists the operating system versions available for each family. Currently Azure supports two operating system families: the Azure guest operating system that is substantially compatible with Windows Server 2008 SP2, and the Azure guest operating system that is substantially compatible with Windows Server 2008 R2.  (see http://msdn.microsoft.com/en-us/library/windowsazure/gg441291.aspx for more information)'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.operatingSystem.listFamilies(_);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  ServiceCertificate Create
  --service-name
  --parameters
=============================================
{
  "certificateFormat":0,
  "data":null,
  "password":""
}
*/
  var serviceCertificateCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate')
  .description($('Commands to manage your service certificate.  '));
  serviceCertificateCreate.command('create [service-name] [parameters]')
  .description($('The Create Service Certificate operation adds a certificate to a hosted service. This operation is an asynchronous operation. To determine whether the management service has finished processing the request, call Get Operation Status.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460817.aspx for more information)'))
  .usage('[options] <service-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.serviceCertificate.create(serviceName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var serviceCertificateCreatecreateParameters1 = serviceCertificateCreate.category('create-parameters')
  .description($('Commands to manage configuration of service-certificate in the parameter file.'));
  serviceCertificateCreatecreateParameters1.command('generate')
  .description($('Generate serviceCertificateCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"certificateFormat\":0,\"data\":null,\"password\":\"\"}', _);
    var filePath = 'serviceCertificateCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"certificateFormat\":0,\r\n\"data\":null,\r\n\"password\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  serviceCertificateCreatecreateParameters1.command('patch')
  .description($('Command to patch serviceCertificateCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set service-certificate-create-parameters
  var catparametersCreateServiceCertificateServiceCertificateCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersCreateServiceCertificateServiceCertificateCreateParameters0 = catparametersCreateServiceCertificateServiceCertificateCreateParameters0.category('create-parameters')
  .description($('Commands to manage configuration of service-certificate in the parameter file.'));
  var setparametersCreateServiceCertificateServiceCertificateCreateParameters0 = parametersCreateServiceCertificateServiceCertificateCreateParameters0.category('service-certificate-create-parameters')
  .description($('Commands to set components of service-certificate in create-parameters file.'));
  setparametersCreateServiceCertificateServiceCertificateCreateParameters0.command('set')
  .description($('Set service-certificate-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "certificateFormat":0,\r\n  "data":null,\r\n  "password":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--certificate-format <certificateFormat>', $('Set the certificate-format value.'))
  .option('--data <data>', $('Set the data value.'))
  .option('--password <password>', $('Set the password value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'certificateFormat';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificateFormat) {
      if (options.parse && options.certificateFormat) {
        options.certificateFormat = JSON.parse(options.certificateFormat);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateFormat}]);
    }
    paramPath = options.path + '/' + 'data';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.data) {
      if (options.parse && options.data) {
        options.data = JSON.parse(options.data);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.data}]);
    }
    paramPath = options.path + '/' + 'password';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete service-certificate-create-parameters
  var catparametersCreateServiceCertificateServiceCertificateCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersCreateServiceCertificateServiceCertificateCreateParameters1 = catparametersCreateServiceCertificateServiceCertificateCreateParameters1.category('create-parameters')
  .description($('Commands to manage configuration of service-certificate in the parameter file.'));
  var deleteparametersCreateServiceCertificateServiceCertificateCreateParameters1 = parametersCreateServiceCertificateServiceCertificateCreateParameters1.category('service-certificate-create-parameters')
  .description($('Commands to delete components of service-certificate in create-parameters file.'));
  deleteparametersCreateServiceCertificateServiceCertificateCreateParameters1.command('delete')
  .description($('Remove service-certificate-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "certificateFormat":0,\r\n  "data":null,\r\n  "password":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--certificate-format', $('Remove the certificate-format value.'))
  .option('--data', $('Remove the data value.'))
  .option('--password', $('Remove the password value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.certificateFormat || options.data || options.password;
    if (anySubItem) {
      var subItemPath = null;
      if (options.certificateFormat) {
        subItemPath = options.path + '/certificateFormat';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.data) {
        subItemPath = options.path + '/data';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.password) {
        subItemPath = options.path + '/password';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add service-certificate-create-parameters
  var catparametersCreateServiceCertificateServiceCertificateCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersCreateServiceCertificateServiceCertificateCreateParameters2 = catparametersCreateServiceCertificateServiceCertificateCreateParameters2.category('create-parameters')
  .description($('Commands to manage configuration of service-certificate in the parameter file.'));
  var addparametersCreateServiceCertificateServiceCertificateCreateParameters2 = parametersCreateServiceCertificateServiceCertificateCreateParameters2.category('service-certificate-create-parameters')
  .description($('Commands to add components of service-certificate in create-parameters file.'));
  addparametersCreateServiceCertificateServiceCertificateCreateParameters2.command('add')
  .description($('Add service-certificate-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "certificateFormat":0,\r\n  "data":null,\r\n  "password":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--certificate-format <certificateFormat>', $('Add the certificate-format value.'))
  .option('--data <data>', $('Add the data value.'))
  .option('--password <password>', $('Add the password value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'certificateFormat';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificateFormat) {
      if (options.parse && options.certificateFormat) {
        options.certificateFormat = JSON.parse(options.certificateFormat);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateFormat}]);
    }
    paramPath = '' + '/' + 'data';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.data) {
      if (options.parse && options.data) {
        options.data = JSON.parse(options.data);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.data}]);
    }
    paramPath = '' + '/' + 'password';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete certificate-format
  var catparametersCreateServiceCertificateCertificateFormat1 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersCreateServiceCertificateCertificateFormat1 = catparametersCreateServiceCertificateCertificateFormat1.category('create-parameters')
  .description($('Commands to manage configuration of service-certificate in the parameter file.'));
  var deleteparametersCreateServiceCertificateCertificateFormat1 = parametersCreateServiceCertificateCertificateFormat1.category('certificate-format')
  .description($('Commands to delete components of service-certificate in create-parameters file.'));
  deleteparametersCreateServiceCertificateCertificateFormat1.command('delete')
  .description($('Remove certificate-format in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "certificateFormat" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/certificateFormat';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add certificate-format
  var catparametersCreateServiceCertificateCertificateFormat2 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersCreateServiceCertificateCertificateFormat2 = catparametersCreateServiceCertificateCertificateFormat2.category('create-parameters')
  .description($('Commands to manage configuration of service-certificate in the parameter file.'));
  var addparametersCreateServiceCertificateCertificateFormat2 = parametersCreateServiceCertificateCertificateFormat2.category('certificate-format')
  .description($('Commands to add components of service-certificate in create-parameters file.'));
  addparametersCreateServiceCertificateCertificateFormat2.command('add')
  .description($('Add certificate-format in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "certificateFormat" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/certificateFormat' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  ServiceCertificate Delete
  --parameters
=============================================
{
  "serviceName":"",
  "thumbprint":"",
  "thumbprintAlgorithm":""
}
*/
  var serviceCertificateDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate')
  .description($('Commands to manage your service certificate.  '));
  serviceCertificateDelete.command('delete [service-name] [thumbprint] [thumbprint-algorithm]')
  .description($('The Delete Service Certificate operation deletes a service certificate from the certificate store of a hosted service. This operation is an asynchronous operation. To determine whether the management service has finished processing the request, call Get Operation Status.  (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460803.aspx for more information)'))
  .usage('[options] <service-name> <thumbprint> <thumbprint-algorithm>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--thumbprint <thumbprint>', $('thumbprint'))
  .option('--thumbprint-algorithm <thumbprint-algorithm>', $('thumbprint-algorithm'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, thumbprint, thumbprintAlgorithm, options, _) {
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.verbose('serviceName = ' + serviceName);
      parametersObj.serviceName = serviceName;
      cli.output.verbose('thumbprint = ' + thumbprint);
      parametersObj.thumbprint = thumbprint;
      cli.output.verbose('thumbprintAlgorithm = ' + thumbprintAlgorithm);
      parametersObj.thumbprintAlgorithm = thumbprintAlgorithm;
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.serviceCertificate.deleteMethod(parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  ServiceCertificate Get
  --parameters
=============================================
{
  "serviceName":"",
  "thumbprint":"",
  "thumbprintAlgorithm":""
}
*/
  var serviceCertificateGet = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate')
  .description($('Commands to manage your service certificate.  '));
  serviceCertificateGet.command('get [service-name] [thumbprint] [thumbprint-algorithm]')
  .description($('The Get Service Certificate operation returns the public data for the specified X.509 certificate associated with a hosted service. (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460792.aspx for more information)'))
  .usage('[options] <service-name> <thumbprint> <thumbprint-algorithm>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--thumbprint <thumbprint>', $('thumbprint'))
  .option('--thumbprint-algorithm <thumbprint-algorithm>', $('thumbprint-algorithm'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, thumbprint, thumbprintAlgorithm, options, _) {
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.verbose('serviceName = ' + serviceName);
      parametersObj.serviceName = serviceName;
      cli.output.verbose('thumbprint = ' + thumbprint);
      parametersObj.thumbprint = thumbprint;
      cli.output.verbose('thumbprintAlgorithm = ' + thumbprintAlgorithm);
      parametersObj.thumbprintAlgorithm = thumbprintAlgorithm;
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.serviceCertificate.get(parametersObj, _);
    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      display(cli, result);
    }
  });
/*
  ServiceCertificate List
  --service-name
*/
  var serviceCertificateList = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate')
  .description($('Commands to manage your service certificate.  '));
  serviceCertificateList.command('list [service-name]')
  .description($('The List Service Certificates operation lists all of the service certificates associated with the specified hosted service.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154105.aspx for more information)'))
  .usage('[options] <service-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.serviceCertificate.list(serviceName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineDisk CreateDataDisk
  --service-name
  --deployment-name
  --role-name
  --parameters
=============================================
{
  "hostCaching":"",
  "label":"",
  "logicalDiskSizeInGB":0,
  "logicalUnitNumber":null,
  "mediaLinkUri":"",
  "name":"",
  "sourceMediaLinkUri":""
}
*/
  var virtualMachineDiskCreateDataDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskCreateDataDisk.command('create-data-disk [service-name] [deployment-name] [role-name] [parameters]')
  .description($('The Create Data Disk operation adds a data disk to a virtual machine. There are three ways to create the data disk using the Add Data Disk operation. Option 1 - Attach an empty data disk to the role by specifying the disk label and location of the disk image. Do not include the DiskName and SourceMediaLink elements in the request body. Include the MediaLink element and reference a blob that is in the same geographical region as the role. You can also omit the MediaLink element. In this usage, Azure will create the data disk in the storage account configured as default for the role. Option 2 - Attach an existing data disk that is in the image repository. Do not include the DiskName and SourceMediaLink elements in the request body. Specify the data disk to use by including the DiskName element. Note: If included the in the response body, the MediaLink and LogicalDiskSizeInGB elements are ignored. Option 3 - Specify the location of a blob in your storage account that contain a disk image to use. Include the SourceMediaLink element. Note: If the MediaLink element isincluded, it is ignored.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157199.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <role-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-name <role-name>', $('role-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, roleName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!roleName) {
      roleName = cli.interaction.promptIfNotGiven($('role-name : '), roleName, _);
    }

    cli.output.verbose('roleName = ' + roleName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisk.createDataDisk(serviceName, deploymentName, roleName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineDiskCreateDataDiskcreateDataDiskParameters3 = virtualMachineDiskCreateDataDisk.category('create-data-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  virtualMachineDiskCreateDataDiskcreateDataDiskParameters3.command('generate')
  .description($('Generate virtualMachineDiskCreateDataDisk parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"hostCaching\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":0,\"logicalUnitNumber\":null,\"mediaLinkUri\":\"\",\"name\":\"\",\"sourceMediaLinkUri\":\"\"}', _);
    var filePath = 'virtualMachineDiskCreateDataDisk_createDataDisk.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"hostCaching\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":0,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"sourceMediaLinkUri\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineDiskCreateDataDiskcreateDataDiskParameters3.command('patch')
  .description($('Command to patch virtualMachineDiskCreateDataDisk parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-data-disk-parameters set virtual-machine-data-disk-create-parameters
  var catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0 = catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0.category('create-data-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var setparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0 = parametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0.category('virtual-machine-data-disk-create-parameters')
  .description($('Commands to set components of virtual-machine-disk in create-data-disk-parameters file.'));
  setparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters0.command('set')
  .description($('Set virtual-machine-data-disk-create-parameters in create-data-disk-parameters string or files, e.g. \r\n{\r\n  "hostCaching":"",\r\n  "label":"",\r\n  "logicalDiskSizeInGB":0,\r\n  "logicalUnitNumber":null,\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "sourceMediaLinkUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--source-media-link-uri <sourceMediaLinkUri>', $('Set the source-media-link-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sourceMediaLinkUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceMediaLinkUri) {
      if (options.parse && options.sourceMediaLinkUri) {
        options.sourceMediaLinkUri = JSON.parse(options.sourceMediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLinkUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-data-disk-parameters delete virtual-machine-data-disk-create-parameters
  var catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1 = catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1.category('create-data-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var deleteparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1 = parametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1.category('virtual-machine-data-disk-create-parameters')
  .description($('Commands to delete components of virtual-machine-disk in create-data-disk-parameters file.'));
  deleteparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters1.command('delete')
  .description($('Remove virtual-machine-data-disk-create-parameters in create-data-disk-parameters string or files, e.g. \r\n{\r\n  "hostCaching":"",\r\n  "label":"",\r\n  "logicalDiskSizeInGB":0,\r\n  "logicalUnitNumber":null,\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "sourceMediaLinkUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--label', $('Remove the label value.'))
  .option('--logical-disk-size-in-g-b', $('Remove the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .option('--source-media-link-uri', $('Remove the source-media-link-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.hostCaching || options.label || options.logicalDiskSizeInGB || options.logicalUnitNumber || options.mediaLinkUri || options.name || options.sourceMediaLinkUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalDiskSizeInGB) {
        subItemPath = options.path + '/logicalDiskSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        subItemPath = options.path + '/logicalUnitNumber';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        subItemPath = options.path + '/mediaLinkUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceMediaLinkUri) {
        subItemPath = options.path + '/sourceMediaLinkUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-data-disk-parameters add virtual-machine-data-disk-create-parameters
  var catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters2 = catparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters2.category('create-data-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var addparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters2 = parametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters2.category('virtual-machine-data-disk-create-parameters')
  .description($('Commands to add components of virtual-machine-disk in create-data-disk-parameters file.'));
  addparametersCreateDataDiskVirtualMachineDiskVirtualMachineDataDiskCreateParameters2.command('add')
  .description($('Add virtual-machine-data-disk-create-parameters in create-data-disk-parameters string or files, e.g. \r\n{\r\n  "hostCaching":"",\r\n  "label":"",\r\n  "logicalDiskSizeInGB":0,\r\n  "logicalUnitNumber":null,\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "sourceMediaLinkUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Add the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--source-media-link-uri <sourceMediaLinkUri>', $('Add the source-media-link-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'logicalDiskSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = '' + '/' + 'logicalUnitNumber';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'sourceMediaLinkUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceMediaLinkUri) {
      if (options.parse && options.sourceMediaLinkUri) {
        options.sourceMediaLinkUri = JSON.parse(options.sourceMediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLinkUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachineDisk CreateDisk
  --parameters
=============================================
{
  "label":"",
  "mediaLinkUri":"",
  "name":"",
  "operatingSystemType":""
}
*/
  var virtualMachineDiskCreateDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskCreateDisk.command('create-disk [parameters]')
  .description($('The Create Disk operation adds a disk to the user image repository. The disk can be an operating system disk or a data disk.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157178.aspx for more information)'))
  .usage('[options] <parameters>')
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(parameters, options, _) {
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisk.createDisk(parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineDiskCreateDiskcreateDiskParameters0 = virtualMachineDiskCreateDisk.category('create-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  virtualMachineDiskCreateDiskcreateDiskParameters0.command('generate')
  .description($('Generate virtualMachineDiskCreateDisk parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"label\":\"\",\"mediaLinkUri\":\"\",\"name\":\"\",\"operatingSystemType\":\"\"}', _);
    var filePath = 'virtualMachineDiskCreateDisk_createDisk.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"label\":\"\",\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystemType\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineDiskCreateDiskcreateDiskParameters0.command('patch')
  .description($('Command to patch virtualMachineDiskCreateDisk parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-disk-parameters set virtual-machine-disk-create-parameters
  var catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0 = catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0.category('create-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var setparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0 = parametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0.category('virtual-machine-disk-create-parameters')
  .description($('Commands to set components of virtual-machine-disk in create-disk-parameters file.'));
  setparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters0.command('set')
  .description($('Set virtual-machine-disk-create-parameters in create-disk-parameters string or files, e.g. \r\n{\r\n  "label":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Set the operating-system-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystemType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-disk-parameters delete virtual-machine-disk-create-parameters
  var catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1 = catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1.category('create-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var deleteparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1 = parametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1.category('virtual-machine-disk-create-parameters')
  .description($('Commands to delete components of virtual-machine-disk in create-disk-parameters file.'));
  deleteparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters1.command('delete')
  .description($('Remove virtual-machine-disk-create-parameters in create-disk-parameters string or files, e.g. \r\n{\r\n  "label":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system-type', $('Remove the operating-system-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.label || options.mediaLinkUri || options.name || options.operatingSystemType;
    if (anySubItem) {
      var subItemPath = null;
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        subItemPath = options.path + '/mediaLinkUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystemType) {
        subItemPath = options.path + '/operatingSystemType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-disk-parameters add virtual-machine-disk-create-parameters
  var catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters2 = catparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters2.category('create-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var addparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters2 = parametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters2.category('virtual-machine-disk-create-parameters')
  .description($('Commands to add components of virtual-machine-disk in create-disk-parameters file.'));
  addparametersCreateDiskVirtualMachineDiskVirtualMachineDiskCreateParameters2.command('add')
  .description($('Add virtual-machine-disk-create-parameters in create-disk-parameters string or files, e.g. \r\n{\r\n  "label":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Add the operating-system-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'operatingSystemType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachineDisk DeleteDataDisk
  --service-name
  --deployment-name
  --role-name
  --logical-unit-number
  --delete-from-storage
*/
  var virtualMachineDiskDeleteDataDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskDeleteDataDisk.command('delete-data-disk [service-name] [deployment-name] [role-name]')
  .description($('The Delete Data Disk operation removes the specified data disk from a virtual machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157179.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <role-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-name <role-name>', $('role-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, roleName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!roleName) {
      roleName = cli.interaction.promptIfNotGiven($('role-name : '), roleName, _);
    }

    cli.output.verbose('roleName = ' + roleName);
    var logicalUnitNumberObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var logicalUnitNumberFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      logicalUnitNumberObj = JSON.parse(logicalUnitNumberFileContent);
    }
    else {
      logicalUnitNumberObj = {};
    }
    cli.output.verbose('logicalUnitNumberObj = ' + JSON.stringify(logicalUnitNumberObj));
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var deleteFromStorageFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(deleteFromStorageFileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.verbose('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisk.deleteDataDisk(serviceName, deploymentName, roleName, logicalUnitNumber, deleteFromStorage, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineDisk DeleteDisk
  --name
  --delete-from-storage
*/
  var virtualMachineDiskDeleteDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskDeleteDisk.command('delete-disk [name]')
  .description($('The Delete Disk operation deletes the specified data or operating system disk from your image repository.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157200.aspx for more information)'))
  .usage('[options] <name>')
  .option('-n, --name <name>', $('name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(name, options, _) {
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var deleteFromStorageFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(deleteFromStorageFileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.verbose('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisk.deleteDisk(name, deleteFromStorage, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineDisk GetDataDisk
  --service-name
  --deployment-name
  --role-name
  --logical-unit-number
*/
  var virtualMachineDiskGetDataDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskGetDataDisk.command('get-data-disk [service-name] [deployment-name] [role-name]')
  .description($('The Get Data Disk operation retrieves the specified data disk from a virtual machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157180.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <role-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-name <role-name>', $('role-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, roleName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!roleName) {
      roleName = cli.interaction.promptIfNotGiven($('role-name : '), roleName, _);
    }

    cli.output.verbose('roleName = ' + roleName);
    var logicalUnitNumberObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var logicalUnitNumberFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      logicalUnitNumberObj = JSON.parse(logicalUnitNumberFileContent);
    }
    else {
      logicalUnitNumberObj = {};
    }
    cli.output.verbose('logicalUnitNumberObj = ' + JSON.stringify(logicalUnitNumberObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisk.getDataDisk(serviceName, deploymentName, roleName, logicalUnitNumber, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineDisk GetDisk
  --name
*/
  var virtualMachineDiskGetDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskGetDisk.command('get-disk [name]')
  .description($('The Get Disk operation retrieves a disk from the user image repository. The disk can be an operating system disk or a data disk.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157178.aspx for more information)'))
  .usage('[options] <name>')
  .option('-n, --name <name>', $('name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(name, options, _) {
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisk.getDisk(name, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineDisk ListDisks
*/
  var virtualMachineDiskListDisks = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskListDisks.command('list-disks')
  .description($('The List Disks operation retrieves a list of the disks in your image repository.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157176.aspx for more information)'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisk.listDisks(_);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineDisk UpdateDataDisk
  --service-name
  --deployment-name
  --role-name
  --logical-unit-number
  --parameters
=============================================
{
  "hostCaching":"",
  "label":"",
  "logicalDiskSizeInGB":0,
  "logicalUnitNumber":null,
  "mediaLinkUri":"",
  "name":""
}
*/
  var virtualMachineDiskUpdateDataDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskUpdateDataDisk.command('update-data-disk [service-name] [deployment-name] [role-name] [parameters]')
  .description($('The Update Data Disk operation updates the specified data disk attached to the specified virtual machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157190.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <role-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-name <role-name>', $('role-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, roleName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!roleName) {
      roleName = cli.interaction.promptIfNotGiven($('role-name : '), roleName, _);
    }

    cli.output.verbose('roleName = ' + roleName);
    var logicalUnitNumberObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var logicalUnitNumberFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      logicalUnitNumberObj = JSON.parse(logicalUnitNumberFileContent);
    }
    else {
      logicalUnitNumberObj = {};
    }
    cli.output.verbose('logicalUnitNumberObj = ' + JSON.stringify(logicalUnitNumberObj));
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisk.updateDataDisk(serviceName, deploymentName, roleName, logicalUnitNumber, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineDiskUpdateDataDiskupdateDataDiskParameters4 = virtualMachineDiskUpdateDataDisk.category('update-data-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  virtualMachineDiskUpdateDataDiskupdateDataDiskParameters4.command('generate')
  .description($('Generate virtualMachineDiskUpdateDataDisk parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"hostCaching\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":0,\"logicalUnitNumber\":null,\"mediaLinkUri\":\"\",\"name\":\"\"}', _);
    var filePath = 'virtualMachineDiskUpdateDataDisk_updateDataDisk.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"hostCaching\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":0,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineDiskUpdateDataDiskupdateDataDiskParameters4.command('patch')
  .description($('Command to patch virtualMachineDiskUpdateDataDisk parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-data-disk-parameters set virtual-machine-data-disk-update-parameters
  var catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0 = catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0.category('update-data-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var setparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0 = parametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0.category('virtual-machine-data-disk-update-parameters')
  .description($('Commands to set components of virtual-machine-disk in update-data-disk-parameters file.'));
  setparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0.command('set')
  .description($('Set virtual-machine-data-disk-update-parameters in update-data-disk-parameters string or files, e.g. \r\n{\r\n  "hostCaching":"",\r\n  "label":"",\r\n  "logicalDiskSizeInGB":0,\r\n  "logicalUnitNumber":null,\r\n  "mediaLinkUri":"",\r\n  "name":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-data-disk-parameters delete virtual-machine-data-disk-update-parameters
  var catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1 = catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1.category('update-data-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var deleteparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1 = parametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1.category('virtual-machine-data-disk-update-parameters')
  .description($('Commands to delete components of virtual-machine-disk in update-data-disk-parameters file.'));
  deleteparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1.command('delete')
  .description($('Remove virtual-machine-data-disk-update-parameters in update-data-disk-parameters string or files, e.g. \r\n{\r\n  "hostCaching":"",\r\n  "label":"",\r\n  "logicalDiskSizeInGB":0,\r\n  "logicalUnitNumber":null,\r\n  "mediaLinkUri":"",\r\n  "name":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--label', $('Remove the label value.'))
  .option('--logical-disk-size-in-g-b', $('Remove the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.hostCaching || options.label || options.logicalDiskSizeInGB || options.logicalUnitNumber || options.mediaLinkUri || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalDiskSizeInGB) {
        subItemPath = options.path + '/logicalDiskSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        subItemPath = options.path + '/logicalUnitNumber';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        subItemPath = options.path + '/mediaLinkUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-data-disk-parameters add virtual-machine-data-disk-update-parameters
  var catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2 = catparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2.category('update-data-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var addparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2 = parametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2.category('virtual-machine-data-disk-update-parameters')
  .description($('Commands to add components of virtual-machine-disk in update-data-disk-parameters file.'));
  addparametersUpdateDataDiskVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2.command('add')
  .description($('Add virtual-machine-data-disk-update-parameters in update-data-disk-parameters string or files, e.g. \r\n{\r\n  "hostCaching":"",\r\n  "label":"",\r\n  "logicalDiskSizeInGB":0,\r\n  "logicalUnitNumber":null,\r\n  "mediaLinkUri":"",\r\n  "name":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Add the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'logicalDiskSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = '' + '/' + 'logicalUnitNumber';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachineDisk UpdateDisk
  --name
  --parameters
=============================================
{
  "hasOperatingSystem":null,
  "label":"",
  "mediaLinkUri":"",
  "name":"",
  "operatingSystemType":"",
  "resizedSizeInGB":null
}
*/
  var virtualMachineDiskUpdateDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskUpdateDisk.command('update-disk [name] [parameters]')
  .description($('The Add Disk operation adds a disk to the user image repository. The disk can be an operating system disk or a data disk.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157178.aspx for more information)'))
  .usage('[options] <name> <parameters>')
  .option('-n, --name <name>', $('name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(name, parameters, options, _) {
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisk.updateDisk(name, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineDiskUpdateDiskupdateDiskParameters1 = virtualMachineDiskUpdateDisk.category('update-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  virtualMachineDiskUpdateDiskupdateDiskParameters1.command('generate')
  .description($('Generate virtualMachineDiskUpdateDisk parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"hasOperatingSystem\":null,\"label\":\"\",\"mediaLinkUri\":\"\",\"name\":\"\",\"operatingSystemType\":\"\",\"resizedSizeInGB\":null}', _);
    var filePath = 'virtualMachineDiskUpdateDisk_updateDisk.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"hasOperatingSystem\":null,\r\n\"label\":\"\",\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystemType\":\"\",\r\n\"resizedSizeInGB\":null\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineDiskUpdateDiskupdateDiskParameters1.command('patch')
  .description($('Command to patch virtualMachineDiskUpdateDisk parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-disk-parameters set virtual-machine-disk-update-parameters
  var catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0.category('update-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var setparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = parametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0.category('virtual-machine-disk-update-parameters')
  .description($('Commands to set components of virtual-machine-disk in update-disk-parameters file.'));
  setparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters0.command('set')
  .description($('Set virtual-machine-disk-update-parameters in update-disk-parameters string or files, e.g. \r\n{\r\n  "hasOperatingSystem":null,\r\n  "label":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":"",\r\n  "resizedSizeInGB":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--has-operating-system <hasOperatingSystem>', $('Set the has-operating-system value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Set the operating-system-type value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'hasOperatingSystem';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hasOperatingSystem) {
      if (options.parse && options.hasOperatingSystem) {
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      }
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hasOperatingSystem}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystemType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-disk-parameters delete virtual-machine-disk-update-parameters
  var catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1.category('update-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var deleteparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = parametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1.category('virtual-machine-disk-update-parameters')
  .description($('Commands to delete components of virtual-machine-disk in update-disk-parameters file.'));
  deleteparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters1.command('delete')
  .description($('Remove virtual-machine-disk-update-parameters in update-disk-parameters string or files, e.g. \r\n{\r\n  "hasOperatingSystem":null,\r\n  "label":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":"",\r\n  "resizedSizeInGB":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--has-operating-system', $('Remove the has-operating-system value.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system-type', $('Remove the operating-system-type value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.hasOperatingSystem || options.label || options.mediaLinkUri || options.name || options.operatingSystemType || options.resizedSizeInGB;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hasOperatingSystem) {
        subItemPath = options.path + '/hasOperatingSystem';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        subItemPath = options.path + '/mediaLinkUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystemType) {
        subItemPath = options.path + '/operatingSystemType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-disk-parameters add virtual-machine-disk-update-parameters
  var catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = catparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters2.category('update-disk-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var addparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = parametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters2.category('virtual-machine-disk-update-parameters')
  .description($('Commands to add components of virtual-machine-disk in update-disk-parameters file.'));
  addparametersUpdateDiskVirtualMachineDiskVirtualMachineDiskUpdateParameters2.command('add')
  .description($('Add virtual-machine-disk-update-parameters in update-disk-parameters string or files, e.g. \r\n{\r\n  "hasOperatingSystem":null,\r\n  "label":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":"",\r\n  "resizedSizeInGB":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--has-operating-system <hasOperatingSystem>', $('Add the has-operating-system value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Add the operating-system-type value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'hasOperatingSystem';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hasOperatingSystem) {
      if (options.parse && options.hasOperatingSystem) {
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      }
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hasOperatingSystem}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'operatingSystemType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = '' + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachineDisk UpdateDiskSize
  --name
  --parameters
=============================================
{
  "hasOperatingSystem":null,
  "label":"",
  "mediaLinkUri":"",
  "name":"",
  "operatingSystemType":"",
  "resizedSizeInGB":null
}
*/
  var virtualMachineDiskUpdateDiskSize = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk')
  .description($('Commands to manage your virtual machine disk.  '));
  virtualMachineDiskUpdateDiskSize.command('update-disk-size [name] [parameters]')
  .description($('The Add Disk operation adds a disk to the user image repository. The disk can be an operating system disk or a data disk.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157178.aspx for more information)'))
  .usage('[options] <name> <parameters>')
  .option('-n, --name <name>', $('name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(name, parameters, options, _) {
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisk.updateDiskSize(name, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineDiskUpdateDiskSizeupdateDiskSizeParameters1 = virtualMachineDiskUpdateDiskSize.category('update-disk-size-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  virtualMachineDiskUpdateDiskSizeupdateDiskSizeParameters1.command('generate')
  .description($('Generate virtualMachineDiskUpdateDiskSize parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"hasOperatingSystem\":null,\"label\":\"\",\"mediaLinkUri\":\"\",\"name\":\"\",\"operatingSystemType\":\"\",\"resizedSizeInGB\":null}', _);
    var filePath = 'virtualMachineDiskUpdateDiskSize_updateDiskSize.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"hasOperatingSystem\":null,\r\n\"label\":\"\",\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystemType\":\"\",\r\n\"resizedSizeInGB\":null\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineDiskUpdateDiskSizeupdateDiskSizeParameters1.command('patch')
  .description($('Command to patch virtualMachineDiskUpdateDiskSize parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-disk-size-parameters set virtual-machine-disk-update-parameters
  var catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0.category('update-disk-size-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var setparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = parametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0.category('virtual-machine-disk-update-parameters')
  .description($('Commands to set components of virtual-machine-disk in update-disk-size-parameters file.'));
  setparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters0.command('set')
  .description($('Set virtual-machine-disk-update-parameters in update-disk-size-parameters string or files, e.g. \r\n{\r\n  "hasOperatingSystem":null,\r\n  "label":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":"",\r\n  "resizedSizeInGB":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--has-operating-system <hasOperatingSystem>', $('Set the has-operating-system value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Set the operating-system-type value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'hasOperatingSystem';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hasOperatingSystem) {
      if (options.parse && options.hasOperatingSystem) {
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      }
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hasOperatingSystem}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystemType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-disk-size-parameters delete virtual-machine-disk-update-parameters
  var catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1.category('update-disk-size-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var deleteparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = parametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1.category('virtual-machine-disk-update-parameters')
  .description($('Commands to delete components of virtual-machine-disk in update-disk-size-parameters file.'));
  deleteparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters1.command('delete')
  .description($('Remove virtual-machine-disk-update-parameters in update-disk-size-parameters string or files, e.g. \r\n{\r\n  "hasOperatingSystem":null,\r\n  "label":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":"",\r\n  "resizedSizeInGB":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--has-operating-system', $('Remove the has-operating-system value.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system-type', $('Remove the operating-system-type value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.hasOperatingSystem || options.label || options.mediaLinkUri || options.name || options.operatingSystemType || options.resizedSizeInGB;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hasOperatingSystem) {
        subItemPath = options.path + '/hasOperatingSystem';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        subItemPath = options.path + '/mediaLinkUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystemType) {
        subItemPath = options.path + '/operatingSystemType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-disk-size-parameters add virtual-machine-disk-update-parameters
  var catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = catparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters2.category('update-disk-size-parameters')
  .description($('Commands to manage configuration of virtual-machine-disk in the parameter file.'));
  var addparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = parametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters2.category('virtual-machine-disk-update-parameters')
  .description($('Commands to add components of virtual-machine-disk in update-disk-size-parameters file.'));
  addparametersUpdateDiskSizeVirtualMachineDiskVirtualMachineDiskUpdateParameters2.command('add')
  .description($('Add virtual-machine-disk-update-parameters in update-disk-size-parameters string or files, e.g. \r\n{\r\n  "hasOperatingSystem":null,\r\n  "label":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":"",\r\n  "resizedSizeInGB":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--has-operating-system <hasOperatingSystem>', $('Add the has-operating-system value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Add the operating-system-type value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'hasOperatingSystem';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hasOperatingSystem) {
      if (options.parse && options.hasOperatingSystem) {
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      }
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hasOperatingSystem}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'operatingSystemType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = '' + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachineExtension List
*/
  var virtualMachineExtensionList = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-extension')
  .description($('Commands to manage your virtual machine extension.  '));
  virtualMachineExtensionList.command('list')
  .description($('The List Resource Extensions operation lists the resource extensions that are available to add to a Virtual Machine. In Azure, a process can run as a resource extension of a Virtual Machine. For example, Remote Desktop Access or the Azure Diagnostics Agent can run as resource extensions to the Virtual Machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn495441.aspx for more information)'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineExtension.list(_);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineExtension ListVersions
  --publisher-name
  --extension-name
*/
  var virtualMachineExtensionListVersions = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-extension')
  .description($('Commands to manage your virtual machine extension.  '));
  virtualMachineExtensionListVersions.command('list-versions [publisher-name] [extension-name]')
  .description($('The List Resource Extension Versions operation lists the versions of a resource extension that are available to add to a Virtual Machine. In Azure, a process can run as a resource extension of a Virtual Machine. For example, Remote Desktop Access or the Azure Diagnostics Agent can run as resource extensions to the Virtual Machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/dn495440.aspx for more information)'))
  .usage('[options] <publisher-name> <extension-name>')
  .option('--publisher-name <publisher-name>', $('publisher-name'))
  .option('--extension-name <extension-name>', $('extension-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(publisherName, extensionName, options, _) {
    if (!publisherName) {
      publisherName = cli.interaction.promptIfNotGiven($('publisher-name : '), publisherName, _);
    }

    cli.output.verbose('publisherName = ' + publisherName);
    if (!extensionName) {
      extensionName = cli.interaction.promptIfNotGiven($('extension-name : '), extensionName, _);
    }

    cli.output.verbose('extensionName = ' + extensionName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineExtension.listVersions(publisherName, extensionName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachine CaptureOSImage
  --service-name
  --deployment-name
  --virtual-machine-name
  --parameters
=============================================
{
  "postCaptureAction":0,
  "provisioningConfiguration":{
    "additionalUnattendContent":{
      "unattendPasses":[
        {
          "passName":"",
          "unattendComponents":[
            {
              "componentName":"",
              "unattendComponentSettings":[
                {
                  "content":"",
                  "settingName":""
                }
              ]
            }
          ]
        }
      ]
    },
    "adminPassword":"",
    "adminUserName":"",
    "computerName":"",
    "configurationSetType":"",
    "customData":"",
    "disableSshPasswordAuthentication":null,
    "domainJoin":{
      "credentials":{
        "domain":"",
        "password":"",
        "userName":""
      },
      "domainToJoin":"",
      "ldapMachineObjectOU":"",
      "provisioning":{
        "accountData":""
      }
    },
    "enableAutomaticUpdates":null,
    "hostName":"",
    "inputEndpoints":[
      {
        "enableDirectServerReturn":null,
        "endpointAcl":{
          "rules":[
            {
              "action":"",
              "description":"",
              "order":null,
              "remoteSubnet":""
            }
          ]
        },
        "idleTimeoutInMinutes":null,
        "loadBalancedEndpointSetName":"",
        "loadBalancerDistribution":"",
        "loadBalancerName":"",
        "loadBalancerProbe":{
          "intervalInSeconds":null,
          "path":"",
          "port":0,
          "protocol":0,
          "timeoutInSeconds":null
        },
        "localPort":null,
        "name":"",
        "port":null,
        "protocol":"",
        "virtualIPAddress":"",
        "virtualIPName":""
      }
    ],
    "iPForwarding":"",
    "networkInterfaces":[
      {
        "iPConfigurations":[
          {
            "staticVirtualNetworkIPAddress":"",
            "subnetName":""
          }
        ],
        "iPForwarding":"",
        "name":"",
        "networkSecurityGroup":""
      }
    ],
    "networkSecurityGroup":"",
    "publicIPs":[
      {
        "domainNameLabel":"",
        "idleTimeoutInMinutes":null,
        "name":""
      }
    ],
    "resetPasswordOnFirstLogon":null,
    "sshSettings":{
      "keyPairs":[
        {
          "fingerprint":"",
          "path":""
        }
      ],
      "publicKeys":[
        {
          "fingerprint":"",
          "path":""
        }
      ]
    },
    "staticVirtualNetworkIPAddress":"",
    "storedCertificateSettings":[
      {
        "storeName":"",
        "thumbprint":""
      }
    ],
    "subnetNames":[
      ""
    ],
    "timeZone":"",
    "userName":"",
    "userPassword":"",
    "windowsRemoteManagement":{
      "listeners":[
        {
          "certificateThumbprint":"",
          "listenerType":0
        }
      ]
    }
  },
  "targetImageLabel":"",
  "targetImageName":""
}
*/
  var virtualMachineCaptureOSImage = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineCaptureOSImage.command('capture-os-image [service-name] [deployment-name] [virtual-machine-name] [parameters]')
  .description($('The Capture Role operation creates a copy of the operating system virtual hard disk (VHD) that is deployed in the virtual machine, saves the VHD copy in the same storage location as the operating system VHD, and registers the copy as an image in your image gallery. From the captured image, you can create additional customized virtual machines. For more information about images and disks, see Manage Disks and Images at http://msdn.microsoft.com/en-us/library/windowsazure/jj672979.aspx. For more information about capturing images, see How to Capture an Image of a Virtual Machine Running Windows Server 2008 R2 at http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-capture-image-windows-server/ or How to Capture an Image of a Virtual Machine Running Linux at http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-linux-capture-image/. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157201.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <virtual-machine-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, virtualMachineName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachine.captureOSImage(serviceName, deploymentName, virtualMachineName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineCaptureOSImagecaptureOSImageParameters3 = virtualMachineCaptureOSImage.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineCaptureOSImagecaptureOSImageParameters3.command('generate')
  .description($('Generate virtualMachineCaptureOSImage parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"postCaptureAction\":0,\"provisioningConfiguration\":{\"additionalUnattendContent\":{\"unattendPasses\":[{\"passName\":\"\",\"unattendComponents\":[{\"componentName\":\"\",\"unattendComponentSettings\":[{\"content\":\"\",\"settingName\":\"\"}]}]}]},\"adminPassword\":\"\",\"adminUserName\":\"\",\"computerName\":\"\",\"configurationSetType\":\"\",\"customData\":\"\",\"disableSshPasswordAuthentication\":null,\"domainJoin\":{\"credentials\":{\"domain\":\"\",\"password\":\"\",\"userName\":\"\"},\"domainToJoin\":\"\",\"ldapMachineObjectOU\":\"\",\"provisioning\":{\"accountData\":\"\"}},\"enableAutomaticUpdates\":null,\"hostName\":\"\",\"inputEndpoints\":[{\"enableDirectServerReturn\":null,\"endpointAcl\":{\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}]},\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":0,\"protocol\":0,\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}],\"iPForwarding\":\"\",\"networkInterfaces\":[{\"iPConfigurations\":[{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\"}],\"iPForwarding\":\"\",\"name\":\"\",\"networkSecurityGroup\":\"\"}],\"networkSecurityGroup\":\"\",\"publicIPs\":[{\"domainNameLabel\":\"\",\"idleTimeoutInMinutes\":null,\"name\":\"\"}],\"resetPasswordOnFirstLogon\":null,\"sshSettings\":{\"keyPairs\":[{\"fingerprint\":\"\",\"path\":\"\"}],\"publicKeys\":[{\"fingerprint\":\"\",\"path\":\"\"}]},\"staticVirtualNetworkIPAddress\":\"\",\"storedCertificateSettings\":[{\"storeName\":\"\",\"thumbprint\":\"\"}],\"subnetNames\":[\"\"],\"timeZone\":\"\",\"userName\":\"\",\"userPassword\":\"\",\"windowsRemoteManagement\":{\"listeners\":[{\"certificateThumbprint\":\"\",\"listenerType\":0}]}},\"targetImageLabel\":\"\",\"targetImageName\":\"\"}', _);
    var filePath = 'virtualMachineCaptureOSImage_captureOSImage.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"postCaptureAction\":0,\r\n\"provisioningConfiguration\":{\r\n\"additionalUnattendContent\":{\r\n\"unattendPasses\":[\r\n{\r\n\"passName\":\"\",\r\n\"unattendComponents\":[\r\n{\r\n\"componentName\":\"\",\r\n\"unattendComponentSettings\":[\r\n{\r\n\"content\":\"\",\r\n\"settingName\":\"\"\r\n}\r\n]\r\n}\r\n]\r\n}\r\n]\r\n},\r\n\"adminPassword\":\"\",\r\n\"adminUserName\":\"\",\r\n\"computerName\":\"\",\r\n\"configurationSetType\":\"\",\r\n\"customData\":\"\",\r\n\"disableSshPasswordAuthentication\":null,\r\n\"domainJoin\":{\r\n\"credentials\":{\r\n\"domain\":\"\",\r\n\"password\":\"\",\r\n\"userName\":\"\"\r\n},\r\n\"domainToJoin\":\"\",\r\n\"ldapMachineObjectOU\":\"\",\r\n\"provisioning\":{\r\n\"accountData\":\"\"\r\n}\r\n},\r\n\"enableAutomaticUpdates\":null,\r\n\"hostName\":\"\",\r\n\"inputEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"endpointAcl\":{\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n]\r\n},\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":0,\r\n\"protocol\":0,\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"networkInterfaces\":[\r\n{\r\n\"iPConfigurations\":[\r\n{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"name\":\"\",\r\n\"networkSecurityGroup\":\"\"\r\n}\r\n],\r\n\"networkSecurityGroup\":\"\",\r\n\"publicIPs\":[\r\n{\r\n\"domainNameLabel\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"resetPasswordOnFirstLogon\":null,\r\n\"sshSettings\":{\r\n\"keyPairs\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n],\r\n\"publicKeys\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n]\r\n},\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"storedCertificateSettings\":[\r\n{\r\n\"storeName\":\"\",\r\n\"thumbprint\":\"\"\r\n}\r\n],\r\n\"subnetNames\":[\r\n\"\"\r\n],\r\n\"timeZone\":\"\",\r\n\"userName\":\"\",\r\n\"userPassword\":\"\",\r\n\"windowsRemoteManagement\":{\r\n\"listeners\":[\r\n{\r\n\"certificateThumbprint\":\"\",\r\n\"listenerType\":0\r\n}\r\n]\r\n}\r\n},\r\n\"targetImageLabel\":\"\",\r\n\"targetImageName\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineCaptureOSImagecaptureOSImageParameters3.command('patch')
  .description($('Command to patch virtualMachineCaptureOSImage parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set virtual-machine-capture-os-image-parameters
  var catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0 = catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0 = parametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0.category('virtual-machine-capture-os-image-parameters')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters0.command('set')
  .description($('Set virtual-machine-capture-os-image-parameters in capture-os-image-parameters string or files, e.g. \r\n{\r\n  "postCaptureAction":0,\r\n  "provisioningConfiguration":{\r\n    "additionalUnattendContent":{\r\n      "unattendPasses":[\r\n        {\r\n          "passName":"",\r\n          "unattendComponents":[\r\n            {\r\n              "componentName":"",\r\n              "unattendComponentSettings":[\r\n                {\r\n                  "content":"",\r\n                  "settingName":""\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    "adminPassword":"",\r\n    "adminUserName":"",\r\n    "computerName":"",\r\n    "configurationSetType":"",\r\n    "customData":"",\r\n    "disableSshPasswordAuthentication":null,\r\n    "domainJoin":{\r\n      "credentials":{\r\n        "domain":"",\r\n        "password":"",\r\n        "userName":""\r\n      },\r\n      "domainToJoin":"",\r\n      "ldapMachineObjectOU":"",\r\n      "provisioning":{\r\n        "accountData":""\r\n      }\r\n    },\r\n    "enableAutomaticUpdates":null,\r\n    "hostName":"",\r\n    "inputEndpoints":[\r\n      {\r\n        "enableDirectServerReturn":null,\r\n        "endpointAcl":{\r\n          "rules":[\r\n            {\r\n              "action":"",\r\n              "description":"",\r\n              "order":null,\r\n              "remoteSubnet":""\r\n            }\r\n          ]\r\n        },\r\n        "idleTimeoutInMinutes":null,\r\n        "loadBalancedEndpointSetName":"",\r\n        "loadBalancerDistribution":"",\r\n        "loadBalancerName":"",\r\n        "loadBalancerProbe":{\r\n          "intervalInSeconds":null,\r\n          "path":"",\r\n          "port":0,\r\n          "protocol":0,\r\n          "timeoutInSeconds":null\r\n        },\r\n        "localPort":null,\r\n        "name":"",\r\n        "port":null,\r\n        "protocol":"",\r\n        "virtualIPAddress":"",\r\n        "virtualIPName":""\r\n      }\r\n    ],\r\n    "iPForwarding":"",\r\n    "networkInterfaces":[\r\n      {\r\n        "iPConfigurations":[\r\n          {\r\n            "staticVirtualNetworkIPAddress":"",\r\n            "subnetName":""\r\n          }\r\n        ],\r\n        "iPForwarding":"",\r\n        "name":"",\r\n        "networkSecurityGroup":""\r\n      }\r\n    ],\r\n    "networkSecurityGroup":"",\r\n    "publicIPs":[\r\n      {\r\n        "domainNameLabel":"",\r\n        "idleTimeoutInMinutes":null,\r\n        "name":""\r\n      }\r\n    ],\r\n    "resetPasswordOnFirstLogon":null,\r\n    "sshSettings":{\r\n      "keyPairs":[\r\n        {\r\n          "fingerprint":"",\r\n          "path":""\r\n        }\r\n      ],\r\n      "publicKeys":[\r\n        {\r\n          "fingerprint":"",\r\n          "path":""\r\n        }\r\n      ]\r\n    },\r\n    "staticVirtualNetworkIPAddress":"",\r\n    "storedCertificateSettings":[\r\n      {\r\n        "storeName":"",\r\n        "thumbprint":""\r\n      }\r\n    ],\r\n    "subnetNames":[\r\n      ""\r\n    ],\r\n    "timeZone":"",\r\n    "userName":"",\r\n    "userPassword":"",\r\n    "windowsRemoteManagement":{\r\n      "listeners":[\r\n        {\r\n          "certificateThumbprint":"",\r\n          "listenerType":0\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  "targetImageLabel":"",\r\n  "targetImageName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--post-capture-action <postCaptureAction>', $('Set the post-capture-action value.'))
  .option('--provisioning-configuration <provisioningConfiguration>', $('Set the provisioning-configuration value.'))
  .option('--target-image-label <targetImageLabel>', $('Set the target-image-label value.'))
  .option('--target-image-name <targetImageName>', $('Set the target-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'postCaptureAction';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.postCaptureAction) {
      if (options.parse && options.postCaptureAction) {
        options.postCaptureAction = JSON.parse(options.postCaptureAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postCaptureAction}]);
    }
    paramPath = options.path + '/' + 'provisioningConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningConfiguration) {
      if (options.parse && options.provisioningConfiguration) {
        options.provisioningConfiguration = JSON.parse(options.provisioningConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningConfiguration}]);
    }
    paramPath = options.path + '/' + 'targetImageLabel';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.targetImageLabel) {
      if (options.parse && options.targetImageLabel) {
        options.targetImageLabel = JSON.parse(options.targetImageLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetImageLabel}]);
    }
    paramPath = options.path + '/' + 'targetImageName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.targetImageName) {
      if (options.parse && options.targetImageName) {
        options.targetImageName = JSON.parse(options.targetImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete virtual-machine-capture-os-image-parameters
  var catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1 = catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1 = parametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1.category('virtual-machine-capture-os-image-parameters')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters1.command('delete')
  .description($('Remove virtual-machine-capture-os-image-parameters in capture-os-image-parameters string or files, e.g. \r\n{\r\n  "postCaptureAction":0,\r\n  "provisioningConfiguration":{\r\n    "additionalUnattendContent":{\r\n      "unattendPasses":[\r\n        {\r\n          "passName":"",\r\n          "unattendComponents":[\r\n            {\r\n              "componentName":"",\r\n              "unattendComponentSettings":[\r\n                {\r\n                  "content":"",\r\n                  "settingName":""\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    "adminPassword":"",\r\n    "adminUserName":"",\r\n    "computerName":"",\r\n    "configurationSetType":"",\r\n    "customData":"",\r\n    "disableSshPasswordAuthentication":null,\r\n    "domainJoin":{\r\n      "credentials":{\r\n        "domain":"",\r\n        "password":"",\r\n        "userName":""\r\n      },\r\n      "domainToJoin":"",\r\n      "ldapMachineObjectOU":"",\r\n      "provisioning":{\r\n        "accountData":""\r\n      }\r\n    },\r\n    "enableAutomaticUpdates":null,\r\n    "hostName":"",\r\n    "inputEndpoints":[\r\n      {\r\n        "enableDirectServerReturn":null,\r\n        "endpointAcl":{\r\n          "rules":[\r\n            {\r\n              "action":"",\r\n              "description":"",\r\n              "order":null,\r\n              "remoteSubnet":""\r\n            }\r\n          ]\r\n        },\r\n        "idleTimeoutInMinutes":null,\r\n        "loadBalancedEndpointSetName":"",\r\n        "loadBalancerDistribution":"",\r\n        "loadBalancerName":"",\r\n        "loadBalancerProbe":{\r\n          "intervalInSeconds":null,\r\n          "path":"",\r\n          "port":0,\r\n          "protocol":0,\r\n          "timeoutInSeconds":null\r\n        },\r\n        "localPort":null,\r\n        "name":"",\r\n        "port":null,\r\n        "protocol":"",\r\n        "virtualIPAddress":"",\r\n        "virtualIPName":""\r\n      }\r\n    ],\r\n    "iPForwarding":"",\r\n    "networkInterfaces":[\r\n      {\r\n        "iPConfigurations":[\r\n          {\r\n            "staticVirtualNetworkIPAddress":"",\r\n            "subnetName":""\r\n          }\r\n        ],\r\n        "iPForwarding":"",\r\n        "name":"",\r\n        "networkSecurityGroup":""\r\n      }\r\n    ],\r\n    "networkSecurityGroup":"",\r\n    "publicIPs":[\r\n      {\r\n        "domainNameLabel":"",\r\n        "idleTimeoutInMinutes":null,\r\n        "name":""\r\n      }\r\n    ],\r\n    "resetPasswordOnFirstLogon":null,\r\n    "sshSettings":{\r\n      "keyPairs":[\r\n        {\r\n          "fingerprint":"",\r\n          "path":""\r\n        }\r\n      ],\r\n      "publicKeys":[\r\n        {\r\n          "fingerprint":"",\r\n          "path":""\r\n        }\r\n      ]\r\n    },\r\n    "staticVirtualNetworkIPAddress":"",\r\n    "storedCertificateSettings":[\r\n      {\r\n        "storeName":"",\r\n        "thumbprint":""\r\n      }\r\n    ],\r\n    "subnetNames":[\r\n      ""\r\n    ],\r\n    "timeZone":"",\r\n    "userName":"",\r\n    "userPassword":"",\r\n    "windowsRemoteManagement":{\r\n      "listeners":[\r\n        {\r\n          "certificateThumbprint":"",\r\n          "listenerType":0\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  "targetImageLabel":"",\r\n  "targetImageName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--post-capture-action', $('Remove the post-capture-action value.'))
  .option('--provisioning-configuration', $('Remove the provisioning-configuration value.'))
  .option('--target-image-label', $('Remove the target-image-label value.'))
  .option('--target-image-name', $('Remove the target-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.postCaptureAction || options.provisioningConfiguration || options.targetImageLabel || options.targetImageName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.postCaptureAction) {
        subItemPath = options.path + '/postCaptureAction';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningConfiguration) {
        subItemPath = options.path + '/provisioningConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.targetImageLabel) {
        subItemPath = options.path + '/targetImageLabel';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.targetImageName) {
        subItemPath = options.path + '/targetImageName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add virtual-machine-capture-os-image-parameters
  var catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters2 = catparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters2 = parametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters2.category('virtual-machine-capture-os-image-parameters')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineVirtualMachineCaptureOSImageParameters2.command('add')
  .description($('Add virtual-machine-capture-os-image-parameters in capture-os-image-parameters string or files, e.g. \r\n{\r\n  "postCaptureAction":0,\r\n  "provisioningConfiguration":{\r\n    "additionalUnattendContent":{\r\n      "unattendPasses":[\r\n        {\r\n          "passName":"",\r\n          "unattendComponents":[\r\n            {\r\n              "componentName":"",\r\n              "unattendComponentSettings":[\r\n                {\r\n                  "content":"",\r\n                  "settingName":""\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    "adminPassword":"",\r\n    "adminUserName":"",\r\n    "computerName":"",\r\n    "configurationSetType":"",\r\n    "customData":"",\r\n    "disableSshPasswordAuthentication":null,\r\n    "domainJoin":{\r\n      "credentials":{\r\n        "domain":"",\r\n        "password":"",\r\n        "userName":""\r\n      },\r\n      "domainToJoin":"",\r\n      "ldapMachineObjectOU":"",\r\n      "provisioning":{\r\n        "accountData":""\r\n      }\r\n    },\r\n    "enableAutomaticUpdates":null,\r\n    "hostName":"",\r\n    "inputEndpoints":[\r\n      {\r\n        "enableDirectServerReturn":null,\r\n        "endpointAcl":{\r\n          "rules":[\r\n            {\r\n              "action":"",\r\n              "description":"",\r\n              "order":null,\r\n              "remoteSubnet":""\r\n            }\r\n          ]\r\n        },\r\n        "idleTimeoutInMinutes":null,\r\n        "loadBalancedEndpointSetName":"",\r\n        "loadBalancerDistribution":"",\r\n        "loadBalancerName":"",\r\n        "loadBalancerProbe":{\r\n          "intervalInSeconds":null,\r\n          "path":"",\r\n          "port":0,\r\n          "protocol":0,\r\n          "timeoutInSeconds":null\r\n        },\r\n        "localPort":null,\r\n        "name":"",\r\n        "port":null,\r\n        "protocol":"",\r\n        "virtualIPAddress":"",\r\n        "virtualIPName":""\r\n      }\r\n    ],\r\n    "iPForwarding":"",\r\n    "networkInterfaces":[\r\n      {\r\n        "iPConfigurations":[\r\n          {\r\n            "staticVirtualNetworkIPAddress":"",\r\n            "subnetName":""\r\n          }\r\n        ],\r\n        "iPForwarding":"",\r\n        "name":"",\r\n        "networkSecurityGroup":""\r\n      }\r\n    ],\r\n    "networkSecurityGroup":"",\r\n    "publicIPs":[\r\n      {\r\n        "domainNameLabel":"",\r\n        "idleTimeoutInMinutes":null,\r\n        "name":""\r\n      }\r\n    ],\r\n    "resetPasswordOnFirstLogon":null,\r\n    "sshSettings":{\r\n      "keyPairs":[\r\n        {\r\n          "fingerprint":"",\r\n          "path":""\r\n        }\r\n      ],\r\n      "publicKeys":[\r\n        {\r\n          "fingerprint":"",\r\n          "path":""\r\n        }\r\n      ]\r\n    },\r\n    "staticVirtualNetworkIPAddress":"",\r\n    "storedCertificateSettings":[\r\n      {\r\n        "storeName":"",\r\n        "thumbprint":""\r\n      }\r\n    ],\r\n    "subnetNames":[\r\n      ""\r\n    ],\r\n    "timeZone":"",\r\n    "userName":"",\r\n    "userPassword":"",\r\n    "windowsRemoteManagement":{\r\n      "listeners":[\r\n        {\r\n          "certificateThumbprint":"",\r\n          "listenerType":0\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  "targetImageLabel":"",\r\n  "targetImageName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--post-capture-action <postCaptureAction>', $('Add the post-capture-action value.'))
  .option('--provisioning-configuration <provisioningConfiguration>', $('Add the provisioning-configuration value.'))
  .option('--target-image-label <targetImageLabel>', $('Add the target-image-label value.'))
  .option('--target-image-name <targetImageName>', $('Add the target-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'postCaptureAction';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.postCaptureAction) {
      if (options.parse && options.postCaptureAction) {
        options.postCaptureAction = JSON.parse(options.postCaptureAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postCaptureAction}]);
    }
    paramPath = '' + '/' + 'provisioningConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningConfiguration) {
      if (options.parse && options.provisioningConfiguration) {
        options.provisioningConfiguration = JSON.parse(options.provisioningConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningConfiguration}]);
    }
    paramPath = '' + '/' + 'targetImageLabel';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.targetImageLabel) {
      if (options.parse && options.targetImageLabel) {
        options.targetImageLabel = JSON.parse(options.targetImageLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetImageLabel}]);
    }
    paramPath = '' + '/' + 'targetImageName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.targetImageName) {
      if (options.parse && options.targetImageName) {
        options.targetImageName = JSON.parse(options.targetImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete post-capture-action
  var catparametersCaptureOSImageVirtualMachinePostCaptureAction1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePostCaptureAction1 = catparametersCaptureOSImageVirtualMachinePostCaptureAction1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachinePostCaptureAction1 = parametersCaptureOSImageVirtualMachinePostCaptureAction1.category('post-capture-action')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachinePostCaptureAction1.command('delete')
  .description($('Remove post-capture-action in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "postCaptureAction" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/postCaptureAction';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add post-capture-action
  var catparametersCaptureOSImageVirtualMachinePostCaptureAction2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePostCaptureAction2 = catparametersCaptureOSImageVirtualMachinePostCaptureAction2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachinePostCaptureAction2 = parametersCaptureOSImageVirtualMachinePostCaptureAction2.category('post-capture-action')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachinePostCaptureAction2.command('add')
  .description($('Add post-capture-action in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "postCaptureAction" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/postCaptureAction' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set provisioning-configuration
  var catparametersCaptureOSImageVirtualMachineProvisioningConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProvisioningConfiguration0 = catparametersCaptureOSImageVirtualMachineProvisioningConfiguration0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineProvisioningConfiguration0 = parametersCaptureOSImageVirtualMachineProvisioningConfiguration0.category('provisioning-configuration')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineProvisioningConfiguration0.command('set')
  .description($('Set provisioning-configuration in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioningConfiguration" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":0,\r\n                   "protocol":0,\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":0\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--additional-unattend-content <additionalUnattendContent>', $('Set the additional-unattend-content value.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Set the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Set the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Set the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Set the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Set the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Set the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Set the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Set the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Set the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Set the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Set the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .option('--user-password <userPassword>', $('Set the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Set the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration';
    var paramPath = options.path + '/' + 'additionalUnattendContent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.additionalUnattendContent) {
      if (options.parse && options.additionalUnattendContent) {
        options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContent}]);
    }
    paramPath = options.path + '/' + 'adminPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'adminUserName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = options.path + '/' + 'computerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = options.path + '/' + 'configurationSetType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = options.path + '/' + 'customData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'disableSshPasswordAuthentication';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'domainJoin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'hostName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = options.path + '/' + 'inputEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'networkInterfaces';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'publicIPs';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = options.path + '/' + 'resetPasswordOnFirstLogon';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = options.path + '/' + 'sshSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'storedCertificateSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = options.path + '/' + 'subnetNames';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = options.path + '/' + 'userPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = options.path + '/' + 'windowsRemoteManagement';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete provisioning-configuration
  var catparametersCaptureOSImageVirtualMachineProvisioningConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProvisioningConfiguration1 = catparametersCaptureOSImageVirtualMachineProvisioningConfiguration1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineProvisioningConfiguration1 = parametersCaptureOSImageVirtualMachineProvisioningConfiguration1.category('provisioning-configuration')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineProvisioningConfiguration1.command('delete')
  .description($('Remove provisioning-configuration in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioningConfiguration" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":0,\r\n                   "protocol":0,\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":0\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--additional-unattend-content', $('Remove the additional-unattend-content value.'))
  .option('--admin-password', $('Remove the admin-password value.'))
  .option('--admin-user-name', $('Remove the admin-user-name value.'))
  .option('--computer-name', $('Remove the computer-name value.'))
  .option('--configuration-set-type', $('Remove the configuration-set-type value.'))
  .option('--custom-data', $('Remove the custom-data value.'))
  .option('--disable-ssh-password-authentication', $('Remove the disable-ssh-password-authentication value.'))
  .option('--domain-join', $('Remove the domain-join value.'))
  .option('--enable-automatic-updates', $('Remove the enable-automatic-updates value.'))
  .option('--host-name', $('Remove the host-name value.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--network-interfaces', $('Remove the network-interfaces value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .option('--public-ip', $('Remove the public-ip value.'))
  .option('--reset-password-on-first-logon', $('Remove the reset-password-on-first-logon value.'))
  .option('--ssh-settings', $('Remove the ssh-settings value.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings', $('Remove the stored-certificate-settings value.'))
  .option('--subnet-names', $('Remove the subnet-names value.'))
  .option('--time-zone', $('Remove the time-zone value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .option('--user-password', $('Remove the user-password value.'))
  .option('--windows-remote-management', $('Remove the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration';
    var anySubItem = false || options.additionalUnattendContent || options.adminPassword || options.adminUserName || options.computerName || options.configurationSetType || options.customData || options.disableSshPasswordAuthentication || options.domainJoin || options.enableAutomaticUpdates || options.hostName || options.inputEndpoints || options.ipForwarding || options.networkInterfaces || options.networkSecurityGroup || options.publicIPs || options.resetPasswordOnFirstLogon || options.sshSettings || options.staticVirtualNetworkIPAddress || options.storedCertificateSettings || options.subnetNames || options.timeZone || options.userName || options.userPassword || options.windowsRemoteManagement;
    if (anySubItem) {
      var subItemPath = null;
      if (options.additionalUnattendContent) {
        subItemPath = options.path + '/additionalUnattendContent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminPassword) {
        subItemPath = options.path + '/adminPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminUserName) {
        subItemPath = options.path + '/adminUserName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.computerName) {
        subItemPath = options.path + '/computerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSetType) {
        subItemPath = options.path + '/configurationSetType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.customData) {
        subItemPath = options.path + '/customData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disableSshPasswordAuthentication) {
        subItemPath = options.path + '/disableSshPasswordAuthentication';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainJoin) {
        subItemPath = options.path + '/domainJoin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableAutomaticUpdates) {
        subItemPath = options.path + '/enableAutomaticUpdates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostName) {
        subItemPath = options.path + '/hostName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.inputEndpoints) {
        subItemPath = options.path + '/inputEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        subItemPath = options.path + '/ipForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkInterfaces) {
        subItemPath = options.path + '/networkInterfaces';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPs) {
        subItemPath = options.path + '/publicIPs';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resetPasswordOnFirstLogon) {
        subItemPath = options.path + '/resetPasswordOnFirstLogon';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sshSettings) {
        subItemPath = options.path + '/sshSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storedCertificateSettings) {
        subItemPath = options.path + '/storedCertificateSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetNames) {
        subItemPath = options.path + '/subnetNames';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeZone) {
        subItemPath = options.path + '/timeZone';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        subItemPath = options.path + '/userName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userPassword) {
        subItemPath = options.path + '/userPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.windowsRemoteManagement) {
        subItemPath = options.path + '/windowsRemoteManagement';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add provisioning-configuration
  var catparametersCaptureOSImageVirtualMachineProvisioningConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProvisioningConfiguration2 = catparametersCaptureOSImageVirtualMachineProvisioningConfiguration2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineProvisioningConfiguration2 = parametersCaptureOSImageVirtualMachineProvisioningConfiguration2.category('provisioning-configuration')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineProvisioningConfiguration2.command('add')
  .description($('Add provisioning-configuration in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioningConfiguration" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":0,\r\n                   "protocol":0,\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":0\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--additional-unattend-content <additionalUnattendContent>', $('Add the additional-unattend-content value.'))
  .option('--admin-password <adminPassword>', $('Add the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Add the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Add the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Add the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Add the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Add the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Add the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Add the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Add the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Add the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Add the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Add the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Add the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Add the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Add the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Add the time-zone value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .option('--user-password <userPassword>', $('Add the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Add the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration' + '/' + 'additionalUnattendContent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.additionalUnattendContent) {
      if (options.parse && options.additionalUnattendContent) {
        options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContent}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'adminPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'adminUserName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'computerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'configurationSetType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'customData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'disableSshPasswordAuthentication';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'domainJoin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'enableAutomaticUpdates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'hostName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'inputEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'ipForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'networkInterfaces';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'publicIPs';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'resetPasswordOnFirstLogon';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'sshSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'storedCertificateSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'subnetNames';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'timeZone';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'userName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'userPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'windowsRemoteManagement';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete additional-unattend-content
  var catparametersCaptureOSImageVirtualMachineAdditionalUnattendContent1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineAdditionalUnattendContent1 = catparametersCaptureOSImageVirtualMachineAdditionalUnattendContent1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineAdditionalUnattendContent1 = parametersCaptureOSImageVirtualMachineAdditionalUnattendContent1.category('additional-unattend-content')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineAdditionalUnattendContent1.command('delete')
  .description($('Remove additional-unattend-content in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "unattendPasses":[\r\n               {\r\n                 "passName":"",\r\n                 "unattendComponents":[\r\n                   {\r\n                     "componentName":"",\r\n                     "unattendComponentSettings":[\r\n                       {\r\n                         "content":"",\r\n                         "settingName":""\r\n                       }\r\n                     ]\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--unattend-passes', $('Remove the unattend-passes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/additionalUnattendContent';
    var anySubItem = false || options.unattendPasses;
    if (anySubItem) {
      var subItemPath = null;
      if (options.unattendPasses) {
        subItemPath = options.path + '/unattendPasses';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add additional-unattend-content
  var catparametersCaptureOSImageVirtualMachineAdditionalUnattendContent2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineAdditionalUnattendContent2 = catparametersCaptureOSImageVirtualMachineAdditionalUnattendContent2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineAdditionalUnattendContent2 = parametersCaptureOSImageVirtualMachineAdditionalUnattendContent2.category('additional-unattend-content')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineAdditionalUnattendContent2.command('add')
  .description($('Add additional-unattend-content in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "unattendPasses":[\r\n               {\r\n                 "passName":"",\r\n                 "unattendComponents":[\r\n                   {\r\n                     "componentName":"",\r\n                     "unattendComponentSettings":[\r\n                       {\r\n                         "content":"",\r\n                         "settingName":""\r\n                       }\r\n                     ]\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--unattend-passes <unattendPasses>', $('Add the unattend-passes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/additionalUnattendContent' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/additionalUnattendContent' + '/' + 'unattendPasses';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendPasses) {
      if (options.parse && options.unattendPasses) {
        options.unattendPasses = JSON.parse(options.unattendPasses);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendPasses}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set unattend-passes
  var catparametersCaptureOSImageVirtualMachineUnattendPasses0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineUnattendPasses0 = catparametersCaptureOSImageVirtualMachineUnattendPasses0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineUnattendPasses0 = parametersCaptureOSImageVirtualMachineUnattendPasses0.category('unattend-passes')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineUnattendPasses0.command('set')
  .description($('Set unattend-passes in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--pass-name <passName>', $('Set the pass-name value.'))
  .option('--unattend-components <unattendComponents>', $('Set the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'passName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.passName) {
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = options.path + '/' + 'unattendComponents';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendComponents) {
      if (options.parse && options.unattendComponents) {
        options.unattendComponents = JSON.parse(options.unattendComponents);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponents}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete unattend-passes
  var catparametersCaptureOSImageVirtualMachineUnattendPasses1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineUnattendPasses1 = catparametersCaptureOSImageVirtualMachineUnattendPasses1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineUnattendPasses1 = parametersCaptureOSImageVirtualMachineUnattendPasses1.category('unattend-passes')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineUnattendPasses1.command('delete')
  .description($('Remove unattend-passes in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--pass-name', $('Remove the pass-name value.'))
  .option('--unattend-components', $('Remove the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.passName || options.unattendComponents;
    if (anySubItem) {
      var subItemPath = null;
      if (options.passName) {
        subItemPath = options.path + '/passName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.unattendComponents) {
        subItemPath = options.path + '/unattendComponents';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add unattend-passes
  var catparametersCaptureOSImageVirtualMachineUnattendPasses2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineUnattendPasses2 = catparametersCaptureOSImageVirtualMachineUnattendPasses2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineUnattendPasses2 = parametersCaptureOSImageVirtualMachineUnattendPasses2.category('unattend-passes')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineUnattendPasses2.command('add')
  .description($('Add unattend-passes in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--pass-name <passName>', $('Add the pass-name value.'))
  .option('--unattend-components <unattendComponents>', $('Add the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '') + '/' + 'passName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.passName) {
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = '/provisioningConfiguration/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '') + '/' + 'unattendComponents';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendComponents) {
      if (options.parse && options.unattendComponents) {
        options.unattendComponents = JSON.parse(options.unattendComponents);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponents}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set unattend-components
  var catparametersCaptureOSImageVirtualMachineUnattendComponents0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineUnattendComponents0 = catparametersCaptureOSImageVirtualMachineUnattendComponents0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineUnattendComponents0 = parametersCaptureOSImageVirtualMachineUnattendComponents0.category('unattend-components')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineUnattendComponents0.command('set')
  .description($('Set unattend-components in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--component-name <componentName>', $('Set the component-name value.'))
  .option('--unattend-component-settings <unattendComponentSettings>', $('Set the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'componentName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.componentName) {
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = options.path + '/' + 'unattendComponentSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendComponentSettings) {
      if (options.parse && options.unattendComponentSettings) {
        options.unattendComponentSettings = JSON.parse(options.unattendComponentSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponentSettings}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete unattend-components
  var catparametersCaptureOSImageVirtualMachineUnattendComponents1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineUnattendComponents1 = catparametersCaptureOSImageVirtualMachineUnattendComponents1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineUnattendComponents1 = parametersCaptureOSImageVirtualMachineUnattendComponents1.category('unattend-components')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineUnattendComponents1.command('delete')
  .description($('Remove unattend-components in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--component-name', $('Remove the component-name value.'))
  .option('--unattend-component-settings', $('Remove the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.componentName || options.unattendComponentSettings;
    if (anySubItem) {
      var subItemPath = null;
      if (options.componentName) {
        subItemPath = options.path + '/componentName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.unattendComponentSettings) {
        subItemPath = options.path + '/unattendComponentSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add unattend-components
  var catparametersCaptureOSImageVirtualMachineUnattendComponents2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineUnattendComponents2 = catparametersCaptureOSImageVirtualMachineUnattendComponents2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineUnattendComponents2 = parametersCaptureOSImageVirtualMachineUnattendComponents2.category('unattend-components')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineUnattendComponents2.command('add')
  .description($('Add unattend-components in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--component-name <componentName>', $('Add the component-name value.'))
  .option('--unattend-component-settings <unattendComponentSettings>', $('Add the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '') + '/' + 'componentName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.componentName) {
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = '/provisioningConfiguration/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '') + '/' + 'unattendComponentSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendComponentSettings) {
      if (options.parse && options.unattendComponentSettings) {
        options.unattendComponentSettings = JSON.parse(options.unattendComponentSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponentSettings}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set unattend-component-settings
  var catparametersCaptureOSImageVirtualMachineUnattendComponentSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineUnattendComponentSettings0 = catparametersCaptureOSImageVirtualMachineUnattendComponentSettings0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineUnattendComponentSettings0 = parametersCaptureOSImageVirtualMachineUnattendComponentSettings0.category('unattend-component-settings')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineUnattendComponentSettings0.command('set')
  .description($('Set unattend-component-settings in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-components-index <unattend-components-index>', $('Indexer: unattend-components-index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--content <content>', $('Set the content value.'))
  .option('--setting-name <settingName>', $('Set the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'content';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.content) {
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    paramPath = options.path + '/' + 'settingName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.settingName) {
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete unattend-component-settings
  var catparametersCaptureOSImageVirtualMachineUnattendComponentSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineUnattendComponentSettings1 = catparametersCaptureOSImageVirtualMachineUnattendComponentSettings1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineUnattendComponentSettings1 = parametersCaptureOSImageVirtualMachineUnattendComponentSettings1.category('unattend-component-settings')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineUnattendComponentSettings1.command('delete')
  .description($('Remove unattend-component-settings in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-components-index <unattend-components-index>', $('Indexer: unattend-components-index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--content', $('Remove the content value.'))
  .option('--setting-name', $('Remove the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.content || options.settingName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.content) {
        subItemPath = options.path + '/content';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.settingName) {
        subItemPath = options.path + '/settingName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add unattend-component-settings
  var catparametersCaptureOSImageVirtualMachineUnattendComponentSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineUnattendComponentSettings2 = catparametersCaptureOSImageVirtualMachineUnattendComponentSettings2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineUnattendComponentSettings2 = parametersCaptureOSImageVirtualMachineUnattendComponentSettings2.category('unattend-component-settings')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineUnattendComponentSettings2.command('add')
  .description($('Add unattend-component-settings in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--content <content>', $('Add the content value.'))
  .option('--setting-name <settingName>', $('Add the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'content';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.content) {
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    paramPath = '/provisioningConfiguration/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'settingName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.settingName) {
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set domain-join
  var catparametersCaptureOSImageVirtualMachineDomainJoin0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineDomainJoin0 = catparametersCaptureOSImageVirtualMachineDomainJoin0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineDomainJoin0 = parametersCaptureOSImageVirtualMachineDomainJoin0.category('domain-join')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineDomainJoin0.command('set')
  .description($('Set domain-join in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--credentials <credentials>', $('Set the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Set the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Set the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Set the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/domainJoin';
    var paramPath = options.path + '/' + 'credentials';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = options.path + '/' + 'domainToJoin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = options.path + '/' + 'ldapMachineObjectOU';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = options.path + '/' + 'provisioning';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete domain-join
  var catparametersCaptureOSImageVirtualMachineDomainJoin1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineDomainJoin1 = catparametersCaptureOSImageVirtualMachineDomainJoin1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineDomainJoin1 = parametersCaptureOSImageVirtualMachineDomainJoin1.category('domain-join')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineDomainJoin1.command('delete')
  .description($('Remove domain-join in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--credentials', $('Remove the credentials value.'))
  .option('--domain-to-join', $('Remove the domain-to-join value.'))
  .option('--ldap-machine-object-o-u', $('Remove the ldap-machine-object-o-u value.'))
  .option('--provisioning', $('Remove the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/domainJoin';
    var anySubItem = false || options.credentials || options.domainToJoin || options.ldapMachineObjectOU || options.provisioning;
    if (anySubItem) {
      var subItemPath = null;
      if (options.credentials) {
        subItemPath = options.path + '/credentials';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainToJoin) {
        subItemPath = options.path + '/domainToJoin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ldapMachineObjectOU) {
        subItemPath = options.path + '/ldapMachineObjectOU';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioning) {
        subItemPath = options.path + '/provisioning';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add domain-join
  var catparametersCaptureOSImageVirtualMachineDomainJoin2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineDomainJoin2 = catparametersCaptureOSImageVirtualMachineDomainJoin2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineDomainJoin2 = parametersCaptureOSImageVirtualMachineDomainJoin2.category('domain-join')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineDomainJoin2.command('add')
  .description($('Add domain-join in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--credentials <credentials>', $('Add the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Add the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Add the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Add the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/domainJoin' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/domainJoin' + '/' + 'credentials';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = '/provisioningConfiguration/domainJoin' + '/' + 'domainToJoin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = '/provisioningConfiguration/domainJoin' + '/' + 'ldapMachineObjectOU';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = '/provisioningConfiguration/domainJoin' + '/' + 'provisioning';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set credentials
  var catparametersCaptureOSImageVirtualMachineCredentials0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineCredentials0 = catparametersCaptureOSImageVirtualMachineCredentials0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineCredentials0 = parametersCaptureOSImageVirtualMachineCredentials0.category('credentials')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineCredentials0.command('set')
  .description($('Set credentials in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain <domain>', $('Set the domain value.'))
  .option('--password <password>', $('Set the password value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/domainJoin/credentials';
    var paramPath = options.path + '/' + 'domain';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = options.path + '/' + 'password';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete credentials
  var catparametersCaptureOSImageVirtualMachineCredentials1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineCredentials1 = catparametersCaptureOSImageVirtualMachineCredentials1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineCredentials1 = parametersCaptureOSImageVirtualMachineCredentials1.category('credentials')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineCredentials1.command('delete')
  .description($('Remove credentials in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--domain', $('Remove the domain value.'))
  .option('--password', $('Remove the password value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/domainJoin/credentials';
    var anySubItem = false || options.domain || options.password || options.userName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.domain) {
        subItemPath = options.path + '/domain';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.password) {
        subItemPath = options.path + '/password';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        subItemPath = options.path + '/userName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add credentials
  var catparametersCaptureOSImageVirtualMachineCredentials2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineCredentials2 = catparametersCaptureOSImageVirtualMachineCredentials2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineCredentials2 = parametersCaptureOSImageVirtualMachineCredentials2.category('credentials')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineCredentials2.command('add')
  .description($('Add credentials in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain <domain>', $('Add the domain value.'))
  .option('--password <password>', $('Add the password value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/domainJoin/credentials' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/domainJoin/credentials' + '/' + 'domain';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = '/provisioningConfiguration/domainJoin/credentials' + '/' + 'password';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = '/provisioningConfiguration/domainJoin/credentials' + '/' + 'userName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set provisioning
  var catparametersCaptureOSImageVirtualMachineProvisioning0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProvisioning0 = catparametersCaptureOSImageVirtualMachineProvisioning0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineProvisioning0 = parametersCaptureOSImageVirtualMachineProvisioning0.category('provisioning')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineProvisioning0.command('set')
  .description($('Set provisioning in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--account-data <accountData>', $('Set the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/domainJoin/provisioning';
    var paramPath = options.path + '/' + 'accountData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete provisioning
  var catparametersCaptureOSImageVirtualMachineProvisioning1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProvisioning1 = catparametersCaptureOSImageVirtualMachineProvisioning1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineProvisioning1 = parametersCaptureOSImageVirtualMachineProvisioning1.category('provisioning')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineProvisioning1.command('delete')
  .description($('Remove provisioning in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--account-data', $('Remove the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/domainJoin/provisioning';
    var anySubItem = false || options.accountData;
    if (anySubItem) {
      var subItemPath = null;
      if (options.accountData) {
        subItemPath = options.path + '/accountData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add provisioning
  var catparametersCaptureOSImageVirtualMachineProvisioning2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProvisioning2 = catparametersCaptureOSImageVirtualMachineProvisioning2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineProvisioning2 = parametersCaptureOSImageVirtualMachineProvisioning2.category('provisioning')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineProvisioning2.command('add')
  .description($('Add provisioning in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--account-data <accountData>', $('Add the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/domainJoin/provisioning' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/domainJoin/provisioning' + '/' + 'accountData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set input-endpoints
  var catparametersCaptureOSImageVirtualMachineInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineInputEndpoints0 = catparametersCaptureOSImageVirtualMachineInputEndpoints0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineInputEndpoints0 = parametersCaptureOSImageVirtualMachineInputEndpoints0.category('input-endpoints')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineInputEndpoints0.command('set')
  .description($('Set input-endpoints in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":0,\r\n               "protocol":0,\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Set the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'endpointAcl';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete input-endpoints
  var catparametersCaptureOSImageVirtualMachineInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineInputEndpoints1 = catparametersCaptureOSImageVirtualMachineInputEndpoints1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineInputEndpoints1 = parametersCaptureOSImageVirtualMachineInputEndpoints1.category('input-endpoints')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineInputEndpoints1.command('delete')
  .description($('Remove input-endpoints in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":0,\r\n               "protocol":0,\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--enable-direct-server-return', $('Remove the enable-direct-server-return value.'))
  .option('--endpoint-acl', $('Remove the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name', $('Remove the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution', $('Remove the load-balancer-distribution value.'))
  .option('--load-balancer-name', $('Remove the load-balancer-name value.'))
  .option('--load-balancer-probe', $('Remove the load-balancer-probe value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--virtual-ip-address', $('Remove the virtual-ip-address value.'))
  .option('--virtual-ip-name', $('Remove the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.enableDirectServerReturn || options.endpointAcl || options.idleTimeoutInMinutes || options.loadBalancedEndpointSetName || options.loadBalancerDistribution || options.loadBalancerName || options.loadBalancerProbe || options.localPort || options.name || options.port || options.protocol || options.virtualIPAddress || options.virtualIPName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.enableDirectServerReturn) {
        subItemPath = options.path + '/enableDirectServerReturn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.endpointAcl) {
        subItemPath = options.path + '/endpointAcl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancedEndpointSetName) {
        subItemPath = options.path + '/loadBalancedEndpointSetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerDistribution) {
        subItemPath = options.path + '/loadBalancerDistribution';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerName) {
        subItemPath = options.path + '/loadBalancerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerProbe) {
        subItemPath = options.path + '/loadBalancerProbe';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPAddress) {
        subItemPath = options.path + '/virtualIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPName) {
        subItemPath = options.path + '/virtualIPName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add input-endpoints
  var catparametersCaptureOSImageVirtualMachineInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineInputEndpoints2 = catparametersCaptureOSImageVirtualMachineInputEndpoints2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineInputEndpoints2 = parametersCaptureOSImageVirtualMachineInputEndpoints2.category('input-endpoints')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineInputEndpoints2.command('add')
  .description($('Add input-endpoints in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":0,\r\n               "protocol":0,\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Add the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Add the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Add the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Add the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Add the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Add the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Add the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Add the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'enableDirectServerReturn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'endpointAcl';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancedEndpointSetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerDistribution';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerProbe';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete endpoint-acl
  var catparametersCaptureOSImageVirtualMachineEndpointAcl1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineEndpointAcl1 = catparametersCaptureOSImageVirtualMachineEndpointAcl1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineEndpointAcl1 = parametersCaptureOSImageVirtualMachineEndpointAcl1.category('endpoint-acl')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineEndpointAcl1.command('delete')
  .description($('Remove endpoint-acl in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "endpointAcl" : {\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--rules', $('Remove the rules value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var anySubItem = false || options.rules;
    if (anySubItem) {
      var subItemPath = null;
      if (options.rules) {
        subItemPath = options.path + '/rules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add endpoint-acl
  var catparametersCaptureOSImageVirtualMachineEndpointAcl2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineEndpointAcl2 = catparametersCaptureOSImageVirtualMachineEndpointAcl2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineEndpointAcl2 = parametersCaptureOSImageVirtualMachineEndpointAcl2.category('endpoint-acl')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineEndpointAcl2.command('add')
  .description($('Add endpoint-acl in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "endpointAcl" : {\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--rules <rules>', $('Add the rules value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + 'rules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set rules
  var catparametersCaptureOSImageVirtualMachineRules0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineRules0 = catparametersCaptureOSImageVirtualMachineRules0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineRules0 = parametersCaptureOSImageVirtualMachineRules0.category('rules')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineRules0.command('set')
  .description($('Set rules in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete rules
  var catparametersCaptureOSImageVirtualMachineRules1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineRules1 = catparametersCaptureOSImageVirtualMachineRules1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineRules1 = parametersCaptureOSImageVirtualMachineRules1.category('rules')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineRules1.command('delete')
  .description($('Remove rules in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--action', $('Remove the action value.'))
  .option('--description', $('Remove the description value.'))
  .option('--order', $('Remove the order value.'))
  .option('--remote-subnet', $('Remove the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.action || options.description || options.order || options.remoteSubnet;
    if (anySubItem) {
      var subItemPath = null;
      if (options.action) {
        subItemPath = options.path + '/action';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.order) {
        subItemPath = options.path + '/order';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSubnet) {
        subItemPath = options.path + '/remoteSubnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add rules
  var catparametersCaptureOSImageVirtualMachineRules2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineRules2 = catparametersCaptureOSImageVirtualMachineRules2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineRules2 = parametersCaptureOSImageVirtualMachineRules2.category('rules')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineRules2.command('add')
  .description($('Add rules in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--action <action>', $('Add the action value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--order <order>', $('Add the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Add the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'action';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'order';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'remoteSubnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set load-balancer-probe
  var catparametersCaptureOSImageVirtualMachineLoadBalancerProbe0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineLoadBalancerProbe0 = catparametersCaptureOSImageVirtualMachineLoadBalancerProbe0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineLoadBalancerProbe0 = parametersCaptureOSImageVirtualMachineLoadBalancerProbe0.category('load-balancer-probe')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineLoadBalancerProbe0.command('set')
  .description($('Set load-balancer-probe in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":0,\r\n             "protocol":0,\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var paramPath = options.path + '/' + 'intervalInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete load-balancer-probe
  var catparametersCaptureOSImageVirtualMachineLoadBalancerProbe1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineLoadBalancerProbe1 = catparametersCaptureOSImageVirtualMachineLoadBalancerProbe1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineLoadBalancerProbe1 = parametersCaptureOSImageVirtualMachineLoadBalancerProbe1.category('load-balancer-probe')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineLoadBalancerProbe1.command('delete')
  .description($('Remove load-balancer-probe in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":0,\r\n             "protocol":0,\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--interval-in-seconds', $('Remove the interval-in-seconds value.'))
  .option('--path', $('Remove the path value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--timeout-in-seconds', $('Remove the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var anySubItem = false || options.intervalInSeconds || options.path || options.port || options.protocol || options.timeoutInSeconds;
    if (anySubItem) {
      var subItemPath = null;
      if (options.intervalInSeconds) {
        subItemPath = options.path + '/intervalInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeoutInSeconds) {
        subItemPath = options.path + '/timeoutInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add load-balancer-probe
  var catparametersCaptureOSImageVirtualMachineLoadBalancerProbe2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineLoadBalancerProbe2 = catparametersCaptureOSImageVirtualMachineLoadBalancerProbe2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineLoadBalancerProbe2 = parametersCaptureOSImageVirtualMachineLoadBalancerProbe2.category('load-balancer-probe')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineLoadBalancerProbe2.command('add')
  .description($('Add load-balancer-probe in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":0,\r\n             "protocol":0,\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Add the interval-in-seconds value.'))
  .option('--path <path>', $('Add the path value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Add the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'intervalInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'timeoutInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete protocol
  var catparametersCaptureOSImageVirtualMachineProtocol1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProtocol1 = catparametersCaptureOSImageVirtualMachineProtocol1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineProtocol1 = parametersCaptureOSImageVirtualMachineProtocol1.category('protocol')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineProtocol1.command('delete')
  .description($('Remove protocol in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "protocol" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add protocol
  var catparametersCaptureOSImageVirtualMachineProtocol2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineProtocol2 = catparametersCaptureOSImageVirtualMachineProtocol2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineProtocol2 = parametersCaptureOSImageVirtualMachineProtocol2.category('protocol')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineProtocol2.command('add')
  .description($('Add protocol in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "protocol" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set network-interfaces
  var catparametersCaptureOSImageVirtualMachineNetworkInterfaces0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineNetworkInterfaces0 = catparametersCaptureOSImageVirtualMachineNetworkInterfaces0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineNetworkInterfaces0 = parametersCaptureOSImageVirtualMachineNetworkInterfaces0.category('network-interfaces')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineNetworkInterfaces0.command('set')
  .description($('Set network-interfaces in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete network-interfaces
  var catparametersCaptureOSImageVirtualMachineNetworkInterfaces1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineNetworkInterfaces1 = catparametersCaptureOSImageVirtualMachineNetworkInterfaces1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineNetworkInterfaces1 = parametersCaptureOSImageVirtualMachineNetworkInterfaces1.category('network-interfaces')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineNetworkInterfaces1.command('delete')
  .description($('Remove network-interfaces in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--name', $('Remove the name value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.ipConfigurations || options.ipForwarding || options.name || options.networkSecurityGroup;
    if (anySubItem) {
      var subItemPath = null;
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        subItemPath = options.path + '/ipForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add network-interfaces
  var catparametersCaptureOSImageVirtualMachineNetworkInterfaces2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineNetworkInterfaces2 = catparametersCaptureOSImageVirtualMachineNetworkInterfaces2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineNetworkInterfaces2 = parametersCaptureOSImageVirtualMachineNetworkInterfaces2.category('network-interfaces')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineNetworkInterfaces2.command('add')
  .description($('Add network-interfaces in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set ip-configurations
  var catparametersCaptureOSImageVirtualMachineIPConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineIPConfigurations0 = catparametersCaptureOSImageVirtualMachineIPConfigurations0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineIPConfigurations0 = parametersCaptureOSImageVirtualMachineIPConfigurations0.category('ip-configurations')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineIPConfigurations0.command('set')
  .description($('Set ip-configurations in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete ip-configurations
  var catparametersCaptureOSImageVirtualMachineIPConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineIPConfigurations1 = catparametersCaptureOSImageVirtualMachineIPConfigurations1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineIPConfigurations1 = parametersCaptureOSImageVirtualMachineIPConfigurations1.category('ip-configurations')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineIPConfigurations1.command('delete')
  .description($('Remove ip-configurations in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        subItemPath = options.path + '/subnetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add ip-configurations
  var catparametersCaptureOSImageVirtualMachineIPConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineIPConfigurations2 = catparametersCaptureOSImageVirtualMachineIPConfigurations2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineIPConfigurations2 = parametersCaptureOSImageVirtualMachineIPConfigurations2.category('ip-configurations')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineIPConfigurations2.command('add')
  .description($('Add ip-configurations in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/provisioningConfiguration/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set public-ip
  var catparametersCaptureOSImageVirtualMachinePublicIPs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePublicIPs0 = catparametersCaptureOSImageVirtualMachinePublicIPs0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachinePublicIPs0 = parametersCaptureOSImageVirtualMachinePublicIPs0.category('public-ip')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachinePublicIPs0.command('set')
  .description($('Set public-ip in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain-name-label <domainNameLabel>', $('Set the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'domainNameLabel';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete public-ip
  var catparametersCaptureOSImageVirtualMachinePublicIPs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePublicIPs1 = catparametersCaptureOSImageVirtualMachinePublicIPs1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachinePublicIPs1 = parametersCaptureOSImageVirtualMachinePublicIPs1.category('public-ip')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachinePublicIPs1.command('delete')
  .description($('Remove public-ip in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--domain-name-label', $('Remove the domain-name-label value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.domainNameLabel || options.idleTimeoutInMinutes || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.domainNameLabel) {
        subItemPath = options.path + '/domainNameLabel';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add public-ip
  var catparametersCaptureOSImageVirtualMachinePublicIPs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePublicIPs2 = catparametersCaptureOSImageVirtualMachinePublicIPs2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachinePublicIPs2 = parametersCaptureOSImageVirtualMachinePublicIPs2.category('public-ip')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachinePublicIPs2.command('add')
  .description($('Add public-ip in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain-name-label <domainNameLabel>', $('Add the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'domainNameLabel';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete ssh-settings
  var catparametersCaptureOSImageVirtualMachineSshSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineSshSettings1 = catparametersCaptureOSImageVirtualMachineSshSettings1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineSshSettings1 = parametersCaptureOSImageVirtualMachineSshSettings1.category('ssh-settings')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineSshSettings1.command('delete')
  .description($('Remove ssh-settings in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sshSettings" : {\r\n             "keyPairs":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ],\r\n             "publicKeys":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key-pairs', $('Remove the key-pairs value.'))
  .option('--public-keys', $('Remove the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/sshSettings';
    var anySubItem = false || options.keyPairs || options.publicKeys;
    if (anySubItem) {
      var subItemPath = null;
      if (options.keyPairs) {
        subItemPath = options.path + '/keyPairs';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicKeys) {
        subItemPath = options.path + '/publicKeys';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add ssh-settings
  var catparametersCaptureOSImageVirtualMachineSshSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineSshSettings2 = catparametersCaptureOSImageVirtualMachineSshSettings2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineSshSettings2 = parametersCaptureOSImageVirtualMachineSshSettings2.category('ssh-settings')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineSshSettings2.command('add')
  .description($('Add ssh-settings in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sshSettings" : {\r\n             "keyPairs":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ],\r\n             "publicKeys":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--key-pairs <keyPairs>', $('Add the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Add the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/sshSettings' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/sshSettings' + '/' + 'keyPairs';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = '/provisioningConfiguration/sshSettings' + '/' + 'publicKeys';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set key-pairs
  var catparametersCaptureOSImageVirtualMachineKeyPairs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineKeyPairs0 = catparametersCaptureOSImageVirtualMachineKeyPairs0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineKeyPairs0 = parametersCaptureOSImageVirtualMachineKeyPairs0.category('key-pairs')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineKeyPairs0.command('set')
  .description($('Set key-pairs in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete key-pairs
  var catparametersCaptureOSImageVirtualMachineKeyPairs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineKeyPairs1 = catparametersCaptureOSImageVirtualMachineKeyPairs1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineKeyPairs1 = parametersCaptureOSImageVirtualMachineKeyPairs1.category('key-pairs')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineKeyPairs1.command('delete')
  .description($('Remove key-pairs in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fingerprint) {
        subItemPath = options.path + '/fingerprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add key-pairs
  var catparametersCaptureOSImageVirtualMachineKeyPairs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineKeyPairs2 = catparametersCaptureOSImageVirtualMachineKeyPairs2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineKeyPairs2 = parametersCaptureOSImageVirtualMachineKeyPairs2.category('key-pairs')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineKeyPairs2.command('add')
  .description($('Add key-pairs in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/provisioningConfiguration/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set public-keys
  var catparametersCaptureOSImageVirtualMachinePublicKeys0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePublicKeys0 = catparametersCaptureOSImageVirtualMachinePublicKeys0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachinePublicKeys0 = parametersCaptureOSImageVirtualMachinePublicKeys0.category('public-keys')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachinePublicKeys0.command('set')
  .description($('Set public-keys in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete public-keys
  var catparametersCaptureOSImageVirtualMachinePublicKeys1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePublicKeys1 = catparametersCaptureOSImageVirtualMachinePublicKeys1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachinePublicKeys1 = parametersCaptureOSImageVirtualMachinePublicKeys1.category('public-keys')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachinePublicKeys1.command('delete')
  .description($('Remove public-keys in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fingerprint) {
        subItemPath = options.path + '/fingerprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add public-keys
  var catparametersCaptureOSImageVirtualMachinePublicKeys2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachinePublicKeys2 = catparametersCaptureOSImageVirtualMachinePublicKeys2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachinePublicKeys2 = parametersCaptureOSImageVirtualMachinePublicKeys2.category('public-keys')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachinePublicKeys2.command('add')
  .description($('Add public-keys in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/provisioningConfiguration/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set stored-certificate-settings
  var catparametersCaptureOSImageVirtualMachineStoredCertificateSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineStoredCertificateSettings0 = catparametersCaptureOSImageVirtualMachineStoredCertificateSettings0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineStoredCertificateSettings0 = parametersCaptureOSImageVirtualMachineStoredCertificateSettings0.category('stored-certificate-settings')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineStoredCertificateSettings0.command('set')
  .description($('Set stored-certificate-settings in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'storeName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete stored-certificate-settings
  var catparametersCaptureOSImageVirtualMachineStoredCertificateSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineStoredCertificateSettings1 = catparametersCaptureOSImageVirtualMachineStoredCertificateSettings1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineStoredCertificateSettings1 = parametersCaptureOSImageVirtualMachineStoredCertificateSettings1.category('stored-certificate-settings')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineStoredCertificateSettings1.command('delete')
  .description($('Remove stored-certificate-settings in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.storeName || options.thumbprint;
    if (anySubItem) {
      var subItemPath = null;
      if (options.storeName) {
        subItemPath = options.path + '/storeName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        subItemPath = options.path + '/thumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add stored-certificate-settings
  var catparametersCaptureOSImageVirtualMachineStoredCertificateSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineStoredCertificateSettings2 = catparametersCaptureOSImageVirtualMachineStoredCertificateSettings2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineStoredCertificateSettings2 = parametersCaptureOSImageVirtualMachineStoredCertificateSettings2.category('stored-certificate-settings')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineStoredCertificateSettings2.command('add')
  .description($('Add stored-certificate-settings in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'storeName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/provisioningConfiguration/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'thumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set subnet-names
  var catparametersCaptureOSImageVirtualMachineSubnetNames0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineSubnetNames0 = catparametersCaptureOSImageVirtualMachineSubnetNames0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineSubnetNames0 = parametersCaptureOSImageVirtualMachineSubnetNames0.category('subnet-names')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineSubnetNames0.command('set')
  .description($('Set subnet-names in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/subnetNames' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete subnet-names
  var catparametersCaptureOSImageVirtualMachineSubnetNames1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineSubnetNames1 = catparametersCaptureOSImageVirtualMachineSubnetNames1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineSubnetNames1 = parametersCaptureOSImageVirtualMachineSubnetNames1.category('subnet-names')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineSubnetNames1.command('delete')
  .description($('Remove subnet-names in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/subnetNames' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add subnet-names
  var catparametersCaptureOSImageVirtualMachineSubnetNames2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineSubnetNames2 = catparametersCaptureOSImageVirtualMachineSubnetNames2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineSubnetNames2 = parametersCaptureOSImageVirtualMachineSubnetNames2.category('subnet-names')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineSubnetNames2.command('add')
  .description($('Add subnet-names in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/subnetNames' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete windows-remote-management
  var catparametersCaptureOSImageVirtualMachineWindowsRemoteManagement1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineWindowsRemoteManagement1 = catparametersCaptureOSImageVirtualMachineWindowsRemoteManagement1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineWindowsRemoteManagement1 = parametersCaptureOSImageVirtualMachineWindowsRemoteManagement1.category('windows-remote-management')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineWindowsRemoteManagement1.command('delete')
  .description($('Remove windows-remote-management in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsRemoteManagement" : {\r\n             "listeners":[\r\n               {\r\n                 "certificateThumbprint":"",\r\n                 "listenerType":0\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners', $('Remove the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/windowsRemoteManagement';
    var anySubItem = false || options.listeners;
    if (anySubItem) {
      var subItemPath = null;
      if (options.listeners) {
        subItemPath = options.path + '/listeners';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add windows-remote-management
  var catparametersCaptureOSImageVirtualMachineWindowsRemoteManagement2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineWindowsRemoteManagement2 = catparametersCaptureOSImageVirtualMachineWindowsRemoteManagement2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineWindowsRemoteManagement2 = parametersCaptureOSImageVirtualMachineWindowsRemoteManagement2.category('windows-remote-management')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineWindowsRemoteManagement2.command('add')
  .description($('Add windows-remote-management in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsRemoteManagement" : {\r\n             "listeners":[\r\n               {\r\n                 "certificateThumbprint":"",\r\n                 "listenerType":0\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--listeners <listeners>', $('Add the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/windowsRemoteManagement' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/windowsRemoteManagement' + '/' + 'listeners';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters set listeners
  var catparametersCaptureOSImageVirtualMachineListeners0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineListeners0 = catparametersCaptureOSImageVirtualMachineListeners0.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureOSImageVirtualMachineListeners0 = parametersCaptureOSImageVirtualMachineListeners0.category('listeners')
  .description($('Commands to set components of virtual-machine in capture-os-image-parameters file.'));
  setparametersCaptureOSImageVirtualMachineListeners0.command('set')
  .description($('Set listeners in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":0\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Set the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Set the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateThumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'listenerType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete listeners
  var catparametersCaptureOSImageVirtualMachineListeners1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineListeners1 = catparametersCaptureOSImageVirtualMachineListeners1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineListeners1 = parametersCaptureOSImageVirtualMachineListeners1.category('listeners')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineListeners1.command('delete')
  .description($('Remove listeners in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":0\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--certificate-thumbprint', $('Remove the certificate-thumbprint value.'))
  .option('--listener-type', $('Remove the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.certificateThumbprint || options.listenerType;
    if (anySubItem) {
      var subItemPath = null;
      if (options.certificateThumbprint) {
        subItemPath = options.path + '/certificateThumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.listenerType) {
        subItemPath = options.path + '/listenerType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add listeners
  var catparametersCaptureOSImageVirtualMachineListeners2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineListeners2 = catparametersCaptureOSImageVirtualMachineListeners2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineListeners2 = parametersCaptureOSImageVirtualMachineListeners2.category('listeners')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineListeners2.command('add')
  .description($('Add listeners in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":0\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Add the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Add the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateThumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = '/provisioningConfiguration/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'listenerType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-os-image-parameters delete listener-type
  var catparametersCaptureOSImageVirtualMachineListenerType1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineListenerType1 = catparametersCaptureOSImageVirtualMachineListenerType1.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureOSImageVirtualMachineListenerType1 = parametersCaptureOSImageVirtualMachineListenerType1.category('listener-type')
  .description($('Commands to delete components of virtual-machine in capture-os-image-parameters file.'));
  deleteparametersCaptureOSImageVirtualMachineListenerType1.command('delete')
  .description($('Remove listener-type in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listenerType" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners-index <listeners-index>', $('Indexer: listeners-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-os-image-parameters add listener-type
  var catparametersCaptureOSImageVirtualMachineListenerType2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureOSImageVirtualMachineListenerType2 = catparametersCaptureOSImageVirtualMachineListenerType2.category('capture-os-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureOSImageVirtualMachineListenerType2 = parametersCaptureOSImageVirtualMachineListenerType2.category('listener-type')
  .description($('Commands to add components of virtual-machine in capture-os-image-parameters file.'));
  addparametersCaptureOSImageVirtualMachineListenerType2.command('add')
  .description($('Add listener-type in capture-os-image-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listenerType" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachine CaptureVMImage
  --service-name
  --deployment-name
  --virtual-machine-name
  --parameters
=============================================
{
  "operationType":"",
  "oSState":"",
  "vMImageLabel":"",
  "vMImageName":"",
  "requestId":"",
  "statusCode":0
}
*/
  var virtualMachineCaptureVMImage = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineCaptureVMImage.command('capture-vm-image [service-name] [deployment-name] [virtual-machine-name] [parameters]')
  .description($('Capture role as VM template.'))
  .usage('[options] <service-name> <deployment-name> <virtual-machine-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, virtualMachineName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachine.captureVMImage(serviceName, deploymentName, virtualMachineName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineCaptureVMImagecaptureVMImageParameters3 = virtualMachineCaptureVMImage.category('capture-vm-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineCaptureVMImagecaptureVMImageParameters3.command('generate')
  .description($('Generate virtualMachineCaptureVMImage parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"operationType\":\"\",\"oSState\":\"\",\"vMImageLabel\":\"\",\"vMImageName\":\"\",\"requestId\":\"\",\"statusCode\":0}', _);
    var filePath = 'virtualMachineCaptureVMImage_captureVMImage.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"operationType\":\"\",\r\n\"oSState\":\"\",\r\n\"vMImageLabel\":\"\",\r\n\"vMImageName\":\"\",\r\n\"requestId\":\"\",\r\n\"statusCode\":0\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineCaptureVMImagecaptureVMImageParameters3.command('patch')
  .description($('Command to patch virtualMachineCaptureVMImage parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-vm-image-parameters set virtual-machine-capture-vm-image-parameters
  var catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0 = catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0.category('capture-vm-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0 = parametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0.category('virtual-machine-capture-vm-image-parameters')
  .description($('Commands to set components of virtual-machine in capture-vm-image-parameters file.'));
  setparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters0.command('set')
  .description($('Set virtual-machine-capture-vm-image-parameters in capture-vm-image-parameters string or files, e.g. \r\n{\r\n  "operationType":"",\r\n  "oSState":"",\r\n  "vMImageLabel":"",\r\n  "vMImageName":"",\r\n  "requestId":"",\r\n  "statusCode":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--operation-type <operationType>', $('Set the operation-type value.'))
  .option('--os-state <oSState>', $('Set the os-state value.'))
  .option('--vm-image-label <vMImageLabel>', $('Set the vm-image-label value.'))
  .option('--vm-image-name <vMImageName>', $('Set the vm-image-name value.'))
  .option('--request-id <requestId>', $('Set the request-id value.'))
  .option('--status-code <statusCode>', $('Set the status-code value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'operationType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.operationType) {
      if (options.parse && options.operationType) {
        options.operationType = JSON.parse(options.operationType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operationType}]);
    }
    paramPath = options.path + '/' + 'oSState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSState) {
      if (options.parse && options.oSState) {
        options.oSState = JSON.parse(options.oSState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSState}]);
    }
    paramPath = options.path + '/' + 'vMImageLabel';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vMImageLabel) {
      if (options.parse && options.vMImageLabel) {
        options.vMImageLabel = JSON.parse(options.vMImageLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageLabel}]);
    }
    paramPath = options.path + '/' + 'vMImageName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vMImageName) {
      if (options.parse && options.vMImageName) {
        options.vMImageName = JSON.parse(options.vMImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageName}]);
    }
    paramPath = options.path + '/' + 'requestId';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.requestId) {
      if (options.parse && options.requestId) {
        options.requestId = JSON.parse(options.requestId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.requestId}]);
    }
    paramPath = options.path + '/' + 'statusCode';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.statusCode) {
      if (options.parse && options.statusCode) {
        options.statusCode = JSON.parse(options.statusCode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.statusCode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //capture-vm-image-parameters delete virtual-machine-capture-vm-image-parameters
  var catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1 = catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1.category('capture-vm-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1 = parametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1.category('virtual-machine-capture-vm-image-parameters')
  .description($('Commands to delete components of virtual-machine in capture-vm-image-parameters file.'));
  deleteparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters1.command('delete')
  .description($('Remove virtual-machine-capture-vm-image-parameters in capture-vm-image-parameters string or files, e.g. \r\n{\r\n  "operationType":"",\r\n  "oSState":"",\r\n  "vMImageLabel":"",\r\n  "vMImageName":"",\r\n  "requestId":"",\r\n  "statusCode":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation-type', $('Remove the operation-type value.'))
  .option('--os-state', $('Remove the os-state value.'))
  .option('--vm-image-label', $('Remove the vm-image-label value.'))
  .option('--vm-image-name', $('Remove the vm-image-name value.'))
  .option('--request-id', $('Remove the request-id value.'))
  .option('--status-code', $('Remove the status-code value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.operationType || options.oSState || options.vMImageLabel || options.vMImageName || options.requestId || options.statusCode;
    if (anySubItem) {
      var subItemPath = null;
      if (options.operationType) {
        subItemPath = options.path + '/operationType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSState) {
        subItemPath = options.path + '/oSState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vMImageLabel) {
        subItemPath = options.path + '/vMImageLabel';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vMImageName) {
        subItemPath = options.path + '/vMImageName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.requestId) {
        subItemPath = options.path + '/requestId';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.statusCode) {
        subItemPath = options.path + '/statusCode';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //capture-vm-image-parameters add virtual-machine-capture-vm-image-parameters
  var catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters2 = catparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters2.category('capture-vm-image-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters2 = parametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters2.category('virtual-machine-capture-vm-image-parameters')
  .description($('Commands to add components of virtual-machine in capture-vm-image-parameters file.'));
  addparametersCaptureVMImageVirtualMachineVirtualMachineCaptureVMImageParameters2.command('add')
  .description($('Add virtual-machine-capture-vm-image-parameters in capture-vm-image-parameters string or files, e.g. \r\n{\r\n  "operationType":"",\r\n  "oSState":"",\r\n  "vMImageLabel":"",\r\n  "vMImageName":"",\r\n  "requestId":"",\r\n  "statusCode":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--operation-type <operationType>', $('Add the operation-type value.'))
  .option('--os-state <oSState>', $('Add the os-state value.'))
  .option('--vm-image-label <vMImageLabel>', $('Add the vm-image-label value.'))
  .option('--vm-image-name <vMImageName>', $('Add the vm-image-name value.'))
  .option('--request-id <requestId>', $('Add the request-id value.'))
  .option('--status-code <statusCode>', $('Add the status-code value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'operationType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.operationType) {
      if (options.parse && options.operationType) {
        options.operationType = JSON.parse(options.operationType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operationType}]);
    }
    paramPath = '' + '/' + 'oSState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSState) {
      if (options.parse && options.oSState) {
        options.oSState = JSON.parse(options.oSState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSState}]);
    }
    paramPath = '' + '/' + 'vMImageLabel';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vMImageLabel) {
      if (options.parse && options.vMImageLabel) {
        options.vMImageLabel = JSON.parse(options.vMImageLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageLabel}]);
    }
    paramPath = '' + '/' + 'vMImageName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vMImageName) {
      if (options.parse && options.vMImageName) {
        options.vMImageName = JSON.parse(options.vMImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageName}]);
    }
    paramPath = '' + '/' + 'requestId';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.requestId) {
      if (options.parse && options.requestId) {
        options.requestId = JSON.parse(options.requestId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.requestId}]);
    }
    paramPath = '' + '/' + 'statusCode';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.statusCode) {
      if (options.parse && options.statusCode) {
        options.statusCode = JSON.parse(options.statusCode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.statusCode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachine Create
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "availabilitySetName":"",
  "configurationSets":[
    {
      "additionalUnattendContent":{
        "unattendPasses":[
          {
            "passName":"",
            "unattendComponents":[
              {
                "componentName":"",
                "unattendComponentSettings":[
                  {
                    "content":"",
                    "settingName":""
                  }
                ]
              }
            ]
          }
        ]
      },
      "adminPassword":"",
      "adminUserName":"",
      "computerName":"",
      "configurationSetType":"",
      "customData":"",
      "disableSshPasswordAuthentication":null,
      "domainJoin":{
        "credentials":{
          "domain":"",
          "password":"",
          "userName":""
        },
        "domainToJoin":"",
        "ldapMachineObjectOU":"",
        "provisioning":{
          "accountData":""
        }
      },
      "enableAutomaticUpdates":null,
      "hostName":"",
      "inputEndpoints":[
        {
          "enableDirectServerReturn":null,
          "endpointAcl":{
            "rules":[
              {
                "action":"",
                "description":"",
                "order":null,
                "remoteSubnet":""
              }
            ]
          },
          "idleTimeoutInMinutes":null,
          "loadBalancedEndpointSetName":"",
          "loadBalancerDistribution":"",
          "loadBalancerName":"",
          "loadBalancerProbe":{
            "intervalInSeconds":null,
            "path":"",
            "port":0,
            "protocol":0,
            "timeoutInSeconds":null
          },
          "localPort":null,
          "name":"",
          "port":null,
          "protocol":"",
          "virtualIPAddress":"",
          "virtualIPName":""
        }
      ],
      "iPForwarding":"",
      "networkInterfaces":[
        {
          "iPConfigurations":[
            {
              "staticVirtualNetworkIPAddress":"",
              "subnetName":""
            }
          ],
          "iPForwarding":"",
          "name":"",
          "networkSecurityGroup":""
        }
      ],
      "networkSecurityGroup":"",
      "publicIPs":[
        {
          "domainNameLabel":"",
          "idleTimeoutInMinutes":null,
          "name":""
        }
      ],
      "resetPasswordOnFirstLogon":null,
      "sshSettings":{
        "keyPairs":[
          {
            "fingerprint":"",
            "path":""
          }
        ],
        "publicKeys":[
          {
            "fingerprint":"",
            "path":""
          }
        ]
      },
      "staticVirtualNetworkIPAddress":"",
      "storedCertificateSettings":[
        {
          "storeName":"",
          "thumbprint":""
        }
      ],
      "subnetNames":[
        ""
      ],
      "timeZone":"",
      "userName":"",
      "userPassword":"",
      "windowsRemoteManagement":{
        "listeners":[
          {
            "certificateThumbprint":"",
            "listenerType":0
          }
        ]
      }
    }
  ],
  "dataVirtualHardDisks":[
    {
      "hostCaching":"",
      "iOType":"",
      "label":"",
      "logicalDiskSizeInGB":null,
      "logicalUnitNumber":null,
      "mediaLink":"",
      "name":"",
      "sourceMediaLink":""
    }
  ],
  "debugSettings":{
    "bootDiagnosticsEnabled":false,
    "consoleScreenshotBlobUri":"",
    "serialOutputBlobUri":""
  },
  "mediaLocation":"",
  "oSVirtualHardDisk":{
    "hostCaching":"",
    "iOType":"",
    "label":"",
    "mediaLink":"",
    "name":"",
    "operatingSystem":"",
    "remoteSourceImageLink":"",
    "resizedSizeInGB":null,
    "sourceImageName":""
  },
  "provisionGuestAgent":null,
  "resourceExtensionReferences":[
    {
      "forceUpdate":null,
      "name":"",
      "publisher":"",
      "referenceName":"",
      "resourceExtensionParameterValues":[
        {
          "key":"",
          "type":"",
          "value":""
        }
      ],
      "state":"",
      "version":""
    }
  ],
  "roleName":"",
  "roleSize":"",
  "vMImageInput":{
    "dataDiskConfigurations":[
      {
        "diskName":"",
        "resizedSizeInGB":null
      }
    ],
    "oSDiskConfiguration":{
      "resizedSizeInGB":null
    }
  },
  "vMImageName":""
}
*/
  var virtualMachineCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineCreate.command('create [service-name] [deployment-name] [parameters]')
  .description($('The Create Role operation adds a virtual machine to an existing deployment. You can refer to the OSDisk in the Add Role operation in the following ways: Platform/User Image - Set the SourceImageName to a platform or user image. You can optionally specify the DiskName and MediaLink values as part the operation to control the name and location of target disk. When DiskName and MediaLink are specified in this mode, they must not already exist in the system, otherwise a conflict fault is returned; UserDisk - Set DiskName to a user supplied image in image repository. SourceImageName must be set to NULL. All other properties are ignored; or Blob in a Storage Account - Set MediaLink to a blob containing the image. SourceImageName and DiskName are set to NULL.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157186.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachine.create(serviceName, deploymentName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineCreatecreateParameters2 = virtualMachineCreate.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineCreatecreateParameters2.command('generate')
  .description($('Generate virtualMachineCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"availabilitySetName\":\"\",\"configurationSets\":[{\"additionalUnattendContent\":{\"unattendPasses\":[{\"passName\":\"\",\"unattendComponents\":[{\"componentName\":\"\",\"unattendComponentSettings\":[{\"content\":\"\",\"settingName\":\"\"}]}]}]},\"adminPassword\":\"\",\"adminUserName\":\"\",\"computerName\":\"\",\"configurationSetType\":\"\",\"customData\":\"\",\"disableSshPasswordAuthentication\":null,\"domainJoin\":{\"credentials\":{\"domain\":\"\",\"password\":\"\",\"userName\":\"\"},\"domainToJoin\":\"\",\"ldapMachineObjectOU\":\"\",\"provisioning\":{\"accountData\":\"\"}},\"enableAutomaticUpdates\":null,\"hostName\":\"\",\"inputEndpoints\":[{\"enableDirectServerReturn\":null,\"endpointAcl\":{\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}]},\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":0,\"protocol\":0,\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}],\"iPForwarding\":\"\",\"networkInterfaces\":[{\"iPConfigurations\":[{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\"}],\"iPForwarding\":\"\",\"name\":\"\",\"networkSecurityGroup\":\"\"}],\"networkSecurityGroup\":\"\",\"publicIPs\":[{\"domainNameLabel\":\"\",\"idleTimeoutInMinutes\":null,\"name\":\"\"}],\"resetPasswordOnFirstLogon\":null,\"sshSettings\":{\"keyPairs\":[{\"fingerprint\":\"\",\"path\":\"\"}],\"publicKeys\":[{\"fingerprint\":\"\",\"path\":\"\"}]},\"staticVirtualNetworkIPAddress\":\"\",\"storedCertificateSettings\":[{\"storeName\":\"\",\"thumbprint\":\"\"}],\"subnetNames\":[\"\"],\"timeZone\":\"\",\"userName\":\"\",\"userPassword\":\"\",\"windowsRemoteManagement\":{\"listeners\":[{\"certificateThumbprint\":\"\",\"listenerType\":0}]}}],\"dataVirtualHardDisks\":[{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":null,\"logicalUnitNumber\":null,\"mediaLink\":\"\",\"name\":\"\",\"sourceMediaLink\":\"\"}],\"debugSettings\":{\"bootDiagnosticsEnabled\":false,\"consoleScreenshotBlobUri\":\"\",\"serialOutputBlobUri\":\"\"},\"mediaLocation\":\"\",\"oSVirtualHardDisk\":{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"mediaLink\":\"\",\"name\":\"\",\"operatingSystem\":\"\",\"remoteSourceImageLink\":\"\",\"resizedSizeInGB\":null,\"sourceImageName\":\"\"},\"provisionGuestAgent\":null,\"resourceExtensionReferences\":[{\"forceUpdate\":null,\"name\":\"\",\"publisher\":\"\",\"referenceName\":\"\",\"resourceExtensionParameterValues\":[{\"key\":\"\",\"type\":\"\",\"value\":\"\"}],\"state\":\"\",\"version\":\"\"}],\"roleName\":\"\",\"roleSize\":\"\",\"vMImageInput\":{\"dataDiskConfigurations\":[{\"diskName\":\"\",\"resizedSizeInGB\":null}],\"oSDiskConfiguration\":{\"resizedSizeInGB\":null}},\"vMImageName\":\"\"}', _);
    var filePath = 'virtualMachineCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"availabilitySetName\":\"\",\r\n\"configurationSets\":[\r\n{\r\n\"additionalUnattendContent\":{\r\n\"unattendPasses\":[\r\n{\r\n\"passName\":\"\",\r\n\"unattendComponents\":[\r\n{\r\n\"componentName\":\"\",\r\n\"unattendComponentSettings\":[\r\n{\r\n\"content\":\"\",\r\n\"settingName\":\"\"\r\n}\r\n]\r\n}\r\n]\r\n}\r\n]\r\n},\r\n\"adminPassword\":\"\",\r\n\"adminUserName\":\"\",\r\n\"computerName\":\"\",\r\n\"configurationSetType\":\"\",\r\n\"customData\":\"\",\r\n\"disableSshPasswordAuthentication\":null,\r\n\"domainJoin\":{\r\n\"credentials\":{\r\n\"domain\":\"\",\r\n\"password\":\"\",\r\n\"userName\":\"\"\r\n},\r\n\"domainToJoin\":\"\",\r\n\"ldapMachineObjectOU\":\"\",\r\n\"provisioning\":{\r\n\"accountData\":\"\"\r\n}\r\n},\r\n\"enableAutomaticUpdates\":null,\r\n\"hostName\":\"\",\r\n\"inputEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"endpointAcl\":{\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n]\r\n},\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":0,\r\n\"protocol\":0,\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"networkInterfaces\":[\r\n{\r\n\"iPConfigurations\":[\r\n{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"name\":\"\",\r\n\"networkSecurityGroup\":\"\"\r\n}\r\n],\r\n\"networkSecurityGroup\":\"\",\r\n\"publicIPs\":[\r\n{\r\n\"domainNameLabel\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"resetPasswordOnFirstLogon\":null,\r\n\"sshSettings\":{\r\n\"keyPairs\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n],\r\n\"publicKeys\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n]\r\n},\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"storedCertificateSettings\":[\r\n{\r\n\"storeName\":\"\",\r\n\"thumbprint\":\"\"\r\n}\r\n],\r\n\"subnetNames\":[\r\n\"\"\r\n],\r\n\"timeZone\":\"\",\r\n\"userName\":\"\",\r\n\"userPassword\":\"\",\r\n\"windowsRemoteManagement\":{\r\n\"listeners\":[\r\n{\r\n\"certificateThumbprint\":\"\",\r\n\"listenerType\":0\r\n}\r\n]\r\n}\r\n}\r\n],\r\n\"dataVirtualHardDisks\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":null,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"sourceMediaLink\":\"\"\r\n}\r\n],\r\n\"debugSettings\":{\r\n\"bootDiagnosticsEnabled\":false,\r\n\"consoleScreenshotBlobUri\":\"\",\r\n\"serialOutputBlobUri\":\"\"\r\n},\r\n\"mediaLocation\":\"\",\r\n\"oSVirtualHardDisk\":{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystem\":\"\",\r\n\"remoteSourceImageLink\":\"\",\r\n\"resizedSizeInGB\":null,\r\n\"sourceImageName\":\"\"\r\n},\r\n\"provisionGuestAgent\":null,\r\n\"resourceExtensionReferences\":[\r\n{\r\n\"forceUpdate\":null,\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"referenceName\":\"\",\r\n\"resourceExtensionParameterValues\":[\r\n{\r\n\"key\":\"\",\r\n\"type\":\"\",\r\n\"value\":\"\"\r\n}\r\n],\r\n\"state\":\"\",\r\n\"version\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\",\r\n\"roleSize\":\"\",\r\n\"vMImageInput\":{\r\n\"dataDiskConfigurations\":[\r\n{\r\n\"diskName\":\"\",\r\n\"resizedSizeInGB\":null\r\n}\r\n],\r\n\"oSDiskConfiguration\":{\r\n\"resizedSizeInGB\":null\r\n}\r\n},\r\n\"vMImageName\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineCreatecreateParameters2.command('patch')
  .description($('Command to patch virtualMachineCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set virtual-machine-create-parameters
  var catparametersCreateVirtualMachineVirtualMachineCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineVirtualMachineCreateParameters0 = catparametersCreateVirtualMachineVirtualMachineCreateParameters0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineVirtualMachineCreateParameters0 = parametersCreateVirtualMachineVirtualMachineCreateParameters0.category('virtual-machine-create-parameters')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineVirtualMachineCreateParameters0.command('set')
  .description($('Set virtual-machine-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "availabilitySetName":"",\r\n  "configurationSets":[\r\n    {\r\n      "additionalUnattendContent":{\r\n        "unattendPasses":[\r\n          {\r\n            "passName":"",\r\n            "unattendComponents":[\r\n              {\r\n                "componentName":"",\r\n                "unattendComponentSettings":[\r\n                  {\r\n                    "content":"",\r\n                    "settingName":""\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      "adminPassword":"",\r\n      "adminUserName":"",\r\n      "computerName":"",\r\n      "configurationSetType":"",\r\n      "customData":"",\r\n      "disableSshPasswordAuthentication":null,\r\n      "domainJoin":{\r\n        "credentials":{\r\n          "domain":"",\r\n          "password":"",\r\n          "userName":""\r\n        },\r\n        "domainToJoin":"",\r\n        "ldapMachineObjectOU":"",\r\n        "provisioning":{\r\n          "accountData":""\r\n        }\r\n      },\r\n      "enableAutomaticUpdates":null,\r\n      "hostName":"",\r\n      "inputEndpoints":[\r\n        {\r\n          "enableDirectServerReturn":null,\r\n          "endpointAcl":{\r\n            "rules":[\r\n              {\r\n                "action":"",\r\n                "description":"",\r\n                "order":null,\r\n                "remoteSubnet":""\r\n              }\r\n            ]\r\n          },\r\n          "idleTimeoutInMinutes":null,\r\n          "loadBalancedEndpointSetName":"",\r\n          "loadBalancerDistribution":"",\r\n          "loadBalancerName":"",\r\n          "loadBalancerProbe":{\r\n            "intervalInSeconds":null,\r\n            "path":"",\r\n            "port":0,\r\n            "protocol":0,\r\n            "timeoutInSeconds":null\r\n          },\r\n          "localPort":null,\r\n          "name":"",\r\n          "port":null,\r\n          "protocol":"",\r\n          "virtualIPAddress":"",\r\n          "virtualIPName":""\r\n        }\r\n      ],\r\n      "iPForwarding":"",\r\n      "networkInterfaces":[\r\n        {\r\n          "iPConfigurations":[\r\n            {\r\n              "staticVirtualNetworkIPAddress":"",\r\n              "subnetName":""\r\n            }\r\n          ],\r\n          "iPForwarding":"",\r\n          "name":"",\r\n          "networkSecurityGroup":""\r\n        }\r\n      ],\r\n      "networkSecurityGroup":"",\r\n      "publicIPs":[\r\n        {\r\n          "domainNameLabel":"",\r\n          "idleTimeoutInMinutes":null,\r\n          "name":""\r\n        }\r\n      ],\r\n      "resetPasswordOnFirstLogon":null,\r\n      "sshSettings":{\r\n        "keyPairs":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ],\r\n        "publicKeys":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ]\r\n      },\r\n      "staticVirtualNetworkIPAddress":"",\r\n      "storedCertificateSettings":[\r\n        {\r\n          "storeName":"",\r\n          "thumbprint":""\r\n        }\r\n      ],\r\n      "subnetNames":[\r\n        ""\r\n      ],\r\n      "timeZone":"",\r\n      "userName":"",\r\n      "userPassword":"",\r\n      "windowsRemoteManagement":{\r\n        "listeners":[\r\n          {\r\n            "certificateThumbprint":"",\r\n            "listenerType":0\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  "dataVirtualHardDisks":[\r\n    {\r\n      "hostCaching":"",\r\n      "iOType":"",\r\n      "label":"",\r\n      "logicalDiskSizeInGB":null,\r\n      "logicalUnitNumber":null,\r\n      "mediaLink":"",\r\n      "name":"",\r\n      "sourceMediaLink":""\r\n    }\r\n  ],\r\n  "debugSettings":{\r\n    "bootDiagnosticsEnabled":false,\r\n    "consoleScreenshotBlobUri":"",\r\n    "serialOutputBlobUri":""\r\n  },\r\n  "mediaLocation":"",\r\n  "oSVirtualHardDisk":{\r\n    "hostCaching":"",\r\n    "iOType":"",\r\n    "label":"",\r\n    "mediaLink":"",\r\n    "name":"",\r\n    "operatingSystem":"",\r\n    "remoteSourceImageLink":"",\r\n    "resizedSizeInGB":null,\r\n    "sourceImageName":""\r\n  },\r\n  "provisionGuestAgent":null,\r\n  "resourceExtensionReferences":[\r\n    {\r\n      "forceUpdate":null,\r\n      "name":"",\r\n      "publisher":"",\r\n      "referenceName":"",\r\n      "resourceExtensionParameterValues":[\r\n        {\r\n          "key":"",\r\n          "type":"",\r\n          "value":""\r\n        }\r\n      ],\r\n      "state":"",\r\n      "version":""\r\n    }\r\n  ],\r\n  "roleName":"",\r\n  "roleSize":"",\r\n  "vMImageInput":{\r\n    "dataDiskConfigurations":[\r\n      {\r\n        "diskName":"",\r\n        "resizedSizeInGB":null\r\n      }\r\n    ],\r\n    "oSDiskConfiguration":{\r\n      "resizedSizeInGB":null\r\n    }\r\n  },\r\n  "vMImageName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--availability-set-name <availabilitySetName>', $('Set the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Set the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Set the data-virtual-hard-disks value.'))
  .option('--debug-settings <debugSettings>', $('Set the debug-settings value.'))
  .option('--media-location <mediaLocation>', $('Set the media-location value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Set the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Set the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Set the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .option('--role-size <roleSize>', $('Set the role-size value.'))
  .option('--vm-image-input <vMImageInput>', $('Set the vm-image-input value.'))
  .option('--vm-image-name <vMImageName>', $('Set the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'availabilitySetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = options.path + '/' + 'configurationSets';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = options.path + '/' + 'dataVirtualHardDisks';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = options.path + '/' + 'debugSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.debugSettings) {
      if (options.parse && options.debugSettings) {
        options.debugSettings = JSON.parse(options.debugSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.debugSettings}]);
    }
    paramPath = options.path + '/' + 'mediaLocation';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLocation) {
      if (options.parse && options.mediaLocation) {
        options.mediaLocation = JSON.parse(options.mediaLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLocation}]);
    }
    paramPath = options.path + '/' + 'oSVirtualHardDisk';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = options.path + '/' + 'provisionGuestAgent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionReferences';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = options.path + '/' + 'roleSize';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    paramPath = options.path + '/' + 'vMImageInput';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vMImageInput) {
      if (options.parse && options.vMImageInput) {
        options.vMImageInput = JSON.parse(options.vMImageInput);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageInput}]);
    }
    paramPath = options.path + '/' + 'vMImageName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vMImageName) {
      if (options.parse && options.vMImageName) {
        options.vMImageName = JSON.parse(options.vMImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete virtual-machine-create-parameters
  var catparametersCreateVirtualMachineVirtualMachineCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineVirtualMachineCreateParameters1 = catparametersCreateVirtualMachineVirtualMachineCreateParameters1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineVirtualMachineCreateParameters1 = parametersCreateVirtualMachineVirtualMachineCreateParameters1.category('virtual-machine-create-parameters')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineVirtualMachineCreateParameters1.command('delete')
  .description($('Remove virtual-machine-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "availabilitySetName":"",\r\n  "configurationSets":[\r\n    {\r\n      "additionalUnattendContent":{\r\n        "unattendPasses":[\r\n          {\r\n            "passName":"",\r\n            "unattendComponents":[\r\n              {\r\n                "componentName":"",\r\n                "unattendComponentSettings":[\r\n                  {\r\n                    "content":"",\r\n                    "settingName":""\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      "adminPassword":"",\r\n      "adminUserName":"",\r\n      "computerName":"",\r\n      "configurationSetType":"",\r\n      "customData":"",\r\n      "disableSshPasswordAuthentication":null,\r\n      "domainJoin":{\r\n        "credentials":{\r\n          "domain":"",\r\n          "password":"",\r\n          "userName":""\r\n        },\r\n        "domainToJoin":"",\r\n        "ldapMachineObjectOU":"",\r\n        "provisioning":{\r\n          "accountData":""\r\n        }\r\n      },\r\n      "enableAutomaticUpdates":null,\r\n      "hostName":"",\r\n      "inputEndpoints":[\r\n        {\r\n          "enableDirectServerReturn":null,\r\n          "endpointAcl":{\r\n            "rules":[\r\n              {\r\n                "action":"",\r\n                "description":"",\r\n                "order":null,\r\n                "remoteSubnet":""\r\n              }\r\n            ]\r\n          },\r\n          "idleTimeoutInMinutes":null,\r\n          "loadBalancedEndpointSetName":"",\r\n          "loadBalancerDistribution":"",\r\n          "loadBalancerName":"",\r\n          "loadBalancerProbe":{\r\n            "intervalInSeconds":null,\r\n            "path":"",\r\n            "port":0,\r\n            "protocol":0,\r\n            "timeoutInSeconds":null\r\n          },\r\n          "localPort":null,\r\n          "name":"",\r\n          "port":null,\r\n          "protocol":"",\r\n          "virtualIPAddress":"",\r\n          "virtualIPName":""\r\n        }\r\n      ],\r\n      "iPForwarding":"",\r\n      "networkInterfaces":[\r\n        {\r\n          "iPConfigurations":[\r\n            {\r\n              "staticVirtualNetworkIPAddress":"",\r\n              "subnetName":""\r\n            }\r\n          ],\r\n          "iPForwarding":"",\r\n          "name":"",\r\n          "networkSecurityGroup":""\r\n        }\r\n      ],\r\n      "networkSecurityGroup":"",\r\n      "publicIPs":[\r\n        {\r\n          "domainNameLabel":"",\r\n          "idleTimeoutInMinutes":null,\r\n          "name":""\r\n        }\r\n      ],\r\n      "resetPasswordOnFirstLogon":null,\r\n      "sshSettings":{\r\n        "keyPairs":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ],\r\n        "publicKeys":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ]\r\n      },\r\n      "staticVirtualNetworkIPAddress":"",\r\n      "storedCertificateSettings":[\r\n        {\r\n          "storeName":"",\r\n          "thumbprint":""\r\n        }\r\n      ],\r\n      "subnetNames":[\r\n        ""\r\n      ],\r\n      "timeZone":"",\r\n      "userName":"",\r\n      "userPassword":"",\r\n      "windowsRemoteManagement":{\r\n        "listeners":[\r\n          {\r\n            "certificateThumbprint":"",\r\n            "listenerType":0\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  "dataVirtualHardDisks":[\r\n    {\r\n      "hostCaching":"",\r\n      "iOType":"",\r\n      "label":"",\r\n      "logicalDiskSizeInGB":null,\r\n      "logicalUnitNumber":null,\r\n      "mediaLink":"",\r\n      "name":"",\r\n      "sourceMediaLink":""\r\n    }\r\n  ],\r\n  "debugSettings":{\r\n    "bootDiagnosticsEnabled":false,\r\n    "consoleScreenshotBlobUri":"",\r\n    "serialOutputBlobUri":""\r\n  },\r\n  "mediaLocation":"",\r\n  "oSVirtualHardDisk":{\r\n    "hostCaching":"",\r\n    "iOType":"",\r\n    "label":"",\r\n    "mediaLink":"",\r\n    "name":"",\r\n    "operatingSystem":"",\r\n    "remoteSourceImageLink":"",\r\n    "resizedSizeInGB":null,\r\n    "sourceImageName":""\r\n  },\r\n  "provisionGuestAgent":null,\r\n  "resourceExtensionReferences":[\r\n    {\r\n      "forceUpdate":null,\r\n      "name":"",\r\n      "publisher":"",\r\n      "referenceName":"",\r\n      "resourceExtensionParameterValues":[\r\n        {\r\n          "key":"",\r\n          "type":"",\r\n          "value":""\r\n        }\r\n      ],\r\n      "state":"",\r\n      "version":""\r\n    }\r\n  ],\r\n  "roleName":"",\r\n  "roleSize":"",\r\n  "vMImageInput":{\r\n    "dataDiskConfigurations":[\r\n      {\r\n        "diskName":"",\r\n        "resizedSizeInGB":null\r\n      }\r\n    ],\r\n    "oSDiskConfiguration":{\r\n      "resizedSizeInGB":null\r\n    }\r\n  },\r\n  "vMImageName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--availability-set-name', $('Remove the availability-set-name value.'))
  .option('--configuration-sets', $('Remove the configuration-sets value.'))
  .option('--data-virtual-hard-disks', $('Remove the data-virtual-hard-disks value.'))
  .option('--debug-settings', $('Remove the debug-settings value.'))
  .option('--media-location', $('Remove the media-location value.'))
  .option('--os-virtual-hard-disk', $('Remove the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent', $('Remove the provision-guest-agent value.'))
  .option('--resource-extension-references', $('Remove the resource-extension-references value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .option('--role-size', $('Remove the role-size value.'))
  .option('--vm-image-input', $('Remove the vm-image-input value.'))
  .option('--vm-image-name', $('Remove the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.availabilitySetName || options.configurationSets || options.dataVirtualHardDisks || options.debugSettings || options.mediaLocation || options.oSVirtualHardDisk || options.provisionGuestAgent || options.resourceExtensionReferences || options.roleName || options.roleSize || options.vMImageInput || options.vMImageName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.availabilitySetName) {
        subItemPath = options.path + '/availabilitySetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSets) {
        subItemPath = options.path + '/configurationSets';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dataVirtualHardDisks) {
        subItemPath = options.path + '/dataVirtualHardDisks';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.debugSettings) {
        subItemPath = options.path + '/debugSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLocation) {
        subItemPath = options.path + '/mediaLocation';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSVirtualHardDisk) {
        subItemPath = options.path + '/oSVirtualHardDisk';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisionGuestAgent) {
        subItemPath = options.path + '/provisionGuestAgent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionReferences) {
        subItemPath = options.path + '/resourceExtensionReferences';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        subItemPath = options.path + '/roleName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleSize) {
        subItemPath = options.path + '/roleSize';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vMImageInput) {
        subItemPath = options.path + '/vMImageInput';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vMImageName) {
        subItemPath = options.path + '/vMImageName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add virtual-machine-create-parameters
  var catparametersCreateVirtualMachineVirtualMachineCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineVirtualMachineCreateParameters2 = catparametersCreateVirtualMachineVirtualMachineCreateParameters2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineVirtualMachineCreateParameters2 = parametersCreateVirtualMachineVirtualMachineCreateParameters2.category('virtual-machine-create-parameters')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineVirtualMachineCreateParameters2.command('add')
  .description($('Add virtual-machine-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "availabilitySetName":"",\r\n  "configurationSets":[\r\n    {\r\n      "additionalUnattendContent":{\r\n        "unattendPasses":[\r\n          {\r\n            "passName":"",\r\n            "unattendComponents":[\r\n              {\r\n                "componentName":"",\r\n                "unattendComponentSettings":[\r\n                  {\r\n                    "content":"",\r\n                    "settingName":""\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      "adminPassword":"",\r\n      "adminUserName":"",\r\n      "computerName":"",\r\n      "configurationSetType":"",\r\n      "customData":"",\r\n      "disableSshPasswordAuthentication":null,\r\n      "domainJoin":{\r\n        "credentials":{\r\n          "domain":"",\r\n          "password":"",\r\n          "userName":""\r\n        },\r\n        "domainToJoin":"",\r\n        "ldapMachineObjectOU":"",\r\n        "provisioning":{\r\n          "accountData":""\r\n        }\r\n      },\r\n      "enableAutomaticUpdates":null,\r\n      "hostName":"",\r\n      "inputEndpoints":[\r\n        {\r\n          "enableDirectServerReturn":null,\r\n          "endpointAcl":{\r\n            "rules":[\r\n              {\r\n                "action":"",\r\n                "description":"",\r\n                "order":null,\r\n                "remoteSubnet":""\r\n              }\r\n            ]\r\n          },\r\n          "idleTimeoutInMinutes":null,\r\n          "loadBalancedEndpointSetName":"",\r\n          "loadBalancerDistribution":"",\r\n          "loadBalancerName":"",\r\n          "loadBalancerProbe":{\r\n            "intervalInSeconds":null,\r\n            "path":"",\r\n            "port":0,\r\n            "protocol":0,\r\n            "timeoutInSeconds":null\r\n          },\r\n          "localPort":null,\r\n          "name":"",\r\n          "port":null,\r\n          "protocol":"",\r\n          "virtualIPAddress":"",\r\n          "virtualIPName":""\r\n        }\r\n      ],\r\n      "iPForwarding":"",\r\n      "networkInterfaces":[\r\n        {\r\n          "iPConfigurations":[\r\n            {\r\n              "staticVirtualNetworkIPAddress":"",\r\n              "subnetName":""\r\n            }\r\n          ],\r\n          "iPForwarding":"",\r\n          "name":"",\r\n          "networkSecurityGroup":""\r\n        }\r\n      ],\r\n      "networkSecurityGroup":"",\r\n      "publicIPs":[\r\n        {\r\n          "domainNameLabel":"",\r\n          "idleTimeoutInMinutes":null,\r\n          "name":""\r\n        }\r\n      ],\r\n      "resetPasswordOnFirstLogon":null,\r\n      "sshSettings":{\r\n        "keyPairs":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ],\r\n        "publicKeys":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ]\r\n      },\r\n      "staticVirtualNetworkIPAddress":"",\r\n      "storedCertificateSettings":[\r\n        {\r\n          "storeName":"",\r\n          "thumbprint":""\r\n        }\r\n      ],\r\n      "subnetNames":[\r\n        ""\r\n      ],\r\n      "timeZone":"",\r\n      "userName":"",\r\n      "userPassword":"",\r\n      "windowsRemoteManagement":{\r\n        "listeners":[\r\n          {\r\n            "certificateThumbprint":"",\r\n            "listenerType":0\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  "dataVirtualHardDisks":[\r\n    {\r\n      "hostCaching":"",\r\n      "iOType":"",\r\n      "label":"",\r\n      "logicalDiskSizeInGB":null,\r\n      "logicalUnitNumber":null,\r\n      "mediaLink":"",\r\n      "name":"",\r\n      "sourceMediaLink":""\r\n    }\r\n  ],\r\n  "debugSettings":{\r\n    "bootDiagnosticsEnabled":false,\r\n    "consoleScreenshotBlobUri":"",\r\n    "serialOutputBlobUri":""\r\n  },\r\n  "mediaLocation":"",\r\n  "oSVirtualHardDisk":{\r\n    "hostCaching":"",\r\n    "iOType":"",\r\n    "label":"",\r\n    "mediaLink":"",\r\n    "name":"",\r\n    "operatingSystem":"",\r\n    "remoteSourceImageLink":"",\r\n    "resizedSizeInGB":null,\r\n    "sourceImageName":""\r\n  },\r\n  "provisionGuestAgent":null,\r\n  "resourceExtensionReferences":[\r\n    {\r\n      "forceUpdate":null,\r\n      "name":"",\r\n      "publisher":"",\r\n      "referenceName":"",\r\n      "resourceExtensionParameterValues":[\r\n        {\r\n          "key":"",\r\n          "type":"",\r\n          "value":""\r\n        }\r\n      ],\r\n      "state":"",\r\n      "version":""\r\n    }\r\n  ],\r\n  "roleName":"",\r\n  "roleSize":"",\r\n  "vMImageInput":{\r\n    "dataDiskConfigurations":[\r\n      {\r\n        "diskName":"",\r\n        "resizedSizeInGB":null\r\n      }\r\n    ],\r\n    "oSDiskConfiguration":{\r\n      "resizedSizeInGB":null\r\n    }\r\n  },\r\n  "vMImageName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--availability-set-name <availabilitySetName>', $('Add the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Add the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Add the data-virtual-hard-disks value.'))
  .option('--debug-settings <debugSettings>', $('Add the debug-settings value.'))
  .option('--media-location <mediaLocation>', $('Add the media-location value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Add the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Add the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Add the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .option('--role-size <roleSize>', $('Add the role-size value.'))
  .option('--vm-image-input <vMImageInput>', $('Add the vm-image-input value.'))
  .option('--vm-image-name <vMImageName>', $('Add the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'availabilitySetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = '' + '/' + 'configurationSets';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = '' + '/' + 'dataVirtualHardDisks';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = '' + '/' + 'debugSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.debugSettings) {
      if (options.parse && options.debugSettings) {
        options.debugSettings = JSON.parse(options.debugSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.debugSettings}]);
    }
    paramPath = '' + '/' + 'mediaLocation';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLocation) {
      if (options.parse && options.mediaLocation) {
        options.mediaLocation = JSON.parse(options.mediaLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLocation}]);
    }
    paramPath = '' + '/' + 'oSVirtualHardDisk';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = '' + '/' + 'provisionGuestAgent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = '' + '/' + 'resourceExtensionReferences';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = '' + '/' + 'roleName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = '' + '/' + 'roleSize';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    paramPath = '' + '/' + 'vMImageInput';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vMImageInput) {
      if (options.parse && options.vMImageInput) {
        options.vMImageInput = JSON.parse(options.vMImageInput);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageInput}]);
    }
    paramPath = '' + '/' + 'vMImageName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vMImageName) {
      if (options.parse && options.vMImageName) {
        options.vMImageName = JSON.parse(options.vMImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set configuration-sets
  var catparametersCreateVirtualMachineConfigurationSets0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineConfigurationSets0 = catparametersCreateVirtualMachineConfigurationSets0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineConfigurationSets0 = parametersCreateVirtualMachineConfigurationSets0.category('configuration-sets')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineConfigurationSets0.command('set')
  .description($('Set configuration-sets in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "configurationSets" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":0,\r\n                   "protocol":0,\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":0\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--additional-unattend-content <additionalUnattendContent>', $('Set the additional-unattend-content value.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Set the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Set the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Set the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Set the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Set the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Set the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Set the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Set the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Set the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Set the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Set the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .option('--user-password <userPassword>', $('Set the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Set the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'additionalUnattendContent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.additionalUnattendContent) {
      if (options.parse && options.additionalUnattendContent) {
        options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContent}]);
    }
    paramPath = options.path + '/' + 'adminPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'adminUserName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = options.path + '/' + 'computerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = options.path + '/' + 'configurationSetType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = options.path + '/' + 'customData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'disableSshPasswordAuthentication';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'domainJoin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'hostName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = options.path + '/' + 'inputEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'networkInterfaces';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'publicIPs';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = options.path + '/' + 'resetPasswordOnFirstLogon';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = options.path + '/' + 'sshSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'storedCertificateSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = options.path + '/' + 'subnetNames';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = options.path + '/' + 'userPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = options.path + '/' + 'windowsRemoteManagement';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete configuration-sets
  var catparametersCreateVirtualMachineConfigurationSets1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineConfigurationSets1 = catparametersCreateVirtualMachineConfigurationSets1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineConfigurationSets1 = parametersCreateVirtualMachineConfigurationSets1.category('configuration-sets')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineConfigurationSets1.command('delete')
  .description($('Remove configuration-sets in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "configurationSets" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":0,\r\n                   "protocol":0,\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":0\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--additional-unattend-content', $('Remove the additional-unattend-content value.'))
  .option('--admin-password', $('Remove the admin-password value.'))
  .option('--admin-user-name', $('Remove the admin-user-name value.'))
  .option('--computer-name', $('Remove the computer-name value.'))
  .option('--configuration-set-type', $('Remove the configuration-set-type value.'))
  .option('--custom-data', $('Remove the custom-data value.'))
  .option('--disable-ssh-password-authentication', $('Remove the disable-ssh-password-authentication value.'))
  .option('--domain-join', $('Remove the domain-join value.'))
  .option('--enable-automatic-updates', $('Remove the enable-automatic-updates value.'))
  .option('--host-name', $('Remove the host-name value.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--network-interfaces', $('Remove the network-interfaces value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .option('--public-ip', $('Remove the public-ip value.'))
  .option('--reset-password-on-first-logon', $('Remove the reset-password-on-first-logon value.'))
  .option('--ssh-settings', $('Remove the ssh-settings value.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings', $('Remove the stored-certificate-settings value.'))
  .option('--subnet-names', $('Remove the subnet-names value.'))
  .option('--time-zone', $('Remove the time-zone value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .option('--user-password', $('Remove the user-password value.'))
  .option('--windows-remote-management', $('Remove the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.additionalUnattendContent || options.adminPassword || options.adminUserName || options.computerName || options.configurationSetType || options.customData || options.disableSshPasswordAuthentication || options.domainJoin || options.enableAutomaticUpdates || options.hostName || options.inputEndpoints || options.ipForwarding || options.networkInterfaces || options.networkSecurityGroup || options.publicIPs || options.resetPasswordOnFirstLogon || options.sshSettings || options.staticVirtualNetworkIPAddress || options.storedCertificateSettings || options.subnetNames || options.timeZone || options.userName || options.userPassword || options.windowsRemoteManagement;
    if (anySubItem) {
      var subItemPath = null;
      if (options.additionalUnattendContent) {
        subItemPath = options.path + '/additionalUnattendContent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminPassword) {
        subItemPath = options.path + '/adminPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminUserName) {
        subItemPath = options.path + '/adminUserName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.computerName) {
        subItemPath = options.path + '/computerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSetType) {
        subItemPath = options.path + '/configurationSetType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.customData) {
        subItemPath = options.path + '/customData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disableSshPasswordAuthentication) {
        subItemPath = options.path + '/disableSshPasswordAuthentication';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainJoin) {
        subItemPath = options.path + '/domainJoin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableAutomaticUpdates) {
        subItemPath = options.path + '/enableAutomaticUpdates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostName) {
        subItemPath = options.path + '/hostName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.inputEndpoints) {
        subItemPath = options.path + '/inputEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        subItemPath = options.path + '/ipForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkInterfaces) {
        subItemPath = options.path + '/networkInterfaces';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPs) {
        subItemPath = options.path + '/publicIPs';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resetPasswordOnFirstLogon) {
        subItemPath = options.path + '/resetPasswordOnFirstLogon';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sshSettings) {
        subItemPath = options.path + '/sshSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storedCertificateSettings) {
        subItemPath = options.path + '/storedCertificateSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetNames) {
        subItemPath = options.path + '/subnetNames';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeZone) {
        subItemPath = options.path + '/timeZone';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        subItemPath = options.path + '/userName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userPassword) {
        subItemPath = options.path + '/userPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.windowsRemoteManagement) {
        subItemPath = options.path + '/windowsRemoteManagement';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add configuration-sets
  var catparametersCreateVirtualMachineConfigurationSets2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineConfigurationSets2 = catparametersCreateVirtualMachineConfigurationSets2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineConfigurationSets2 = parametersCreateVirtualMachineConfigurationSets2.category('configuration-sets')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineConfigurationSets2.command('add')
  .description($('Add configuration-sets in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "configurationSets" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":0,\r\n                   "protocol":0,\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":0\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--additional-unattend-content <additionalUnattendContent>', $('Add the additional-unattend-content value.'))
  .option('--admin-password <adminPassword>', $('Add the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Add the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Add the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Add the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Add the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Add the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Add the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Add the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Add the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Add the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Add the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Add the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Add the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Add the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Add the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Add the time-zone value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .option('--user-password <userPassword>', $('Add the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Add the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'additionalUnattendContent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.additionalUnattendContent) {
      if (options.parse && options.additionalUnattendContent) {
        options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContent}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminUserName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'computerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'configurationSetType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'customData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'disableSshPasswordAuthentication';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'domainJoin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'enableAutomaticUpdates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'hostName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'inputEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkInterfaces';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPs';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'resetPasswordOnFirstLogon';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'sshSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'storedCertificateSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetNames';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'timeZone';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'windowsRemoteManagement';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete additional-unattend-content
  var catparametersCreateVirtualMachineAdditionalUnattendContent1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineAdditionalUnattendContent1 = catparametersCreateVirtualMachineAdditionalUnattendContent1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineAdditionalUnattendContent1 = parametersCreateVirtualMachineAdditionalUnattendContent1.category('additional-unattend-content')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineAdditionalUnattendContent1.command('delete')
  .description($('Remove additional-unattend-content in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "unattendPasses":[\r\n               {\r\n                 "passName":"",\r\n                 "unattendComponents":[\r\n                   {\r\n                     "componentName":"",\r\n                     "unattendComponentSettings":[\r\n                       {\r\n                         "content":"",\r\n                         "settingName":""\r\n                       }\r\n                     ]\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--unattend-passes', $('Remove the unattend-passes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent';
    var anySubItem = false || options.unattendPasses;
    if (anySubItem) {
      var subItemPath = null;
      if (options.unattendPasses) {
        subItemPath = options.path + '/unattendPasses';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add additional-unattend-content
  var catparametersCreateVirtualMachineAdditionalUnattendContent2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineAdditionalUnattendContent2 = catparametersCreateVirtualMachineAdditionalUnattendContent2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineAdditionalUnattendContent2 = parametersCreateVirtualMachineAdditionalUnattendContent2.category('additional-unattend-content')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineAdditionalUnattendContent2.command('add')
  .description($('Add additional-unattend-content in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "unattendPasses":[\r\n               {\r\n                 "passName":"",\r\n                 "unattendComponents":[\r\n                   {\r\n                     "componentName":"",\r\n                     "unattendComponentSettings":[\r\n                       {\r\n                         "content":"",\r\n                         "settingName":""\r\n                       }\r\n                     ]\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--unattend-passes <unattendPasses>', $('Add the unattend-passes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent' + '/' + 'unattendPasses';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendPasses) {
      if (options.parse && options.unattendPasses) {
        options.unattendPasses = JSON.parse(options.unattendPasses);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendPasses}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set unattend-passes
  var catparametersCreateVirtualMachineUnattendPasses0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineUnattendPasses0 = catparametersCreateVirtualMachineUnattendPasses0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineUnattendPasses0 = parametersCreateVirtualMachineUnattendPasses0.category('unattend-passes')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineUnattendPasses0.command('set')
  .description($('Set unattend-passes in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--pass-name <passName>', $('Set the pass-name value.'))
  .option('--unattend-components <unattendComponents>', $('Set the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'passName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.passName) {
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = options.path + '/' + 'unattendComponents';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendComponents) {
      if (options.parse && options.unattendComponents) {
        options.unattendComponents = JSON.parse(options.unattendComponents);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponents}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete unattend-passes
  var catparametersCreateVirtualMachineUnattendPasses1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineUnattendPasses1 = catparametersCreateVirtualMachineUnattendPasses1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineUnattendPasses1 = parametersCreateVirtualMachineUnattendPasses1.category('unattend-passes')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineUnattendPasses1.command('delete')
  .description($('Remove unattend-passes in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--pass-name', $('Remove the pass-name value.'))
  .option('--unattend-components', $('Remove the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.passName || options.unattendComponents;
    if (anySubItem) {
      var subItemPath = null;
      if (options.passName) {
        subItemPath = options.path + '/passName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.unattendComponents) {
        subItemPath = options.path + '/unattendComponents';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add unattend-passes
  var catparametersCreateVirtualMachineUnattendPasses2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineUnattendPasses2 = catparametersCreateVirtualMachineUnattendPasses2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineUnattendPasses2 = parametersCreateVirtualMachineUnattendPasses2.category('unattend-passes')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineUnattendPasses2.command('add')
  .description($('Add unattend-passes in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--pass-name <passName>', $('Add the pass-name value.'))
  .option('--unattend-components <unattendComponents>', $('Add the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '') + '/' + 'passName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.passName) {
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '') + '/' + 'unattendComponents';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendComponents) {
      if (options.parse && options.unattendComponents) {
        options.unattendComponents = JSON.parse(options.unattendComponents);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponents}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set unattend-components
  var catparametersCreateVirtualMachineUnattendComponents0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineUnattendComponents0 = catparametersCreateVirtualMachineUnattendComponents0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineUnattendComponents0 = parametersCreateVirtualMachineUnattendComponents0.category('unattend-components')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineUnattendComponents0.command('set')
  .description($('Set unattend-components in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--component-name <componentName>', $('Set the component-name value.'))
  .option('--unattend-component-settings <unattendComponentSettings>', $('Set the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'componentName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.componentName) {
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = options.path + '/' + 'unattendComponentSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendComponentSettings) {
      if (options.parse && options.unattendComponentSettings) {
        options.unattendComponentSettings = JSON.parse(options.unattendComponentSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponentSettings}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete unattend-components
  var catparametersCreateVirtualMachineUnattendComponents1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineUnattendComponents1 = catparametersCreateVirtualMachineUnattendComponents1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineUnattendComponents1 = parametersCreateVirtualMachineUnattendComponents1.category('unattend-components')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineUnattendComponents1.command('delete')
  .description($('Remove unattend-components in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--component-name', $('Remove the component-name value.'))
  .option('--unattend-component-settings', $('Remove the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.componentName || options.unattendComponentSettings;
    if (anySubItem) {
      var subItemPath = null;
      if (options.componentName) {
        subItemPath = options.path + '/componentName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.unattendComponentSettings) {
        subItemPath = options.path + '/unattendComponentSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add unattend-components
  var catparametersCreateVirtualMachineUnattendComponents2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineUnattendComponents2 = catparametersCreateVirtualMachineUnattendComponents2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineUnattendComponents2 = parametersCreateVirtualMachineUnattendComponents2.category('unattend-components')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineUnattendComponents2.command('add')
  .description($('Add unattend-components in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--component-name <componentName>', $('Add the component-name value.'))
  .option('--unattend-component-settings <unattendComponentSettings>', $('Add the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '') + '/' + 'componentName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.componentName) {
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '') + '/' + 'unattendComponentSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendComponentSettings) {
      if (options.parse && options.unattendComponentSettings) {
        options.unattendComponentSettings = JSON.parse(options.unattendComponentSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponentSettings}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set unattend-component-settings
  var catparametersCreateVirtualMachineUnattendComponentSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineUnattendComponentSettings0 = catparametersCreateVirtualMachineUnattendComponentSettings0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineUnattendComponentSettings0 = parametersCreateVirtualMachineUnattendComponentSettings0.category('unattend-component-settings')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineUnattendComponentSettings0.command('set')
  .description($('Set unattend-component-settings in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-components-index <unattend-components-index>', $('Indexer: unattend-components-index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--content <content>', $('Set the content value.'))
  .option('--setting-name <settingName>', $('Set the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'content';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.content) {
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    paramPath = options.path + '/' + 'settingName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.settingName) {
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete unattend-component-settings
  var catparametersCreateVirtualMachineUnattendComponentSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineUnattendComponentSettings1 = catparametersCreateVirtualMachineUnattendComponentSettings1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineUnattendComponentSettings1 = parametersCreateVirtualMachineUnattendComponentSettings1.category('unattend-component-settings')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineUnattendComponentSettings1.command('delete')
  .description($('Remove unattend-component-settings in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-components-index <unattend-components-index>', $('Indexer: unattend-components-index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--content', $('Remove the content value.'))
  .option('--setting-name', $('Remove the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.content || options.settingName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.content) {
        subItemPath = options.path + '/content';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.settingName) {
        subItemPath = options.path + '/settingName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add unattend-component-settings
  var catparametersCreateVirtualMachineUnattendComponentSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineUnattendComponentSettings2 = catparametersCreateVirtualMachineUnattendComponentSettings2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineUnattendComponentSettings2 = parametersCreateVirtualMachineUnattendComponentSettings2.category('unattend-component-settings')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineUnattendComponentSettings2.command('add')
  .description($('Add unattend-component-settings in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--content <content>', $('Add the content value.'))
  .option('--setting-name <settingName>', $('Add the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'content';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.content) {
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'settingName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.settingName) {
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set domain-join
  var catparametersCreateVirtualMachineDomainJoin0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDomainJoin0 = catparametersCreateVirtualMachineDomainJoin0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineDomainJoin0 = parametersCreateVirtualMachineDomainJoin0.category('domain-join')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineDomainJoin0.command('set')
  .description($('Set domain-join in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--credentials <credentials>', $('Set the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Set the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Set the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Set the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var paramPath = options.path + '/' + 'credentials';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = options.path + '/' + 'domainToJoin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = options.path + '/' + 'ldapMachineObjectOU';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = options.path + '/' + 'provisioning';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete domain-join
  var catparametersCreateVirtualMachineDomainJoin1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDomainJoin1 = catparametersCreateVirtualMachineDomainJoin1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineDomainJoin1 = parametersCreateVirtualMachineDomainJoin1.category('domain-join')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineDomainJoin1.command('delete')
  .description($('Remove domain-join in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--credentials', $('Remove the credentials value.'))
  .option('--domain-to-join', $('Remove the domain-to-join value.'))
  .option('--ldap-machine-object-o-u', $('Remove the ldap-machine-object-o-u value.'))
  .option('--provisioning', $('Remove the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var anySubItem = false || options.credentials || options.domainToJoin || options.ldapMachineObjectOU || options.provisioning;
    if (anySubItem) {
      var subItemPath = null;
      if (options.credentials) {
        subItemPath = options.path + '/credentials';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainToJoin) {
        subItemPath = options.path + '/domainToJoin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ldapMachineObjectOU) {
        subItemPath = options.path + '/ldapMachineObjectOU';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioning) {
        subItemPath = options.path + '/provisioning';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add domain-join
  var catparametersCreateVirtualMachineDomainJoin2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDomainJoin2 = catparametersCreateVirtualMachineDomainJoin2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineDomainJoin2 = parametersCreateVirtualMachineDomainJoin2.category('domain-join')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineDomainJoin2.command('add')
  .description($('Add domain-join in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--credentials <credentials>', $('Add the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Add the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Add the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Add the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'credentials';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'domainToJoin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'ldapMachineObjectOU';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'provisioning';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set credentials
  var catparametersCreateVirtualMachineCredentials0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineCredentials0 = catparametersCreateVirtualMachineCredentials0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineCredentials0 = parametersCreateVirtualMachineCredentials0.category('credentials')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineCredentials0.command('set')
  .description($('Set credentials in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain <domain>', $('Set the domain value.'))
  .option('--password <password>', $('Set the password value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var paramPath = options.path + '/' + 'domain';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = options.path + '/' + 'password';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete credentials
  var catparametersCreateVirtualMachineCredentials1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineCredentials1 = catparametersCreateVirtualMachineCredentials1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineCredentials1 = parametersCreateVirtualMachineCredentials1.category('credentials')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineCredentials1.command('delete')
  .description($('Remove credentials in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain', $('Remove the domain value.'))
  .option('--password', $('Remove the password value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var anySubItem = false || options.domain || options.password || options.userName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.domain) {
        subItemPath = options.path + '/domain';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.password) {
        subItemPath = options.path + '/password';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        subItemPath = options.path + '/userName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add credentials
  var catparametersCreateVirtualMachineCredentials2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineCredentials2 = catparametersCreateVirtualMachineCredentials2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineCredentials2 = parametersCreateVirtualMachineCredentials2.category('credentials')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineCredentials2.command('add')
  .description($('Add credentials in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain <domain>', $('Add the domain value.'))
  .option('--password <password>', $('Add the password value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'domain';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'password';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'userName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set provisioning
  var catparametersCreateVirtualMachineProvisioning0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineProvisioning0 = catparametersCreateVirtualMachineProvisioning0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineProvisioning0 = parametersCreateVirtualMachineProvisioning0.category('provisioning')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineProvisioning0.command('set')
  .description($('Set provisioning in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--account-data <accountData>', $('Set the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var paramPath = options.path + '/' + 'accountData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete provisioning
  var catparametersCreateVirtualMachineProvisioning1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineProvisioning1 = catparametersCreateVirtualMachineProvisioning1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineProvisioning1 = parametersCreateVirtualMachineProvisioning1.category('provisioning')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineProvisioning1.command('delete')
  .description($('Remove provisioning in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--account-data', $('Remove the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var anySubItem = false || options.accountData;
    if (anySubItem) {
      var subItemPath = null;
      if (options.accountData) {
        subItemPath = options.path + '/accountData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add provisioning
  var catparametersCreateVirtualMachineProvisioning2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineProvisioning2 = catparametersCreateVirtualMachineProvisioning2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineProvisioning2 = parametersCreateVirtualMachineProvisioning2.category('provisioning')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineProvisioning2.command('add')
  .description($('Add provisioning in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--account-data <accountData>', $('Add the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + 'accountData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set input-endpoints
  var catparametersCreateVirtualMachineInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineInputEndpoints0 = catparametersCreateVirtualMachineInputEndpoints0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineInputEndpoints0 = parametersCreateVirtualMachineInputEndpoints0.category('input-endpoints')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineInputEndpoints0.command('set')
  .description($('Set input-endpoints in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":0,\r\n               "protocol":0,\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Set the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'endpointAcl';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete input-endpoints
  var catparametersCreateVirtualMachineInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineInputEndpoints1 = catparametersCreateVirtualMachineInputEndpoints1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineInputEndpoints1 = parametersCreateVirtualMachineInputEndpoints1.category('input-endpoints')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineInputEndpoints1.command('delete')
  .description($('Remove input-endpoints in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":0,\r\n               "protocol":0,\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--enable-direct-server-return', $('Remove the enable-direct-server-return value.'))
  .option('--endpoint-acl', $('Remove the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name', $('Remove the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution', $('Remove the load-balancer-distribution value.'))
  .option('--load-balancer-name', $('Remove the load-balancer-name value.'))
  .option('--load-balancer-probe', $('Remove the load-balancer-probe value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--virtual-ip-address', $('Remove the virtual-ip-address value.'))
  .option('--virtual-ip-name', $('Remove the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.enableDirectServerReturn || options.endpointAcl || options.idleTimeoutInMinutes || options.loadBalancedEndpointSetName || options.loadBalancerDistribution || options.loadBalancerName || options.loadBalancerProbe || options.localPort || options.name || options.port || options.protocol || options.virtualIPAddress || options.virtualIPName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.enableDirectServerReturn) {
        subItemPath = options.path + '/enableDirectServerReturn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.endpointAcl) {
        subItemPath = options.path + '/endpointAcl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancedEndpointSetName) {
        subItemPath = options.path + '/loadBalancedEndpointSetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerDistribution) {
        subItemPath = options.path + '/loadBalancerDistribution';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerName) {
        subItemPath = options.path + '/loadBalancerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerProbe) {
        subItemPath = options.path + '/loadBalancerProbe';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPAddress) {
        subItemPath = options.path + '/virtualIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPName) {
        subItemPath = options.path + '/virtualIPName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add input-endpoints
  var catparametersCreateVirtualMachineInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineInputEndpoints2 = catparametersCreateVirtualMachineInputEndpoints2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineInputEndpoints2 = parametersCreateVirtualMachineInputEndpoints2.category('input-endpoints')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineInputEndpoints2.command('add')
  .description($('Add input-endpoints in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":0,\r\n               "protocol":0,\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Add the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Add the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Add the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Add the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Add the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Add the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Add the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Add the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'enableDirectServerReturn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'endpointAcl';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancedEndpointSetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerDistribution';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerProbe';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete endpoint-acl
  var catparametersCreateVirtualMachineEndpointAcl1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineEndpointAcl1 = catparametersCreateVirtualMachineEndpointAcl1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineEndpointAcl1 = parametersCreateVirtualMachineEndpointAcl1.category('endpoint-acl')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineEndpointAcl1.command('delete')
  .description($('Remove endpoint-acl in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "endpointAcl" : {\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--rules', $('Remove the rules value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var anySubItem = false || options.rules;
    if (anySubItem) {
      var subItemPath = null;
      if (options.rules) {
        subItemPath = options.path + '/rules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add endpoint-acl
  var catparametersCreateVirtualMachineEndpointAcl2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineEndpointAcl2 = catparametersCreateVirtualMachineEndpointAcl2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineEndpointAcl2 = parametersCreateVirtualMachineEndpointAcl2.category('endpoint-acl')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineEndpointAcl2.command('add')
  .description($('Add endpoint-acl in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "endpointAcl" : {\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--rules <rules>', $('Add the rules value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + 'rules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set rules
  var catparametersCreateVirtualMachineRules0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineRules0 = catparametersCreateVirtualMachineRules0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineRules0 = parametersCreateVirtualMachineRules0.category('rules')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineRules0.command('set')
  .description($('Set rules in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete rules
  var catparametersCreateVirtualMachineRules1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineRules1 = catparametersCreateVirtualMachineRules1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineRules1 = parametersCreateVirtualMachineRules1.category('rules')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineRules1.command('delete')
  .description($('Remove rules in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--action', $('Remove the action value.'))
  .option('--description', $('Remove the description value.'))
  .option('--order', $('Remove the order value.'))
  .option('--remote-subnet', $('Remove the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.action || options.description || options.order || options.remoteSubnet;
    if (anySubItem) {
      var subItemPath = null;
      if (options.action) {
        subItemPath = options.path + '/action';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.order) {
        subItemPath = options.path + '/order';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSubnet) {
        subItemPath = options.path + '/remoteSubnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add rules
  var catparametersCreateVirtualMachineRules2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineRules2 = catparametersCreateVirtualMachineRules2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineRules2 = parametersCreateVirtualMachineRules2.category('rules')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineRules2.command('add')
  .description($('Add rules in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--action <action>', $('Add the action value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--order <order>', $('Add the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Add the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'action';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'order';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'remoteSubnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set load-balancer-probe
  var catparametersCreateVirtualMachineLoadBalancerProbe0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineLoadBalancerProbe0 = catparametersCreateVirtualMachineLoadBalancerProbe0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineLoadBalancerProbe0 = parametersCreateVirtualMachineLoadBalancerProbe0.category('load-balancer-probe')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineLoadBalancerProbe0.command('set')
  .description($('Set load-balancer-probe in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":0,\r\n             "protocol":0,\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var paramPath = options.path + '/' + 'intervalInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete load-balancer-probe
  var catparametersCreateVirtualMachineLoadBalancerProbe1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineLoadBalancerProbe1 = catparametersCreateVirtualMachineLoadBalancerProbe1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineLoadBalancerProbe1 = parametersCreateVirtualMachineLoadBalancerProbe1.category('load-balancer-probe')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineLoadBalancerProbe1.command('delete')
  .description($('Remove load-balancer-probe in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":0,\r\n             "protocol":0,\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--interval-in-seconds', $('Remove the interval-in-seconds value.'))
  .option('--path', $('Remove the path value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--timeout-in-seconds', $('Remove the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var anySubItem = false || options.intervalInSeconds || options.path || options.port || options.protocol || options.timeoutInSeconds;
    if (anySubItem) {
      var subItemPath = null;
      if (options.intervalInSeconds) {
        subItemPath = options.path + '/intervalInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeoutInSeconds) {
        subItemPath = options.path + '/timeoutInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add load-balancer-probe
  var catparametersCreateVirtualMachineLoadBalancerProbe2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineLoadBalancerProbe2 = catparametersCreateVirtualMachineLoadBalancerProbe2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineLoadBalancerProbe2 = parametersCreateVirtualMachineLoadBalancerProbe2.category('load-balancer-probe')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineLoadBalancerProbe2.command('add')
  .description($('Add load-balancer-probe in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":0,\r\n             "protocol":0,\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Add the interval-in-seconds value.'))
  .option('--path <path>', $('Add the path value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Add the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'intervalInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'timeoutInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete protocol
  var catparametersCreateVirtualMachineProtocol1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineProtocol1 = catparametersCreateVirtualMachineProtocol1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineProtocol1 = parametersCreateVirtualMachineProtocol1.category('protocol')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineProtocol1.command('delete')
  .description($('Remove protocol in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "protocol" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add protocol
  var catparametersCreateVirtualMachineProtocol2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineProtocol2 = catparametersCreateVirtualMachineProtocol2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineProtocol2 = parametersCreateVirtualMachineProtocol2.category('protocol')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineProtocol2.command('add')
  .description($('Add protocol in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "protocol" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set network-interfaces
  var catparametersCreateVirtualMachineNetworkInterfaces0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineNetworkInterfaces0 = catparametersCreateVirtualMachineNetworkInterfaces0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineNetworkInterfaces0 = parametersCreateVirtualMachineNetworkInterfaces0.category('network-interfaces')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineNetworkInterfaces0.command('set')
  .description($('Set network-interfaces in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete network-interfaces
  var catparametersCreateVirtualMachineNetworkInterfaces1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineNetworkInterfaces1 = catparametersCreateVirtualMachineNetworkInterfaces1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineNetworkInterfaces1 = parametersCreateVirtualMachineNetworkInterfaces1.category('network-interfaces')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineNetworkInterfaces1.command('delete')
  .description($('Remove network-interfaces in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--name', $('Remove the name value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.ipConfigurations || options.ipForwarding || options.name || options.networkSecurityGroup;
    if (anySubItem) {
      var subItemPath = null;
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        subItemPath = options.path + '/ipForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add network-interfaces
  var catparametersCreateVirtualMachineNetworkInterfaces2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineNetworkInterfaces2 = catparametersCreateVirtualMachineNetworkInterfaces2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineNetworkInterfaces2 = parametersCreateVirtualMachineNetworkInterfaces2.category('network-interfaces')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineNetworkInterfaces2.command('add')
  .description($('Add network-interfaces in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set ip-configurations
  var catparametersCreateVirtualMachineIPConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineIPConfigurations0 = catparametersCreateVirtualMachineIPConfigurations0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineIPConfigurations0 = parametersCreateVirtualMachineIPConfigurations0.category('ip-configurations')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineIPConfigurations0.command('set')
  .description($('Set ip-configurations in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete ip-configurations
  var catparametersCreateVirtualMachineIPConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineIPConfigurations1 = catparametersCreateVirtualMachineIPConfigurations1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineIPConfigurations1 = parametersCreateVirtualMachineIPConfigurations1.category('ip-configurations')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineIPConfigurations1.command('delete')
  .description($('Remove ip-configurations in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        subItemPath = options.path + '/subnetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add ip-configurations
  var catparametersCreateVirtualMachineIPConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineIPConfigurations2 = catparametersCreateVirtualMachineIPConfigurations2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineIPConfigurations2 = parametersCreateVirtualMachineIPConfigurations2.category('ip-configurations')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineIPConfigurations2.command('add')
  .description($('Add ip-configurations in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set public-ip
  var catparametersCreateVirtualMachinePublicIPs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachinePublicIPs0 = catparametersCreateVirtualMachinePublicIPs0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachinePublicIPs0 = parametersCreateVirtualMachinePublicIPs0.category('public-ip')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachinePublicIPs0.command('set')
  .description($('Set public-ip in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain-name-label <domainNameLabel>', $('Set the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'domainNameLabel';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete public-ip
  var catparametersCreateVirtualMachinePublicIPs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachinePublicIPs1 = catparametersCreateVirtualMachinePublicIPs1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachinePublicIPs1 = parametersCreateVirtualMachinePublicIPs1.category('public-ip')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachinePublicIPs1.command('delete')
  .description($('Remove public-ip in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain-name-label', $('Remove the domain-name-label value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.domainNameLabel || options.idleTimeoutInMinutes || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.domainNameLabel) {
        subItemPath = options.path + '/domainNameLabel';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add public-ip
  var catparametersCreateVirtualMachinePublicIPs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachinePublicIPs2 = catparametersCreateVirtualMachinePublicIPs2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachinePublicIPs2 = parametersCreateVirtualMachinePublicIPs2.category('public-ip')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachinePublicIPs2.command('add')
  .description($('Add public-ip in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain-name-label <domainNameLabel>', $('Add the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'domainNameLabel';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete ssh-settings
  var catparametersCreateVirtualMachineSshSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineSshSettings1 = catparametersCreateVirtualMachineSshSettings1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineSshSettings1 = parametersCreateVirtualMachineSshSettings1.category('ssh-settings')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineSshSettings1.command('delete')
  .description($('Remove ssh-settings in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sshSettings" : {\r\n             "keyPairs":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ],\r\n             "publicKeys":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--key-pairs', $('Remove the key-pairs value.'))
  .option('--public-keys', $('Remove the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var anySubItem = false || options.keyPairs || options.publicKeys;
    if (anySubItem) {
      var subItemPath = null;
      if (options.keyPairs) {
        subItemPath = options.path + '/keyPairs';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicKeys) {
        subItemPath = options.path + '/publicKeys';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add ssh-settings
  var catparametersCreateVirtualMachineSshSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineSshSettings2 = catparametersCreateVirtualMachineSshSettings2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineSshSettings2 = parametersCreateVirtualMachineSshSettings2.category('ssh-settings')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineSshSettings2.command('add')
  .description($('Add ssh-settings in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sshSettings" : {\r\n             "keyPairs":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ],\r\n             "publicKeys":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--key-pairs <keyPairs>', $('Add the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Add the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'keyPairs';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'publicKeys';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set key-pairs
  var catparametersCreateVirtualMachineKeyPairs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineKeyPairs0 = catparametersCreateVirtualMachineKeyPairs0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineKeyPairs0 = parametersCreateVirtualMachineKeyPairs0.category('key-pairs')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineKeyPairs0.command('set')
  .description($('Set key-pairs in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete key-pairs
  var catparametersCreateVirtualMachineKeyPairs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineKeyPairs1 = catparametersCreateVirtualMachineKeyPairs1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineKeyPairs1 = parametersCreateVirtualMachineKeyPairs1.category('key-pairs')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineKeyPairs1.command('delete')
  .description($('Remove key-pairs in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fingerprint) {
        subItemPath = options.path + '/fingerprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add key-pairs
  var catparametersCreateVirtualMachineKeyPairs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineKeyPairs2 = catparametersCreateVirtualMachineKeyPairs2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineKeyPairs2 = parametersCreateVirtualMachineKeyPairs2.category('key-pairs')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineKeyPairs2.command('add')
  .description($('Add key-pairs in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set public-keys
  var catparametersCreateVirtualMachinePublicKeys0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachinePublicKeys0 = catparametersCreateVirtualMachinePublicKeys0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachinePublicKeys0 = parametersCreateVirtualMachinePublicKeys0.category('public-keys')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachinePublicKeys0.command('set')
  .description($('Set public-keys in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete public-keys
  var catparametersCreateVirtualMachinePublicKeys1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachinePublicKeys1 = catparametersCreateVirtualMachinePublicKeys1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachinePublicKeys1 = parametersCreateVirtualMachinePublicKeys1.category('public-keys')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachinePublicKeys1.command('delete')
  .description($('Remove public-keys in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fingerprint) {
        subItemPath = options.path + '/fingerprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add public-keys
  var catparametersCreateVirtualMachinePublicKeys2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachinePublicKeys2 = catparametersCreateVirtualMachinePublicKeys2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachinePublicKeys2 = parametersCreateVirtualMachinePublicKeys2.category('public-keys')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachinePublicKeys2.command('add')
  .description($('Add public-keys in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set stored-certificate-settings
  var catparametersCreateVirtualMachineStoredCertificateSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineStoredCertificateSettings0 = catparametersCreateVirtualMachineStoredCertificateSettings0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineStoredCertificateSettings0 = parametersCreateVirtualMachineStoredCertificateSettings0.category('stored-certificate-settings')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineStoredCertificateSettings0.command('set')
  .description($('Set stored-certificate-settings in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'storeName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete stored-certificate-settings
  var catparametersCreateVirtualMachineStoredCertificateSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineStoredCertificateSettings1 = catparametersCreateVirtualMachineStoredCertificateSettings1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineStoredCertificateSettings1 = parametersCreateVirtualMachineStoredCertificateSettings1.category('stored-certificate-settings')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineStoredCertificateSettings1.command('delete')
  .description($('Remove stored-certificate-settings in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.storeName || options.thumbprint;
    if (anySubItem) {
      var subItemPath = null;
      if (options.storeName) {
        subItemPath = options.path + '/storeName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        subItemPath = options.path + '/thumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add stored-certificate-settings
  var catparametersCreateVirtualMachineStoredCertificateSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineStoredCertificateSettings2 = catparametersCreateVirtualMachineStoredCertificateSettings2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineStoredCertificateSettings2 = parametersCreateVirtualMachineStoredCertificateSettings2.category('stored-certificate-settings')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineStoredCertificateSettings2.command('add')
  .description($('Add stored-certificate-settings in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'storeName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'thumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set subnet-names
  var catparametersCreateVirtualMachineSubnetNames0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineSubnetNames0 = catparametersCreateVirtualMachineSubnetNames0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineSubnetNames0 = parametersCreateVirtualMachineSubnetNames0.category('subnet-names')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineSubnetNames0.command('set')
  .description($('Set subnet-names in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete subnet-names
  var catparametersCreateVirtualMachineSubnetNames1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineSubnetNames1 = catparametersCreateVirtualMachineSubnetNames1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineSubnetNames1 = parametersCreateVirtualMachineSubnetNames1.category('subnet-names')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineSubnetNames1.command('delete')
  .description($('Remove subnet-names in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add subnet-names
  var catparametersCreateVirtualMachineSubnetNames2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineSubnetNames2 = catparametersCreateVirtualMachineSubnetNames2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineSubnetNames2 = parametersCreateVirtualMachineSubnetNames2.category('subnet-names')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineSubnetNames2.command('add')
  .description($('Add subnet-names in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete windows-remote-management
  var catparametersCreateVirtualMachineWindowsRemoteManagement1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineWindowsRemoteManagement1 = catparametersCreateVirtualMachineWindowsRemoteManagement1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineWindowsRemoteManagement1 = parametersCreateVirtualMachineWindowsRemoteManagement1.category('windows-remote-management')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineWindowsRemoteManagement1.command('delete')
  .description($('Remove windows-remote-management in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsRemoteManagement" : {\r\n             "listeners":[\r\n               {\r\n                 "certificateThumbprint":"",\r\n                 "listenerType":0\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--listeners', $('Remove the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var anySubItem = false || options.listeners;
    if (anySubItem) {
      var subItemPath = null;
      if (options.listeners) {
        subItemPath = options.path + '/listeners';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add windows-remote-management
  var catparametersCreateVirtualMachineWindowsRemoteManagement2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineWindowsRemoteManagement2 = catparametersCreateVirtualMachineWindowsRemoteManagement2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineWindowsRemoteManagement2 = parametersCreateVirtualMachineWindowsRemoteManagement2.category('windows-remote-management')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineWindowsRemoteManagement2.command('add')
  .description($('Add windows-remote-management in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsRemoteManagement" : {\r\n             "listeners":[\r\n               {\r\n                 "certificateThumbprint":"",\r\n                 "listenerType":0\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--listeners <listeners>', $('Add the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + 'listeners';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set listeners
  var catparametersCreateVirtualMachineListeners0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineListeners0 = catparametersCreateVirtualMachineListeners0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineListeners0 = parametersCreateVirtualMachineListeners0.category('listeners')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineListeners0.command('set')
  .description($('Set listeners in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":0\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Set the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Set the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateThumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'listenerType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete listeners
  var catparametersCreateVirtualMachineListeners1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineListeners1 = catparametersCreateVirtualMachineListeners1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineListeners1 = parametersCreateVirtualMachineListeners1.category('listeners')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineListeners1.command('delete')
  .description($('Remove listeners in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":0\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--certificate-thumbprint', $('Remove the certificate-thumbprint value.'))
  .option('--listener-type', $('Remove the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.certificateThumbprint || options.listenerType;
    if (anySubItem) {
      var subItemPath = null;
      if (options.certificateThumbprint) {
        subItemPath = options.path + '/certificateThumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.listenerType) {
        subItemPath = options.path + '/listenerType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add listeners
  var catparametersCreateVirtualMachineListeners2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineListeners2 = catparametersCreateVirtualMachineListeners2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineListeners2 = parametersCreateVirtualMachineListeners2.category('listeners')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineListeners2.command('add')
  .description($('Add listeners in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":0\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Add the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Add the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateThumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'listenerType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete listener-type
  var catparametersCreateVirtualMachineListenerType1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineListenerType1 = catparametersCreateVirtualMachineListenerType1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineListenerType1 = parametersCreateVirtualMachineListenerType1.category('listener-type')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineListenerType1.command('delete')
  .description($('Remove listener-type in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listenerType" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners-index <listeners-index>', $('Indexer: listeners-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add listener-type
  var catparametersCreateVirtualMachineListenerType2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineListenerType2 = catparametersCreateVirtualMachineListenerType2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineListenerType2 = parametersCreateVirtualMachineListenerType2.category('listener-type')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineListenerType2.command('add')
  .description($('Add listener-type in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listenerType" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set data-virtual-hard-disks
  var catparametersCreateVirtualMachineDataVirtualHardDisks0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDataVirtualHardDisks0 = catparametersCreateVirtualMachineDataVirtualHardDisks0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineDataVirtualHardDisks0 = parametersCreateVirtualMachineDataVirtualHardDisks0.category('data-virtual-hard-disks')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineDataVirtualHardDisks0.command('set')
  .description($('Set data-virtual-hard-disks in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataVirtualHardDisks" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "logicalDiskSizeInGB":null,\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "sourceMediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Set the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sourceMediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete data-virtual-hard-disks
  var catparametersCreateVirtualMachineDataVirtualHardDisks1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDataVirtualHardDisks1 = catparametersCreateVirtualMachineDataVirtualHardDisks1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineDataVirtualHardDisks1 = parametersCreateVirtualMachineDataVirtualHardDisks1.category('data-virtual-hard-disks')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineDataVirtualHardDisks1.command('delete')
  .description($('Remove data-virtual-hard-disks in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataVirtualHardDisks" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "logicalDiskSizeInGB":null,\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "sourceMediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--logical-disk-size-in-g-b', $('Remove the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--source-media-link', $('Remove the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.logicalDiskSizeInGB || options.logicalUnitNumber || options.mediaLink || options.name || options.sourceMediaLink;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        subItemPath = options.path + '/iOType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalDiskSizeInGB) {
        subItemPath = options.path + '/logicalDiskSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        subItemPath = options.path + '/logicalUnitNumber';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceMediaLink) {
        subItemPath = options.path + '/sourceMediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add data-virtual-hard-disks
  var catparametersCreateVirtualMachineDataVirtualHardDisks2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDataVirtualHardDisks2 = catparametersCreateVirtualMachineDataVirtualHardDisks2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineDataVirtualHardDisks2 = parametersCreateVirtualMachineDataVirtualHardDisks2.category('data-virtual-hard-disks')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineDataVirtualHardDisks2.command('add')
  .description($('Add data-virtual-hard-disks in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataVirtualHardDisks" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "logicalDiskSizeInGB":null,\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "sourceMediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Add the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Add the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'iOType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalDiskSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalUnitNumber';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'sourceMediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set debug-settings
  var catparametersCreateVirtualMachineDebugSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDebugSettings0 = catparametersCreateVirtualMachineDebugSettings0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineDebugSettings0 = parametersCreateVirtualMachineDebugSettings0.category('debug-settings')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineDebugSettings0.command('set')
  .description($('Set debug-settings in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "debugSettings" : {\r\n             "bootDiagnosticsEnabled":false,\r\n             "consoleScreenshotBlobUri":"",\r\n             "serialOutputBlobUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--boot-diagnostics-enabled <bootDiagnosticsEnabled>', $('Set the boot-diagnostics-enabled value.'))
  .option('--console-screenshot-blob-uri <consoleScreenshotBlobUri>', $('Set the console-screenshot-blob-uri value.'))
  .option('--serial-output-blob-uri <serialOutputBlobUri>', $('Set the serial-output-blob-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/debugSettings';
    var paramPath = options.path + '/' + 'bootDiagnosticsEnabled';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.bootDiagnosticsEnabled) {
      if (options.parse && options.bootDiagnosticsEnabled) {
        options.bootDiagnosticsEnabled = JSON.parse(options.bootDiagnosticsEnabled);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.bootDiagnosticsEnabled}]);
    }
    paramPath = options.path + '/' + 'consoleScreenshotBlobUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.consoleScreenshotBlobUri) {
      if (options.parse && options.consoleScreenshotBlobUri) {
        options.consoleScreenshotBlobUri = JSON.parse(options.consoleScreenshotBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.consoleScreenshotBlobUri}]);
    }
    paramPath = options.path + '/' + 'serialOutputBlobUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.serialOutputBlobUri) {
      if (options.parse && options.serialOutputBlobUri) {
        options.serialOutputBlobUri = JSON.parse(options.serialOutputBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serialOutputBlobUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete debug-settings
  var catparametersCreateVirtualMachineDebugSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDebugSettings1 = catparametersCreateVirtualMachineDebugSettings1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineDebugSettings1 = parametersCreateVirtualMachineDebugSettings1.category('debug-settings')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineDebugSettings1.command('delete')
  .description($('Remove debug-settings in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "debugSettings" : {\r\n             "bootDiagnosticsEnabled":false,\r\n             "consoleScreenshotBlobUri":"",\r\n             "serialOutputBlobUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--boot-diagnostics-enabled', $('Remove the boot-diagnostics-enabled value.'))
  .option('--console-screenshot-blob-uri', $('Remove the console-screenshot-blob-uri value.'))
  .option('--serial-output-blob-uri', $('Remove the serial-output-blob-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/debugSettings';
    var anySubItem = false || options.bootDiagnosticsEnabled || options.consoleScreenshotBlobUri || options.serialOutputBlobUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.bootDiagnosticsEnabled) {
        subItemPath = options.path + '/bootDiagnosticsEnabled';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.consoleScreenshotBlobUri) {
        subItemPath = options.path + '/consoleScreenshotBlobUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.serialOutputBlobUri) {
        subItemPath = options.path + '/serialOutputBlobUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add debug-settings
  var catparametersCreateVirtualMachineDebugSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDebugSettings2 = catparametersCreateVirtualMachineDebugSettings2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineDebugSettings2 = parametersCreateVirtualMachineDebugSettings2.category('debug-settings')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineDebugSettings2.command('add')
  .description($('Add debug-settings in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "debugSettings" : {\r\n             "bootDiagnosticsEnabled":false,\r\n             "consoleScreenshotBlobUri":"",\r\n             "serialOutputBlobUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--boot-diagnostics-enabled <bootDiagnosticsEnabled>', $('Add the boot-diagnostics-enabled value.'))
  .option('--console-screenshot-blob-uri <consoleScreenshotBlobUri>', $('Add the console-screenshot-blob-uri value.'))
  .option('--serial-output-blob-uri <serialOutputBlobUri>', $('Add the serial-output-blob-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/debugSettings' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/debugSettings' + '/' + 'bootDiagnosticsEnabled';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.bootDiagnosticsEnabled) {
      if (options.parse && options.bootDiagnosticsEnabled) {
        options.bootDiagnosticsEnabled = JSON.parse(options.bootDiagnosticsEnabled);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.bootDiagnosticsEnabled}]);
    }
    paramPath = '/debugSettings' + '/' + 'consoleScreenshotBlobUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.consoleScreenshotBlobUri) {
      if (options.parse && options.consoleScreenshotBlobUri) {
        options.consoleScreenshotBlobUri = JSON.parse(options.consoleScreenshotBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.consoleScreenshotBlobUri}]);
    }
    paramPath = '/debugSettings' + '/' + 'serialOutputBlobUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.serialOutputBlobUri) {
      if (options.parse && options.serialOutputBlobUri) {
        options.serialOutputBlobUri = JSON.parse(options.serialOutputBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serialOutputBlobUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set os-virtual-hard-disk
  var catparametersCreateVirtualMachineOSVirtualHardDisk0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineOSVirtualHardDisk0 = catparametersCreateVirtualMachineOSVirtualHardDisk0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineOSVirtualHardDisk0 = parametersCreateVirtualMachineOSVirtualHardDisk0.category('os-virtual-hard-disk')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineOSVirtualHardDisk0.command('set')
  .description($('Set os-virtual-hard-disk in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSVirtualHardDisk" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "operatingSystem":"",\r\n             "remoteSourceImageLink":"",\r\n             "resizedSizeInGB":null,\r\n             "sourceImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system <operatingSystem>', $('Set the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Set the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Set the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/oSVirtualHardDisk';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystem';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = options.path + '/' + 'remoteSourceImageLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = options.path + '/' + 'sourceImageName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete os-virtual-hard-disk
  var catparametersCreateVirtualMachineOSVirtualHardDisk1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineOSVirtualHardDisk1 = catparametersCreateVirtualMachineOSVirtualHardDisk1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineOSVirtualHardDisk1 = parametersCreateVirtualMachineOSVirtualHardDisk1.category('os-virtual-hard-disk')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineOSVirtualHardDisk1.command('delete')
  .description($('Remove os-virtual-hard-disk in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSVirtualHardDisk" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "operatingSystem":"",\r\n             "remoteSourceImageLink":"",\r\n             "resizedSizeInGB":null,\r\n             "sourceImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system', $('Remove the operating-system value.'))
  .option('--remote-source-image-link', $('Remove the remote-source-image-link value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .option('--source-image-name', $('Remove the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/oSVirtualHardDisk';
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.mediaLink || options.name || options.operatingSystem || options.remoteSourceImageLink || options.resizedSizeInGB || options.sourceImageName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        subItemPath = options.path + '/iOType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystem) {
        subItemPath = options.path + '/operatingSystem';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSourceImageLink) {
        subItemPath = options.path + '/remoteSourceImageLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceImageName) {
        subItemPath = options.path + '/sourceImageName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add os-virtual-hard-disk
  var catparametersCreateVirtualMachineOSVirtualHardDisk2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineOSVirtualHardDisk2 = catparametersCreateVirtualMachineOSVirtualHardDisk2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineOSVirtualHardDisk2 = parametersCreateVirtualMachineOSVirtualHardDisk2.category('os-virtual-hard-disk')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineOSVirtualHardDisk2.command('add')
  .description($('Add os-virtual-hard-disk in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSVirtualHardDisk" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "operatingSystem":"",\r\n             "remoteSourceImageLink":"",\r\n             "resizedSizeInGB":null,\r\n             "sourceImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system <operatingSystem>', $('Add the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Add the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Add the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/oSVirtualHardDisk' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/oSVirtualHardDisk' + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'iOType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'operatingSystem';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'remoteSourceImageLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'sourceImageName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set resource-extension-references
  var catparametersCreateVirtualMachineResourceExtensionReferences0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineResourceExtensionReferences0 = catparametersCreateVirtualMachineResourceExtensionReferences0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineResourceExtensionReferences0 = parametersCreateVirtualMachineResourceExtensionReferences0.category('resource-extension-references')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineResourceExtensionReferences0.command('set')
  .description($('Set resource-extension-references in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionReferences" : {\r\n             "forceUpdate":null,\r\n             "name":"",\r\n             "publisher":"",\r\n             "referenceName":"",\r\n             "resourceExtensionParameterValues":[\r\n               {\r\n                 "key":"",\r\n                 "type":"",\r\n                 "value":""\r\n               }\r\n             ],\r\n             "state":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--force-update <forceUpdate>', $('Set the force-update value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--reference-name <referenceName>', $('Set the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Set the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Set the state value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'forceUpdate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
        options.forceUpdate = JSON.parse(options.forceUpdate);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'referenceName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionParameterValues';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = options.path + '/' + 'state';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete resource-extension-references
  var catparametersCreateVirtualMachineResourceExtensionReferences1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineResourceExtensionReferences1 = catparametersCreateVirtualMachineResourceExtensionReferences1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineResourceExtensionReferences1 = parametersCreateVirtualMachineResourceExtensionReferences1.category('resource-extension-references')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineResourceExtensionReferences1.command('delete')
  .description($('Remove resource-extension-references in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionReferences" : {\r\n             "forceUpdate":null,\r\n             "name":"",\r\n             "publisher":"",\r\n             "referenceName":"",\r\n             "resourceExtensionParameterValues":[\r\n               {\r\n                 "key":"",\r\n                 "type":"",\r\n                 "value":""\r\n               }\r\n             ],\r\n             "state":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--force-update', $('Remove the force-update value.'))
  .option('--name', $('Remove the name value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--reference-name', $('Remove the reference-name value.'))
  .option('--resource-extension-parameter-values', $('Remove the resource-extension-parameter-values value.'))
  .option('--state', $('Remove the state value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.forceUpdate || options.name || options.publisher || options.referenceName || options.resourceExtensionParameterValues || options.state || options.version;
    if (anySubItem) {
      var subItemPath = null;
      if (options.forceUpdate) {
        subItemPath = options.path + '/forceUpdate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.referenceName) {
        subItemPath = options.path + '/referenceName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionParameterValues) {
        subItemPath = options.path + '/resourceExtensionParameterValues';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.state) {
        subItemPath = options.path + '/state';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add resource-extension-references
  var catparametersCreateVirtualMachineResourceExtensionReferences2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineResourceExtensionReferences2 = catparametersCreateVirtualMachineResourceExtensionReferences2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineResourceExtensionReferences2 = parametersCreateVirtualMachineResourceExtensionReferences2.category('resource-extension-references')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineResourceExtensionReferences2.command('add')
  .description($('Add resource-extension-references in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionReferences" : {\r\n             "forceUpdate":null,\r\n             "name":"",\r\n             "publisher":"",\r\n             "referenceName":"",\r\n             "resourceExtensionParameterValues":[\r\n               {\r\n                 "key":"",\r\n                 "type":"",\r\n                 "value":""\r\n               }\r\n             ],\r\n             "state":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--force-update <forceUpdate>', $('Add the force-update value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .option('--reference-name <referenceName>', $('Add the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Add the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Add the state value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'forceUpdate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
        options.forceUpdate = JSON.parse(options.forceUpdate);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'publisher';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'referenceName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'resourceExtensionParameterValues';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'state';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'version';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set resource-extension-parameter-values
  var catparametersCreateVirtualMachineResourceExtensionParameterValues0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineResourceExtensionParameterValues0 = catparametersCreateVirtualMachineResourceExtensionParameterValues0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineResourceExtensionParameterValues0 = parametersCreateVirtualMachineResourceExtensionParameterValues0.category('resource-extension-parameter-values')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineResourceExtensionParameterValues0.command('set')
  .description($('Set resource-extension-parameter-values in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionParameterValues" : {\r\n             "key":"",\r\n             "type":"",\r\n             "value":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--key <key>', $('Set the key value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--value <value>', $('Set the value value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'key';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'value';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete resource-extension-parameter-values
  var catparametersCreateVirtualMachineResourceExtensionParameterValues1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineResourceExtensionParameterValues1 = catparametersCreateVirtualMachineResourceExtensionParameterValues1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineResourceExtensionParameterValues1 = parametersCreateVirtualMachineResourceExtensionParameterValues1.category('resource-extension-parameter-values')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineResourceExtensionParameterValues1.command('delete')
  .description($('Remove resource-extension-parameter-values in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionParameterValues" : {\r\n             "key":"",\r\n             "type":"",\r\n             "value":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--key', $('Remove the key value.'))
  .option('--type', $('Remove the type value.'))
  .option('--value', $('Remove the value value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.key || options.type || options.value;
    if (anySubItem) {
      var subItemPath = null;
      if (options.key) {
        subItemPath = options.path + '/key';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.value) {
        subItemPath = options.path + '/value';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add resource-extension-parameter-values
  var catparametersCreateVirtualMachineResourceExtensionParameterValues2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineResourceExtensionParameterValues2 = catparametersCreateVirtualMachineResourceExtensionParameterValues2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineResourceExtensionParameterValues2 = parametersCreateVirtualMachineResourceExtensionParameterValues2.category('resource-extension-parameter-values')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineResourceExtensionParameterValues2.command('add')
  .description($('Add resource-extension-parameter-values in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionParameterValues" : {\r\n             "key":"",\r\n             "type":"",\r\n             "value":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--key <key>', $('Add the key value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--value <value>', $('Add the value value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'key';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'value';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete vm-image-input
  var catparametersCreateVirtualMachineVMImageInput1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineVMImageInput1 = catparametersCreateVirtualMachineVMImageInput1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineVMImageInput1 = parametersCreateVirtualMachineVMImageInput1.category('vm-image-input')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineVMImageInput1.command('delete')
  .description($('Remove vm-image-input in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vMImageInput" : {\r\n             "dataDiskConfigurations":[\r\n               {\r\n                 "diskName":"",\r\n                 "resizedSizeInGB":null\r\n               }\r\n             ],\r\n             "oSDiskConfiguration":{\r\n               "resizedSizeInGB":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disk-configurations', $('Remove the data-disk-configurations value.'))
  .option('--os-disk-configuration', $('Remove the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/vMImageInput';
    var anySubItem = false || options.dataDiskConfigurations || options.oSDiskConfiguration;
    if (anySubItem) {
      var subItemPath = null;
      if (options.dataDiskConfigurations) {
        subItemPath = options.path + '/dataDiskConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSDiskConfiguration) {
        subItemPath = options.path + '/oSDiskConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add vm-image-input
  var catparametersCreateVirtualMachineVMImageInput2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineVMImageInput2 = catparametersCreateVirtualMachineVMImageInput2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineVMImageInput2 = parametersCreateVirtualMachineVMImageInput2.category('vm-image-input')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineVMImageInput2.command('add')
  .description($('Add vm-image-input in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vMImageInput" : {\r\n             "dataDiskConfigurations":[\r\n               {\r\n                 "diskName":"",\r\n                 "resizedSizeInGB":null\r\n               }\r\n             ],\r\n             "oSDiskConfiguration":{\r\n               "resizedSizeInGB":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Add the data-disk-configurations value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Add the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/vMImageInput' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/vMImageInput' + '/' + 'dataDiskConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = '/vMImageInput' + '/' + 'oSDiskConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set data-disk-configurations
  var catparametersCreateVirtualMachineDataDiskConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDataDiskConfigurations0 = catparametersCreateVirtualMachineDataDiskConfigurations0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineDataDiskConfigurations0 = parametersCreateVirtualMachineDataDiskConfigurations0.category('data-disk-configurations')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineDataDiskConfigurations0.command('set')
  .description($('Set data-disk-configurations in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "diskName":"",\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--disk-name <diskName>', $('Set the disk-name value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/vMImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'diskName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.diskName) {
      if (options.parse && options.diskName) {
        options.diskName = JSON.parse(options.diskName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskName}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete data-disk-configurations
  var catparametersCreateVirtualMachineDataDiskConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDataDiskConfigurations1 = catparametersCreateVirtualMachineDataDiskConfigurations1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineDataDiskConfigurations1 = parametersCreateVirtualMachineDataDiskConfigurations1.category('data-disk-configurations')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineDataDiskConfigurations1.command('delete')
  .description($('Remove data-disk-configurations in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "diskName":"",\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--disk-name', $('Remove the disk-name value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/vMImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.diskName || options.resizedSizeInGB;
    if (anySubItem) {
      var subItemPath = null;
      if (options.diskName) {
        subItemPath = options.path + '/diskName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add data-disk-configurations
  var catparametersCreateVirtualMachineDataDiskConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineDataDiskConfigurations2 = catparametersCreateVirtualMachineDataDiskConfigurations2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineDataDiskConfigurations2 = parametersCreateVirtualMachineDataDiskConfigurations2.category('data-disk-configurations')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineDataDiskConfigurations2.command('add')
  .description($('Add data-disk-configurations in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "diskName":"",\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--disk-name <diskName>', $('Add the disk-name value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/vMImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/vMImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'diskName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.diskName) {
      if (options.parse && options.diskName) {
        options.diskName = JSON.parse(options.diskName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskName}]);
    }
    paramPath = '/vMImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set os-disk-configuration
  var catparametersCreateVirtualMachineOSDiskConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineOSDiskConfiguration0 = catparametersCreateVirtualMachineOSDiskConfiguration0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateVirtualMachineOSDiskConfiguration0 = parametersCreateVirtualMachineOSDiskConfiguration0.category('os-disk-configuration')
  .description($('Commands to set components of virtual-machine in create-parameters file.'));
  setparametersCreateVirtualMachineOSDiskConfiguration0.command('set')
  .description($('Set os-disk-configuration in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/vMImageInput/oSDiskConfiguration';
    var paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete os-disk-configuration
  var catparametersCreateVirtualMachineOSDiskConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineOSDiskConfiguration1 = catparametersCreateVirtualMachineOSDiskConfiguration1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateVirtualMachineOSDiskConfiguration1 = parametersCreateVirtualMachineOSDiskConfiguration1.category('os-disk-configuration')
  .description($('Commands to delete components of virtual-machine in create-parameters file.'));
  deleteparametersCreateVirtualMachineOSDiskConfiguration1.command('delete')
  .description($('Remove os-disk-configuration in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/vMImageInput/oSDiskConfiguration';
    var anySubItem = false || options.resizedSizeInGB;
    if (anySubItem) {
      var subItemPath = null;
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add os-disk-configuration
  var catparametersCreateVirtualMachineOSDiskConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateVirtualMachineOSDiskConfiguration2 = catparametersCreateVirtualMachineOSDiskConfiguration2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateVirtualMachineOSDiskConfiguration2 = parametersCreateVirtualMachineOSDiskConfiguration2.category('os-disk-configuration')
  .description($('Commands to add components of virtual-machine in create-parameters file.'));
  addparametersCreateVirtualMachineOSDiskConfiguration2.command('add')
  .description($('Add os-disk-configuration in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/vMImageInput/oSDiskConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/vMImageInput/oSDiskConfiguration' + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachine CreateDeployment
  --service-name
  --parameters
=============================================
{
  "deploymentSlot":0,
  "dnsSettings":{
    "dnsServers":[
      {
        "address":"",
        "name":""
      }
    ]
  },
  "label":"",
  "loadBalancers":[
    {
      "frontendIPConfiguration":{
        "staticVirtualNetworkIPAddress":"",
        "subnetName":"",
        "type":""
      },
      "name":""
    }
  ],
  "name":"",
  "reservedIPName":"",
  "roles":[
    {
      "availabilitySetName":"",
      "configurationSets":[
        {
          "additionalUnattendContent":{
            "unattendPasses":[
              {
                "passName":"",
                "unattendComponents":[
                  {
                    "componentName":"",
                    "unattendComponentSettings":[
                      {
                        "content":"",
                        "settingName":""
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "adminPassword":"",
          "adminUserName":"",
          "computerName":"",
          "configurationSetType":"",
          "customData":"",
          "disableSshPasswordAuthentication":null,
          "domainJoin":{
            "credentials":{
              "domain":"",
              "password":"",
              "userName":""
            },
            "domainToJoin":"",
            "ldapMachineObjectOU":"",
            "provisioning":{
              "accountData":""
            }
          },
          "enableAutomaticUpdates":null,
          "hostName":"",
          "inputEndpoints":[
            {
              "enableDirectServerReturn":null,
              "endpointAcl":{
                "rules":[
                  {
                    "action":"",
                    "description":"",
                    "order":null,
                    "remoteSubnet":""
                  }
                ]
              },
              "idleTimeoutInMinutes":null,
              "loadBalancedEndpointSetName":"",
              "loadBalancerDistribution":"",
              "loadBalancerName":"",
              "loadBalancerProbe":{
                "intervalInSeconds":null,
                "path":"",
                "port":0,
                "protocol":0,
                "timeoutInSeconds":null
              },
              "localPort":null,
              "name":"",
              "port":null,
              "protocol":"",
              "virtualIPAddress":"",
              "virtualIPName":""
            }
          ],
          "iPForwarding":"",
          "networkInterfaces":[
            {
              "iPConfigurations":[
                {
                  "staticVirtualNetworkIPAddress":"",
                  "subnetName":""
                }
              ],
              "iPForwarding":"",
              "name":"",
              "networkSecurityGroup":""
            }
          ],
          "networkSecurityGroup":"",
          "publicIPs":[
            {
              "domainNameLabel":"",
              "idleTimeoutInMinutes":null,
              "name":""
            }
          ],
          "resetPasswordOnFirstLogon":null,
          "sshSettings":{
            "keyPairs":[
              {
                "fingerprint":"",
                "path":""
              }
            ],
            "publicKeys":[
              {
                "fingerprint":"",
                "path":""
              }
            ]
          },
          "staticVirtualNetworkIPAddress":"",
          "storedCertificateSettings":[
            {
              "storeName":"",
              "thumbprint":""
            }
          ],
          "subnetNames":[
            ""
          ],
          "timeZone":"",
          "userName":"",
          "userPassword":"",
          "windowsRemoteManagement":{
            "listeners":[
              {
                "certificateThumbprint":"",
                "listenerType":0
              }
            ]
          }
        }
      ],
      "dataVirtualHardDisks":[
        {
          "hostCaching":"",
          "iOType":"",
          "label":"",
          "logicalDiskSizeInGB":null,
          "logicalUnitNumber":null,
          "mediaLink":"",
          "name":"",
          "sourceMediaLink":""
        }
      ],
      "debugSettings":{
        "bootDiagnosticsEnabled":false,
        "consoleScreenshotBlobUri":"",
        "serialOutputBlobUri":""
      },
      "defaultWinRmCertificateThumbprint":"",
      "label":"",
      "mediaLocation":"",
      "oSVersion":"",
      "oSVirtualHardDisk":{
        "hostCaching":"",
        "iOType":"",
        "label":"",
        "mediaLink":"",
        "name":"",
        "operatingSystem":"",
        "remoteSourceImageLink":"",
        "resizedSizeInGB":null,
        "sourceImageName":""
      },
      "provisionGuestAgent":null,
      "resourceExtensionReferences":[
        {
          "forceUpdate":null,
          "name":"",
          "publisher":"",
          "referenceName":"",
          "resourceExtensionParameterValues":[
            {
              "key":"",
              "type":"",
              "value":""
            }
          ],
          "state":"",
          "version":""
        }
      ],
      "roleName":"",
      "roleSize":"",
      "roleType":"",
      "vMImageInput":{
        "dataDiskConfigurations":[
          {
            "diskName":"",
            "resizedSizeInGB":null
          }
        ],
        "oSDiskConfiguration":{
          "resizedSizeInGB":null
        }
      },
      "vMImageName":""
    }
  ],
  "virtualNetworkName":""
}
*/
  var virtualMachineCreateDeployment = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineCreateDeployment.command('create-deployment [service-name] [parameters]')
  .description($('The Create Virtual Machine Deployment operation provisions a virtual machine based on the supplied configuration. When you create a deployment of a virtual machine, you should make sure that the cloud service and the disk or image that you use are located in the same region. For example, if the cloud service was created in the West US region, the disk or image that you use should also be located in a storage account in the West US region. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157194.aspx for more information)'))
  .usage('[options] <service-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachine.createDeployment(serviceName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineCreateDeploymentcreateDeploymentParameters1 = virtualMachineCreateDeployment.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineCreateDeploymentcreateDeploymentParameters1.command('generate')
  .description($('Generate virtualMachineCreateDeployment parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"deploymentSlot\":0,\"dnsSettings\":{\"dnsServers\":[{\"address\":\"\",\"name\":\"\"}]},\"label\":\"\",\"loadBalancers\":[{\"frontendIPConfiguration\":{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\",\"type\":\"\"},\"name\":\"\"}],\"name\":\"\",\"reservedIPName\":\"\",\"roles\":[{\"availabilitySetName\":\"\",\"configurationSets\":[{\"additionalUnattendContent\":{\"unattendPasses\":[{\"passName\":\"\",\"unattendComponents\":[{\"componentName\":\"\",\"unattendComponentSettings\":[{\"content\":\"\",\"settingName\":\"\"}]}]}]},\"adminPassword\":\"\",\"adminUserName\":\"\",\"computerName\":\"\",\"configurationSetType\":\"\",\"customData\":\"\",\"disableSshPasswordAuthentication\":null,\"domainJoin\":{\"credentials\":{\"domain\":\"\",\"password\":\"\",\"userName\":\"\"},\"domainToJoin\":\"\",\"ldapMachineObjectOU\":\"\",\"provisioning\":{\"accountData\":\"\"}},\"enableAutomaticUpdates\":null,\"hostName\":\"\",\"inputEndpoints\":[{\"enableDirectServerReturn\":null,\"endpointAcl\":{\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}]},\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":0,\"protocol\":0,\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}],\"iPForwarding\":\"\",\"networkInterfaces\":[{\"iPConfigurations\":[{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\"}],\"iPForwarding\":\"\",\"name\":\"\",\"networkSecurityGroup\":\"\"}],\"networkSecurityGroup\":\"\",\"publicIPs\":[{\"domainNameLabel\":\"\",\"idleTimeoutInMinutes\":null,\"name\":\"\"}],\"resetPasswordOnFirstLogon\":null,\"sshSettings\":{\"keyPairs\":[{\"fingerprint\":\"\",\"path\":\"\"}],\"publicKeys\":[{\"fingerprint\":\"\",\"path\":\"\"}]},\"staticVirtualNetworkIPAddress\":\"\",\"storedCertificateSettings\":[{\"storeName\":\"\",\"thumbprint\":\"\"}],\"subnetNames\":[\"\"],\"timeZone\":\"\",\"userName\":\"\",\"userPassword\":\"\",\"windowsRemoteManagement\":{\"listeners\":[{\"certificateThumbprint\":\"\",\"listenerType\":0}]}}],\"dataVirtualHardDisks\":[{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":null,\"logicalUnitNumber\":null,\"mediaLink\":\"\",\"name\":\"\",\"sourceMediaLink\":\"\"}],\"debugSettings\":{\"bootDiagnosticsEnabled\":false,\"consoleScreenshotBlobUri\":\"\",\"serialOutputBlobUri\":\"\"},\"defaultWinRmCertificateThumbprint\":\"\",\"label\":\"\",\"mediaLocation\":\"\",\"oSVersion\":\"\",\"oSVirtualHardDisk\":{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"mediaLink\":\"\",\"name\":\"\",\"operatingSystem\":\"\",\"remoteSourceImageLink\":\"\",\"resizedSizeInGB\":null,\"sourceImageName\":\"\"},\"provisionGuestAgent\":null,\"resourceExtensionReferences\":[{\"forceUpdate\":null,\"name\":\"\",\"publisher\":\"\",\"referenceName\":\"\",\"resourceExtensionParameterValues\":[{\"key\":\"\",\"type\":\"\",\"value\":\"\"}],\"state\":\"\",\"version\":\"\"}],\"roleName\":\"\",\"roleSize\":\"\",\"roleType\":\"\",\"vMImageInput\":{\"dataDiskConfigurations\":[{\"diskName\":\"\",\"resizedSizeInGB\":null}],\"oSDiskConfiguration\":{\"resizedSizeInGB\":null}},\"vMImageName\":\"\"}],\"virtualNetworkName\":\"\"}', _);
    var filePath = 'virtualMachineCreateDeployment_createDeployment.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"deploymentSlot\":0,\r\n\"dnsSettings\":{\r\n\"dnsServers\":[\r\n{\r\n\"address\":\"\",\r\n\"name\":\"\"\r\n}\r\n]\r\n},\r\n\"label\":\"\",\r\n\"loadBalancers\":[\r\n{\r\n\"frontendIPConfiguration\":{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\",\r\n\"type\":\"\"\r\n},\r\n\"name\":\"\"\r\n}\r\n],\r\n\"name\":\"\",\r\n\"reservedIPName\":\"\",\r\n\"roles\":[\r\n{\r\n\"availabilitySetName\":\"\",\r\n\"configurationSets\":[\r\n{\r\n\"additionalUnattendContent\":{\r\n\"unattendPasses\":[\r\n{\r\n\"passName\":\"\",\r\n\"unattendComponents\":[\r\n{\r\n\"componentName\":\"\",\r\n\"unattendComponentSettings\":[\r\n{\r\n\"content\":\"\",\r\n\"settingName\":\"\"\r\n}\r\n]\r\n}\r\n]\r\n}\r\n]\r\n},\r\n\"adminPassword\":\"\",\r\n\"adminUserName\":\"\",\r\n\"computerName\":\"\",\r\n\"configurationSetType\":\"\",\r\n\"customData\":\"\",\r\n\"disableSshPasswordAuthentication\":null,\r\n\"domainJoin\":{\r\n\"credentials\":{\r\n\"domain\":\"\",\r\n\"password\":\"\",\r\n\"userName\":\"\"\r\n},\r\n\"domainToJoin\":\"\",\r\n\"ldapMachineObjectOU\":\"\",\r\n\"provisioning\":{\r\n\"accountData\":\"\"\r\n}\r\n},\r\n\"enableAutomaticUpdates\":null,\r\n\"hostName\":\"\",\r\n\"inputEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"endpointAcl\":{\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n]\r\n},\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":0,\r\n\"protocol\":0,\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"networkInterfaces\":[\r\n{\r\n\"iPConfigurations\":[\r\n{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"name\":\"\",\r\n\"networkSecurityGroup\":\"\"\r\n}\r\n],\r\n\"networkSecurityGroup\":\"\",\r\n\"publicIPs\":[\r\n{\r\n\"domainNameLabel\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"resetPasswordOnFirstLogon\":null,\r\n\"sshSettings\":{\r\n\"keyPairs\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n],\r\n\"publicKeys\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n]\r\n},\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"storedCertificateSettings\":[\r\n{\r\n\"storeName\":\"\",\r\n\"thumbprint\":\"\"\r\n}\r\n],\r\n\"subnetNames\":[\r\n\"\"\r\n],\r\n\"timeZone\":\"\",\r\n\"userName\":\"\",\r\n\"userPassword\":\"\",\r\n\"windowsRemoteManagement\":{\r\n\"listeners\":[\r\n{\r\n\"certificateThumbprint\":\"\",\r\n\"listenerType\":0\r\n}\r\n]\r\n}\r\n}\r\n],\r\n\"dataVirtualHardDisks\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":null,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"sourceMediaLink\":\"\"\r\n}\r\n],\r\n\"debugSettings\":{\r\n\"bootDiagnosticsEnabled\":false,\r\n\"consoleScreenshotBlobUri\":\"\",\r\n\"serialOutputBlobUri\":\"\"\r\n},\r\n\"defaultWinRmCertificateThumbprint\":\"\",\r\n\"label\":\"\",\r\n\"mediaLocation\":\"\",\r\n\"oSVersion\":\"\",\r\n\"oSVirtualHardDisk\":{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystem\":\"\",\r\n\"remoteSourceImageLink\":\"\",\r\n\"resizedSizeInGB\":null,\r\n\"sourceImageName\":\"\"\r\n},\r\n\"provisionGuestAgent\":null,\r\n\"resourceExtensionReferences\":[\r\n{\r\n\"forceUpdate\":null,\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"referenceName\":\"\",\r\n\"resourceExtensionParameterValues\":[\r\n{\r\n\"key\":\"\",\r\n\"type\":\"\",\r\n\"value\":\"\"\r\n}\r\n],\r\n\"state\":\"\",\r\n\"version\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\",\r\n\"roleSize\":\"\",\r\n\"roleType\":\"\",\r\n\"vMImageInput\":{\r\n\"dataDiskConfigurations\":[\r\n{\r\n\"diskName\":\"\",\r\n\"resizedSizeInGB\":null\r\n}\r\n],\r\n\"oSDiskConfiguration\":{\r\n\"resizedSizeInGB\":null\r\n}\r\n},\r\n\"vMImageName\":\"\"\r\n}\r\n],\r\n\"virtualNetworkName\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineCreateDeploymentcreateDeploymentParameters1.command('patch')
  .description($('Command to patch virtualMachineCreateDeployment parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set virtual-machine-create-deployment-parameters
  var catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0 = catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0 = parametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0.category('virtual-machine-create-deployment-parameters')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters0.command('set')
  .description($('Set virtual-machine-create-deployment-parameters in create-deployment-parameters string or files, e.g. \r\n{\r\n  "deploymentSlot":0,\r\n  "dnsSettings":{\r\n    "dnsServers":[\r\n      {\r\n        "address":"",\r\n        "name":""\r\n      }\r\n    ]\r\n  },\r\n  "label":"",\r\n  "loadBalancers":[\r\n    {\r\n      "frontendIPConfiguration":{\r\n        "staticVirtualNetworkIPAddress":"",\r\n        "subnetName":"",\r\n        "type":""\r\n      },\r\n      "name":""\r\n    }\r\n  ],\r\n  "name":"",\r\n  "reservedIPName":"",\r\n  "roles":[\r\n    {\r\n      "availabilitySetName":"",\r\n      "configurationSets":[\r\n        {\r\n          "additionalUnattendContent":{\r\n            "unattendPasses":[\r\n              {\r\n                "passName":"",\r\n                "unattendComponents":[\r\n                  {\r\n                    "componentName":"",\r\n                    "unattendComponentSettings":[\r\n                      {\r\n                        "content":"",\r\n                        "settingName":""\r\n                      }\r\n                    ]\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          },\r\n          "adminPassword":"",\r\n          "adminUserName":"",\r\n          "computerName":"",\r\n          "configurationSetType":"",\r\n          "customData":"",\r\n          "disableSshPasswordAuthentication":null,\r\n          "domainJoin":{\r\n            "credentials":{\r\n              "domain":"",\r\n              "password":"",\r\n              "userName":""\r\n            },\r\n            "domainToJoin":"",\r\n            "ldapMachineObjectOU":"",\r\n            "provisioning":{\r\n              "accountData":""\r\n            }\r\n          },\r\n          "enableAutomaticUpdates":null,\r\n          "hostName":"",\r\n          "inputEndpoints":[\r\n            {\r\n              "enableDirectServerReturn":null,\r\n              "endpointAcl":{\r\n                "rules":[\r\n                  {\r\n                    "action":"",\r\n                    "description":"",\r\n                    "order":null,\r\n                    "remoteSubnet":""\r\n                  }\r\n                ]\r\n              },\r\n              "idleTimeoutInMinutes":null,\r\n              "loadBalancedEndpointSetName":"",\r\n              "loadBalancerDistribution":"",\r\n              "loadBalancerName":"",\r\n              "loadBalancerProbe":{\r\n                "intervalInSeconds":null,\r\n                "path":"",\r\n                "port":0,\r\n                "protocol":0,\r\n                "timeoutInSeconds":null\r\n              },\r\n              "localPort":null,\r\n              "name":"",\r\n              "port":null,\r\n              "protocol":"",\r\n              "virtualIPAddress":"",\r\n              "virtualIPName":""\r\n            }\r\n          ],\r\n          "iPForwarding":"",\r\n          "networkInterfaces":[\r\n            {\r\n              "iPConfigurations":[\r\n                {\r\n                  "staticVirtualNetworkIPAddress":"",\r\n                  "subnetName":""\r\n                }\r\n              ],\r\n              "iPForwarding":"",\r\n              "name":"",\r\n              "networkSecurityGroup":""\r\n            }\r\n          ],\r\n          "networkSecurityGroup":"",\r\n          "publicIPs":[\r\n            {\r\n              "domainNameLabel":"",\r\n              "idleTimeoutInMinutes":null,\r\n              "name":""\r\n            }\r\n          ],\r\n          "resetPasswordOnFirstLogon":null,\r\n          "sshSettings":{\r\n            "keyPairs":[\r\n              {\r\n                "fingerprint":"",\r\n                "path":""\r\n              }\r\n            ],\r\n            "publicKeys":[\r\n              {\r\n                "fingerprint":"",\r\n                "path":""\r\n              }\r\n            ]\r\n          },\r\n          "staticVirtualNetworkIPAddress":"",\r\n          "storedCertificateSettings":[\r\n            {\r\n              "storeName":"",\r\n              "thumbprint":""\r\n            }\r\n          ],\r\n          "subnetNames":[\r\n            ""\r\n          ],\r\n          "timeZone":"",\r\n          "userName":"",\r\n          "userPassword":"",\r\n          "windowsRemoteManagement":{\r\n            "listeners":[\r\n              {\r\n                "certificateThumbprint":"",\r\n                "listenerType":0\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      "dataVirtualHardDisks":[\r\n        {\r\n          "hostCaching":"",\r\n          "iOType":"",\r\n          "label":"",\r\n          "logicalDiskSizeInGB":null,\r\n          "logicalUnitNumber":null,\r\n          "mediaLink":"",\r\n          "name":"",\r\n          "sourceMediaLink":""\r\n        }\r\n      ],\r\n      "debugSettings":{\r\n        "bootDiagnosticsEnabled":false,\r\n        "consoleScreenshotBlobUri":"",\r\n        "serialOutputBlobUri":""\r\n      },\r\n      "defaultWinRmCertificateThumbprint":"",\r\n      "label":"",\r\n      "mediaLocation":"",\r\n      "oSVersion":"",\r\n      "oSVirtualHardDisk":{\r\n        "hostCaching":"",\r\n        "iOType":"",\r\n        "label":"",\r\n        "mediaLink":"",\r\n        "name":"",\r\n        "operatingSystem":"",\r\n        "remoteSourceImageLink":"",\r\n        "resizedSizeInGB":null,\r\n        "sourceImageName":""\r\n      },\r\n      "provisionGuestAgent":null,\r\n      "resourceExtensionReferences":[\r\n        {\r\n          "forceUpdate":null,\r\n          "name":"",\r\n          "publisher":"",\r\n          "referenceName":"",\r\n          "resourceExtensionParameterValues":[\r\n            {\r\n              "key":"",\r\n              "type":"",\r\n              "value":""\r\n            }\r\n          ],\r\n          "state":"",\r\n          "version":""\r\n        }\r\n      ],\r\n      "roleName":"",\r\n      "roleSize":"",\r\n      "roleType":"",\r\n      "vMImageInput":{\r\n        "dataDiskConfigurations":[\r\n          {\r\n            "diskName":"",\r\n            "resizedSizeInGB":null\r\n          }\r\n        ],\r\n        "oSDiskConfiguration":{\r\n          "resizedSizeInGB":null\r\n        }\r\n      },\r\n      "vMImageName":""\r\n    }\r\n  ],\r\n  "virtualNetworkName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--deployment-slot <deploymentSlot>', $('Set the deployment-slot value.'))
  .option('--dns-settings <dnsSettings>', $('Set the dns-settings value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--load-balancers <loadBalancers>', $('Set the load-balancers value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--reserved-ip-name <reservedIPName>', $('Set the reserved-ip-name value.'))
  .option('--roles <roles>', $('Set the roles value.'))
  .option('--virtual-network-name <virtualNetworkName>', $('Set the virtual-network-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'deploymentSlot';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.deploymentSlot) {
      if (options.parse && options.deploymentSlot) {
        options.deploymentSlot = JSON.parse(options.deploymentSlot);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.deploymentSlot}]);
    }
    paramPath = options.path + '/' + 'dnsSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dnsSettings) {
      if (options.parse && options.dnsSettings) {
        options.dnsSettings = JSON.parse(options.dnsSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsSettings}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'loadBalancers';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancers) {
      if (options.parse && options.loadBalancers) {
        options.loadBalancers = JSON.parse(options.loadBalancers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancers}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'reservedIPName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.reservedIPName) {
      if (options.parse && options.reservedIPName) {
        options.reservedIPName = JSON.parse(options.reservedIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reservedIPName}]);
    }
    paramPath = options.path + '/' + 'roles';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    paramPath = options.path + '/' + 'virtualNetworkName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkName) {
      if (options.parse && options.virtualNetworkName) {
        options.virtualNetworkName = JSON.parse(options.virtualNetworkName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete virtual-machine-create-deployment-parameters
  var catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1 = catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1 = parametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1.category('virtual-machine-create-deployment-parameters')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters1.command('delete')
  .description($('Remove virtual-machine-create-deployment-parameters in create-deployment-parameters string or files, e.g. \r\n{\r\n  "deploymentSlot":0,\r\n  "dnsSettings":{\r\n    "dnsServers":[\r\n      {\r\n        "address":"",\r\n        "name":""\r\n      }\r\n    ]\r\n  },\r\n  "label":"",\r\n  "loadBalancers":[\r\n    {\r\n      "frontendIPConfiguration":{\r\n        "staticVirtualNetworkIPAddress":"",\r\n        "subnetName":"",\r\n        "type":""\r\n      },\r\n      "name":""\r\n    }\r\n  ],\r\n  "name":"",\r\n  "reservedIPName":"",\r\n  "roles":[\r\n    {\r\n      "availabilitySetName":"",\r\n      "configurationSets":[\r\n        {\r\n          "additionalUnattendContent":{\r\n            "unattendPasses":[\r\n              {\r\n                "passName":"",\r\n                "unattendComponents":[\r\n                  {\r\n                    "componentName":"",\r\n                    "unattendComponentSettings":[\r\n                      {\r\n                        "content":"",\r\n                        "settingName":""\r\n                      }\r\n                    ]\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          },\r\n          "adminPassword":"",\r\n          "adminUserName":"",\r\n          "computerName":"",\r\n          "configurationSetType":"",\r\n          "customData":"",\r\n          "disableSshPasswordAuthentication":null,\r\n          "domainJoin":{\r\n            "credentials":{\r\n              "domain":"",\r\n              "password":"",\r\n              "userName":""\r\n            },\r\n            "domainToJoin":"",\r\n            "ldapMachineObjectOU":"",\r\n            "provisioning":{\r\n              "accountData":""\r\n            }\r\n          },\r\n          "enableAutomaticUpdates":null,\r\n          "hostName":"",\r\n          "inputEndpoints":[\r\n            {\r\n              "enableDirectServerReturn":null,\r\n              "endpointAcl":{\r\n                "rules":[\r\n                  {\r\n                    "action":"",\r\n                    "description":"",\r\n                    "order":null,\r\n                    "remoteSubnet":""\r\n                  }\r\n                ]\r\n              },\r\n              "idleTimeoutInMinutes":null,\r\n              "loadBalancedEndpointSetName":"",\r\n              "loadBalancerDistribution":"",\r\n              "loadBalancerName":"",\r\n              "loadBalancerProbe":{\r\n                "intervalInSeconds":null,\r\n                "path":"",\r\n                "port":0,\r\n                "protocol":0,\r\n                "timeoutInSeconds":null\r\n              },\r\n              "localPort":null,\r\n              "name":"",\r\n              "port":null,\r\n              "protocol":"",\r\n              "virtualIPAddress":"",\r\n              "virtualIPName":""\r\n            }\r\n          ],\r\n          "iPForwarding":"",\r\n          "networkInterfaces":[\r\n            {\r\n              "iPConfigurations":[\r\n                {\r\n                  "staticVirtualNetworkIPAddress":"",\r\n                  "subnetName":""\r\n                }\r\n              ],\r\n              "iPForwarding":"",\r\n              "name":"",\r\n              "networkSecurityGroup":""\r\n            }\r\n          ],\r\n          "networkSecurityGroup":"",\r\n          "publicIPs":[\r\n            {\r\n              "domainNameLabel":"",\r\n              "idleTimeoutInMinutes":null,\r\n              "name":""\r\n            }\r\n          ],\r\n          "resetPasswordOnFirstLogon":null,\r\n          "sshSettings":{\r\n            "keyPairs":[\r\n              {\r\n                "fingerprint":"",\r\n                "path":""\r\n              }\r\n            ],\r\n            "publicKeys":[\r\n              {\r\n                "fingerprint":"",\r\n                "path":""\r\n              }\r\n            ]\r\n          },\r\n          "staticVirtualNetworkIPAddress":"",\r\n          "storedCertificateSettings":[\r\n            {\r\n              "storeName":"",\r\n              "thumbprint":""\r\n            }\r\n          ],\r\n          "subnetNames":[\r\n            ""\r\n          ],\r\n          "timeZone":"",\r\n          "userName":"",\r\n          "userPassword":"",\r\n          "windowsRemoteManagement":{\r\n            "listeners":[\r\n              {\r\n                "certificateThumbprint":"",\r\n                "listenerType":0\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      "dataVirtualHardDisks":[\r\n        {\r\n          "hostCaching":"",\r\n          "iOType":"",\r\n          "label":"",\r\n          "logicalDiskSizeInGB":null,\r\n          "logicalUnitNumber":null,\r\n          "mediaLink":"",\r\n          "name":"",\r\n          "sourceMediaLink":""\r\n        }\r\n      ],\r\n      "debugSettings":{\r\n        "bootDiagnosticsEnabled":false,\r\n        "consoleScreenshotBlobUri":"",\r\n        "serialOutputBlobUri":""\r\n      },\r\n      "defaultWinRmCertificateThumbprint":"",\r\n      "label":"",\r\n      "mediaLocation":"",\r\n      "oSVersion":"",\r\n      "oSVirtualHardDisk":{\r\n        "hostCaching":"",\r\n        "iOType":"",\r\n        "label":"",\r\n        "mediaLink":"",\r\n        "name":"",\r\n        "operatingSystem":"",\r\n        "remoteSourceImageLink":"",\r\n        "resizedSizeInGB":null,\r\n        "sourceImageName":""\r\n      },\r\n      "provisionGuestAgent":null,\r\n      "resourceExtensionReferences":[\r\n        {\r\n          "forceUpdate":null,\r\n          "name":"",\r\n          "publisher":"",\r\n          "referenceName":"",\r\n          "resourceExtensionParameterValues":[\r\n            {\r\n              "key":"",\r\n              "type":"",\r\n              "value":""\r\n            }\r\n          ],\r\n          "state":"",\r\n          "version":""\r\n        }\r\n      ],\r\n      "roleName":"",\r\n      "roleSize":"",\r\n      "roleType":"",\r\n      "vMImageInput":{\r\n        "dataDiskConfigurations":[\r\n          {\r\n            "diskName":"",\r\n            "resizedSizeInGB":null\r\n          }\r\n        ],\r\n        "oSDiskConfiguration":{\r\n          "resizedSizeInGB":null\r\n        }\r\n      },\r\n      "vMImageName":""\r\n    }\r\n  ],\r\n  "virtualNetworkName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--deployment-slot', $('Remove the deployment-slot value.'))
  .option('--dns-settings', $('Remove the dns-settings value.'))
  .option('--label', $('Remove the label value.'))
  .option('--load-balancers', $('Remove the load-balancers value.'))
  .option('--name', $('Remove the name value.'))
  .option('--reserved-ip-name', $('Remove the reserved-ip-name value.'))
  .option('--roles', $('Remove the roles value.'))
  .option('--virtual-network-name', $('Remove the virtual-network-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.deploymentSlot || options.dnsSettings || options.label || options.loadBalancers || options.name || options.reservedIPName || options.roles || options.virtualNetworkName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.deploymentSlot) {
        subItemPath = options.path + '/deploymentSlot';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dnsSettings) {
        subItemPath = options.path + '/dnsSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancers) {
        subItemPath = options.path + '/loadBalancers';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.reservedIPName) {
        subItemPath = options.path + '/reservedIPName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roles) {
        subItemPath = options.path + '/roles';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualNetworkName) {
        subItemPath = options.path + '/virtualNetworkName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add virtual-machine-create-deployment-parameters
  var catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters2 = catparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters2 = parametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters2.category('virtual-machine-create-deployment-parameters')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineVirtualMachineCreateDeploymentParameters2.command('add')
  .description($('Add virtual-machine-create-deployment-parameters in create-deployment-parameters string or files, e.g. \r\n{\r\n  "deploymentSlot":0,\r\n  "dnsSettings":{\r\n    "dnsServers":[\r\n      {\r\n        "address":"",\r\n        "name":""\r\n      }\r\n    ]\r\n  },\r\n  "label":"",\r\n  "loadBalancers":[\r\n    {\r\n      "frontendIPConfiguration":{\r\n        "staticVirtualNetworkIPAddress":"",\r\n        "subnetName":"",\r\n        "type":""\r\n      },\r\n      "name":""\r\n    }\r\n  ],\r\n  "name":"",\r\n  "reservedIPName":"",\r\n  "roles":[\r\n    {\r\n      "availabilitySetName":"",\r\n      "configurationSets":[\r\n        {\r\n          "additionalUnattendContent":{\r\n            "unattendPasses":[\r\n              {\r\n                "passName":"",\r\n                "unattendComponents":[\r\n                  {\r\n                    "componentName":"",\r\n                    "unattendComponentSettings":[\r\n                      {\r\n                        "content":"",\r\n                        "settingName":""\r\n                      }\r\n                    ]\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          },\r\n          "adminPassword":"",\r\n          "adminUserName":"",\r\n          "computerName":"",\r\n          "configurationSetType":"",\r\n          "customData":"",\r\n          "disableSshPasswordAuthentication":null,\r\n          "domainJoin":{\r\n            "credentials":{\r\n              "domain":"",\r\n              "password":"",\r\n              "userName":""\r\n            },\r\n            "domainToJoin":"",\r\n            "ldapMachineObjectOU":"",\r\n            "provisioning":{\r\n              "accountData":""\r\n            }\r\n          },\r\n          "enableAutomaticUpdates":null,\r\n          "hostName":"",\r\n          "inputEndpoints":[\r\n            {\r\n              "enableDirectServerReturn":null,\r\n              "endpointAcl":{\r\n                "rules":[\r\n                  {\r\n                    "action":"",\r\n                    "description":"",\r\n                    "order":null,\r\n                    "remoteSubnet":""\r\n                  }\r\n                ]\r\n              },\r\n              "idleTimeoutInMinutes":null,\r\n              "loadBalancedEndpointSetName":"",\r\n              "loadBalancerDistribution":"",\r\n              "loadBalancerName":"",\r\n              "loadBalancerProbe":{\r\n                "intervalInSeconds":null,\r\n                "path":"",\r\n                "port":0,\r\n                "protocol":0,\r\n                "timeoutInSeconds":null\r\n              },\r\n              "localPort":null,\r\n              "name":"",\r\n              "port":null,\r\n              "protocol":"",\r\n              "virtualIPAddress":"",\r\n              "virtualIPName":""\r\n            }\r\n          ],\r\n          "iPForwarding":"",\r\n          "networkInterfaces":[\r\n            {\r\n              "iPConfigurations":[\r\n                {\r\n                  "staticVirtualNetworkIPAddress":"",\r\n                  "subnetName":""\r\n                }\r\n              ],\r\n              "iPForwarding":"",\r\n              "name":"",\r\n              "networkSecurityGroup":""\r\n            }\r\n          ],\r\n          "networkSecurityGroup":"",\r\n          "publicIPs":[\r\n            {\r\n              "domainNameLabel":"",\r\n              "idleTimeoutInMinutes":null,\r\n              "name":""\r\n            }\r\n          ],\r\n          "resetPasswordOnFirstLogon":null,\r\n          "sshSettings":{\r\n            "keyPairs":[\r\n              {\r\n                "fingerprint":"",\r\n                "path":""\r\n              }\r\n            ],\r\n            "publicKeys":[\r\n              {\r\n                "fingerprint":"",\r\n                "path":""\r\n              }\r\n            ]\r\n          },\r\n          "staticVirtualNetworkIPAddress":"",\r\n          "storedCertificateSettings":[\r\n            {\r\n              "storeName":"",\r\n              "thumbprint":""\r\n            }\r\n          ],\r\n          "subnetNames":[\r\n            ""\r\n          ],\r\n          "timeZone":"",\r\n          "userName":"",\r\n          "userPassword":"",\r\n          "windowsRemoteManagement":{\r\n            "listeners":[\r\n              {\r\n                "certificateThumbprint":"",\r\n                "listenerType":0\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      "dataVirtualHardDisks":[\r\n        {\r\n          "hostCaching":"",\r\n          "iOType":"",\r\n          "label":"",\r\n          "logicalDiskSizeInGB":null,\r\n          "logicalUnitNumber":null,\r\n          "mediaLink":"",\r\n          "name":"",\r\n          "sourceMediaLink":""\r\n        }\r\n      ],\r\n      "debugSettings":{\r\n        "bootDiagnosticsEnabled":false,\r\n        "consoleScreenshotBlobUri":"",\r\n        "serialOutputBlobUri":""\r\n      },\r\n      "defaultWinRmCertificateThumbprint":"",\r\n      "label":"",\r\n      "mediaLocation":"",\r\n      "oSVersion":"",\r\n      "oSVirtualHardDisk":{\r\n        "hostCaching":"",\r\n        "iOType":"",\r\n        "label":"",\r\n        "mediaLink":"",\r\n        "name":"",\r\n        "operatingSystem":"",\r\n        "remoteSourceImageLink":"",\r\n        "resizedSizeInGB":null,\r\n        "sourceImageName":""\r\n      },\r\n      "provisionGuestAgent":null,\r\n      "resourceExtensionReferences":[\r\n        {\r\n          "forceUpdate":null,\r\n          "name":"",\r\n          "publisher":"",\r\n          "referenceName":"",\r\n          "resourceExtensionParameterValues":[\r\n            {\r\n              "key":"",\r\n              "type":"",\r\n              "value":""\r\n            }\r\n          ],\r\n          "state":"",\r\n          "version":""\r\n        }\r\n      ],\r\n      "roleName":"",\r\n      "roleSize":"",\r\n      "roleType":"",\r\n      "vMImageInput":{\r\n        "dataDiskConfigurations":[\r\n          {\r\n            "diskName":"",\r\n            "resizedSizeInGB":null\r\n          }\r\n        ],\r\n        "oSDiskConfiguration":{\r\n          "resizedSizeInGB":null\r\n        }\r\n      },\r\n      "vMImageName":""\r\n    }\r\n  ],\r\n  "virtualNetworkName":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--deployment-slot <deploymentSlot>', $('Add the deployment-slot value.'))
  .option('--dns-settings <dnsSettings>', $('Add the dns-settings value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--load-balancers <loadBalancers>', $('Add the load-balancers value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--reserved-ip-name <reservedIPName>', $('Add the reserved-ip-name value.'))
  .option('--roles <roles>', $('Add the roles value.'))
  .option('--virtual-network-name <virtualNetworkName>', $('Add the virtual-network-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'deploymentSlot';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.deploymentSlot) {
      if (options.parse && options.deploymentSlot) {
        options.deploymentSlot = JSON.parse(options.deploymentSlot);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.deploymentSlot}]);
    }
    paramPath = '' + '/' + 'dnsSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dnsSettings) {
      if (options.parse && options.dnsSettings) {
        options.dnsSettings = JSON.parse(options.dnsSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsSettings}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'loadBalancers';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancers) {
      if (options.parse && options.loadBalancers) {
        options.loadBalancers = JSON.parse(options.loadBalancers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancers}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'reservedIPName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.reservedIPName) {
      if (options.parse && options.reservedIPName) {
        options.reservedIPName = JSON.parse(options.reservedIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reservedIPName}]);
    }
    paramPath = '' + '/' + 'roles';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    paramPath = '' + '/' + 'virtualNetworkName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkName) {
      if (options.parse && options.virtualNetworkName) {
        options.virtualNetworkName = JSON.parse(options.virtualNetworkName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete deployment-slot
  var catparametersCreateDeploymentVirtualMachineDeploymentSlot1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDeploymentSlot1 = catparametersCreateDeploymentVirtualMachineDeploymentSlot1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineDeploymentSlot1 = parametersCreateDeploymentVirtualMachineDeploymentSlot1.category('deployment-slot')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineDeploymentSlot1.command('delete')
  .description($('Remove deployment-slot in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "deploymentSlot" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/deploymentSlot';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add deployment-slot
  var catparametersCreateDeploymentVirtualMachineDeploymentSlot2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDeploymentSlot2 = catparametersCreateDeploymentVirtualMachineDeploymentSlot2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineDeploymentSlot2 = parametersCreateDeploymentVirtualMachineDeploymentSlot2.category('deployment-slot')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineDeploymentSlot2.command('add')
  .description($('Add deployment-slot in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "deploymentSlot" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/deploymentSlot' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete dns-settings
  var catparametersCreateDeploymentVirtualMachineDnsSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDnsSettings1 = catparametersCreateDeploymentVirtualMachineDnsSettings1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineDnsSettings1 = parametersCreateDeploymentVirtualMachineDnsSettings1.category('dns-settings')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineDnsSettings1.command('delete')
  .description($('Remove dns-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsSettings" : {\r\n             "dnsServers":[\r\n               {\r\n                 "address":"",\r\n                 "name":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--dns-servers', $('Remove the dns-servers value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dnsSettings';
    var anySubItem = false || options.dnsServers;
    if (anySubItem) {
      var subItemPath = null;
      if (options.dnsServers) {
        subItemPath = options.path + '/dnsServers';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add dns-settings
  var catparametersCreateDeploymentVirtualMachineDnsSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDnsSettings2 = catparametersCreateDeploymentVirtualMachineDnsSettings2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineDnsSettings2 = parametersCreateDeploymentVirtualMachineDnsSettings2.category('dns-settings')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineDnsSettings2.command('add')
  .description($('Add dns-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsSettings" : {\r\n             "dnsServers":[\r\n               {\r\n                 "address":"",\r\n                 "name":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--dns-servers <dnsServers>', $('Add the dns-servers value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dnsSettings' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dnsSettings' + '/' + 'dnsServers';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dnsServers) {
      if (options.parse && options.dnsServers) {
        options.dnsServers = JSON.parse(options.dnsServers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsServers}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set dns-servers
  var catparametersCreateDeploymentVirtualMachineDnsServers0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDnsServers0 = catparametersCreateDeploymentVirtualMachineDnsServers0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineDnsServers0 = parametersCreateDeploymentVirtualMachineDnsServers0.category('dns-servers')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineDnsServers0.command('set')
  .description($('Set dns-servers in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsServers" : {\r\n             "address":"",\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--address <address>', $('Set the address value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'address';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.address) {
      if (options.parse && options.address) {
        options.address = JSON.parse(options.address);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.address}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete dns-servers
  var catparametersCreateDeploymentVirtualMachineDnsServers1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDnsServers1 = catparametersCreateDeploymentVirtualMachineDnsServers1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineDnsServers1 = parametersCreateDeploymentVirtualMachineDnsServers1.category('dns-servers')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineDnsServers1.command('delete')
  .description($('Remove dns-servers in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsServers" : {\r\n             "address":"",\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--address', $('Remove the address value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.address || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.address) {
        subItemPath = options.path + '/address';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add dns-servers
  var catparametersCreateDeploymentVirtualMachineDnsServers2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDnsServers2 = catparametersCreateDeploymentVirtualMachineDnsServers2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineDnsServers2 = parametersCreateDeploymentVirtualMachineDnsServers2.category('dns-servers')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineDnsServers2.command('add')
  .description($('Add dns-servers in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsServers" : {\r\n             "address":"",\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--address <address>', $('Add the address value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '') + '/' + 'address';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.address) {
      if (options.parse && options.address) {
        options.address = JSON.parse(options.address);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.address}]);
    }
    paramPath = '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set load-balancers
  var catparametersCreateDeploymentVirtualMachineLoadBalancers0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineLoadBalancers0 = catparametersCreateDeploymentVirtualMachineLoadBalancers0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineLoadBalancers0 = parametersCreateDeploymentVirtualMachineLoadBalancers0.category('load-balancers')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineLoadBalancers0.command('set')
  .description($('Set load-balancers in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancers" : {\r\n             "frontendIPConfiguration":{\r\n               "staticVirtualNetworkIPAddress":"",\r\n               "subnetName":"",\r\n               "type":""\r\n             },\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancers' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete load-balancers
  var catparametersCreateDeploymentVirtualMachineLoadBalancers1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineLoadBalancers1 = catparametersCreateDeploymentVirtualMachineLoadBalancers1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineLoadBalancers1 = parametersCreateDeploymentVirtualMachineLoadBalancers1.category('load-balancers')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineLoadBalancers1.command('delete')
  .description($('Remove load-balancers in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancers" : {\r\n             "frontendIPConfiguration":{\r\n               "staticVirtualNetworkIPAddress":"",\r\n               "subnetName":"",\r\n               "type":""\r\n             },\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--frontend-ip-configuration', $('Remove the frontend-ip-configuration value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancers' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.frontendIPConfiguration || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.frontendIPConfiguration) {
        subItemPath = options.path + '/frontendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add load-balancers
  var catparametersCreateDeploymentVirtualMachineLoadBalancers2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineLoadBalancers2 = catparametersCreateDeploymentVirtualMachineLoadBalancers2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineLoadBalancers2 = parametersCreateDeploymentVirtualMachineLoadBalancers2.category('load-balancers')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineLoadBalancers2.command('add')
  .description($('Add load-balancers in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancers" : {\r\n             "frontendIPConfiguration":{\r\n               "staticVirtualNetworkIPAddress":"",\r\n               "subnetName":"",\r\n               "type":""\r\n             },\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Add the frontend-ip-configuration value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancers' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/loadBalancers' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = '/loadBalancers' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set frontend-ip-configuration
  var catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineFrontendIPConfiguration0 = catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineFrontendIPConfiguration0 = parametersCreateDeploymentVirtualMachineFrontendIPConfiguration0.category('frontend-ip-configuration')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineFrontendIPConfiguration0.command('set')
  .description($('Set frontend-ip-configuration in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":"",\r\n             "type":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balancers-index <load-balancers-index>', $('Indexer: load-balancers-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .option('--type <type>', $('Set the type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration';
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete frontend-ip-configuration
  var catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineFrontendIPConfiguration1 = catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineFrontendIPConfiguration1 = parametersCreateDeploymentVirtualMachineFrontendIPConfiguration1.category('frontend-ip-configuration')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineFrontendIPConfiguration1.command('delete')
  .description($('Remove frontend-ip-configuration in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":"",\r\n             "type":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balancers-index <load-balancers-index>', $('Indexer: load-balancers-index.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .option('--type', $('Remove the type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration';
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName || options.type;
    if (anySubItem) {
      var subItemPath = null;
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        subItemPath = options.path + '/subnetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add frontend-ip-configuration
  var catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineFrontendIPConfiguration2 = catparametersCreateDeploymentVirtualMachineFrontendIPConfiguration2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineFrontendIPConfiguration2 = parametersCreateDeploymentVirtualMachineFrontendIPConfiguration2.category('frontend-ip-configuration')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineFrontendIPConfiguration2.command('add')
  .description($('Add frontend-ip-configuration in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":"",\r\n             "type":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .option('--type <type>', $('Add the type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration' + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration' + '/' + 'subnetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set roles
  var catparametersCreateDeploymentVirtualMachineRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineRoles0 = catparametersCreateDeploymentVirtualMachineRoles0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineRoles0 = parametersCreateDeploymentVirtualMachineRoles0.category('roles')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineRoles0.command('set')
  .description($('Set roles in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "roles" : {\r\n             "availabilitySetName":"",\r\n             "configurationSets":[\r\n               {\r\n                 "additionalUnattendContent":{\r\n                   "unattendPasses":[\r\n                     {\r\n                       "passName":"",\r\n                       "unattendComponents":[\r\n                         {\r\n                           "componentName":"",\r\n                           "unattendComponentSettings":[\r\n                             {\r\n                               "content":"",\r\n                               "settingName":""\r\n                             }\r\n                           ]\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 },\r\n                 "adminPassword":"",\r\n                 "adminUserName":"",\r\n                 "computerName":"",\r\n                 "configurationSetType":"",\r\n                 "customData":"",\r\n                 "disableSshPasswordAuthentication":null,\r\n                 "domainJoin":{\r\n                   "credentials":{\r\n                     "domain":"",\r\n                     "password":"",\r\n                     "userName":""\r\n                   },\r\n                   "domainToJoin":"",\r\n                   "ldapMachineObjectOU":"",\r\n                   "provisioning":{\r\n                     "accountData":""\r\n                   }\r\n                 },\r\n                 "enableAutomaticUpdates":null,\r\n                 "hostName":"",\r\n                 "inputEndpoints":[\r\n                   {\r\n                     "enableDirectServerReturn":null,\r\n                     "endpointAcl":{\r\n                       "rules":[\r\n                         {\r\n                           "action":"",\r\n                           "description":"",\r\n                           "order":null,\r\n                           "remoteSubnet":""\r\n                         }\r\n                       ]\r\n                     },\r\n                     "idleTimeoutInMinutes":null,\r\n                     "loadBalancedEndpointSetName":"",\r\n                     "loadBalancerDistribution":"",\r\n                     "loadBalancerName":"",\r\n                     "loadBalancerProbe":{\r\n                       "intervalInSeconds":null,\r\n                       "path":"",\r\n                       "port":0,\r\n                       "protocol":0,\r\n                       "timeoutInSeconds":null\r\n                     },\r\n                     "localPort":null,\r\n                     "name":"",\r\n                     "port":null,\r\n                     "protocol":"",\r\n                     "virtualIPAddress":"",\r\n                     "virtualIPName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "iPConfigurations":[\r\n                       {\r\n                         "staticVirtualNetworkIPAddress":"",\r\n                         "subnetName":""\r\n                       }\r\n                     ],\r\n                     "iPForwarding":"",\r\n                     "name":"",\r\n                     "networkSecurityGroup":""\r\n                   }\r\n                 ],\r\n                 "networkSecurityGroup":"",\r\n                 "publicIPs":[\r\n                   {\r\n                     "domainNameLabel":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "name":""\r\n                   }\r\n                 ],\r\n                 "resetPasswordOnFirstLogon":null,\r\n                 "sshSettings":{\r\n                   "keyPairs":[\r\n                     {\r\n                       "fingerprint":"",\r\n                       "path":""\r\n                     }\r\n                   ],\r\n                   "publicKeys":[\r\n                     {\r\n                       "fingerprint":"",\r\n                       "path":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "storedCertificateSettings":[\r\n                   {\r\n                     "storeName":"",\r\n                     "thumbprint":""\r\n                   }\r\n                 ],\r\n                 "subnetNames":[\r\n                   ""\r\n                 ],\r\n                 "timeZone":"",\r\n                 "userName":"",\r\n                 "userPassword":"",\r\n                 "windowsRemoteManagement":{\r\n                   "listeners":[\r\n                     {\r\n                       "certificateThumbprint":"",\r\n                       "listenerType":0\r\n                     }\r\n                   ]\r\n                 }\r\n               }\r\n             ],\r\n             "dataVirtualHardDisks":[\r\n               {\r\n                 "hostCaching":"",\r\n                 "iOType":"",\r\n                 "label":"",\r\n                 "logicalDiskSizeInGB":null,\r\n                 "logicalUnitNumber":null,\r\n                 "mediaLink":"",\r\n                 "name":"",\r\n                 "sourceMediaLink":""\r\n               }\r\n             ],\r\n             "debugSettings":{\r\n               "bootDiagnosticsEnabled":false,\r\n               "consoleScreenshotBlobUri":"",\r\n               "serialOutputBlobUri":""\r\n             },\r\n             "defaultWinRmCertificateThumbprint":"",\r\n             "label":"",\r\n             "mediaLocation":"",\r\n             "oSVersion":"",\r\n             "oSVirtualHardDisk":{\r\n               "hostCaching":"",\r\n               "iOType":"",\r\n               "label":"",\r\n               "mediaLink":"",\r\n               "name":"",\r\n               "operatingSystem":"",\r\n               "remoteSourceImageLink":"",\r\n               "resizedSizeInGB":null,\r\n               "sourceImageName":""\r\n             },\r\n             "provisionGuestAgent":null,\r\n             "resourceExtensionReferences":[\r\n               {\r\n                 "forceUpdate":null,\r\n                 "name":"",\r\n                 "publisher":"",\r\n                 "referenceName":"",\r\n                 "resourceExtensionParameterValues":[\r\n                   {\r\n                     "key":"",\r\n                     "type":"",\r\n                     "value":""\r\n                   }\r\n                 ],\r\n                 "state":"",\r\n                 "version":""\r\n               }\r\n             ],\r\n             "roleName":"",\r\n             "roleSize":"",\r\n             "roleType":"",\r\n             "vMImageInput":{\r\n               "dataDiskConfigurations":[\r\n                 {\r\n                   "diskName":"",\r\n                   "resizedSizeInGB":null\r\n                 }\r\n               ],\r\n               "oSDiskConfiguration":{\r\n                 "resizedSizeInGB":null\r\n               }\r\n             },\r\n             "vMImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--availability-set-name <availabilitySetName>', $('Set the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Set the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Set the data-virtual-hard-disks value.'))
  .option('--debug-settings <debugSettings>', $('Set the debug-settings value.'))
  .option('--default-win-rm-certificate-thumbprint <defaultWinRmCertificateThumbprint>', $('Set the default-win-rm-certificate-thumbprint value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-location <mediaLocation>', $('Set the media-location value.'))
  .option('--os-version <oSVersion>', $('Set the os-version value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Set the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Set the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Set the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .option('--role-size <roleSize>', $('Set the role-size value.'))
  .option('--role-type <roleType>', $('Set the role-type value.'))
  .option('--vm-image-input <vMImageInput>', $('Set the vm-image-input value.'))
  .option('--vm-image-name <vMImageName>', $('Set the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'availabilitySetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = options.path + '/' + 'configurationSets';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = options.path + '/' + 'dataVirtualHardDisks';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = options.path + '/' + 'debugSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.debugSettings) {
      if (options.parse && options.debugSettings) {
        options.debugSettings = JSON.parse(options.debugSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.debugSettings}]);
    }
    paramPath = options.path + '/' + 'defaultWinRmCertificateThumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.defaultWinRmCertificateThumbprint) {
      if (options.parse && options.defaultWinRmCertificateThumbprint) {
        options.defaultWinRmCertificateThumbprint = JSON.parse(options.defaultWinRmCertificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.defaultWinRmCertificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLocation';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLocation) {
      if (options.parse && options.mediaLocation) {
        options.mediaLocation = JSON.parse(options.mediaLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLocation}]);
    }
    paramPath = options.path + '/' + 'oSVersion';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSVersion) {
      if (options.parse && options.oSVersion) {
        options.oSVersion = JSON.parse(options.oSVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVersion}]);
    }
    paramPath = options.path + '/' + 'oSVirtualHardDisk';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = options.path + '/' + 'provisionGuestAgent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionReferences';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = options.path + '/' + 'roleSize';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    paramPath = options.path + '/' + 'roleType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleType) {
      if (options.parse && options.roleType) {
        options.roleType = JSON.parse(options.roleType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleType}]);
    }
    paramPath = options.path + '/' + 'vMImageInput';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vMImageInput) {
      if (options.parse && options.vMImageInput) {
        options.vMImageInput = JSON.parse(options.vMImageInput);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageInput}]);
    }
    paramPath = options.path + '/' + 'vMImageName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vMImageName) {
      if (options.parse && options.vMImageName) {
        options.vMImageName = JSON.parse(options.vMImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete roles
  var catparametersCreateDeploymentVirtualMachineRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineRoles1 = catparametersCreateDeploymentVirtualMachineRoles1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineRoles1 = parametersCreateDeploymentVirtualMachineRoles1.category('roles')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineRoles1.command('delete')
  .description($('Remove roles in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "roles" : {\r\n             "availabilitySetName":"",\r\n             "configurationSets":[\r\n               {\r\n                 "additionalUnattendContent":{\r\n                   "unattendPasses":[\r\n                     {\r\n                       "passName":"",\r\n                       "unattendComponents":[\r\n                         {\r\n                           "componentName":"",\r\n                           "unattendComponentSettings":[\r\n                             {\r\n                               "content":"",\r\n                               "settingName":""\r\n                             }\r\n                           ]\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 },\r\n                 "adminPassword":"",\r\n                 "adminUserName":"",\r\n                 "computerName":"",\r\n                 "configurationSetType":"",\r\n                 "customData":"",\r\n                 "disableSshPasswordAuthentication":null,\r\n                 "domainJoin":{\r\n                   "credentials":{\r\n                     "domain":"",\r\n                     "password":"",\r\n                     "userName":""\r\n                   },\r\n                   "domainToJoin":"",\r\n                   "ldapMachineObjectOU":"",\r\n                   "provisioning":{\r\n                     "accountData":""\r\n                   }\r\n                 },\r\n                 "enableAutomaticUpdates":null,\r\n                 "hostName":"",\r\n                 "inputEndpoints":[\r\n                   {\r\n                     "enableDirectServerReturn":null,\r\n                     "endpointAcl":{\r\n                       "rules":[\r\n                         {\r\n                           "action":"",\r\n                           "description":"",\r\n                           "order":null,\r\n                           "remoteSubnet":""\r\n                         }\r\n                       ]\r\n                     },\r\n                     "idleTimeoutInMinutes":null,\r\n                     "loadBalancedEndpointSetName":"",\r\n                     "loadBalancerDistribution":"",\r\n                     "loadBalancerName":"",\r\n                     "loadBalancerProbe":{\r\n                       "intervalInSeconds":null,\r\n                       "path":"",\r\n                       "port":0,\r\n                       "protocol":0,\r\n                       "timeoutInSeconds":null\r\n                     },\r\n                     "localPort":null,\r\n                     "name":"",\r\n                     "port":null,\r\n                     "protocol":"",\r\n                     "virtualIPAddress":"",\r\n                     "virtualIPName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "iPConfigurations":[\r\n                       {\r\n                         "staticVirtualNetworkIPAddress":"",\r\n                         "subnetName":""\r\n                       }\r\n                     ],\r\n                     "iPForwarding":"",\r\n                     "name":"",\r\n                     "networkSecurityGroup":""\r\n                   }\r\n                 ],\r\n                 "networkSecurityGroup":"",\r\n                 "publicIPs":[\r\n                   {\r\n                     "domainNameLabel":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "name":""\r\n                   }\r\n                 ],\r\n                 "resetPasswordOnFirstLogon":null,\r\n                 "sshSettings":{\r\n                   "keyPairs":[\r\n                     {\r\n                       "fingerprint":"",\r\n                       "path":""\r\n                     }\r\n                   ],\r\n                   "publicKeys":[\r\n                     {\r\n                       "fingerprint":"",\r\n                       "path":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "storedCertificateSettings":[\r\n                   {\r\n                     "storeName":"",\r\n                     "thumbprint":""\r\n                   }\r\n                 ],\r\n                 "subnetNames":[\r\n                   ""\r\n                 ],\r\n                 "timeZone":"",\r\n                 "userName":"",\r\n                 "userPassword":"",\r\n                 "windowsRemoteManagement":{\r\n                   "listeners":[\r\n                     {\r\n                       "certificateThumbprint":"",\r\n                       "listenerType":0\r\n                     }\r\n                   ]\r\n                 }\r\n               }\r\n             ],\r\n             "dataVirtualHardDisks":[\r\n               {\r\n                 "hostCaching":"",\r\n                 "iOType":"",\r\n                 "label":"",\r\n                 "logicalDiskSizeInGB":null,\r\n                 "logicalUnitNumber":null,\r\n                 "mediaLink":"",\r\n                 "name":"",\r\n                 "sourceMediaLink":""\r\n               }\r\n             ],\r\n             "debugSettings":{\r\n               "bootDiagnosticsEnabled":false,\r\n               "consoleScreenshotBlobUri":"",\r\n               "serialOutputBlobUri":""\r\n             },\r\n             "defaultWinRmCertificateThumbprint":"",\r\n             "label":"",\r\n             "mediaLocation":"",\r\n             "oSVersion":"",\r\n             "oSVirtualHardDisk":{\r\n               "hostCaching":"",\r\n               "iOType":"",\r\n               "label":"",\r\n               "mediaLink":"",\r\n               "name":"",\r\n               "operatingSystem":"",\r\n               "remoteSourceImageLink":"",\r\n               "resizedSizeInGB":null,\r\n               "sourceImageName":""\r\n             },\r\n             "provisionGuestAgent":null,\r\n             "resourceExtensionReferences":[\r\n               {\r\n                 "forceUpdate":null,\r\n                 "name":"",\r\n                 "publisher":"",\r\n                 "referenceName":"",\r\n                 "resourceExtensionParameterValues":[\r\n                   {\r\n                     "key":"",\r\n                     "type":"",\r\n                     "value":""\r\n                   }\r\n                 ],\r\n                 "state":"",\r\n                 "version":""\r\n               }\r\n             ],\r\n             "roleName":"",\r\n             "roleSize":"",\r\n             "roleType":"",\r\n             "vMImageInput":{\r\n               "dataDiskConfigurations":[\r\n                 {\r\n                   "diskName":"",\r\n                   "resizedSizeInGB":null\r\n                 }\r\n               ],\r\n               "oSDiskConfiguration":{\r\n                 "resizedSizeInGB":null\r\n               }\r\n             },\r\n             "vMImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--availability-set-name', $('Remove the availability-set-name value.'))
  .option('--configuration-sets', $('Remove the configuration-sets value.'))
  .option('--data-virtual-hard-disks', $('Remove the data-virtual-hard-disks value.'))
  .option('--debug-settings', $('Remove the debug-settings value.'))
  .option('--default-win-rm-certificate-thumbprint', $('Remove the default-win-rm-certificate-thumbprint value.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-location', $('Remove the media-location value.'))
  .option('--os-version', $('Remove the os-version value.'))
  .option('--os-virtual-hard-disk', $('Remove the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent', $('Remove the provision-guest-agent value.'))
  .option('--resource-extension-references', $('Remove the resource-extension-references value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .option('--role-size', $('Remove the role-size value.'))
  .option('--role-type', $('Remove the role-type value.'))
  .option('--vm-image-input', $('Remove the vm-image-input value.'))
  .option('--vm-image-name', $('Remove the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.availabilitySetName || options.configurationSets || options.dataVirtualHardDisks || options.debugSettings || options.defaultWinRmCertificateThumbprint || options.label || options.mediaLocation || options.oSVersion || options.oSVirtualHardDisk || options.provisionGuestAgent || options.resourceExtensionReferences || options.roleName || options.roleSize || options.roleType || options.vMImageInput || options.vMImageName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.availabilitySetName) {
        subItemPath = options.path + '/availabilitySetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSets) {
        subItemPath = options.path + '/configurationSets';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dataVirtualHardDisks) {
        subItemPath = options.path + '/dataVirtualHardDisks';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.debugSettings) {
        subItemPath = options.path + '/debugSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.defaultWinRmCertificateThumbprint) {
        subItemPath = options.path + '/defaultWinRmCertificateThumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLocation) {
        subItemPath = options.path + '/mediaLocation';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSVersion) {
        subItemPath = options.path + '/oSVersion';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSVirtualHardDisk) {
        subItemPath = options.path + '/oSVirtualHardDisk';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisionGuestAgent) {
        subItemPath = options.path + '/provisionGuestAgent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionReferences) {
        subItemPath = options.path + '/resourceExtensionReferences';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        subItemPath = options.path + '/roleName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleSize) {
        subItemPath = options.path + '/roleSize';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleType) {
        subItemPath = options.path + '/roleType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vMImageInput) {
        subItemPath = options.path + '/vMImageInput';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vMImageName) {
        subItemPath = options.path + '/vMImageName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add roles
  var catparametersCreateDeploymentVirtualMachineRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineRoles2 = catparametersCreateDeploymentVirtualMachineRoles2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineRoles2 = parametersCreateDeploymentVirtualMachineRoles2.category('roles')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineRoles2.command('add')
  .description($('Add roles in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "roles" : {\r\n             "availabilitySetName":"",\r\n             "configurationSets":[\r\n               {\r\n                 "additionalUnattendContent":{\r\n                   "unattendPasses":[\r\n                     {\r\n                       "passName":"",\r\n                       "unattendComponents":[\r\n                         {\r\n                           "componentName":"",\r\n                           "unattendComponentSettings":[\r\n                             {\r\n                               "content":"",\r\n                               "settingName":""\r\n                             }\r\n                           ]\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 },\r\n                 "adminPassword":"",\r\n                 "adminUserName":"",\r\n                 "computerName":"",\r\n                 "configurationSetType":"",\r\n                 "customData":"",\r\n                 "disableSshPasswordAuthentication":null,\r\n                 "domainJoin":{\r\n                   "credentials":{\r\n                     "domain":"",\r\n                     "password":"",\r\n                     "userName":""\r\n                   },\r\n                   "domainToJoin":"",\r\n                   "ldapMachineObjectOU":"",\r\n                   "provisioning":{\r\n                     "accountData":""\r\n                   }\r\n                 },\r\n                 "enableAutomaticUpdates":null,\r\n                 "hostName":"",\r\n                 "inputEndpoints":[\r\n                   {\r\n                     "enableDirectServerReturn":null,\r\n                     "endpointAcl":{\r\n                       "rules":[\r\n                         {\r\n                           "action":"",\r\n                           "description":"",\r\n                           "order":null,\r\n                           "remoteSubnet":""\r\n                         }\r\n                       ]\r\n                     },\r\n                     "idleTimeoutInMinutes":null,\r\n                     "loadBalancedEndpointSetName":"",\r\n                     "loadBalancerDistribution":"",\r\n                     "loadBalancerName":"",\r\n                     "loadBalancerProbe":{\r\n                       "intervalInSeconds":null,\r\n                       "path":"",\r\n                       "port":0,\r\n                       "protocol":0,\r\n                       "timeoutInSeconds":null\r\n                     },\r\n                     "localPort":null,\r\n                     "name":"",\r\n                     "port":null,\r\n                     "protocol":"",\r\n                     "virtualIPAddress":"",\r\n                     "virtualIPName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "iPConfigurations":[\r\n                       {\r\n                         "staticVirtualNetworkIPAddress":"",\r\n                         "subnetName":""\r\n                       }\r\n                     ],\r\n                     "iPForwarding":"",\r\n                     "name":"",\r\n                     "networkSecurityGroup":""\r\n                   }\r\n                 ],\r\n                 "networkSecurityGroup":"",\r\n                 "publicIPs":[\r\n                   {\r\n                     "domainNameLabel":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "name":""\r\n                   }\r\n                 ],\r\n                 "resetPasswordOnFirstLogon":null,\r\n                 "sshSettings":{\r\n                   "keyPairs":[\r\n                     {\r\n                       "fingerprint":"",\r\n                       "path":""\r\n                     }\r\n                   ],\r\n                   "publicKeys":[\r\n                     {\r\n                       "fingerprint":"",\r\n                       "path":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "storedCertificateSettings":[\r\n                   {\r\n                     "storeName":"",\r\n                     "thumbprint":""\r\n                   }\r\n                 ],\r\n                 "subnetNames":[\r\n                   ""\r\n                 ],\r\n                 "timeZone":"",\r\n                 "userName":"",\r\n                 "userPassword":"",\r\n                 "windowsRemoteManagement":{\r\n                   "listeners":[\r\n                     {\r\n                       "certificateThumbprint":"",\r\n                       "listenerType":0\r\n                     }\r\n                   ]\r\n                 }\r\n               }\r\n             ],\r\n             "dataVirtualHardDisks":[\r\n               {\r\n                 "hostCaching":"",\r\n                 "iOType":"",\r\n                 "label":"",\r\n                 "logicalDiskSizeInGB":null,\r\n                 "logicalUnitNumber":null,\r\n                 "mediaLink":"",\r\n                 "name":"",\r\n                 "sourceMediaLink":""\r\n               }\r\n             ],\r\n             "debugSettings":{\r\n               "bootDiagnosticsEnabled":false,\r\n               "consoleScreenshotBlobUri":"",\r\n               "serialOutputBlobUri":""\r\n             },\r\n             "defaultWinRmCertificateThumbprint":"",\r\n             "label":"",\r\n             "mediaLocation":"",\r\n             "oSVersion":"",\r\n             "oSVirtualHardDisk":{\r\n               "hostCaching":"",\r\n               "iOType":"",\r\n               "label":"",\r\n               "mediaLink":"",\r\n               "name":"",\r\n               "operatingSystem":"",\r\n               "remoteSourceImageLink":"",\r\n               "resizedSizeInGB":null,\r\n               "sourceImageName":""\r\n             },\r\n             "provisionGuestAgent":null,\r\n             "resourceExtensionReferences":[\r\n               {\r\n                 "forceUpdate":null,\r\n                 "name":"",\r\n                 "publisher":"",\r\n                 "referenceName":"",\r\n                 "resourceExtensionParameterValues":[\r\n                   {\r\n                     "key":"",\r\n                     "type":"",\r\n                     "value":""\r\n                   }\r\n                 ],\r\n                 "state":"",\r\n                 "version":""\r\n               }\r\n             ],\r\n             "roleName":"",\r\n             "roleSize":"",\r\n             "roleType":"",\r\n             "vMImageInput":{\r\n               "dataDiskConfigurations":[\r\n                 {\r\n                   "diskName":"",\r\n                   "resizedSizeInGB":null\r\n                 }\r\n               ],\r\n               "oSDiskConfiguration":{\r\n                 "resizedSizeInGB":null\r\n               }\r\n             },\r\n             "vMImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--availability-set-name <availabilitySetName>', $('Add the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Add the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Add the data-virtual-hard-disks value.'))
  .option('--debug-settings <debugSettings>', $('Add the debug-settings value.'))
  .option('--default-win-rm-certificate-thumbprint <defaultWinRmCertificateThumbprint>', $('Add the default-win-rm-certificate-thumbprint value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-location <mediaLocation>', $('Add the media-location value.'))
  .option('--os-version <oSVersion>', $('Add the os-version value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Add the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Add the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Add the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .option('--role-size <roleSize>', $('Add the role-size value.'))
  .option('--role-type <roleType>', $('Add the role-type value.'))
  .option('--vm-image-input <vMImageInput>', $('Add the vm-image-input value.'))
  .option('--vm-image-name <vMImageName>', $('Add the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'availabilitySetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'configurationSets';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'dataVirtualHardDisks';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'debugSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.debugSettings) {
      if (options.parse && options.debugSettings) {
        options.debugSettings = JSON.parse(options.debugSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.debugSettings}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'defaultWinRmCertificateThumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.defaultWinRmCertificateThumbprint) {
      if (options.parse && options.defaultWinRmCertificateThumbprint) {
        options.defaultWinRmCertificateThumbprint = JSON.parse(options.defaultWinRmCertificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.defaultWinRmCertificateThumbprint}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'mediaLocation';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLocation) {
      if (options.parse && options.mediaLocation) {
        options.mediaLocation = JSON.parse(options.mediaLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLocation}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'oSVersion';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSVersion) {
      if (options.parse && options.oSVersion) {
        options.oSVersion = JSON.parse(options.oSVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVersion}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'oSVirtualHardDisk';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'provisionGuestAgent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'resourceExtensionReferences';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleSize';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleType) {
      if (options.parse && options.roleType) {
        options.roleType = JSON.parse(options.roleType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleType}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'vMImageInput';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vMImageInput) {
      if (options.parse && options.vMImageInput) {
        options.vMImageInput = JSON.parse(options.vMImageInput);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageInput}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'vMImageName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vMImageName) {
      if (options.parse && options.vMImageName) {
        options.vMImageName = JSON.parse(options.vMImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vMImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set configuration-sets
  var catparametersCreateDeploymentVirtualMachineConfigurationSets0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineConfigurationSets0 = catparametersCreateDeploymentVirtualMachineConfigurationSets0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineConfigurationSets0 = parametersCreateDeploymentVirtualMachineConfigurationSets0.category('configuration-sets')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineConfigurationSets0.command('set')
  .description($('Set configuration-sets in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "configurationSets" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":0,\r\n                   "protocol":0,\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":0\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--additional-unattend-content <additionalUnattendContent>', $('Set the additional-unattend-content value.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Set the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Set the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Set the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Set the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Set the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Set the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Set the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Set the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Set the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Set the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Set the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .option('--user-password <userPassword>', $('Set the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Set the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'additionalUnattendContent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.additionalUnattendContent) {
      if (options.parse && options.additionalUnattendContent) {
        options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContent}]);
    }
    paramPath = options.path + '/' + 'adminPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'adminUserName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = options.path + '/' + 'computerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = options.path + '/' + 'configurationSetType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = options.path + '/' + 'customData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'disableSshPasswordAuthentication';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'domainJoin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'hostName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = options.path + '/' + 'inputEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'networkInterfaces';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'publicIPs';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = options.path + '/' + 'resetPasswordOnFirstLogon';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = options.path + '/' + 'sshSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'storedCertificateSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = options.path + '/' + 'subnetNames';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = options.path + '/' + 'userPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = options.path + '/' + 'windowsRemoteManagement';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete configuration-sets
  var catparametersCreateDeploymentVirtualMachineConfigurationSets1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineConfigurationSets1 = catparametersCreateDeploymentVirtualMachineConfigurationSets1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineConfigurationSets1 = parametersCreateDeploymentVirtualMachineConfigurationSets1.category('configuration-sets')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineConfigurationSets1.command('delete')
  .description($('Remove configuration-sets in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "configurationSets" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":0,\r\n                   "protocol":0,\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":0\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--additional-unattend-content', $('Remove the additional-unattend-content value.'))
  .option('--admin-password', $('Remove the admin-password value.'))
  .option('--admin-user-name', $('Remove the admin-user-name value.'))
  .option('--computer-name', $('Remove the computer-name value.'))
  .option('--configuration-set-type', $('Remove the configuration-set-type value.'))
  .option('--custom-data', $('Remove the custom-data value.'))
  .option('--disable-ssh-password-authentication', $('Remove the disable-ssh-password-authentication value.'))
  .option('--domain-join', $('Remove the domain-join value.'))
  .option('--enable-automatic-updates', $('Remove the enable-automatic-updates value.'))
  .option('--host-name', $('Remove the host-name value.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--network-interfaces', $('Remove the network-interfaces value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .option('--public-ip', $('Remove the public-ip value.'))
  .option('--reset-password-on-first-logon', $('Remove the reset-password-on-first-logon value.'))
  .option('--ssh-settings', $('Remove the ssh-settings value.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings', $('Remove the stored-certificate-settings value.'))
  .option('--subnet-names', $('Remove the subnet-names value.'))
  .option('--time-zone', $('Remove the time-zone value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .option('--user-password', $('Remove the user-password value.'))
  .option('--windows-remote-management', $('Remove the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.additionalUnattendContent || options.adminPassword || options.adminUserName || options.computerName || options.configurationSetType || options.customData || options.disableSshPasswordAuthentication || options.domainJoin || options.enableAutomaticUpdates || options.hostName || options.inputEndpoints || options.ipForwarding || options.networkInterfaces || options.networkSecurityGroup || options.publicIPs || options.resetPasswordOnFirstLogon || options.sshSettings || options.staticVirtualNetworkIPAddress || options.storedCertificateSettings || options.subnetNames || options.timeZone || options.userName || options.userPassword || options.windowsRemoteManagement;
    if (anySubItem) {
      var subItemPath = null;
      if (options.additionalUnattendContent) {
        subItemPath = options.path + '/additionalUnattendContent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminPassword) {
        subItemPath = options.path + '/adminPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminUserName) {
        subItemPath = options.path + '/adminUserName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.computerName) {
        subItemPath = options.path + '/computerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSetType) {
        subItemPath = options.path + '/configurationSetType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.customData) {
        subItemPath = options.path + '/customData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disableSshPasswordAuthentication) {
        subItemPath = options.path + '/disableSshPasswordAuthentication';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainJoin) {
        subItemPath = options.path + '/domainJoin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableAutomaticUpdates) {
        subItemPath = options.path + '/enableAutomaticUpdates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostName) {
        subItemPath = options.path + '/hostName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.inputEndpoints) {
        subItemPath = options.path + '/inputEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        subItemPath = options.path + '/ipForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkInterfaces) {
        subItemPath = options.path + '/networkInterfaces';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPs) {
        subItemPath = options.path + '/publicIPs';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resetPasswordOnFirstLogon) {
        subItemPath = options.path + '/resetPasswordOnFirstLogon';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sshSettings) {
        subItemPath = options.path + '/sshSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storedCertificateSettings) {
        subItemPath = options.path + '/storedCertificateSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetNames) {
        subItemPath = options.path + '/subnetNames';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeZone) {
        subItemPath = options.path + '/timeZone';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        subItemPath = options.path + '/userName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userPassword) {
        subItemPath = options.path + '/userPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.windowsRemoteManagement) {
        subItemPath = options.path + '/windowsRemoteManagement';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add configuration-sets
  var catparametersCreateDeploymentVirtualMachineConfigurationSets2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineConfigurationSets2 = catparametersCreateDeploymentVirtualMachineConfigurationSets2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineConfigurationSets2 = parametersCreateDeploymentVirtualMachineConfigurationSets2.category('configuration-sets')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineConfigurationSets2.command('add')
  .description($('Add configuration-sets in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "configurationSets" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":0,\r\n                   "protocol":0,\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":0\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--additional-unattend-content <additionalUnattendContent>', $('Add the additional-unattend-content value.'))
  .option('--admin-password <adminPassword>', $('Add the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Add the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Add the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Add the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Add the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Add the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Add the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Add the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Add the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Add the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Add the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Add the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Add the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Add the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Add the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Add the time-zone value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .option('--user-password <userPassword>', $('Add the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Add the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'additionalUnattendContent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.additionalUnattendContent) {
      if (options.parse && options.additionalUnattendContent) {
        options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContent}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminUserName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'computerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'configurationSetType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'customData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'disableSshPasswordAuthentication';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'domainJoin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'enableAutomaticUpdates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'hostName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'inputEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkInterfaces';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPs';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'resetPasswordOnFirstLogon';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'sshSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'storedCertificateSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetNames';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'timeZone';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'windowsRemoteManagement';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete additional-unattend-content
  var catparametersCreateDeploymentVirtualMachineAdditionalUnattendContent1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineAdditionalUnattendContent1 = catparametersCreateDeploymentVirtualMachineAdditionalUnattendContent1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineAdditionalUnattendContent1 = parametersCreateDeploymentVirtualMachineAdditionalUnattendContent1.category('additional-unattend-content')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineAdditionalUnattendContent1.command('delete')
  .description($('Remove additional-unattend-content in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "unattendPasses":[\r\n               {\r\n                 "passName":"",\r\n                 "unattendComponents":[\r\n                   {\r\n                     "componentName":"",\r\n                     "unattendComponentSettings":[\r\n                       {\r\n                         "content":"",\r\n                         "settingName":""\r\n                       }\r\n                     ]\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--unattend-passes', $('Remove the unattend-passes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent';
    var anySubItem = false || options.unattendPasses;
    if (anySubItem) {
      var subItemPath = null;
      if (options.unattendPasses) {
        subItemPath = options.path + '/unattendPasses';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add additional-unattend-content
  var catparametersCreateDeploymentVirtualMachineAdditionalUnattendContent2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineAdditionalUnattendContent2 = catparametersCreateDeploymentVirtualMachineAdditionalUnattendContent2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineAdditionalUnattendContent2 = parametersCreateDeploymentVirtualMachineAdditionalUnattendContent2.category('additional-unattend-content')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineAdditionalUnattendContent2.command('add')
  .description($('Add additional-unattend-content in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "unattendPasses":[\r\n               {\r\n                 "passName":"",\r\n                 "unattendComponents":[\r\n                   {\r\n                     "componentName":"",\r\n                     "unattendComponentSettings":[\r\n                       {\r\n                         "content":"",\r\n                         "settingName":""\r\n                       }\r\n                     ]\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--unattend-passes <unattendPasses>', $('Add the unattend-passes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent' + '/' + 'unattendPasses';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendPasses) {
      if (options.parse && options.unattendPasses) {
        options.unattendPasses = JSON.parse(options.unattendPasses);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendPasses}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set unattend-passes
  var catparametersCreateDeploymentVirtualMachineUnattendPasses0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineUnattendPasses0 = catparametersCreateDeploymentVirtualMachineUnattendPasses0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineUnattendPasses0 = parametersCreateDeploymentVirtualMachineUnattendPasses0.category('unattend-passes')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineUnattendPasses0.command('set')
  .description($('Set unattend-passes in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--pass-name <passName>', $('Set the pass-name value.'))
  .option('--unattend-components <unattendComponents>', $('Set the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'passName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.passName) {
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = options.path + '/' + 'unattendComponents';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendComponents) {
      if (options.parse && options.unattendComponents) {
        options.unattendComponents = JSON.parse(options.unattendComponents);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponents}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete unattend-passes
  var catparametersCreateDeploymentVirtualMachineUnattendPasses1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineUnattendPasses1 = catparametersCreateDeploymentVirtualMachineUnattendPasses1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineUnattendPasses1 = parametersCreateDeploymentVirtualMachineUnattendPasses1.category('unattend-passes')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineUnattendPasses1.command('delete')
  .description($('Remove unattend-passes in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--pass-name', $('Remove the pass-name value.'))
  .option('--unattend-components', $('Remove the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.passName || options.unattendComponents;
    if (anySubItem) {
      var subItemPath = null;
      if (options.passName) {
        subItemPath = options.path + '/passName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.unattendComponents) {
        subItemPath = options.path + '/unattendComponents';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add unattend-passes
  var catparametersCreateDeploymentVirtualMachineUnattendPasses2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineUnattendPasses2 = catparametersCreateDeploymentVirtualMachineUnattendPasses2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineUnattendPasses2 = parametersCreateDeploymentVirtualMachineUnattendPasses2.category('unattend-passes')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineUnattendPasses2.command('add')
  .description($('Add unattend-passes in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--pass-name <passName>', $('Add the pass-name value.'))
  .option('--unattend-components <unattendComponents>', $('Add the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '') + '/' + 'passName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.passName) {
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '') + '/' + 'unattendComponents';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendComponents) {
      if (options.parse && options.unattendComponents) {
        options.unattendComponents = JSON.parse(options.unattendComponents);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponents}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set unattend-components
  var catparametersCreateDeploymentVirtualMachineUnattendComponents0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineUnattendComponents0 = catparametersCreateDeploymentVirtualMachineUnattendComponents0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineUnattendComponents0 = parametersCreateDeploymentVirtualMachineUnattendComponents0.category('unattend-components')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineUnattendComponents0.command('set')
  .description($('Set unattend-components in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--component-name <componentName>', $('Set the component-name value.'))
  .option('--unattend-component-settings <unattendComponentSettings>', $('Set the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'componentName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.componentName) {
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = options.path + '/' + 'unattendComponentSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendComponentSettings) {
      if (options.parse && options.unattendComponentSettings) {
        options.unattendComponentSettings = JSON.parse(options.unattendComponentSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponentSettings}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete unattend-components
  var catparametersCreateDeploymentVirtualMachineUnattendComponents1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineUnattendComponents1 = catparametersCreateDeploymentVirtualMachineUnattendComponents1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineUnattendComponents1 = parametersCreateDeploymentVirtualMachineUnattendComponents1.category('unattend-components')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineUnattendComponents1.command('delete')
  .description($('Remove unattend-components in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--component-name', $('Remove the component-name value.'))
  .option('--unattend-component-settings', $('Remove the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.componentName || options.unattendComponentSettings;
    if (anySubItem) {
      var subItemPath = null;
      if (options.componentName) {
        subItemPath = options.path + '/componentName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.unattendComponentSettings) {
        subItemPath = options.path + '/unattendComponentSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add unattend-components
  var catparametersCreateDeploymentVirtualMachineUnattendComponents2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineUnattendComponents2 = catparametersCreateDeploymentVirtualMachineUnattendComponents2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineUnattendComponents2 = parametersCreateDeploymentVirtualMachineUnattendComponents2.category('unattend-components')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineUnattendComponents2.command('add')
  .description($('Add unattend-components in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--component-name <componentName>', $('Add the component-name value.'))
  .option('--unattend-component-settings <unattendComponentSettings>', $('Add the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '') + '/' + 'componentName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.componentName) {
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '') + '/' + 'unattendComponentSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendComponentSettings) {
      if (options.parse && options.unattendComponentSettings) {
        options.unattendComponentSettings = JSON.parse(options.unattendComponentSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponentSettings}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set unattend-component-settings
  var catparametersCreateDeploymentVirtualMachineUnattendComponentSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineUnattendComponentSettings0 = catparametersCreateDeploymentVirtualMachineUnattendComponentSettings0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineUnattendComponentSettings0 = parametersCreateDeploymentVirtualMachineUnattendComponentSettings0.category('unattend-component-settings')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineUnattendComponentSettings0.command('set')
  .description($('Set unattend-component-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-components-index <unattend-components-index>', $('Indexer: unattend-components-index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--content <content>', $('Set the content value.'))
  .option('--setting-name <settingName>', $('Set the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'content';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.content) {
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    paramPath = options.path + '/' + 'settingName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.settingName) {
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete unattend-component-settings
  var catparametersCreateDeploymentVirtualMachineUnattendComponentSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineUnattendComponentSettings1 = catparametersCreateDeploymentVirtualMachineUnattendComponentSettings1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineUnattendComponentSettings1 = parametersCreateDeploymentVirtualMachineUnattendComponentSettings1.category('unattend-component-settings')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineUnattendComponentSettings1.command('delete')
  .description($('Remove unattend-component-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-components-index <unattend-components-index>', $('Indexer: unattend-components-index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--content', $('Remove the content value.'))
  .option('--setting-name', $('Remove the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.content || options.settingName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.content) {
        subItemPath = options.path + '/content';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.settingName) {
        subItemPath = options.path + '/settingName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add unattend-component-settings
  var catparametersCreateDeploymentVirtualMachineUnattendComponentSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineUnattendComponentSettings2 = catparametersCreateDeploymentVirtualMachineUnattendComponentSettings2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineUnattendComponentSettings2 = parametersCreateDeploymentVirtualMachineUnattendComponentSettings2.category('unattend-component-settings')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineUnattendComponentSettings2.command('add')
  .description($('Add unattend-component-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--content <content>', $('Add the content value.'))
  .option('--setting-name <settingName>', $('Add the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'content';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.content) {
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'settingName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.settingName) {
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set domain-join
  var catparametersCreateDeploymentVirtualMachineDomainJoin0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDomainJoin0 = catparametersCreateDeploymentVirtualMachineDomainJoin0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineDomainJoin0 = parametersCreateDeploymentVirtualMachineDomainJoin0.category('domain-join')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineDomainJoin0.command('set')
  .description($('Set domain-join in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--credentials <credentials>', $('Set the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Set the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Set the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Set the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var paramPath = options.path + '/' + 'credentials';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = options.path + '/' + 'domainToJoin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = options.path + '/' + 'ldapMachineObjectOU';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = options.path + '/' + 'provisioning';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete domain-join
  var catparametersCreateDeploymentVirtualMachineDomainJoin1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDomainJoin1 = catparametersCreateDeploymentVirtualMachineDomainJoin1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineDomainJoin1 = parametersCreateDeploymentVirtualMachineDomainJoin1.category('domain-join')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineDomainJoin1.command('delete')
  .description($('Remove domain-join in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--credentials', $('Remove the credentials value.'))
  .option('--domain-to-join', $('Remove the domain-to-join value.'))
  .option('--ldap-machine-object-o-u', $('Remove the ldap-machine-object-o-u value.'))
  .option('--provisioning', $('Remove the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var anySubItem = false || options.credentials || options.domainToJoin || options.ldapMachineObjectOU || options.provisioning;
    if (anySubItem) {
      var subItemPath = null;
      if (options.credentials) {
        subItemPath = options.path + '/credentials';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainToJoin) {
        subItemPath = options.path + '/domainToJoin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ldapMachineObjectOU) {
        subItemPath = options.path + '/ldapMachineObjectOU';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioning) {
        subItemPath = options.path + '/provisioning';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add domain-join
  var catparametersCreateDeploymentVirtualMachineDomainJoin2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDomainJoin2 = catparametersCreateDeploymentVirtualMachineDomainJoin2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineDomainJoin2 = parametersCreateDeploymentVirtualMachineDomainJoin2.category('domain-join')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineDomainJoin2.command('add')
  .description($('Add domain-join in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--credentials <credentials>', $('Add the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Add the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Add the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Add the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'credentials';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'domainToJoin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'ldapMachineObjectOU';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'provisioning';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set credentials
  var catparametersCreateDeploymentVirtualMachineCredentials0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineCredentials0 = catparametersCreateDeploymentVirtualMachineCredentials0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineCredentials0 = parametersCreateDeploymentVirtualMachineCredentials0.category('credentials')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineCredentials0.command('set')
  .description($('Set credentials in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain <domain>', $('Set the domain value.'))
  .option('--password <password>', $('Set the password value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var paramPath = options.path + '/' + 'domain';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = options.path + '/' + 'password';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete credentials
  var catparametersCreateDeploymentVirtualMachineCredentials1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineCredentials1 = catparametersCreateDeploymentVirtualMachineCredentials1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineCredentials1 = parametersCreateDeploymentVirtualMachineCredentials1.category('credentials')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineCredentials1.command('delete')
  .description($('Remove credentials in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--domain', $('Remove the domain value.'))
  .option('--password', $('Remove the password value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var anySubItem = false || options.domain || options.password || options.userName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.domain) {
        subItemPath = options.path + '/domain';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.password) {
        subItemPath = options.path + '/password';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        subItemPath = options.path + '/userName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add credentials
  var catparametersCreateDeploymentVirtualMachineCredentials2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineCredentials2 = catparametersCreateDeploymentVirtualMachineCredentials2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineCredentials2 = parametersCreateDeploymentVirtualMachineCredentials2.category('credentials')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineCredentials2.command('add')
  .description($('Add credentials in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain <domain>', $('Add the domain value.'))
  .option('--password <password>', $('Add the password value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'domain';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'password';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'userName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set provisioning
  var catparametersCreateDeploymentVirtualMachineProvisioning0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineProvisioning0 = catparametersCreateDeploymentVirtualMachineProvisioning0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineProvisioning0 = parametersCreateDeploymentVirtualMachineProvisioning0.category('provisioning')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineProvisioning0.command('set')
  .description($('Set provisioning in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--account-data <accountData>', $('Set the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var paramPath = options.path + '/' + 'accountData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete provisioning
  var catparametersCreateDeploymentVirtualMachineProvisioning1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineProvisioning1 = catparametersCreateDeploymentVirtualMachineProvisioning1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineProvisioning1 = parametersCreateDeploymentVirtualMachineProvisioning1.category('provisioning')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineProvisioning1.command('delete')
  .description($('Remove provisioning in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--account-data', $('Remove the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var anySubItem = false || options.accountData;
    if (anySubItem) {
      var subItemPath = null;
      if (options.accountData) {
        subItemPath = options.path + '/accountData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add provisioning
  var catparametersCreateDeploymentVirtualMachineProvisioning2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineProvisioning2 = catparametersCreateDeploymentVirtualMachineProvisioning2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineProvisioning2 = parametersCreateDeploymentVirtualMachineProvisioning2.category('provisioning')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineProvisioning2.command('add')
  .description($('Add provisioning in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--account-data <accountData>', $('Add the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + 'accountData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set input-endpoints
  var catparametersCreateDeploymentVirtualMachineInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineInputEndpoints0 = catparametersCreateDeploymentVirtualMachineInputEndpoints0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineInputEndpoints0 = parametersCreateDeploymentVirtualMachineInputEndpoints0.category('input-endpoints')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineInputEndpoints0.command('set')
  .description($('Set input-endpoints in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":0,\r\n               "protocol":0,\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Set the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'endpointAcl';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete input-endpoints
  var catparametersCreateDeploymentVirtualMachineInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineInputEndpoints1 = catparametersCreateDeploymentVirtualMachineInputEndpoints1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineInputEndpoints1 = parametersCreateDeploymentVirtualMachineInputEndpoints1.category('input-endpoints')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineInputEndpoints1.command('delete')
  .description($('Remove input-endpoints in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":0,\r\n               "protocol":0,\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--enable-direct-server-return', $('Remove the enable-direct-server-return value.'))
  .option('--endpoint-acl', $('Remove the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name', $('Remove the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution', $('Remove the load-balancer-distribution value.'))
  .option('--load-balancer-name', $('Remove the load-balancer-name value.'))
  .option('--load-balancer-probe', $('Remove the load-balancer-probe value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--virtual-ip-address', $('Remove the virtual-ip-address value.'))
  .option('--virtual-ip-name', $('Remove the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.enableDirectServerReturn || options.endpointAcl || options.idleTimeoutInMinutes || options.loadBalancedEndpointSetName || options.loadBalancerDistribution || options.loadBalancerName || options.loadBalancerProbe || options.localPort || options.name || options.port || options.protocol || options.virtualIPAddress || options.virtualIPName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.enableDirectServerReturn) {
        subItemPath = options.path + '/enableDirectServerReturn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.endpointAcl) {
        subItemPath = options.path + '/endpointAcl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancedEndpointSetName) {
        subItemPath = options.path + '/loadBalancedEndpointSetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerDistribution) {
        subItemPath = options.path + '/loadBalancerDistribution';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerName) {
        subItemPath = options.path + '/loadBalancerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerProbe) {
        subItemPath = options.path + '/loadBalancerProbe';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPAddress) {
        subItemPath = options.path + '/virtualIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPName) {
        subItemPath = options.path + '/virtualIPName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add input-endpoints
  var catparametersCreateDeploymentVirtualMachineInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineInputEndpoints2 = catparametersCreateDeploymentVirtualMachineInputEndpoints2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineInputEndpoints2 = parametersCreateDeploymentVirtualMachineInputEndpoints2.category('input-endpoints')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineInputEndpoints2.command('add')
  .description($('Add input-endpoints in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":0,\r\n               "protocol":0,\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Add the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Add the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Add the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Add the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Add the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Add the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Add the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Add the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'enableDirectServerReturn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'endpointAcl';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancedEndpointSetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerDistribution';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerProbe';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete endpoint-acl
  var catparametersCreateDeploymentVirtualMachineEndpointAcl1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineEndpointAcl1 = catparametersCreateDeploymentVirtualMachineEndpointAcl1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineEndpointAcl1 = parametersCreateDeploymentVirtualMachineEndpointAcl1.category('endpoint-acl')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineEndpointAcl1.command('delete')
  .description($('Remove endpoint-acl in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "endpointAcl" : {\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--rules', $('Remove the rules value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var anySubItem = false || options.rules;
    if (anySubItem) {
      var subItemPath = null;
      if (options.rules) {
        subItemPath = options.path + '/rules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add endpoint-acl
  var catparametersCreateDeploymentVirtualMachineEndpointAcl2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineEndpointAcl2 = catparametersCreateDeploymentVirtualMachineEndpointAcl2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineEndpointAcl2 = parametersCreateDeploymentVirtualMachineEndpointAcl2.category('endpoint-acl')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineEndpointAcl2.command('add')
  .description($('Add endpoint-acl in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "endpointAcl" : {\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--rules <rules>', $('Add the rules value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + 'rules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set rules
  var catparametersCreateDeploymentVirtualMachineRules0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineRules0 = catparametersCreateDeploymentVirtualMachineRules0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineRules0 = parametersCreateDeploymentVirtualMachineRules0.category('rules')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineRules0.command('set')
  .description($('Set rules in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete rules
  var catparametersCreateDeploymentVirtualMachineRules1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineRules1 = catparametersCreateDeploymentVirtualMachineRules1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineRules1 = parametersCreateDeploymentVirtualMachineRules1.category('rules')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineRules1.command('delete')
  .description($('Remove rules in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--action', $('Remove the action value.'))
  .option('--description', $('Remove the description value.'))
  .option('--order', $('Remove the order value.'))
  .option('--remote-subnet', $('Remove the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.action || options.description || options.order || options.remoteSubnet;
    if (anySubItem) {
      var subItemPath = null;
      if (options.action) {
        subItemPath = options.path + '/action';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.order) {
        subItemPath = options.path + '/order';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSubnet) {
        subItemPath = options.path + '/remoteSubnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add rules
  var catparametersCreateDeploymentVirtualMachineRules2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineRules2 = catparametersCreateDeploymentVirtualMachineRules2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineRules2 = parametersCreateDeploymentVirtualMachineRules2.category('rules')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineRules2.command('add')
  .description($('Add rules in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--action <action>', $('Add the action value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--order <order>', $('Add the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Add the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'action';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'order';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'remoteSubnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set load-balancer-probe
  var catparametersCreateDeploymentVirtualMachineLoadBalancerProbe0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineLoadBalancerProbe0 = catparametersCreateDeploymentVirtualMachineLoadBalancerProbe0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineLoadBalancerProbe0 = parametersCreateDeploymentVirtualMachineLoadBalancerProbe0.category('load-balancer-probe')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineLoadBalancerProbe0.command('set')
  .description($('Set load-balancer-probe in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":0,\r\n             "protocol":0,\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var paramPath = options.path + '/' + 'intervalInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete load-balancer-probe
  var catparametersCreateDeploymentVirtualMachineLoadBalancerProbe1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineLoadBalancerProbe1 = catparametersCreateDeploymentVirtualMachineLoadBalancerProbe1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineLoadBalancerProbe1 = parametersCreateDeploymentVirtualMachineLoadBalancerProbe1.category('load-balancer-probe')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineLoadBalancerProbe1.command('delete')
  .description($('Remove load-balancer-probe in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":0,\r\n             "protocol":0,\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--interval-in-seconds', $('Remove the interval-in-seconds value.'))
  .option('--path', $('Remove the path value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--timeout-in-seconds', $('Remove the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var anySubItem = false || options.intervalInSeconds || options.path || options.port || options.protocol || options.timeoutInSeconds;
    if (anySubItem) {
      var subItemPath = null;
      if (options.intervalInSeconds) {
        subItemPath = options.path + '/intervalInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeoutInSeconds) {
        subItemPath = options.path + '/timeoutInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add load-balancer-probe
  var catparametersCreateDeploymentVirtualMachineLoadBalancerProbe2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineLoadBalancerProbe2 = catparametersCreateDeploymentVirtualMachineLoadBalancerProbe2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineLoadBalancerProbe2 = parametersCreateDeploymentVirtualMachineLoadBalancerProbe2.category('load-balancer-probe')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineLoadBalancerProbe2.command('add')
  .description($('Add load-balancer-probe in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":0,\r\n             "protocol":0,\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Add the interval-in-seconds value.'))
  .option('--path <path>', $('Add the path value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Add the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'intervalInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'timeoutInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete protocol
  var catparametersCreateDeploymentVirtualMachineProtocol1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineProtocol1 = catparametersCreateDeploymentVirtualMachineProtocol1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineProtocol1 = parametersCreateDeploymentVirtualMachineProtocol1.category('protocol')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineProtocol1.command('delete')
  .description($('Remove protocol in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "protocol" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add protocol
  var catparametersCreateDeploymentVirtualMachineProtocol2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineProtocol2 = catparametersCreateDeploymentVirtualMachineProtocol2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineProtocol2 = parametersCreateDeploymentVirtualMachineProtocol2.category('protocol')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineProtocol2.command('add')
  .description($('Add protocol in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "protocol" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set network-interfaces
  var catparametersCreateDeploymentVirtualMachineNetworkInterfaces0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineNetworkInterfaces0 = catparametersCreateDeploymentVirtualMachineNetworkInterfaces0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineNetworkInterfaces0 = parametersCreateDeploymentVirtualMachineNetworkInterfaces0.category('network-interfaces')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineNetworkInterfaces0.command('set')
  .description($('Set network-interfaces in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete network-interfaces
  var catparametersCreateDeploymentVirtualMachineNetworkInterfaces1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineNetworkInterfaces1 = catparametersCreateDeploymentVirtualMachineNetworkInterfaces1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineNetworkInterfaces1 = parametersCreateDeploymentVirtualMachineNetworkInterfaces1.category('network-interfaces')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineNetworkInterfaces1.command('delete')
  .description($('Remove network-interfaces in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--name', $('Remove the name value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.ipConfigurations || options.ipForwarding || options.name || options.networkSecurityGroup;
    if (anySubItem) {
      var subItemPath = null;
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        subItemPath = options.path + '/ipForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add network-interfaces
  var catparametersCreateDeploymentVirtualMachineNetworkInterfaces2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineNetworkInterfaces2 = catparametersCreateDeploymentVirtualMachineNetworkInterfaces2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineNetworkInterfaces2 = parametersCreateDeploymentVirtualMachineNetworkInterfaces2.category('network-interfaces')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineNetworkInterfaces2.command('add')
  .description($('Add network-interfaces in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set ip-configurations
  var catparametersCreateDeploymentVirtualMachineIPConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineIPConfigurations0 = catparametersCreateDeploymentVirtualMachineIPConfigurations0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineIPConfigurations0 = parametersCreateDeploymentVirtualMachineIPConfigurations0.category('ip-configurations')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineIPConfigurations0.command('set')
  .description($('Set ip-configurations in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete ip-configurations
  var catparametersCreateDeploymentVirtualMachineIPConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineIPConfigurations1 = catparametersCreateDeploymentVirtualMachineIPConfigurations1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineIPConfigurations1 = parametersCreateDeploymentVirtualMachineIPConfigurations1.category('ip-configurations')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineIPConfigurations1.command('delete')
  .description($('Remove ip-configurations in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        subItemPath = options.path + '/subnetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add ip-configurations
  var catparametersCreateDeploymentVirtualMachineIPConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineIPConfigurations2 = catparametersCreateDeploymentVirtualMachineIPConfigurations2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineIPConfigurations2 = parametersCreateDeploymentVirtualMachineIPConfigurations2.category('ip-configurations')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineIPConfigurations2.command('add')
  .description($('Add ip-configurations in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set public-ip
  var catparametersCreateDeploymentVirtualMachinePublicIPs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachinePublicIPs0 = catparametersCreateDeploymentVirtualMachinePublicIPs0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachinePublicIPs0 = parametersCreateDeploymentVirtualMachinePublicIPs0.category('public-ip')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachinePublicIPs0.command('set')
  .description($('Set public-ip in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain-name-label <domainNameLabel>', $('Set the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'domainNameLabel';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete public-ip
  var catparametersCreateDeploymentVirtualMachinePublicIPs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachinePublicIPs1 = catparametersCreateDeploymentVirtualMachinePublicIPs1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachinePublicIPs1 = parametersCreateDeploymentVirtualMachinePublicIPs1.category('public-ip')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachinePublicIPs1.command('delete')
  .description($('Remove public-ip in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--domain-name-label', $('Remove the domain-name-label value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.domainNameLabel || options.idleTimeoutInMinutes || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.domainNameLabel) {
        subItemPath = options.path + '/domainNameLabel';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add public-ip
  var catparametersCreateDeploymentVirtualMachinePublicIPs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachinePublicIPs2 = catparametersCreateDeploymentVirtualMachinePublicIPs2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachinePublicIPs2 = parametersCreateDeploymentVirtualMachinePublicIPs2.category('public-ip')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachinePublicIPs2.command('add')
  .description($('Add public-ip in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain-name-label <domainNameLabel>', $('Add the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'domainNameLabel';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete ssh-settings
  var catparametersCreateDeploymentVirtualMachineSshSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineSshSettings1 = catparametersCreateDeploymentVirtualMachineSshSettings1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineSshSettings1 = parametersCreateDeploymentVirtualMachineSshSettings1.category('ssh-settings')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineSshSettings1.command('delete')
  .description($('Remove ssh-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sshSettings" : {\r\n             "keyPairs":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ],\r\n             "publicKeys":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--key-pairs', $('Remove the key-pairs value.'))
  .option('--public-keys', $('Remove the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var anySubItem = false || options.keyPairs || options.publicKeys;
    if (anySubItem) {
      var subItemPath = null;
      if (options.keyPairs) {
        subItemPath = options.path + '/keyPairs';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicKeys) {
        subItemPath = options.path + '/publicKeys';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add ssh-settings
  var catparametersCreateDeploymentVirtualMachineSshSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineSshSettings2 = catparametersCreateDeploymentVirtualMachineSshSettings2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineSshSettings2 = parametersCreateDeploymentVirtualMachineSshSettings2.category('ssh-settings')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineSshSettings2.command('add')
  .description($('Add ssh-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sshSettings" : {\r\n             "keyPairs":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ],\r\n             "publicKeys":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--key-pairs <keyPairs>', $('Add the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Add the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'keyPairs';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'publicKeys';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set key-pairs
  var catparametersCreateDeploymentVirtualMachineKeyPairs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineKeyPairs0 = catparametersCreateDeploymentVirtualMachineKeyPairs0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineKeyPairs0 = parametersCreateDeploymentVirtualMachineKeyPairs0.category('key-pairs')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineKeyPairs0.command('set')
  .description($('Set key-pairs in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete key-pairs
  var catparametersCreateDeploymentVirtualMachineKeyPairs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineKeyPairs1 = catparametersCreateDeploymentVirtualMachineKeyPairs1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineKeyPairs1 = parametersCreateDeploymentVirtualMachineKeyPairs1.category('key-pairs')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineKeyPairs1.command('delete')
  .description($('Remove key-pairs in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fingerprint) {
        subItemPath = options.path + '/fingerprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add key-pairs
  var catparametersCreateDeploymentVirtualMachineKeyPairs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineKeyPairs2 = catparametersCreateDeploymentVirtualMachineKeyPairs2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineKeyPairs2 = parametersCreateDeploymentVirtualMachineKeyPairs2.category('key-pairs')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineKeyPairs2.command('add')
  .description($('Add key-pairs in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set public-keys
  var catparametersCreateDeploymentVirtualMachinePublicKeys0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachinePublicKeys0 = catparametersCreateDeploymentVirtualMachinePublicKeys0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachinePublicKeys0 = parametersCreateDeploymentVirtualMachinePublicKeys0.category('public-keys')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachinePublicKeys0.command('set')
  .description($('Set public-keys in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete public-keys
  var catparametersCreateDeploymentVirtualMachinePublicKeys1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachinePublicKeys1 = catparametersCreateDeploymentVirtualMachinePublicKeys1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachinePublicKeys1 = parametersCreateDeploymentVirtualMachinePublicKeys1.category('public-keys')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachinePublicKeys1.command('delete')
  .description($('Remove public-keys in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fingerprint) {
        subItemPath = options.path + '/fingerprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add public-keys
  var catparametersCreateDeploymentVirtualMachinePublicKeys2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachinePublicKeys2 = catparametersCreateDeploymentVirtualMachinePublicKeys2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachinePublicKeys2 = parametersCreateDeploymentVirtualMachinePublicKeys2.category('public-keys')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachinePublicKeys2.command('add')
  .description($('Add public-keys in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set stored-certificate-settings
  var catparametersCreateDeploymentVirtualMachineStoredCertificateSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineStoredCertificateSettings0 = catparametersCreateDeploymentVirtualMachineStoredCertificateSettings0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineStoredCertificateSettings0 = parametersCreateDeploymentVirtualMachineStoredCertificateSettings0.category('stored-certificate-settings')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineStoredCertificateSettings0.command('set')
  .description($('Set stored-certificate-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'storeName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete stored-certificate-settings
  var catparametersCreateDeploymentVirtualMachineStoredCertificateSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineStoredCertificateSettings1 = catparametersCreateDeploymentVirtualMachineStoredCertificateSettings1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineStoredCertificateSettings1 = parametersCreateDeploymentVirtualMachineStoredCertificateSettings1.category('stored-certificate-settings')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineStoredCertificateSettings1.command('delete')
  .description($('Remove stored-certificate-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.storeName || options.thumbprint;
    if (anySubItem) {
      var subItemPath = null;
      if (options.storeName) {
        subItemPath = options.path + '/storeName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        subItemPath = options.path + '/thumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add stored-certificate-settings
  var catparametersCreateDeploymentVirtualMachineStoredCertificateSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineStoredCertificateSettings2 = catparametersCreateDeploymentVirtualMachineStoredCertificateSettings2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineStoredCertificateSettings2 = parametersCreateDeploymentVirtualMachineStoredCertificateSettings2.category('stored-certificate-settings')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineStoredCertificateSettings2.command('add')
  .description($('Add stored-certificate-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'storeName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'thumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set subnet-names
  var catparametersCreateDeploymentVirtualMachineSubnetNames0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineSubnetNames0 = catparametersCreateDeploymentVirtualMachineSubnetNames0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineSubnetNames0 = parametersCreateDeploymentVirtualMachineSubnetNames0.category('subnet-names')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineSubnetNames0.command('set')
  .description($('Set subnet-names in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete subnet-names
  var catparametersCreateDeploymentVirtualMachineSubnetNames1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineSubnetNames1 = catparametersCreateDeploymentVirtualMachineSubnetNames1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineSubnetNames1 = parametersCreateDeploymentVirtualMachineSubnetNames1.category('subnet-names')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineSubnetNames1.command('delete')
  .description($('Remove subnet-names in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add subnet-names
  var catparametersCreateDeploymentVirtualMachineSubnetNames2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineSubnetNames2 = catparametersCreateDeploymentVirtualMachineSubnetNames2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineSubnetNames2 = parametersCreateDeploymentVirtualMachineSubnetNames2.category('subnet-names')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineSubnetNames2.command('add')
  .description($('Add subnet-names in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete windows-remote-management
  var catparametersCreateDeploymentVirtualMachineWindowsRemoteManagement1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineWindowsRemoteManagement1 = catparametersCreateDeploymentVirtualMachineWindowsRemoteManagement1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineWindowsRemoteManagement1 = parametersCreateDeploymentVirtualMachineWindowsRemoteManagement1.category('windows-remote-management')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineWindowsRemoteManagement1.command('delete')
  .description($('Remove windows-remote-management in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsRemoteManagement" : {\r\n             "listeners":[\r\n               {\r\n                 "certificateThumbprint":"",\r\n                 "listenerType":0\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--listeners', $('Remove the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var anySubItem = false || options.listeners;
    if (anySubItem) {
      var subItemPath = null;
      if (options.listeners) {
        subItemPath = options.path + '/listeners';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add windows-remote-management
  var catparametersCreateDeploymentVirtualMachineWindowsRemoteManagement2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineWindowsRemoteManagement2 = catparametersCreateDeploymentVirtualMachineWindowsRemoteManagement2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineWindowsRemoteManagement2 = parametersCreateDeploymentVirtualMachineWindowsRemoteManagement2.category('windows-remote-management')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineWindowsRemoteManagement2.command('add')
  .description($('Add windows-remote-management in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsRemoteManagement" : {\r\n             "listeners":[\r\n               {\r\n                 "certificateThumbprint":"",\r\n                 "listenerType":0\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--listeners <listeners>', $('Add the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + 'listeners';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set listeners
  var catparametersCreateDeploymentVirtualMachineListeners0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineListeners0 = catparametersCreateDeploymentVirtualMachineListeners0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineListeners0 = parametersCreateDeploymentVirtualMachineListeners0.category('listeners')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineListeners0.command('set')
  .description($('Set listeners in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":0\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Set the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Set the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateThumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'listenerType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete listeners
  var catparametersCreateDeploymentVirtualMachineListeners1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineListeners1 = catparametersCreateDeploymentVirtualMachineListeners1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineListeners1 = parametersCreateDeploymentVirtualMachineListeners1.category('listeners')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineListeners1.command('delete')
  .description($('Remove listeners in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":0\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--certificate-thumbprint', $('Remove the certificate-thumbprint value.'))
  .option('--listener-type', $('Remove the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.certificateThumbprint || options.listenerType;
    if (anySubItem) {
      var subItemPath = null;
      if (options.certificateThumbprint) {
        subItemPath = options.path + '/certificateThumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.listenerType) {
        subItemPath = options.path + '/listenerType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add listeners
  var catparametersCreateDeploymentVirtualMachineListeners2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineListeners2 = catparametersCreateDeploymentVirtualMachineListeners2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineListeners2 = parametersCreateDeploymentVirtualMachineListeners2.category('listeners')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineListeners2.command('add')
  .description($('Add listeners in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":0\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Add the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Add the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateThumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'listenerType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete listener-type
  var catparametersCreateDeploymentVirtualMachineListenerType1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineListenerType1 = catparametersCreateDeploymentVirtualMachineListenerType1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineListenerType1 = parametersCreateDeploymentVirtualMachineListenerType1.category('listener-type')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineListenerType1.command('delete')
  .description($('Remove listener-type in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listenerType" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners-index <listeners-index>', $('Indexer: listeners-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add listener-type
  var catparametersCreateDeploymentVirtualMachineListenerType2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineListenerType2 = catparametersCreateDeploymentVirtualMachineListenerType2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineListenerType2 = parametersCreateDeploymentVirtualMachineListenerType2.category('listener-type')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineListenerType2.command('add')
  .description($('Add listener-type in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listenerType" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set data-virtual-hard-disks
  var catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDataVirtualHardDisks0 = catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineDataVirtualHardDisks0 = parametersCreateDeploymentVirtualMachineDataVirtualHardDisks0.category('data-virtual-hard-disks')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineDataVirtualHardDisks0.command('set')
  .description($('Set data-virtual-hard-disks in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataVirtualHardDisks" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "logicalDiskSizeInGB":null,\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "sourceMediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Set the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sourceMediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete data-virtual-hard-disks
  var catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDataVirtualHardDisks1 = catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineDataVirtualHardDisks1 = parametersCreateDeploymentVirtualMachineDataVirtualHardDisks1.category('data-virtual-hard-disks')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineDataVirtualHardDisks1.command('delete')
  .description($('Remove data-virtual-hard-disks in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataVirtualHardDisks" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "logicalDiskSizeInGB":null,\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "sourceMediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--logical-disk-size-in-g-b', $('Remove the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--source-media-link', $('Remove the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.logicalDiskSizeInGB || options.logicalUnitNumber || options.mediaLink || options.name || options.sourceMediaLink;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        subItemPath = options.path + '/iOType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalDiskSizeInGB) {
        subItemPath = options.path + '/logicalDiskSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        subItemPath = options.path + '/logicalUnitNumber';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceMediaLink) {
        subItemPath = options.path + '/sourceMediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add data-virtual-hard-disks
  var catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDataVirtualHardDisks2 = catparametersCreateDeploymentVirtualMachineDataVirtualHardDisks2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineDataVirtualHardDisks2 = parametersCreateDeploymentVirtualMachineDataVirtualHardDisks2.category('data-virtual-hard-disks')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineDataVirtualHardDisks2.command('add')
  .description($('Add data-virtual-hard-disks in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataVirtualHardDisks" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "logicalDiskSizeInGB":null,\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "sourceMediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Add the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Add the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'iOType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalDiskSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalUnitNumber';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'sourceMediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set debug-settings
  var catparametersCreateDeploymentVirtualMachineDebugSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDebugSettings0 = catparametersCreateDeploymentVirtualMachineDebugSettings0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineDebugSettings0 = parametersCreateDeploymentVirtualMachineDebugSettings0.category('debug-settings')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineDebugSettings0.command('set')
  .description($('Set debug-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "debugSettings" : {\r\n             "bootDiagnosticsEnabled":false,\r\n             "consoleScreenshotBlobUri":"",\r\n             "serialOutputBlobUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--boot-diagnostics-enabled <bootDiagnosticsEnabled>', $('Set the boot-diagnostics-enabled value.'))
  .option('--console-screenshot-blob-uri <consoleScreenshotBlobUri>', $('Set the console-screenshot-blob-uri value.'))
  .option('--serial-output-blob-uri <serialOutputBlobUri>', $('Set the serial-output-blob-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/debugSettings';
    var paramPath = options.path + '/' + 'bootDiagnosticsEnabled';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.bootDiagnosticsEnabled) {
      if (options.parse && options.bootDiagnosticsEnabled) {
        options.bootDiagnosticsEnabled = JSON.parse(options.bootDiagnosticsEnabled);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.bootDiagnosticsEnabled}]);
    }
    paramPath = options.path + '/' + 'consoleScreenshotBlobUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.consoleScreenshotBlobUri) {
      if (options.parse && options.consoleScreenshotBlobUri) {
        options.consoleScreenshotBlobUri = JSON.parse(options.consoleScreenshotBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.consoleScreenshotBlobUri}]);
    }
    paramPath = options.path + '/' + 'serialOutputBlobUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.serialOutputBlobUri) {
      if (options.parse && options.serialOutputBlobUri) {
        options.serialOutputBlobUri = JSON.parse(options.serialOutputBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serialOutputBlobUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete debug-settings
  var catparametersCreateDeploymentVirtualMachineDebugSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDebugSettings1 = catparametersCreateDeploymentVirtualMachineDebugSettings1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineDebugSettings1 = parametersCreateDeploymentVirtualMachineDebugSettings1.category('debug-settings')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineDebugSettings1.command('delete')
  .description($('Remove debug-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "debugSettings" : {\r\n             "bootDiagnosticsEnabled":false,\r\n             "consoleScreenshotBlobUri":"",\r\n             "serialOutputBlobUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--boot-diagnostics-enabled', $('Remove the boot-diagnostics-enabled value.'))
  .option('--console-screenshot-blob-uri', $('Remove the console-screenshot-blob-uri value.'))
  .option('--serial-output-blob-uri', $('Remove the serial-output-blob-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/debugSettings';
    var anySubItem = false || options.bootDiagnosticsEnabled || options.consoleScreenshotBlobUri || options.serialOutputBlobUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.bootDiagnosticsEnabled) {
        subItemPath = options.path + '/bootDiagnosticsEnabled';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.consoleScreenshotBlobUri) {
        subItemPath = options.path + '/consoleScreenshotBlobUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.serialOutputBlobUri) {
        subItemPath = options.path + '/serialOutputBlobUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add debug-settings
  var catparametersCreateDeploymentVirtualMachineDebugSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDebugSettings2 = catparametersCreateDeploymentVirtualMachineDebugSettings2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineDebugSettings2 = parametersCreateDeploymentVirtualMachineDebugSettings2.category('debug-settings')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineDebugSettings2.command('add')
  .description($('Add debug-settings in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "debugSettings" : {\r\n             "bootDiagnosticsEnabled":false,\r\n             "consoleScreenshotBlobUri":"",\r\n             "serialOutputBlobUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--boot-diagnostics-enabled <bootDiagnosticsEnabled>', $('Add the boot-diagnostics-enabled value.'))
  .option('--console-screenshot-blob-uri <consoleScreenshotBlobUri>', $('Add the console-screenshot-blob-uri value.'))
  .option('--serial-output-blob-uri <serialOutputBlobUri>', $('Add the serial-output-blob-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/debugSettings' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/debugSettings' + '/' + 'bootDiagnosticsEnabled';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.bootDiagnosticsEnabled) {
      if (options.parse && options.bootDiagnosticsEnabled) {
        options.bootDiagnosticsEnabled = JSON.parse(options.bootDiagnosticsEnabled);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.bootDiagnosticsEnabled}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/debugSettings' + '/' + 'consoleScreenshotBlobUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.consoleScreenshotBlobUri) {
      if (options.parse && options.consoleScreenshotBlobUri) {
        options.consoleScreenshotBlobUri = JSON.parse(options.consoleScreenshotBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.consoleScreenshotBlobUri}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/debugSettings' + '/' + 'serialOutputBlobUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.serialOutputBlobUri) {
      if (options.parse && options.serialOutputBlobUri) {
        options.serialOutputBlobUri = JSON.parse(options.serialOutputBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serialOutputBlobUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set os-virtual-hard-disk
  var catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineOSVirtualHardDisk0 = catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineOSVirtualHardDisk0 = parametersCreateDeploymentVirtualMachineOSVirtualHardDisk0.category('os-virtual-hard-disk')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineOSVirtualHardDisk0.command('set')
  .description($('Set os-virtual-hard-disk in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSVirtualHardDisk" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "operatingSystem":"",\r\n             "remoteSourceImageLink":"",\r\n             "resizedSizeInGB":null,\r\n             "sourceImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system <operatingSystem>', $('Set the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Set the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Set the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystem';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = options.path + '/' + 'remoteSourceImageLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = options.path + '/' + 'sourceImageName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete os-virtual-hard-disk
  var catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineOSVirtualHardDisk1 = catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineOSVirtualHardDisk1 = parametersCreateDeploymentVirtualMachineOSVirtualHardDisk1.category('os-virtual-hard-disk')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineOSVirtualHardDisk1.command('delete')
  .description($('Remove os-virtual-hard-disk in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSVirtualHardDisk" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "operatingSystem":"",\r\n             "remoteSourceImageLink":"",\r\n             "resizedSizeInGB":null,\r\n             "sourceImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system', $('Remove the operating-system value.'))
  .option('--remote-source-image-link', $('Remove the remote-source-image-link value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .option('--source-image-name', $('Remove the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk';
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.mediaLink || options.name || options.operatingSystem || options.remoteSourceImageLink || options.resizedSizeInGB || options.sourceImageName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        subItemPath = options.path + '/iOType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystem) {
        subItemPath = options.path + '/operatingSystem';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSourceImageLink) {
        subItemPath = options.path + '/remoteSourceImageLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceImageName) {
        subItemPath = options.path + '/sourceImageName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add os-virtual-hard-disk
  var catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineOSVirtualHardDisk2 = catparametersCreateDeploymentVirtualMachineOSVirtualHardDisk2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineOSVirtualHardDisk2 = parametersCreateDeploymentVirtualMachineOSVirtualHardDisk2.category('os-virtual-hard-disk')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineOSVirtualHardDisk2.command('add')
  .description($('Add os-virtual-hard-disk in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSVirtualHardDisk" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "operatingSystem":"",\r\n             "remoteSourceImageLink":"",\r\n             "resizedSizeInGB":null,\r\n             "sourceImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system <operatingSystem>', $('Add the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Add the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Add the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'iOType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'operatingSystem';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'remoteSourceImageLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'sourceImageName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set resource-extension-references
  var catparametersCreateDeploymentVirtualMachineResourceExtensionReferences0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineResourceExtensionReferences0 = catparametersCreateDeploymentVirtualMachineResourceExtensionReferences0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineResourceExtensionReferences0 = parametersCreateDeploymentVirtualMachineResourceExtensionReferences0.category('resource-extension-references')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineResourceExtensionReferences0.command('set')
  .description($('Set resource-extension-references in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionReferences" : {\r\n             "forceUpdate":null,\r\n             "name":"",\r\n             "publisher":"",\r\n             "referenceName":"",\r\n             "resourceExtensionParameterValues":[\r\n               {\r\n                 "key":"",\r\n                 "type":"",\r\n                 "value":""\r\n               }\r\n             ],\r\n             "state":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--force-update <forceUpdate>', $('Set the force-update value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--reference-name <referenceName>', $('Set the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Set the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Set the state value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'forceUpdate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
        options.forceUpdate = JSON.parse(options.forceUpdate);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'referenceName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionParameterValues';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = options.path + '/' + 'state';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete resource-extension-references
  var catparametersCreateDeploymentVirtualMachineResourceExtensionReferences1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineResourceExtensionReferences1 = catparametersCreateDeploymentVirtualMachineResourceExtensionReferences1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineResourceExtensionReferences1 = parametersCreateDeploymentVirtualMachineResourceExtensionReferences1.category('resource-extension-references')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineResourceExtensionReferences1.command('delete')
  .description($('Remove resource-extension-references in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionReferences" : {\r\n             "forceUpdate":null,\r\n             "name":"",\r\n             "publisher":"",\r\n             "referenceName":"",\r\n             "resourceExtensionParameterValues":[\r\n               {\r\n                 "key":"",\r\n                 "type":"",\r\n                 "value":""\r\n               }\r\n             ],\r\n             "state":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--force-update', $('Remove the force-update value.'))
  .option('--name', $('Remove the name value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--reference-name', $('Remove the reference-name value.'))
  .option('--resource-extension-parameter-values', $('Remove the resource-extension-parameter-values value.'))
  .option('--state', $('Remove the state value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.forceUpdate || options.name || options.publisher || options.referenceName || options.resourceExtensionParameterValues || options.state || options.version;
    if (anySubItem) {
      var subItemPath = null;
      if (options.forceUpdate) {
        subItemPath = options.path + '/forceUpdate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.referenceName) {
        subItemPath = options.path + '/referenceName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionParameterValues) {
        subItemPath = options.path + '/resourceExtensionParameterValues';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.state) {
        subItemPath = options.path + '/state';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add resource-extension-references
  var catparametersCreateDeploymentVirtualMachineResourceExtensionReferences2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineResourceExtensionReferences2 = catparametersCreateDeploymentVirtualMachineResourceExtensionReferences2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineResourceExtensionReferences2 = parametersCreateDeploymentVirtualMachineResourceExtensionReferences2.category('resource-extension-references')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineResourceExtensionReferences2.command('add')
  .description($('Add resource-extension-references in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionReferences" : {\r\n             "forceUpdate":null,\r\n             "name":"",\r\n             "publisher":"",\r\n             "referenceName":"",\r\n             "resourceExtensionParameterValues":[\r\n               {\r\n                 "key":"",\r\n                 "type":"",\r\n                 "value":""\r\n               }\r\n             ],\r\n             "state":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--force-update <forceUpdate>', $('Add the force-update value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .option('--reference-name <referenceName>', $('Add the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Add the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Add the state value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'forceUpdate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
        options.forceUpdate = JSON.parse(options.forceUpdate);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'publisher';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'referenceName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'resourceExtensionParameterValues';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'state';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'version';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set resource-extension-parameter-values
  var catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0 = catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0 = parametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0.category('resource-extension-parameter-values')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues0.command('set')
  .description($('Set resource-extension-parameter-values in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionParameterValues" : {\r\n             "key":"",\r\n             "type":"",\r\n             "value":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--key <key>', $('Set the key value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--value <value>', $('Set the value value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'key';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'value';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete resource-extension-parameter-values
  var catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1 = catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1 = parametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1.category('resource-extension-parameter-values')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues1.command('delete')
  .description($('Remove resource-extension-parameter-values in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionParameterValues" : {\r\n             "key":"",\r\n             "type":"",\r\n             "value":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--key', $('Remove the key value.'))
  .option('--type', $('Remove the type value.'))
  .option('--value', $('Remove the value value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.key || options.type || options.value;
    if (anySubItem) {
      var subItemPath = null;
      if (options.key) {
        subItemPath = options.path + '/key';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.value) {
        subItemPath = options.path + '/value';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add resource-extension-parameter-values
  var catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineResourceExtensionParameterValues2 = catparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues2 = parametersCreateDeploymentVirtualMachineResourceExtensionParameterValues2.category('resource-extension-parameter-values')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineResourceExtensionParameterValues2.command('add')
  .description($('Add resource-extension-parameter-values in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionParameterValues" : {\r\n             "key":"",\r\n             "type":"",\r\n             "value":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--key <key>', $('Add the key value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--value <value>', $('Add the value value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'key';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'value';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete vm-image-input
  var catparametersCreateDeploymentVirtualMachineVMImageInput1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineVMImageInput1 = catparametersCreateDeploymentVirtualMachineVMImageInput1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineVMImageInput1 = parametersCreateDeploymentVirtualMachineVMImageInput1.category('vm-image-input')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineVMImageInput1.command('delete')
  .description($('Remove vm-image-input in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vMImageInput" : {\r\n             "dataDiskConfigurations":[\r\n               {\r\n                 "diskName":"",\r\n                 "resizedSizeInGB":null\r\n               }\r\n             ],\r\n             "oSDiskConfiguration":{\r\n               "resizedSizeInGB":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--data-disk-configurations', $('Remove the data-disk-configurations value.'))
  .option('--os-disk-configuration', $('Remove the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/vMImageInput';
    var anySubItem = false || options.dataDiskConfigurations || options.oSDiskConfiguration;
    if (anySubItem) {
      var subItemPath = null;
      if (options.dataDiskConfigurations) {
        subItemPath = options.path + '/dataDiskConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSDiskConfiguration) {
        subItemPath = options.path + '/oSDiskConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add vm-image-input
  var catparametersCreateDeploymentVirtualMachineVMImageInput2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineVMImageInput2 = catparametersCreateDeploymentVirtualMachineVMImageInput2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineVMImageInput2 = parametersCreateDeploymentVirtualMachineVMImageInput2.category('vm-image-input')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineVMImageInput2.command('add')
  .description($('Add vm-image-input in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vMImageInput" : {\r\n             "dataDiskConfigurations":[\r\n               {\r\n                 "diskName":"",\r\n                 "resizedSizeInGB":null\r\n               }\r\n             ],\r\n             "oSDiskConfiguration":{\r\n               "resizedSizeInGB":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Add the data-disk-configurations value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Add the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/vMImageInput' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/vMImageInput' + '/' + 'dataDiskConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/vMImageInput' + '/' + 'oSDiskConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set data-disk-configurations
  var catparametersCreateDeploymentVirtualMachineDataDiskConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDataDiskConfigurations0 = catparametersCreateDeploymentVirtualMachineDataDiskConfigurations0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineDataDiskConfigurations0 = parametersCreateDeploymentVirtualMachineDataDiskConfigurations0.category('data-disk-configurations')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineDataDiskConfigurations0.command('set')
  .description($('Set data-disk-configurations in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "diskName":"",\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--disk-name <diskName>', $('Set the disk-name value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/vMImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'diskName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.diskName) {
      if (options.parse && options.diskName) {
        options.diskName = JSON.parse(options.diskName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskName}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete data-disk-configurations
  var catparametersCreateDeploymentVirtualMachineDataDiskConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDataDiskConfigurations1 = catparametersCreateDeploymentVirtualMachineDataDiskConfigurations1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineDataDiskConfigurations1 = parametersCreateDeploymentVirtualMachineDataDiskConfigurations1.category('data-disk-configurations')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineDataDiskConfigurations1.command('delete')
  .description($('Remove data-disk-configurations in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "diskName":"",\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--disk-name', $('Remove the disk-name value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/vMImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.diskName || options.resizedSizeInGB;
    if (anySubItem) {
      var subItemPath = null;
      if (options.diskName) {
        subItemPath = options.path + '/diskName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add data-disk-configurations
  var catparametersCreateDeploymentVirtualMachineDataDiskConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineDataDiskConfigurations2 = catparametersCreateDeploymentVirtualMachineDataDiskConfigurations2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineDataDiskConfigurations2 = parametersCreateDeploymentVirtualMachineDataDiskConfigurations2.category('data-disk-configurations')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineDataDiskConfigurations2.command('add')
  .description($('Add data-disk-configurations in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "diskName":"",\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--disk-name <diskName>', $('Add the disk-name value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/vMImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/vMImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'diskName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.diskName) {
      if (options.parse && options.diskName) {
        options.diskName = JSON.parse(options.diskName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/vMImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters set os-disk-configuration
  var catparametersCreateDeploymentVirtualMachineOSDiskConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineOSDiskConfiguration0 = catparametersCreateDeploymentVirtualMachineOSDiskConfiguration0.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersCreateDeploymentVirtualMachineOSDiskConfiguration0 = parametersCreateDeploymentVirtualMachineOSDiskConfiguration0.category('os-disk-configuration')
  .description($('Commands to set components of virtual-machine in create-deployment-parameters file.'));
  setparametersCreateDeploymentVirtualMachineOSDiskConfiguration0.command('set')
  .description($('Set os-disk-configuration in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/vMImageInput/oSDiskConfiguration';
    var paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-deployment-parameters delete os-disk-configuration
  var catparametersCreateDeploymentVirtualMachineOSDiskConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineOSDiskConfiguration1 = catparametersCreateDeploymentVirtualMachineOSDiskConfiguration1.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersCreateDeploymentVirtualMachineOSDiskConfiguration1 = parametersCreateDeploymentVirtualMachineOSDiskConfiguration1.category('os-disk-configuration')
  .description($('Commands to delete components of virtual-machine in create-deployment-parameters file.'));
  deleteparametersCreateDeploymentVirtualMachineOSDiskConfiguration1.command('delete')
  .description($('Remove os-disk-configuration in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/vMImageInput/oSDiskConfiguration';
    var anySubItem = false || options.resizedSizeInGB;
    if (anySubItem) {
      var subItemPath = null;
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-deployment-parameters add os-disk-configuration
  var catparametersCreateDeploymentVirtualMachineOSDiskConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersCreateDeploymentVirtualMachineOSDiskConfiguration2 = catparametersCreateDeploymentVirtualMachineOSDiskConfiguration2.category('create-deployment-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersCreateDeploymentVirtualMachineOSDiskConfiguration2 = parametersCreateDeploymentVirtualMachineOSDiskConfiguration2.category('os-disk-configuration')
  .description($('Commands to add components of virtual-machine in create-deployment-parameters file.'));
  addparametersCreateDeploymentVirtualMachineOSDiskConfiguration2.command('add')
  .description($('Add os-disk-configuration in create-deployment-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "resizedSizeInGB":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/vMImageInput/oSDiskConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/vMImageInput/oSDiskConfiguration' + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachine Delete
  --service-name
  --deployment-name
  --virtual-machine-name
  --delete-from-storage
*/
  var virtualMachineDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineDelete.command('delete [service-name] [deployment-name] [virtual-machine-name]')
  .description($('The Delete Role operation deletes the specified virtual machine. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157184.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <virtual-machine-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, virtualMachineName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var deleteFromStorageFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(deleteFromStorageFileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.verbose('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachine.deleteMethod(serviceName, deploymentName, virtualMachineName, deleteFromStorage, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachine Get
  --service-name
  --deployment-name
  --virtual-machine-name
*/
  var virtualMachineGet = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineGet.command('get [service-name] [deployment-name] [virtual-machine-name]')
  .description($('The Get Role operation retrieves information about the specified virtual machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157193.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <virtual-machine-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, virtualMachineName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachine.get(serviceName, deploymentName, virtualMachineName, _);
    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      display(cli, result);
    }
  });
/*
  VirtualMachine GetRemoteDesktopFile
  --service-name
  --deployment-name
  --virtual-machine-name
*/
  var virtualMachineGetRemoteDesktopFile = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineGetRemoteDesktopFile.command('get-remote-desktop-file [service-name] [deployment-name] [virtual-machine-name]')
  .description($('The Download RDP file operation retrieves the Remote Desktop Protocol configuration file from the specified virtual machine. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157183.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <virtual-machine-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, virtualMachineName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachine.getRemoteDesktopFile(serviceName, deploymentName, virtualMachineName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachine Restart
  --service-name
  --deployment-name
  --virtual-machine-name
*/
  var virtualMachineRestart = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineRestart.command('restart [service-name] [deployment-name] [virtual-machine-name]')
  .description($('The Restart role operation restarts the specified virtual machine. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <virtual-machine-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, virtualMachineName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachine.restart(serviceName, deploymentName, virtualMachineName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachine Shutdown
  --service-name
  --deployment-name
  --virtual-machine-name
  --parameters
=============================================
{
  "postShutdownAction":0
}
*/
  var virtualMachineShutdown = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineShutdown.command('shutdown [service-name] [deployment-name] [virtual-machine-name] [parameters]')
  .description($('The Shutdown Role operation shuts down the specified virtual machine.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157195.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <virtual-machine-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, virtualMachineName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachine.shutdown(serviceName, deploymentName, virtualMachineName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineShutdownshutdownParameters3 = virtualMachineShutdown.category('shutdown-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineShutdownshutdownParameters3.command('generate')
  .description($('Generate virtualMachineShutdown parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"postShutdownAction\":0}', _);
    var filePath = 'virtualMachineShutdown_shutdown.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"postShutdownAction\":0\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineShutdownshutdownParameters3.command('patch')
  .description($('Command to patch virtualMachineShutdown parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //shutdown-parameters delete virtual-machine-shutdown-parameters
  var catparametersShutdownVirtualMachineVirtualMachineShutdownParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownVirtualMachineVirtualMachineShutdownParameters1 = catparametersShutdownVirtualMachineVirtualMachineShutdownParameters1.category('shutdown-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersShutdownVirtualMachineVirtualMachineShutdownParameters1 = parametersShutdownVirtualMachineVirtualMachineShutdownParameters1.category('virtual-machine-shutdown-parameters')
  .description($('Commands to delete components of virtual-machine in shutdown-parameters file.'));
  deleteparametersShutdownVirtualMachineVirtualMachineShutdownParameters1.command('delete')
  .description($('Remove virtual-machine-shutdown-parameters in shutdown-parameters string or files, e.g. \r\n{\r\n  "postShutdownAction":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--post-shutdown-action', $('Remove the post-shutdown-action value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.postShutdownAction;
    if (anySubItem) {
      var subItemPath = null;
      if (options.postShutdownAction) {
        subItemPath = options.path + '/postShutdownAction';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //shutdown-parameters add virtual-machine-shutdown-parameters
  var catparametersShutdownVirtualMachineVirtualMachineShutdownParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownVirtualMachineVirtualMachineShutdownParameters2 = catparametersShutdownVirtualMachineVirtualMachineShutdownParameters2.category('shutdown-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersShutdownVirtualMachineVirtualMachineShutdownParameters2 = parametersShutdownVirtualMachineVirtualMachineShutdownParameters2.category('virtual-machine-shutdown-parameters')
  .description($('Commands to add components of virtual-machine in shutdown-parameters file.'));
  addparametersShutdownVirtualMachineVirtualMachineShutdownParameters2.command('add')
  .description($('Add virtual-machine-shutdown-parameters in shutdown-parameters string or files, e.g. \r\n{\r\n  "postShutdownAction":0\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--post-shutdown-action <postShutdownAction>', $('Add the post-shutdown-action value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'postShutdownAction';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.postShutdownAction) {
      if (options.parse && options.postShutdownAction) {
        options.postShutdownAction = JSON.parse(options.postShutdownAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postShutdownAction}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //shutdown-parameters delete post-shutdown-action
  var catparametersShutdownVirtualMachinePostShutdownAction1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownVirtualMachinePostShutdownAction1 = catparametersShutdownVirtualMachinePostShutdownAction1.category('shutdown-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersShutdownVirtualMachinePostShutdownAction1 = parametersShutdownVirtualMachinePostShutdownAction1.category('post-shutdown-action')
  .description($('Commands to delete components of virtual-machine in shutdown-parameters file.'));
  deleteparametersShutdownVirtualMachinePostShutdownAction1.command('delete')
  .description($('Remove post-shutdown-action in shutdown-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "postShutdownAction" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/postShutdownAction';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //shutdown-parameters add post-shutdown-action
  var catparametersShutdownVirtualMachinePostShutdownAction2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownVirtualMachinePostShutdownAction2 = catparametersShutdownVirtualMachinePostShutdownAction2.category('shutdown-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersShutdownVirtualMachinePostShutdownAction2 = parametersShutdownVirtualMachinePostShutdownAction2.category('post-shutdown-action')
  .description($('Commands to add components of virtual-machine in shutdown-parameters file.'));
  addparametersShutdownVirtualMachinePostShutdownAction2.command('add')
  .description($('Add post-shutdown-action in shutdown-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "postShutdownAction" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/postShutdownAction' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachine ShutdownRoles
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "postShutdownAction":null,
  "roles":[
    ""
  ]
}
*/
  var virtualMachineShutdownRoles = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineShutdownRoles.command('shutdown-roles [service-name] [deployment-name] [parameters]')
  .description($('The Shutdown Roles operation stops the specified set of virtual machines.'))
  .usage('[options] <service-name> <deployment-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachine.shutdownRoles(serviceName, deploymentName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineShutdownRolesshutdownRolesParameters2 = virtualMachineShutdownRoles.category('shutdown-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineShutdownRolesshutdownRolesParameters2.command('generate')
  .description($('Generate virtualMachineShutdownRoles parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"postShutdownAction\":null,\"roles\":[\"\"]}', _);
    var filePath = 'virtualMachineShutdownRoles_shutdownRoles.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"postShutdownAction\":null,\r\n\"roles\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineShutdownRolesshutdownRolesParameters2.command('patch')
  .description($('Command to patch virtualMachineShutdownRoles parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //shutdown-roles-parameters set virtual-machine-shutdown-roles-parameters
  var catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0 = catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0.category('shutdown-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0 = parametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0.category('virtual-machine-shutdown-roles-parameters')
  .description($('Commands to set components of virtual-machine in shutdown-roles-parameters file.'));
  setparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters0.command('set')
  .description($('Set virtual-machine-shutdown-roles-parameters in shutdown-roles-parameters string or files, e.g. \r\n{\r\n  "postShutdownAction":null,\r\n  "roles":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--post-shutdown-action <postShutdownAction>', $('Set the post-shutdown-action value.'))
  .option('--roles <roles>', $('Set the roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'postShutdownAction';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.postShutdownAction) {
      if (options.parse && options.postShutdownAction) {
        options.postShutdownAction = JSON.parse(options.postShutdownAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postShutdownAction}]);
    }
    paramPath = options.path + '/' + 'roles';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //shutdown-roles-parameters delete virtual-machine-shutdown-roles-parameters
  var catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1 = catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1.category('shutdown-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1 = parametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1.category('virtual-machine-shutdown-roles-parameters')
  .description($('Commands to delete components of virtual-machine in shutdown-roles-parameters file.'));
  deleteparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters1.command('delete')
  .description($('Remove virtual-machine-shutdown-roles-parameters in shutdown-roles-parameters string or files, e.g. \r\n{\r\n  "postShutdownAction":null,\r\n  "roles":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--post-shutdown-action', $('Remove the post-shutdown-action value.'))
  .option('--roles', $('Remove the roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.postShutdownAction || options.roles;
    if (anySubItem) {
      var subItemPath = null;
      if (options.postShutdownAction) {
        subItemPath = options.path + '/postShutdownAction';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roles) {
        subItemPath = options.path + '/roles';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //shutdown-roles-parameters add virtual-machine-shutdown-roles-parameters
  var catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters2 = catparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters2.category('shutdown-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters2 = parametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters2.category('virtual-machine-shutdown-roles-parameters')
  .description($('Commands to add components of virtual-machine in shutdown-roles-parameters file.'));
  addparametersShutdownRolesVirtualMachineVirtualMachineShutdownRolesParameters2.command('add')
  .description($('Add virtual-machine-shutdown-roles-parameters in shutdown-roles-parameters string or files, e.g. \r\n{\r\n  "postShutdownAction":null,\r\n  "roles":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--post-shutdown-action <postShutdownAction>', $('Add the post-shutdown-action value.'))
  .option('--roles <roles>', $('Add the roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'postShutdownAction';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.postShutdownAction) {
      if (options.parse && options.postShutdownAction) {
        options.postShutdownAction = JSON.parse(options.postShutdownAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postShutdownAction}]);
    }
    paramPath = '' + '/' + 'roles';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //shutdown-roles-parameters set roles
  var catparametersShutdownRolesVirtualMachineRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownRolesVirtualMachineRoles0 = catparametersShutdownRolesVirtualMachineRoles0.category('shutdown-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersShutdownRolesVirtualMachineRoles0 = parametersShutdownRolesVirtualMachineRoles0.category('roles')
  .description($('Commands to set components of virtual-machine in shutdown-roles-parameters file.'));
  setparametersShutdownRolesVirtualMachineRoles0.command('set')
  .description($('Set roles in shutdown-roles-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "roles" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //shutdown-roles-parameters delete roles
  var catparametersShutdownRolesVirtualMachineRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownRolesVirtualMachineRoles1 = catparametersShutdownRolesVirtualMachineRoles1.category('shutdown-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersShutdownRolesVirtualMachineRoles1 = parametersShutdownRolesVirtualMachineRoles1.category('roles')
  .description($('Commands to delete components of virtual-machine in shutdown-roles-parameters file.'));
  deleteparametersShutdownRolesVirtualMachineRoles1.command('delete')
  .description($('Remove roles in shutdown-roles-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "roles" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //shutdown-roles-parameters add roles
  var catparametersShutdownRolesVirtualMachineRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersShutdownRolesVirtualMachineRoles2 = catparametersShutdownRolesVirtualMachineRoles2.category('shutdown-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersShutdownRolesVirtualMachineRoles2 = parametersShutdownRolesVirtualMachineRoles2.category('roles')
  .description($('Commands to add components of virtual-machine in shutdown-roles-parameters file.'));
  addparametersShutdownRolesVirtualMachineRoles2.command('add')
  .description($('Add roles in shutdown-roles-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "roles" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachine Start
  --service-name
  --deployment-name
  --virtual-machine-name
*/
  var virtualMachineStart = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineStart.command('start [service-name] [deployment-name] [virtual-machine-name]')
  .description($('The Start Role operation starts the specified virtual machine. (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157189.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <virtual-machine-name>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, virtualMachineName, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachine.start(serviceName, deploymentName, virtualMachineName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachine StartRoles
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "roles":[
    ""
  ]
}
*/
  var virtualMachineStartRoles = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineStartRoles.command('start-roles [service-name] [deployment-name] [parameters]')
  .description($('The Start Roles operation starts the specified set of virtual machines.'))
  .usage('[options] <service-name> <deployment-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      var parametersValArr = parameters ? parameters.split(',') : [];
      cli.output.verbose('parameters : ' + parametersValArr);
      parametersObj = [];
      for (var item in parametersValArr) {
        parametersObj.push(parametersValArr[item]);
      }
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachine.startRoles(serviceName, deploymentName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineStartRolesstartRolesParameters2 = virtualMachineStartRoles.category('start-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineStartRolesstartRolesParameters2.command('generate')
  .description($('Generate virtualMachineStartRoles parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"roles\":[\"\"]}', _);
    var filePath = 'virtualMachineStartRoles_startRoles.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"roles\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineStartRolesstartRolesParameters2.command('patch')
  .description($('Command to patch virtualMachineStartRoles parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //start-roles-parameters set virtual-machine-start-roles-parameters
  var catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0 = catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0.category('start-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0 = parametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0.category('virtual-machine-start-roles-parameters')
  .description($('Commands to set components of virtual-machine in start-roles-parameters file.'));
  setparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters0.command('set')
  .description($('Set virtual-machine-start-roles-parameters in start-roles-parameters string or files, e.g. \r\n{\r\n  "roles":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--roles <roles>', $('Set the roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'roles';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //start-roles-parameters delete virtual-machine-start-roles-parameters
  var catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1 = catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1.category('start-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1 = parametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1.category('virtual-machine-start-roles-parameters')
  .description($('Commands to delete components of virtual-machine in start-roles-parameters file.'));
  deleteparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters1.command('delete')
  .description($('Remove virtual-machine-start-roles-parameters in start-roles-parameters string or files, e.g. \r\n{\r\n  "roles":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles', $('Remove the roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.roles;
    if (anySubItem) {
      var subItemPath = null;
      if (options.roles) {
        subItemPath = options.path + '/roles';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //start-roles-parameters add virtual-machine-start-roles-parameters
  var catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersStartRolesVirtualMachineVirtualMachineStartRolesParameters2 = catparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters2.category('start-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters2 = parametersStartRolesVirtualMachineVirtualMachineStartRolesParameters2.category('virtual-machine-start-roles-parameters')
  .description($('Commands to add components of virtual-machine in start-roles-parameters file.'));
  addparametersStartRolesVirtualMachineVirtualMachineStartRolesParameters2.command('add')
  .description($('Add virtual-machine-start-roles-parameters in start-roles-parameters string or files, e.g. \r\n{\r\n  "roles":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--roles <roles>', $('Add the roles value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'roles';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //start-roles-parameters set roles
  var catparametersStartRolesVirtualMachineRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersStartRolesVirtualMachineRoles0 = catparametersStartRolesVirtualMachineRoles0.category('start-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersStartRolesVirtualMachineRoles0 = parametersStartRolesVirtualMachineRoles0.category('roles')
  .description($('Commands to set components of virtual-machine in start-roles-parameters file.'));
  setparametersStartRolesVirtualMachineRoles0.command('set')
  .description($('Set roles in start-roles-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "roles" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //start-roles-parameters delete roles
  var catparametersStartRolesVirtualMachineRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersStartRolesVirtualMachineRoles1 = catparametersStartRolesVirtualMachineRoles1.category('start-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersStartRolesVirtualMachineRoles1 = parametersStartRolesVirtualMachineRoles1.category('roles')
  .description($('Commands to delete components of virtual-machine in start-roles-parameters file.'));
  deleteparametersStartRolesVirtualMachineRoles1.command('delete')
  .description($('Remove roles in start-roles-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "roles" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //start-roles-parameters add roles
  var catparametersStartRolesVirtualMachineRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersStartRolesVirtualMachineRoles2 = catparametersStartRolesVirtualMachineRoles2.category('start-roles-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersStartRolesVirtualMachineRoles2 = parametersStartRolesVirtualMachineRoles2.category('roles')
  .description($('Commands to add components of virtual-machine in start-roles-parameters file.'));
  addparametersStartRolesVirtualMachineRoles2.command('add')
  .description($('Add roles in start-roles-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "roles" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachine Update
  --service-name
  --deployment-name
  --virtual-machine-name
  --parameters
=============================================
{
  "availabilitySetName":"",
  "configurationSets":[
    {
      "additionalUnattendContent":{
        "unattendPasses":[
          {
            "passName":"",
            "unattendComponents":[
              {
                "componentName":"",
                "unattendComponentSettings":[
                  {
                    "content":"",
                    "settingName":""
                  }
                ]
              }
            ]
          }
        ]
      },
      "adminPassword":"",
      "adminUserName":"",
      "computerName":"",
      "configurationSetType":"",
      "customData":"",
      "disableSshPasswordAuthentication":null,
      "domainJoin":{
        "credentials":{
          "domain":"",
          "password":"",
          "userName":""
        },
        "domainToJoin":"",
        "ldapMachineObjectOU":"",
        "provisioning":{
          "accountData":""
        }
      },
      "enableAutomaticUpdates":null,
      "hostName":"",
      "inputEndpoints":[
        {
          "enableDirectServerReturn":null,
          "endpointAcl":{
            "rules":[
              {
                "action":"",
                "description":"",
                "order":null,
                "remoteSubnet":""
              }
            ]
          },
          "idleTimeoutInMinutes":null,
          "loadBalancedEndpointSetName":"",
          "loadBalancerDistribution":"",
          "loadBalancerName":"",
          "loadBalancerProbe":{
            "intervalInSeconds":null,
            "path":"",
            "port":0,
            "protocol":0,
            "timeoutInSeconds":null
          },
          "localPort":null,
          "name":"",
          "port":null,
          "protocol":"",
          "virtualIPAddress":"",
          "virtualIPName":""
        }
      ],
      "iPForwarding":"",
      "networkInterfaces":[
        {
          "iPConfigurations":[
            {
              "staticVirtualNetworkIPAddress":"",
              "subnetName":""
            }
          ],
          "iPForwarding":"",
          "name":"",
          "networkSecurityGroup":""
        }
      ],
      "networkSecurityGroup":"",
      "publicIPs":[
        {
          "domainNameLabel":"",
          "idleTimeoutInMinutes":null,
          "name":""
        }
      ],
      "resetPasswordOnFirstLogon":null,
      "sshSettings":{
        "keyPairs":[
          {
            "fingerprint":"",
            "path":""
          }
        ],
        "publicKeys":[
          {
            "fingerprint":"",
            "path":""
          }
        ]
      },
      "staticVirtualNetworkIPAddress":"",
      "storedCertificateSettings":[
        {
          "storeName":"",
          "thumbprint":""
        }
      ],
      "subnetNames":[
        ""
      ],
      "timeZone":"",
      "userName":"",
      "userPassword":"",
      "windowsRemoteManagement":{
        "listeners":[
          {
            "certificateThumbprint":"",
            "listenerType":0
          }
        ]
      }
    }
  ],
  "dataVirtualHardDisks":[
    {
      "hostCaching":"",
      "iOType":"",
      "label":"",
      "logicalDiskSizeInGB":null,
      "logicalUnitNumber":null,
      "mediaLink":"",
      "name":"",
      "sourceMediaLink":""
    }
  ],
  "debugSettings":{
    "bootDiagnosticsEnabled":false,
    "consoleScreenshotBlobUri":"",
    "serialOutputBlobUri":""
  },
  "label":"",
  "oSVirtualHardDisk":{
    "hostCaching":"",
    "iOType":"",
    "label":"",
    "mediaLink":"",
    "name":"",
    "operatingSystem":"",
    "remoteSourceImageLink":"",
    "resizedSizeInGB":null,
    "sourceImageName":""
  },
  "provisionGuestAgent":null,
  "resourceExtensionReferences":[
    {
      "forceUpdate":null,
      "name":"",
      "publisher":"",
      "referenceName":"",
      "resourceExtensionParameterValues":[
        {
          "key":"",
          "type":"",
          "value":""
        }
      ],
      "state":"",
      "version":""
    }
  ],
  "roleName":"",
  "roleSize":""
}
*/
  var virtualMachineUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineUpdate.command('update [service-name] [deployment-name] [virtual-machine-name] [parameters]')
  .description($('The Update Role operation adds a virtual machine to an existing deployment.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157187.aspx for more information)'))
  .usage('[options] <service-name> <deployment-name> <virtual-machine-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, virtualMachineName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    if (!virtualMachineName) {
      virtualMachineName = cli.interaction.promptIfNotGiven($('virtual-machine-name : '), virtualMachineName, _);
    }

    cli.output.verbose('virtualMachineName = ' + virtualMachineName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachine.update(serviceName, deploymentName, virtualMachineName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineUpdateupdateParameters3 = virtualMachineUpdate.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineUpdateupdateParameters3.command('generate')
  .description($('Generate virtualMachineUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"availabilitySetName\":\"\",\"configurationSets\":[{\"additionalUnattendContent\":{\"unattendPasses\":[{\"passName\":\"\",\"unattendComponents\":[{\"componentName\":\"\",\"unattendComponentSettings\":[{\"content\":\"\",\"settingName\":\"\"}]}]}]},\"adminPassword\":\"\",\"adminUserName\":\"\",\"computerName\":\"\",\"configurationSetType\":\"\",\"customData\":\"\",\"disableSshPasswordAuthentication\":null,\"domainJoin\":{\"credentials\":{\"domain\":\"\",\"password\":\"\",\"userName\":\"\"},\"domainToJoin\":\"\",\"ldapMachineObjectOU\":\"\",\"provisioning\":{\"accountData\":\"\"}},\"enableAutomaticUpdates\":null,\"hostName\":\"\",\"inputEndpoints\":[{\"enableDirectServerReturn\":null,\"endpointAcl\":{\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}]},\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":0,\"protocol\":0,\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}],\"iPForwarding\":\"\",\"networkInterfaces\":[{\"iPConfigurations\":[{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\"}],\"iPForwarding\":\"\",\"name\":\"\",\"networkSecurityGroup\":\"\"}],\"networkSecurityGroup\":\"\",\"publicIPs\":[{\"domainNameLabel\":\"\",\"idleTimeoutInMinutes\":null,\"name\":\"\"}],\"resetPasswordOnFirstLogon\":null,\"sshSettings\":{\"keyPairs\":[{\"fingerprint\":\"\",\"path\":\"\"}],\"publicKeys\":[{\"fingerprint\":\"\",\"path\":\"\"}]},\"staticVirtualNetworkIPAddress\":\"\",\"storedCertificateSettings\":[{\"storeName\":\"\",\"thumbprint\":\"\"}],\"subnetNames\":[\"\"],\"timeZone\":\"\",\"userName\":\"\",\"userPassword\":\"\",\"windowsRemoteManagement\":{\"listeners\":[{\"certificateThumbprint\":\"\",\"listenerType\":0}]}}],\"dataVirtualHardDisks\":[{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":null,\"logicalUnitNumber\":null,\"mediaLink\":\"\",\"name\":\"\",\"sourceMediaLink\":\"\"}],\"debugSettings\":{\"bootDiagnosticsEnabled\":false,\"consoleScreenshotBlobUri\":\"\",\"serialOutputBlobUri\":\"\"},\"label\":\"\",\"oSVirtualHardDisk\":{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"mediaLink\":\"\",\"name\":\"\",\"operatingSystem\":\"\",\"remoteSourceImageLink\":\"\",\"resizedSizeInGB\":null,\"sourceImageName\":\"\"},\"provisionGuestAgent\":null,\"resourceExtensionReferences\":[{\"forceUpdate\":null,\"name\":\"\",\"publisher\":\"\",\"referenceName\":\"\",\"resourceExtensionParameterValues\":[{\"key\":\"\",\"type\":\"\",\"value\":\"\"}],\"state\":\"\",\"version\":\"\"}],\"roleName\":\"\",\"roleSize\":\"\"}', _);
    var filePath = 'virtualMachineUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"availabilitySetName\":\"\",\r\n\"configurationSets\":[\r\n{\r\n\"additionalUnattendContent\":{\r\n\"unattendPasses\":[\r\n{\r\n\"passName\":\"\",\r\n\"unattendComponents\":[\r\n{\r\n\"componentName\":\"\",\r\n\"unattendComponentSettings\":[\r\n{\r\n\"content\":\"\",\r\n\"settingName\":\"\"\r\n}\r\n]\r\n}\r\n]\r\n}\r\n]\r\n},\r\n\"adminPassword\":\"\",\r\n\"adminUserName\":\"\",\r\n\"computerName\":\"\",\r\n\"configurationSetType\":\"\",\r\n\"customData\":\"\",\r\n\"disableSshPasswordAuthentication\":null,\r\n\"domainJoin\":{\r\n\"credentials\":{\r\n\"domain\":\"\",\r\n\"password\":\"\",\r\n\"userName\":\"\"\r\n},\r\n\"domainToJoin\":\"\",\r\n\"ldapMachineObjectOU\":\"\",\r\n\"provisioning\":{\r\n\"accountData\":\"\"\r\n}\r\n},\r\n\"enableAutomaticUpdates\":null,\r\n\"hostName\":\"\",\r\n\"inputEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"endpointAcl\":{\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n]\r\n},\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":0,\r\n\"protocol\":0,\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"networkInterfaces\":[\r\n{\r\n\"iPConfigurations\":[\r\n{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"name\":\"\",\r\n\"networkSecurityGroup\":\"\"\r\n}\r\n],\r\n\"networkSecurityGroup\":\"\",\r\n\"publicIPs\":[\r\n{\r\n\"domainNameLabel\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"resetPasswordOnFirstLogon\":null,\r\n\"sshSettings\":{\r\n\"keyPairs\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n],\r\n\"publicKeys\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n]\r\n},\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"storedCertificateSettings\":[\r\n{\r\n\"storeName\":\"\",\r\n\"thumbprint\":\"\"\r\n}\r\n],\r\n\"subnetNames\":[\r\n\"\"\r\n],\r\n\"timeZone\":\"\",\r\n\"userName\":\"\",\r\n\"userPassword\":\"\",\r\n\"windowsRemoteManagement\":{\r\n\"listeners\":[\r\n{\r\n\"certificateThumbprint\":\"\",\r\n\"listenerType\":0\r\n}\r\n]\r\n}\r\n}\r\n],\r\n\"dataVirtualHardDisks\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":null,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"sourceMediaLink\":\"\"\r\n}\r\n],\r\n\"debugSettings\":{\r\n\"bootDiagnosticsEnabled\":false,\r\n\"consoleScreenshotBlobUri\":\"\",\r\n\"serialOutputBlobUri\":\"\"\r\n},\r\n\"label\":\"\",\r\n\"oSVirtualHardDisk\":{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystem\":\"\",\r\n\"remoteSourceImageLink\":\"\",\r\n\"resizedSizeInGB\":null,\r\n\"sourceImageName\":\"\"\r\n},\r\n\"provisionGuestAgent\":null,\r\n\"resourceExtensionReferences\":[\r\n{\r\n\"forceUpdate\":null,\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"referenceName\":\"\",\r\n\"resourceExtensionParameterValues\":[\r\n{\r\n\"key\":\"\",\r\n\"type\":\"\",\r\n\"value\":\"\"\r\n}\r\n],\r\n\"state\":\"\",\r\n\"version\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\",\r\n\"roleSize\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineUpdateupdateParameters3.command('patch')
  .description($('Command to patch virtualMachineUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set virtual-machine-update-parameters
  var catparametersUpdateVirtualMachineVirtualMachineUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineVirtualMachineUpdateParameters0 = catparametersUpdateVirtualMachineVirtualMachineUpdateParameters0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineVirtualMachineUpdateParameters0 = parametersUpdateVirtualMachineVirtualMachineUpdateParameters0.category('virtual-machine-update-parameters')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineVirtualMachineUpdateParameters0.command('set')
  .description($('Set virtual-machine-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "availabilitySetName":"",\r\n  "configurationSets":[\r\n    {\r\n      "additionalUnattendContent":{\r\n        "unattendPasses":[\r\n          {\r\n            "passName":"",\r\n            "unattendComponents":[\r\n              {\r\n                "componentName":"",\r\n                "unattendComponentSettings":[\r\n                  {\r\n                    "content":"",\r\n                    "settingName":""\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      "adminPassword":"",\r\n      "adminUserName":"",\r\n      "computerName":"",\r\n      "configurationSetType":"",\r\n      "customData":"",\r\n      "disableSshPasswordAuthentication":null,\r\n      "domainJoin":{\r\n        "credentials":{\r\n          "domain":"",\r\n          "password":"",\r\n          "userName":""\r\n        },\r\n        "domainToJoin":"",\r\n        "ldapMachineObjectOU":"",\r\n        "provisioning":{\r\n          "accountData":""\r\n        }\r\n      },\r\n      "enableAutomaticUpdates":null,\r\n      "hostName":"",\r\n      "inputEndpoints":[\r\n        {\r\n          "enableDirectServerReturn":null,\r\n          "endpointAcl":{\r\n            "rules":[\r\n              {\r\n                "action":"",\r\n                "description":"",\r\n                "order":null,\r\n                "remoteSubnet":""\r\n              }\r\n            ]\r\n          },\r\n          "idleTimeoutInMinutes":null,\r\n          "loadBalancedEndpointSetName":"",\r\n          "loadBalancerDistribution":"",\r\n          "loadBalancerName":"",\r\n          "loadBalancerProbe":{\r\n            "intervalInSeconds":null,\r\n            "path":"",\r\n            "port":0,\r\n            "protocol":0,\r\n            "timeoutInSeconds":null\r\n          },\r\n          "localPort":null,\r\n          "name":"",\r\n          "port":null,\r\n          "protocol":"",\r\n          "virtualIPAddress":"",\r\n          "virtualIPName":""\r\n        }\r\n      ],\r\n      "iPForwarding":"",\r\n      "networkInterfaces":[\r\n        {\r\n          "iPConfigurations":[\r\n            {\r\n              "staticVirtualNetworkIPAddress":"",\r\n              "subnetName":""\r\n            }\r\n          ],\r\n          "iPForwarding":"",\r\n          "name":"",\r\n          "networkSecurityGroup":""\r\n        }\r\n      ],\r\n      "networkSecurityGroup":"",\r\n      "publicIPs":[\r\n        {\r\n          "domainNameLabel":"",\r\n          "idleTimeoutInMinutes":null,\r\n          "name":""\r\n        }\r\n      ],\r\n      "resetPasswordOnFirstLogon":null,\r\n      "sshSettings":{\r\n        "keyPairs":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ],\r\n        "publicKeys":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ]\r\n      },\r\n      "staticVirtualNetworkIPAddress":"",\r\n      "storedCertificateSettings":[\r\n        {\r\n          "storeName":"",\r\n          "thumbprint":""\r\n        }\r\n      ],\r\n      "subnetNames":[\r\n        ""\r\n      ],\r\n      "timeZone":"",\r\n      "userName":"",\r\n      "userPassword":"",\r\n      "windowsRemoteManagement":{\r\n        "listeners":[\r\n          {\r\n            "certificateThumbprint":"",\r\n            "listenerType":0\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  "dataVirtualHardDisks":[\r\n    {\r\n      "hostCaching":"",\r\n      "iOType":"",\r\n      "label":"",\r\n      "logicalDiskSizeInGB":null,\r\n      "logicalUnitNumber":null,\r\n      "mediaLink":"",\r\n      "name":"",\r\n      "sourceMediaLink":""\r\n    }\r\n  ],\r\n  "debugSettings":{\r\n    "bootDiagnosticsEnabled":false,\r\n    "consoleScreenshotBlobUri":"",\r\n    "serialOutputBlobUri":""\r\n  },\r\n  "label":"",\r\n  "oSVirtualHardDisk":{\r\n    "hostCaching":"",\r\n    "iOType":"",\r\n    "label":"",\r\n    "mediaLink":"",\r\n    "name":"",\r\n    "operatingSystem":"",\r\n    "remoteSourceImageLink":"",\r\n    "resizedSizeInGB":null,\r\n    "sourceImageName":""\r\n  },\r\n  "provisionGuestAgent":null,\r\n  "resourceExtensionReferences":[\r\n    {\r\n      "forceUpdate":null,\r\n      "name":"",\r\n      "publisher":"",\r\n      "referenceName":"",\r\n      "resourceExtensionParameterValues":[\r\n        {\r\n          "key":"",\r\n          "type":"",\r\n          "value":""\r\n        }\r\n      ],\r\n      "state":"",\r\n      "version":""\r\n    }\r\n  ],\r\n  "roleName":"",\r\n  "roleSize":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--availability-set-name <availabilitySetName>', $('Set the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Set the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Set the data-virtual-hard-disks value.'))
  .option('--debug-settings <debugSettings>', $('Set the debug-settings value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Set the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Set the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Set the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .option('--role-size <roleSize>', $('Set the role-size value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'availabilitySetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = options.path + '/' + 'configurationSets';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = options.path + '/' + 'dataVirtualHardDisks';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = options.path + '/' + 'debugSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.debugSettings) {
      if (options.parse && options.debugSettings) {
        options.debugSettings = JSON.parse(options.debugSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.debugSettings}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'oSVirtualHardDisk';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = options.path + '/' + 'provisionGuestAgent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionReferences';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = options.path + '/' + 'roleSize';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete virtual-machine-update-parameters
  var catparametersUpdateVirtualMachineVirtualMachineUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineVirtualMachineUpdateParameters1 = catparametersUpdateVirtualMachineVirtualMachineUpdateParameters1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineVirtualMachineUpdateParameters1 = parametersUpdateVirtualMachineVirtualMachineUpdateParameters1.category('virtual-machine-update-parameters')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineVirtualMachineUpdateParameters1.command('delete')
  .description($('Remove virtual-machine-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "availabilitySetName":"",\r\n  "configurationSets":[\r\n    {\r\n      "additionalUnattendContent":{\r\n        "unattendPasses":[\r\n          {\r\n            "passName":"",\r\n            "unattendComponents":[\r\n              {\r\n                "componentName":"",\r\n                "unattendComponentSettings":[\r\n                  {\r\n                    "content":"",\r\n                    "settingName":""\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      "adminPassword":"",\r\n      "adminUserName":"",\r\n      "computerName":"",\r\n      "configurationSetType":"",\r\n      "customData":"",\r\n      "disableSshPasswordAuthentication":null,\r\n      "domainJoin":{\r\n        "credentials":{\r\n          "domain":"",\r\n          "password":"",\r\n          "userName":""\r\n        },\r\n        "domainToJoin":"",\r\n        "ldapMachineObjectOU":"",\r\n        "provisioning":{\r\n          "accountData":""\r\n        }\r\n      },\r\n      "enableAutomaticUpdates":null,\r\n      "hostName":"",\r\n      "inputEndpoints":[\r\n        {\r\n          "enableDirectServerReturn":null,\r\n          "endpointAcl":{\r\n            "rules":[\r\n              {\r\n                "action":"",\r\n                "description":"",\r\n                "order":null,\r\n                "remoteSubnet":""\r\n              }\r\n            ]\r\n          },\r\n          "idleTimeoutInMinutes":null,\r\n          "loadBalancedEndpointSetName":"",\r\n          "loadBalancerDistribution":"",\r\n          "loadBalancerName":"",\r\n          "loadBalancerProbe":{\r\n            "intervalInSeconds":null,\r\n            "path":"",\r\n            "port":0,\r\n            "protocol":0,\r\n            "timeoutInSeconds":null\r\n          },\r\n          "localPort":null,\r\n          "name":"",\r\n          "port":null,\r\n          "protocol":"",\r\n          "virtualIPAddress":"",\r\n          "virtualIPName":""\r\n        }\r\n      ],\r\n      "iPForwarding":"",\r\n      "networkInterfaces":[\r\n        {\r\n          "iPConfigurations":[\r\n            {\r\n              "staticVirtualNetworkIPAddress":"",\r\n              "subnetName":""\r\n            }\r\n          ],\r\n          "iPForwarding":"",\r\n          "name":"",\r\n          "networkSecurityGroup":""\r\n        }\r\n      ],\r\n      "networkSecurityGroup":"",\r\n      "publicIPs":[\r\n        {\r\n          "domainNameLabel":"",\r\n          "idleTimeoutInMinutes":null,\r\n          "name":""\r\n        }\r\n      ],\r\n      "resetPasswordOnFirstLogon":null,\r\n      "sshSettings":{\r\n        "keyPairs":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ],\r\n        "publicKeys":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ]\r\n      },\r\n      "staticVirtualNetworkIPAddress":"",\r\n      "storedCertificateSettings":[\r\n        {\r\n          "storeName":"",\r\n          "thumbprint":""\r\n        }\r\n      ],\r\n      "subnetNames":[\r\n        ""\r\n      ],\r\n      "timeZone":"",\r\n      "userName":"",\r\n      "userPassword":"",\r\n      "windowsRemoteManagement":{\r\n        "listeners":[\r\n          {\r\n            "certificateThumbprint":"",\r\n            "listenerType":0\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  "dataVirtualHardDisks":[\r\n    {\r\n      "hostCaching":"",\r\n      "iOType":"",\r\n      "label":"",\r\n      "logicalDiskSizeInGB":null,\r\n      "logicalUnitNumber":null,\r\n      "mediaLink":"",\r\n      "name":"",\r\n      "sourceMediaLink":""\r\n    }\r\n  ],\r\n  "debugSettings":{\r\n    "bootDiagnosticsEnabled":false,\r\n    "consoleScreenshotBlobUri":"",\r\n    "serialOutputBlobUri":""\r\n  },\r\n  "label":"",\r\n  "oSVirtualHardDisk":{\r\n    "hostCaching":"",\r\n    "iOType":"",\r\n    "label":"",\r\n    "mediaLink":"",\r\n    "name":"",\r\n    "operatingSystem":"",\r\n    "remoteSourceImageLink":"",\r\n    "resizedSizeInGB":null,\r\n    "sourceImageName":""\r\n  },\r\n  "provisionGuestAgent":null,\r\n  "resourceExtensionReferences":[\r\n    {\r\n      "forceUpdate":null,\r\n      "name":"",\r\n      "publisher":"",\r\n      "referenceName":"",\r\n      "resourceExtensionParameterValues":[\r\n        {\r\n          "key":"",\r\n          "type":"",\r\n          "value":""\r\n        }\r\n      ],\r\n      "state":"",\r\n      "version":""\r\n    }\r\n  ],\r\n  "roleName":"",\r\n  "roleSize":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--availability-set-name', $('Remove the availability-set-name value.'))
  .option('--configuration-sets', $('Remove the configuration-sets value.'))
  .option('--data-virtual-hard-disks', $('Remove the data-virtual-hard-disks value.'))
  .option('--debug-settings', $('Remove the debug-settings value.'))
  .option('--label', $('Remove the label value.'))
  .option('--os-virtual-hard-disk', $('Remove the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent', $('Remove the provision-guest-agent value.'))
  .option('--resource-extension-references', $('Remove the resource-extension-references value.'))
  .option('--role-name', $('Remove the role-name value.'))
  .option('--role-size', $('Remove the role-size value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.availabilitySetName || options.configurationSets || options.dataVirtualHardDisks || options.debugSettings || options.label || options.oSVirtualHardDisk || options.provisionGuestAgent || options.resourceExtensionReferences || options.roleName || options.roleSize;
    if (anySubItem) {
      var subItemPath = null;
      if (options.availabilitySetName) {
        subItemPath = options.path + '/availabilitySetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSets) {
        subItemPath = options.path + '/configurationSets';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dataVirtualHardDisks) {
        subItemPath = options.path + '/dataVirtualHardDisks';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.debugSettings) {
        subItemPath = options.path + '/debugSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSVirtualHardDisk) {
        subItemPath = options.path + '/oSVirtualHardDisk';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisionGuestAgent) {
        subItemPath = options.path + '/provisionGuestAgent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionReferences) {
        subItemPath = options.path + '/resourceExtensionReferences';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleName) {
        subItemPath = options.path + '/roleName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.roleSize) {
        subItemPath = options.path + '/roleSize';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add virtual-machine-update-parameters
  var catparametersUpdateVirtualMachineVirtualMachineUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineVirtualMachineUpdateParameters2 = catparametersUpdateVirtualMachineVirtualMachineUpdateParameters2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineVirtualMachineUpdateParameters2 = parametersUpdateVirtualMachineVirtualMachineUpdateParameters2.category('virtual-machine-update-parameters')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineVirtualMachineUpdateParameters2.command('add')
  .description($('Add virtual-machine-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "availabilitySetName":"",\r\n  "configurationSets":[\r\n    {\r\n      "additionalUnattendContent":{\r\n        "unattendPasses":[\r\n          {\r\n            "passName":"",\r\n            "unattendComponents":[\r\n              {\r\n                "componentName":"",\r\n                "unattendComponentSettings":[\r\n                  {\r\n                    "content":"",\r\n                    "settingName":""\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      "adminPassword":"",\r\n      "adminUserName":"",\r\n      "computerName":"",\r\n      "configurationSetType":"",\r\n      "customData":"",\r\n      "disableSshPasswordAuthentication":null,\r\n      "domainJoin":{\r\n        "credentials":{\r\n          "domain":"",\r\n          "password":"",\r\n          "userName":""\r\n        },\r\n        "domainToJoin":"",\r\n        "ldapMachineObjectOU":"",\r\n        "provisioning":{\r\n          "accountData":""\r\n        }\r\n      },\r\n      "enableAutomaticUpdates":null,\r\n      "hostName":"",\r\n      "inputEndpoints":[\r\n        {\r\n          "enableDirectServerReturn":null,\r\n          "endpointAcl":{\r\n            "rules":[\r\n              {\r\n                "action":"",\r\n                "description":"",\r\n                "order":null,\r\n                "remoteSubnet":""\r\n              }\r\n            ]\r\n          },\r\n          "idleTimeoutInMinutes":null,\r\n          "loadBalancedEndpointSetName":"",\r\n          "loadBalancerDistribution":"",\r\n          "loadBalancerName":"",\r\n          "loadBalancerProbe":{\r\n            "intervalInSeconds":null,\r\n            "path":"",\r\n            "port":0,\r\n            "protocol":0,\r\n            "timeoutInSeconds":null\r\n          },\r\n          "localPort":null,\r\n          "name":"",\r\n          "port":null,\r\n          "protocol":"",\r\n          "virtualIPAddress":"",\r\n          "virtualIPName":""\r\n        }\r\n      ],\r\n      "iPForwarding":"",\r\n      "networkInterfaces":[\r\n        {\r\n          "iPConfigurations":[\r\n            {\r\n              "staticVirtualNetworkIPAddress":"",\r\n              "subnetName":""\r\n            }\r\n          ],\r\n          "iPForwarding":"",\r\n          "name":"",\r\n          "networkSecurityGroup":""\r\n        }\r\n      ],\r\n      "networkSecurityGroup":"",\r\n      "publicIPs":[\r\n        {\r\n          "domainNameLabel":"",\r\n          "idleTimeoutInMinutes":null,\r\n          "name":""\r\n        }\r\n      ],\r\n      "resetPasswordOnFirstLogon":null,\r\n      "sshSettings":{\r\n        "keyPairs":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ],\r\n        "publicKeys":[\r\n          {\r\n            "fingerprint":"",\r\n            "path":""\r\n          }\r\n        ]\r\n      },\r\n      "staticVirtualNetworkIPAddress":"",\r\n      "storedCertificateSettings":[\r\n        {\r\n          "storeName":"",\r\n          "thumbprint":""\r\n        }\r\n      ],\r\n      "subnetNames":[\r\n        ""\r\n      ],\r\n      "timeZone":"",\r\n      "userName":"",\r\n      "userPassword":"",\r\n      "windowsRemoteManagement":{\r\n        "listeners":[\r\n          {\r\n            "certificateThumbprint":"",\r\n            "listenerType":0\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  "dataVirtualHardDisks":[\r\n    {\r\n      "hostCaching":"",\r\n      "iOType":"",\r\n      "label":"",\r\n      "logicalDiskSizeInGB":null,\r\n      "logicalUnitNumber":null,\r\n      "mediaLink":"",\r\n      "name":"",\r\n      "sourceMediaLink":""\r\n    }\r\n  ],\r\n  "debugSettings":{\r\n    "bootDiagnosticsEnabled":false,\r\n    "consoleScreenshotBlobUri":"",\r\n    "serialOutputBlobUri":""\r\n  },\r\n  "label":"",\r\n  "oSVirtualHardDisk":{\r\n    "hostCaching":"",\r\n    "iOType":"",\r\n    "label":"",\r\n    "mediaLink":"",\r\n    "name":"",\r\n    "operatingSystem":"",\r\n    "remoteSourceImageLink":"",\r\n    "resizedSizeInGB":null,\r\n    "sourceImageName":""\r\n  },\r\n  "provisionGuestAgent":null,\r\n  "resourceExtensionReferences":[\r\n    {\r\n      "forceUpdate":null,\r\n      "name":"",\r\n      "publisher":"",\r\n      "referenceName":"",\r\n      "resourceExtensionParameterValues":[\r\n        {\r\n          "key":"",\r\n          "type":"",\r\n          "value":""\r\n        }\r\n      ],\r\n      "state":"",\r\n      "version":""\r\n    }\r\n  ],\r\n  "roleName":"",\r\n  "roleSize":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--availability-set-name <availabilitySetName>', $('Add the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Add the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Add the data-virtual-hard-disks value.'))
  .option('--debug-settings <debugSettings>', $('Add the debug-settings value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Add the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Add the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Add the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .option('--role-size <roleSize>', $('Add the role-size value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'availabilitySetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = '' + '/' + 'configurationSets';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = '' + '/' + 'dataVirtualHardDisks';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = '' + '/' + 'debugSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.debugSettings) {
      if (options.parse && options.debugSettings) {
        options.debugSettings = JSON.parse(options.debugSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.debugSettings}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'oSVirtualHardDisk';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = '' + '/' + 'provisionGuestAgent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = '' + '/' + 'resourceExtensionReferences';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = '' + '/' + 'roleName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = '' + '/' + 'roleSize';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set configuration-sets
  var catparametersUpdateVirtualMachineConfigurationSets0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineConfigurationSets0 = catparametersUpdateVirtualMachineConfigurationSets0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineConfigurationSets0 = parametersUpdateVirtualMachineConfigurationSets0.category('configuration-sets')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineConfigurationSets0.command('set')
  .description($('Set configuration-sets in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "configurationSets" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":0,\r\n                   "protocol":0,\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":0\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--additional-unattend-content <additionalUnattendContent>', $('Set the additional-unattend-content value.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Set the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Set the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Set the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Set the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Set the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Set the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Set the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Set the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Set the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Set the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Set the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .option('--user-password <userPassword>', $('Set the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Set the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'additionalUnattendContent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.additionalUnattendContent) {
      if (options.parse && options.additionalUnattendContent) {
        options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContent}]);
    }
    paramPath = options.path + '/' + 'adminPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'adminUserName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = options.path + '/' + 'computerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = options.path + '/' + 'configurationSetType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = options.path + '/' + 'customData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'disableSshPasswordAuthentication';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'domainJoin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'hostName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = options.path + '/' + 'inputEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'networkInterfaces';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'publicIPs';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = options.path + '/' + 'resetPasswordOnFirstLogon';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = options.path + '/' + 'sshSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'storedCertificateSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = options.path + '/' + 'subnetNames';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = options.path + '/' + 'userPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = options.path + '/' + 'windowsRemoteManagement';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete configuration-sets
  var catparametersUpdateVirtualMachineConfigurationSets1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineConfigurationSets1 = catparametersUpdateVirtualMachineConfigurationSets1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineConfigurationSets1 = parametersUpdateVirtualMachineConfigurationSets1.category('configuration-sets')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineConfigurationSets1.command('delete')
  .description($('Remove configuration-sets in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "configurationSets" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":0,\r\n                   "protocol":0,\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":0\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--additional-unattend-content', $('Remove the additional-unattend-content value.'))
  .option('--admin-password', $('Remove the admin-password value.'))
  .option('--admin-user-name', $('Remove the admin-user-name value.'))
  .option('--computer-name', $('Remove the computer-name value.'))
  .option('--configuration-set-type', $('Remove the configuration-set-type value.'))
  .option('--custom-data', $('Remove the custom-data value.'))
  .option('--disable-ssh-password-authentication', $('Remove the disable-ssh-password-authentication value.'))
  .option('--domain-join', $('Remove the domain-join value.'))
  .option('--enable-automatic-updates', $('Remove the enable-automatic-updates value.'))
  .option('--host-name', $('Remove the host-name value.'))
  .option('--input-endpoints', $('Remove the input-endpoints value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--network-interfaces', $('Remove the network-interfaces value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .option('--public-ip', $('Remove the public-ip value.'))
  .option('--reset-password-on-first-logon', $('Remove the reset-password-on-first-logon value.'))
  .option('--ssh-settings', $('Remove the ssh-settings value.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings', $('Remove the stored-certificate-settings value.'))
  .option('--subnet-names', $('Remove the subnet-names value.'))
  .option('--time-zone', $('Remove the time-zone value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .option('--user-password', $('Remove the user-password value.'))
  .option('--windows-remote-management', $('Remove the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.additionalUnattendContent || options.adminPassword || options.adminUserName || options.computerName || options.configurationSetType || options.customData || options.disableSshPasswordAuthentication || options.domainJoin || options.enableAutomaticUpdates || options.hostName || options.inputEndpoints || options.ipForwarding || options.networkInterfaces || options.networkSecurityGroup || options.publicIPs || options.resetPasswordOnFirstLogon || options.sshSettings || options.staticVirtualNetworkIPAddress || options.storedCertificateSettings || options.subnetNames || options.timeZone || options.userName || options.userPassword || options.windowsRemoteManagement;
    if (anySubItem) {
      var subItemPath = null;
      if (options.additionalUnattendContent) {
        subItemPath = options.path + '/additionalUnattendContent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminPassword) {
        subItemPath = options.path + '/adminPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminUserName) {
        subItemPath = options.path + '/adminUserName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.computerName) {
        subItemPath = options.path + '/computerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.configurationSetType) {
        subItemPath = options.path + '/configurationSetType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.customData) {
        subItemPath = options.path + '/customData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.disableSshPasswordAuthentication) {
        subItemPath = options.path + '/disableSshPasswordAuthentication';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainJoin) {
        subItemPath = options.path + '/domainJoin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableAutomaticUpdates) {
        subItemPath = options.path + '/enableAutomaticUpdates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.hostName) {
        subItemPath = options.path + '/hostName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.inputEndpoints) {
        subItemPath = options.path + '/inputEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        subItemPath = options.path + '/ipForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkInterfaces) {
        subItemPath = options.path + '/networkInterfaces';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPs) {
        subItemPath = options.path + '/publicIPs';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resetPasswordOnFirstLogon) {
        subItemPath = options.path + '/resetPasswordOnFirstLogon';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sshSettings) {
        subItemPath = options.path + '/sshSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storedCertificateSettings) {
        subItemPath = options.path + '/storedCertificateSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetNames) {
        subItemPath = options.path + '/subnetNames';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeZone) {
        subItemPath = options.path + '/timeZone';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        subItemPath = options.path + '/userName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userPassword) {
        subItemPath = options.path + '/userPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.windowsRemoteManagement) {
        subItemPath = options.path + '/windowsRemoteManagement';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add configuration-sets
  var catparametersUpdateVirtualMachineConfigurationSets2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineConfigurationSets2 = catparametersUpdateVirtualMachineConfigurationSets2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineConfigurationSets2 = parametersUpdateVirtualMachineConfigurationSets2.category('configuration-sets')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineConfigurationSets2.command('add')
  .description($('Add configuration-sets in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "configurationSets" : {\r\n             "additionalUnattendContent":{\r\n               "unattendPasses":[\r\n                 {\r\n                   "passName":"",\r\n                   "unattendComponents":[\r\n                     {\r\n                       "componentName":"",\r\n                       "unattendComponentSettings":[\r\n                         {\r\n                           "content":"",\r\n                           "settingName":""\r\n                         }\r\n                       ]\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "adminPassword":"",\r\n             "adminUserName":"",\r\n             "computerName":"",\r\n             "configurationSetType":"",\r\n             "customData":"",\r\n             "disableSshPasswordAuthentication":null,\r\n             "domainJoin":{\r\n               "credentials":{\r\n                 "domain":"",\r\n                 "password":"",\r\n                 "userName":""\r\n               },\r\n               "domainToJoin":"",\r\n               "ldapMachineObjectOU":"",\r\n               "provisioning":{\r\n                 "accountData":""\r\n               }\r\n             },\r\n             "enableAutomaticUpdates":null,\r\n             "hostName":"",\r\n             "inputEndpoints":[\r\n               {\r\n                 "enableDirectServerReturn":null,\r\n                 "endpointAcl":{\r\n                   "rules":[\r\n                     {\r\n                       "action":"",\r\n                       "description":"",\r\n                       "order":null,\r\n                       "remoteSubnet":""\r\n                     }\r\n                   ]\r\n                 },\r\n                 "idleTimeoutInMinutes":null,\r\n                 "loadBalancedEndpointSetName":"",\r\n                 "loadBalancerDistribution":"",\r\n                 "loadBalancerName":"",\r\n                 "loadBalancerProbe":{\r\n                   "intervalInSeconds":null,\r\n                   "path":"",\r\n                   "port":0,\r\n                   "protocol":0,\r\n                   "timeoutInSeconds":null\r\n                 },\r\n                 "localPort":null,\r\n                 "name":"",\r\n                 "port":null,\r\n                 "protocol":"",\r\n                 "virtualIPAddress":"",\r\n                 "virtualIPName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "networkInterfaces":[\r\n               {\r\n                 "iPConfigurations":[\r\n                   {\r\n                     "staticVirtualNetworkIPAddress":"",\r\n                     "subnetName":""\r\n                   }\r\n                 ],\r\n                 "iPForwarding":"",\r\n                 "name":"",\r\n                 "networkSecurityGroup":""\r\n               }\r\n             ],\r\n             "networkSecurityGroup":"",\r\n             "publicIPs":[\r\n               {\r\n                 "domainNameLabel":"",\r\n                 "idleTimeoutInMinutes":null,\r\n                 "name":""\r\n               }\r\n             ],\r\n             "resetPasswordOnFirstLogon":null,\r\n             "sshSettings":{\r\n               "keyPairs":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ],\r\n               "publicKeys":[\r\n                 {\r\n                   "fingerprint":"",\r\n                   "path":""\r\n                 }\r\n               ]\r\n             },\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "storedCertificateSettings":[\r\n               {\r\n                 "storeName":"",\r\n                 "thumbprint":""\r\n               }\r\n             ],\r\n             "subnetNames":[\r\n               ""\r\n             ],\r\n             "timeZone":"",\r\n             "userName":"",\r\n             "userPassword":"",\r\n             "windowsRemoteManagement":{\r\n               "listeners":[\r\n                 {\r\n                   "certificateThumbprint":"",\r\n                   "listenerType":0\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--additional-unattend-content <additionalUnattendContent>', $('Add the additional-unattend-content value.'))
  .option('--admin-password <adminPassword>', $('Add the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Add the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Add the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Add the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Add the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Add the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Add the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Add the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Add the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Add the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Add the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Add the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Add the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Add the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Add the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Add the time-zone value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .option('--user-password <userPassword>', $('Add the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Add the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'additionalUnattendContent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.additionalUnattendContent) {
      if (options.parse && options.additionalUnattendContent) {
        options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContent}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminUserName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'computerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'configurationSetType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'customData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'disableSshPasswordAuthentication';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'domainJoin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'enableAutomaticUpdates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'hostName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'inputEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkInterfaces';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPs';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'resetPasswordOnFirstLogon';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'sshSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'storedCertificateSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetNames';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'timeZone';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'windowsRemoteManagement';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete additional-unattend-content
  var catparametersUpdateVirtualMachineAdditionalUnattendContent1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineAdditionalUnattendContent1 = catparametersUpdateVirtualMachineAdditionalUnattendContent1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineAdditionalUnattendContent1 = parametersUpdateVirtualMachineAdditionalUnattendContent1.category('additional-unattend-content')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineAdditionalUnattendContent1.command('delete')
  .description($('Remove additional-unattend-content in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "unattendPasses":[\r\n               {\r\n                 "passName":"",\r\n                 "unattendComponents":[\r\n                   {\r\n                     "componentName":"",\r\n                     "unattendComponentSettings":[\r\n                       {\r\n                         "content":"",\r\n                         "settingName":""\r\n                       }\r\n                     ]\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--unattend-passes', $('Remove the unattend-passes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent';
    var anySubItem = false || options.unattendPasses;
    if (anySubItem) {
      var subItemPath = null;
      if (options.unattendPasses) {
        subItemPath = options.path + '/unattendPasses';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add additional-unattend-content
  var catparametersUpdateVirtualMachineAdditionalUnattendContent2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineAdditionalUnattendContent2 = catparametersUpdateVirtualMachineAdditionalUnattendContent2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineAdditionalUnattendContent2 = parametersUpdateVirtualMachineAdditionalUnattendContent2.category('additional-unattend-content')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineAdditionalUnattendContent2.command('add')
  .description($('Add additional-unattend-content in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "unattendPasses":[\r\n               {\r\n                 "passName":"",\r\n                 "unattendComponents":[\r\n                   {\r\n                     "componentName":"",\r\n                     "unattendComponentSettings":[\r\n                       {\r\n                         "content":"",\r\n                         "settingName":""\r\n                       }\r\n                     ]\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--unattend-passes <unattendPasses>', $('Add the unattend-passes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent' + '/' + 'unattendPasses';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendPasses) {
      if (options.parse && options.unattendPasses) {
        options.unattendPasses = JSON.parse(options.unattendPasses);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendPasses}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set unattend-passes
  var catparametersUpdateVirtualMachineUnattendPasses0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineUnattendPasses0 = catparametersUpdateVirtualMachineUnattendPasses0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineUnattendPasses0 = parametersUpdateVirtualMachineUnattendPasses0.category('unattend-passes')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineUnattendPasses0.command('set')
  .description($('Set unattend-passes in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--pass-name <passName>', $('Set the pass-name value.'))
  .option('--unattend-components <unattendComponents>', $('Set the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'passName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.passName) {
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = options.path + '/' + 'unattendComponents';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendComponents) {
      if (options.parse && options.unattendComponents) {
        options.unattendComponents = JSON.parse(options.unattendComponents);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponents}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete unattend-passes
  var catparametersUpdateVirtualMachineUnattendPasses1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineUnattendPasses1 = catparametersUpdateVirtualMachineUnattendPasses1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineUnattendPasses1 = parametersUpdateVirtualMachineUnattendPasses1.category('unattend-passes')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineUnattendPasses1.command('delete')
  .description($('Remove unattend-passes in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--pass-name', $('Remove the pass-name value.'))
  .option('--unattend-components', $('Remove the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.passName || options.unattendComponents;
    if (anySubItem) {
      var subItemPath = null;
      if (options.passName) {
        subItemPath = options.path + '/passName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.unattendComponents) {
        subItemPath = options.path + '/unattendComponents';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add unattend-passes
  var catparametersUpdateVirtualMachineUnattendPasses2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineUnattendPasses2 = catparametersUpdateVirtualMachineUnattendPasses2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineUnattendPasses2 = parametersUpdateVirtualMachineUnattendPasses2.category('unattend-passes')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineUnattendPasses2.command('add')
  .description($('Add unattend-passes in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendPasses" : {\r\n             "passName":"",\r\n             "unattendComponents":[\r\n               {\r\n                 "componentName":"",\r\n                 "unattendComponentSettings":[\r\n                   {\r\n                     "content":"",\r\n                     "settingName":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--pass-name <passName>', $('Add the pass-name value.'))
  .option('--unattend-components <unattendComponents>', $('Add the unattend-components value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '') + '/' + 'passName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.passName) {
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses' + (options.index ? ('/' + options.index) : '') + '/' + 'unattendComponents';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendComponents) {
      if (options.parse && options.unattendComponents) {
        options.unattendComponents = JSON.parse(options.unattendComponents);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponents}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set unattend-components
  var catparametersUpdateVirtualMachineUnattendComponents0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineUnattendComponents0 = catparametersUpdateVirtualMachineUnattendComponents0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineUnattendComponents0 = parametersUpdateVirtualMachineUnattendComponents0.category('unattend-components')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineUnattendComponents0.command('set')
  .description($('Set unattend-components in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--component-name <componentName>', $('Set the component-name value.'))
  .option('--unattend-component-settings <unattendComponentSettings>', $('Set the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'componentName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.componentName) {
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = options.path + '/' + 'unattendComponentSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendComponentSettings) {
      if (options.parse && options.unattendComponentSettings) {
        options.unattendComponentSettings = JSON.parse(options.unattendComponentSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponentSettings}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete unattend-components
  var catparametersUpdateVirtualMachineUnattendComponents1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineUnattendComponents1 = catparametersUpdateVirtualMachineUnattendComponents1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineUnattendComponents1 = parametersUpdateVirtualMachineUnattendComponents1.category('unattend-components')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineUnattendComponents1.command('delete')
  .description($('Remove unattend-components in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--component-name', $('Remove the component-name value.'))
  .option('--unattend-component-settings', $('Remove the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.componentName || options.unattendComponentSettings;
    if (anySubItem) {
      var subItemPath = null;
      if (options.componentName) {
        subItemPath = options.path + '/componentName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.unattendComponentSettings) {
        subItemPath = options.path + '/unattendComponentSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add unattend-components
  var catparametersUpdateVirtualMachineUnattendComponents2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineUnattendComponents2 = catparametersUpdateVirtualMachineUnattendComponents2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineUnattendComponents2 = parametersUpdateVirtualMachineUnattendComponents2.category('unattend-components')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineUnattendComponents2.command('add')
  .description($('Add unattend-components in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponents" : {\r\n             "componentName":"",\r\n             "unattendComponentSettings":[\r\n               {\r\n                 "content":"",\r\n                 "settingName":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--component-name <componentName>', $('Add the component-name value.'))
  .option('--unattend-component-settings <unattendComponentSettings>', $('Add the unattend-component-settings value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '') + '/' + 'componentName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.componentName) {
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents' + (options.index ? ('/' + options.index) : '') + '/' + 'unattendComponentSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.unattendComponentSettings) {
      if (options.parse && options.unattendComponentSettings) {
        options.unattendComponentSettings = JSON.parse(options.unattendComponentSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.unattendComponentSettings}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set unattend-component-settings
  var catparametersUpdateVirtualMachineUnattendComponentSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineUnattendComponentSettings0 = catparametersUpdateVirtualMachineUnattendComponentSettings0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineUnattendComponentSettings0 = parametersUpdateVirtualMachineUnattendComponentSettings0.category('unattend-component-settings')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineUnattendComponentSettings0.command('set')
  .description($('Set unattend-component-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-components-index <unattend-components-index>', $('Indexer: unattend-components-index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--content <content>', $('Set the content value.'))
  .option('--setting-name <settingName>', $('Set the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'content';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.content) {
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    paramPath = options.path + '/' + 'settingName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.settingName) {
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete unattend-component-settings
  var catparametersUpdateVirtualMachineUnattendComponentSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineUnattendComponentSettings1 = catparametersUpdateVirtualMachineUnattendComponentSettings1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineUnattendComponentSettings1 = parametersUpdateVirtualMachineUnattendComponentSettings1.category('unattend-component-settings')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineUnattendComponentSettings1.command('delete')
  .description($('Remove unattend-component-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--unattend-components-index <unattend-components-index>', $('Indexer: unattend-components-index.'))
  .option('--unattend-passes-index <unattend-passes-index>', $('Indexer: unattend-passes-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--content', $('Remove the content value.'))
  .option('--setting-name', $('Remove the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.content || options.settingName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.content) {
        subItemPath = options.path + '/content';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.settingName) {
        subItemPath = options.path + '/settingName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add unattend-component-settings
  var catparametersUpdateVirtualMachineUnattendComponentSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineUnattendComponentSettings2 = catparametersUpdateVirtualMachineUnattendComponentSettings2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineUnattendComponentSettings2 = parametersUpdateVirtualMachineUnattendComponentSettings2.category('unattend-component-settings')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineUnattendComponentSettings2.command('add')
  .description($('Add unattend-component-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "unattendComponentSettings" : {\r\n             "content":"",\r\n             "settingName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--content <content>', $('Add the content value.'))
  .option('--setting-name <settingName>', $('Add the setting-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'content';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.content) {
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/additionalUnattendContent/unattendPasses/' + options.unattendPassesIndex + '/unattendComponents/' + options.unattendComponentsIndex + '/unattendComponentSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'settingName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.settingName) {
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set domain-join
  var catparametersUpdateVirtualMachineDomainJoin0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDomainJoin0 = catparametersUpdateVirtualMachineDomainJoin0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineDomainJoin0 = parametersUpdateVirtualMachineDomainJoin0.category('domain-join')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineDomainJoin0.command('set')
  .description($('Set domain-join in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--credentials <credentials>', $('Set the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Set the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Set the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Set the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var paramPath = options.path + '/' + 'credentials';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = options.path + '/' + 'domainToJoin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = options.path + '/' + 'ldapMachineObjectOU';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = options.path + '/' + 'provisioning';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete domain-join
  var catparametersUpdateVirtualMachineDomainJoin1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDomainJoin1 = catparametersUpdateVirtualMachineDomainJoin1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineDomainJoin1 = parametersUpdateVirtualMachineDomainJoin1.category('domain-join')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineDomainJoin1.command('delete')
  .description($('Remove domain-join in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--credentials', $('Remove the credentials value.'))
  .option('--domain-to-join', $('Remove the domain-to-join value.'))
  .option('--ldap-machine-object-o-u', $('Remove the ldap-machine-object-o-u value.'))
  .option('--provisioning', $('Remove the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var anySubItem = false || options.credentials || options.domainToJoin || options.ldapMachineObjectOU || options.provisioning;
    if (anySubItem) {
      var subItemPath = null;
      if (options.credentials) {
        subItemPath = options.path + '/credentials';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.domainToJoin) {
        subItemPath = options.path + '/domainToJoin';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ldapMachineObjectOU) {
        subItemPath = options.path + '/ldapMachineObjectOU';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioning) {
        subItemPath = options.path + '/provisioning';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add domain-join
  var catparametersUpdateVirtualMachineDomainJoin2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDomainJoin2 = catparametersUpdateVirtualMachineDomainJoin2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineDomainJoin2 = parametersUpdateVirtualMachineDomainJoin2.category('domain-join')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineDomainJoin2.command('add')
  .description($('Add domain-join in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "domainJoin" : {\r\n             "credentials":{\r\n               "domain":"",\r\n               "password":"",\r\n               "userName":""\r\n             },\r\n             "domainToJoin":"",\r\n             "ldapMachineObjectOU":"",\r\n             "provisioning":{\r\n               "accountData":""\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--credentials <credentials>', $('Add the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Add the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Add the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Add the provisioning value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'credentials';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'domainToJoin';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'ldapMachineObjectOU';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'provisioning';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set credentials
  var catparametersUpdateVirtualMachineCredentials0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineCredentials0 = catparametersUpdateVirtualMachineCredentials0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineCredentials0 = parametersUpdateVirtualMachineCredentials0.category('credentials')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineCredentials0.command('set')
  .description($('Set credentials in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain <domain>', $('Set the domain value.'))
  .option('--password <password>', $('Set the password value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var paramPath = options.path + '/' + 'domain';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = options.path + '/' + 'password';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete credentials
  var catparametersUpdateVirtualMachineCredentials1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineCredentials1 = catparametersUpdateVirtualMachineCredentials1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineCredentials1 = parametersUpdateVirtualMachineCredentials1.category('credentials')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineCredentials1.command('delete')
  .description($('Remove credentials in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain', $('Remove the domain value.'))
  .option('--password', $('Remove the password value.'))
  .option('--user-name', $('Remove the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var anySubItem = false || options.domain || options.password || options.userName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.domain) {
        subItemPath = options.path + '/domain';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.password) {
        subItemPath = options.path + '/password';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.userName) {
        subItemPath = options.path + '/userName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add credentials
  var catparametersUpdateVirtualMachineCredentials2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineCredentials2 = catparametersUpdateVirtualMachineCredentials2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineCredentials2 = parametersUpdateVirtualMachineCredentials2.category('credentials')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineCredentials2.command('add')
  .description($('Add credentials in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "credentials" : {\r\n             "domain":"",\r\n             "password":"",\r\n             "userName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain <domain>', $('Add the domain value.'))
  .option('--password <password>', $('Add the password value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'domain';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'password';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'userName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set provisioning
  var catparametersUpdateVirtualMachineProvisioning0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineProvisioning0 = catparametersUpdateVirtualMachineProvisioning0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineProvisioning0 = parametersUpdateVirtualMachineProvisioning0.category('provisioning')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineProvisioning0.command('set')
  .description($('Set provisioning in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--account-data <accountData>', $('Set the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var paramPath = options.path + '/' + 'accountData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete provisioning
  var catparametersUpdateVirtualMachineProvisioning1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineProvisioning1 = catparametersUpdateVirtualMachineProvisioning1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineProvisioning1 = parametersUpdateVirtualMachineProvisioning1.category('provisioning')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineProvisioning1.command('delete')
  .description($('Remove provisioning in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--account-data', $('Remove the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var anySubItem = false || options.accountData;
    if (anySubItem) {
      var subItemPath = null;
      if (options.accountData) {
        subItemPath = options.path + '/accountData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add provisioning
  var catparametersUpdateVirtualMachineProvisioning2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineProvisioning2 = catparametersUpdateVirtualMachineProvisioning2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineProvisioning2 = parametersUpdateVirtualMachineProvisioning2.category('provisioning')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineProvisioning2.command('add')
  .description($('Add provisioning in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "provisioning" : {\r\n             "accountData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--account-data <accountData>', $('Add the account-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + 'accountData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set input-endpoints
  var catparametersUpdateVirtualMachineInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineInputEndpoints0 = catparametersUpdateVirtualMachineInputEndpoints0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineInputEndpoints0 = parametersUpdateVirtualMachineInputEndpoints0.category('input-endpoints')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineInputEndpoints0.command('set')
  .description($('Set input-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":0,\r\n               "protocol":0,\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Set the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'endpointAcl';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete input-endpoints
  var catparametersUpdateVirtualMachineInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineInputEndpoints1 = catparametersUpdateVirtualMachineInputEndpoints1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineInputEndpoints1 = parametersUpdateVirtualMachineInputEndpoints1.category('input-endpoints')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineInputEndpoints1.command('delete')
  .description($('Remove input-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":0,\r\n               "protocol":0,\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--enable-direct-server-return', $('Remove the enable-direct-server-return value.'))
  .option('--endpoint-acl', $('Remove the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name', $('Remove the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution', $('Remove the load-balancer-distribution value.'))
  .option('--load-balancer-name', $('Remove the load-balancer-name value.'))
  .option('--load-balancer-probe', $('Remove the load-balancer-probe value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--virtual-ip-address', $('Remove the virtual-ip-address value.'))
  .option('--virtual-ip-name', $('Remove the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.enableDirectServerReturn || options.endpointAcl || options.idleTimeoutInMinutes || options.loadBalancedEndpointSetName || options.loadBalancerDistribution || options.loadBalancerName || options.loadBalancerProbe || options.localPort || options.name || options.port || options.protocol || options.virtualIPAddress || options.virtualIPName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.enableDirectServerReturn) {
        subItemPath = options.path + '/enableDirectServerReturn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.endpointAcl) {
        subItemPath = options.path + '/endpointAcl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancedEndpointSetName) {
        subItemPath = options.path + '/loadBalancedEndpointSetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerDistribution) {
        subItemPath = options.path + '/loadBalancerDistribution';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerName) {
        subItemPath = options.path + '/loadBalancerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerProbe) {
        subItemPath = options.path + '/loadBalancerProbe';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPAddress) {
        subItemPath = options.path + '/virtualIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPName) {
        subItemPath = options.path + '/virtualIPName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add input-endpoints
  var catparametersUpdateVirtualMachineInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineInputEndpoints2 = catparametersUpdateVirtualMachineInputEndpoints2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineInputEndpoints2 = parametersUpdateVirtualMachineInputEndpoints2.category('input-endpoints')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineInputEndpoints2.command('add')
  .description($('Add input-endpoints in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "inputEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "endpointAcl":{\r\n               "rules":[\r\n                 {\r\n                   "action":"",\r\n                   "description":"",\r\n                   "order":null,\r\n                   "remoteSubnet":""\r\n                 }\r\n               ]\r\n             },\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":0,\r\n               "protocol":0,\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Add the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Add the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Add the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Add the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Add the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Add the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Add the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Add the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'enableDirectServerReturn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'endpointAcl';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancedEndpointSetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerDistribution';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerProbe';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete endpoint-acl
  var catparametersUpdateVirtualMachineEndpointAcl1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineEndpointAcl1 = catparametersUpdateVirtualMachineEndpointAcl1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineEndpointAcl1 = parametersUpdateVirtualMachineEndpointAcl1.category('endpoint-acl')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineEndpointAcl1.command('delete')
  .description($('Remove endpoint-acl in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "endpointAcl" : {\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--rules', $('Remove the rules value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var anySubItem = false || options.rules;
    if (anySubItem) {
      var subItemPath = null;
      if (options.rules) {
        subItemPath = options.path + '/rules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add endpoint-acl
  var catparametersUpdateVirtualMachineEndpointAcl2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineEndpointAcl2 = catparametersUpdateVirtualMachineEndpointAcl2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineEndpointAcl2 = parametersUpdateVirtualMachineEndpointAcl2.category('endpoint-acl')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineEndpointAcl2.command('add')
  .description($('Add endpoint-acl in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "endpointAcl" : {\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--rules <rules>', $('Add the rules value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + 'rules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set rules
  var catparametersUpdateVirtualMachineRules0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineRules0 = catparametersUpdateVirtualMachineRules0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineRules0 = parametersUpdateVirtualMachineRules0.category('rules')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineRules0.command('set')
  .description($('Set rules in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete rules
  var catparametersUpdateVirtualMachineRules1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineRules1 = catparametersUpdateVirtualMachineRules1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineRules1 = parametersUpdateVirtualMachineRules1.category('rules')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineRules1.command('delete')
  .description($('Remove rules in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--action', $('Remove the action value.'))
  .option('--description', $('Remove the description value.'))
  .option('--order', $('Remove the order value.'))
  .option('--remote-subnet', $('Remove the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.action || options.description || options.order || options.remoteSubnet;
    if (anySubItem) {
      var subItemPath = null;
      if (options.action) {
        subItemPath = options.path + '/action';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.order) {
        subItemPath = options.path + '/order';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSubnet) {
        subItemPath = options.path + '/remoteSubnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add rules
  var catparametersUpdateVirtualMachineRules2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineRules2 = catparametersUpdateVirtualMachineRules2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineRules2 = parametersUpdateVirtualMachineRules2.category('rules')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineRules2.command('add')
  .description($('Add rules in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--action <action>', $('Add the action value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--order <order>', $('Add the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Add the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'action';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'order';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'remoteSubnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set load-balancer-probe
  var catparametersUpdateVirtualMachineLoadBalancerProbe0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineLoadBalancerProbe0 = catparametersUpdateVirtualMachineLoadBalancerProbe0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineLoadBalancerProbe0 = parametersUpdateVirtualMachineLoadBalancerProbe0.category('load-balancer-probe')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineLoadBalancerProbe0.command('set')
  .description($('Set load-balancer-probe in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":0,\r\n             "protocol":0,\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var paramPath = options.path + '/' + 'intervalInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete load-balancer-probe
  var catparametersUpdateVirtualMachineLoadBalancerProbe1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineLoadBalancerProbe1 = catparametersUpdateVirtualMachineLoadBalancerProbe1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineLoadBalancerProbe1 = parametersUpdateVirtualMachineLoadBalancerProbe1.category('load-balancer-probe')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineLoadBalancerProbe1.command('delete')
  .description($('Remove load-balancer-probe in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":0,\r\n             "protocol":0,\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--interval-in-seconds', $('Remove the interval-in-seconds value.'))
  .option('--path', $('Remove the path value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--timeout-in-seconds', $('Remove the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var anySubItem = false || options.intervalInSeconds || options.path || options.port || options.protocol || options.timeoutInSeconds;
    if (anySubItem) {
      var subItemPath = null;
      if (options.intervalInSeconds) {
        subItemPath = options.path + '/intervalInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeoutInSeconds) {
        subItemPath = options.path + '/timeoutInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add load-balancer-probe
  var catparametersUpdateVirtualMachineLoadBalancerProbe2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineLoadBalancerProbe2 = catparametersUpdateVirtualMachineLoadBalancerProbe2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineLoadBalancerProbe2 = parametersUpdateVirtualMachineLoadBalancerProbe2.category('load-balancer-probe')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineLoadBalancerProbe2.command('add')
  .description($('Add load-balancer-probe in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":0,\r\n             "protocol":0,\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Add the interval-in-seconds value.'))
  .option('--path <path>', $('Add the path value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Add the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'intervalInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'timeoutInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete protocol
  var catparametersUpdateVirtualMachineProtocol1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineProtocol1 = catparametersUpdateVirtualMachineProtocol1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineProtocol1 = parametersUpdateVirtualMachineProtocol1.category('protocol')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineProtocol1.command('delete')
  .description($('Remove protocol in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "protocol" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add protocol
  var catparametersUpdateVirtualMachineProtocol2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineProtocol2 = catparametersUpdateVirtualMachineProtocol2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineProtocol2 = parametersUpdateVirtualMachineProtocol2.category('protocol')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineProtocol2.command('add')
  .description($('Add protocol in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "protocol" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set network-interfaces
  var catparametersUpdateVirtualMachineNetworkInterfaces0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineNetworkInterfaces0 = catparametersUpdateVirtualMachineNetworkInterfaces0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineNetworkInterfaces0 = parametersUpdateVirtualMachineNetworkInterfaces0.category('network-interfaces')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineNetworkInterfaces0.command('set')
  .description($('Set network-interfaces in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete network-interfaces
  var catparametersUpdateVirtualMachineNetworkInterfaces1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineNetworkInterfaces1 = catparametersUpdateVirtualMachineNetworkInterfaces1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineNetworkInterfaces1 = parametersUpdateVirtualMachineNetworkInterfaces1.category('network-interfaces')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineNetworkInterfaces1.command('delete')
  .description($('Remove network-interfaces in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--ip-forwarding', $('Remove the ip-forwarding value.'))
  .option('--name', $('Remove the name value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.ipConfigurations || options.ipForwarding || options.name || options.networkSecurityGroup;
    if (anySubItem) {
      var subItemPath = null;
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipForwarding) {
        subItemPath = options.path + '/ipForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add network-interfaces
  var catparametersUpdateVirtualMachineNetworkInterfaces2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineNetworkInterfaces2 = catparametersUpdateVirtualMachineNetworkInterfaces2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineNetworkInterfaces2 = parametersUpdateVirtualMachineNetworkInterfaces2.category('network-interfaces')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineNetworkInterfaces2.command('add')
  .description($('Add network-interfaces in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "iPConfigurations":[\r\n               {\r\n                 "staticVirtualNetworkIPAddress":"",\r\n                 "subnetName":""\r\n               }\r\n             ],\r\n             "iPForwarding":"",\r\n             "name":"",\r\n             "networkSecurityGroup":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set ip-configurations
  var catparametersUpdateVirtualMachineIPConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineIPConfigurations0 = catparametersUpdateVirtualMachineIPConfigurations0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineIPConfigurations0 = parametersUpdateVirtualMachineIPConfigurations0.category('ip-configurations')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineIPConfigurations0.command('set')
  .description($('Set ip-configurations in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete ip-configurations
  var catparametersUpdateVirtualMachineIPConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineIPConfigurations1 = catparametersUpdateVirtualMachineIPConfigurations1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineIPConfigurations1 = parametersUpdateVirtualMachineIPConfigurations1.category('ip-configurations')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineIPConfigurations1.command('delete')
  .description($('Remove ip-configurations in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--static-virtual-network-ip-address', $('Remove the static-virtual-network-ip-address value.'))
  .option('--subnet-name', $('Remove the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.staticVirtualNetworkIPAddress || options.subnetName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.staticVirtualNetworkIPAddress) {
        subItemPath = options.path + '/staticVirtualNetworkIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnetName) {
        subItemPath = options.path + '/subnetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add ip-configurations
  var catparametersUpdateVirtualMachineIPConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineIPConfigurations2 = catparametersUpdateVirtualMachineIPConfigurations2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineIPConfigurations2 = parametersUpdateVirtualMachineIPConfigurations2.category('ip-configurations')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineIPConfigurations2.command('add')
  .description($('Add ip-configurations in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "staticVirtualNetworkIPAddress":"",\r\n             "subnetName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set public-ip
  var catparametersUpdateVirtualMachinePublicIPs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachinePublicIPs0 = catparametersUpdateVirtualMachinePublicIPs0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachinePublicIPs0 = parametersUpdateVirtualMachinePublicIPs0.category('public-ip')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachinePublicIPs0.command('set')
  .description($('Set public-ip in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain-name-label <domainNameLabel>', $('Set the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'domainNameLabel';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete public-ip
  var catparametersUpdateVirtualMachinePublicIPs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachinePublicIPs1 = catparametersUpdateVirtualMachinePublicIPs1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachinePublicIPs1 = parametersUpdateVirtualMachinePublicIPs1.category('public-ip')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachinePublicIPs1.command('delete')
  .description($('Remove public-ip in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain-name-label', $('Remove the domain-name-label value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.domainNameLabel || options.idleTimeoutInMinutes || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.domainNameLabel) {
        subItemPath = options.path + '/domainNameLabel';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add public-ip
  var catparametersUpdateVirtualMachinePublicIPs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachinePublicIPs2 = catparametersUpdateVirtualMachinePublicIPs2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachinePublicIPs2 = parametersUpdateVirtualMachinePublicIPs2.category('public-ip')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachinePublicIPs2.command('add')
  .description($('Add public-ip in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPs" : {\r\n             "domainNameLabel":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain-name-label <domainNameLabel>', $('Add the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'domainNameLabel';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete ssh-settings
  var catparametersUpdateVirtualMachineSshSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineSshSettings1 = catparametersUpdateVirtualMachineSshSettings1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineSshSettings1 = parametersUpdateVirtualMachineSshSettings1.category('ssh-settings')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineSshSettings1.command('delete')
  .description($('Remove ssh-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sshSettings" : {\r\n             "keyPairs":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ],\r\n             "publicKeys":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--key-pairs', $('Remove the key-pairs value.'))
  .option('--public-keys', $('Remove the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var anySubItem = false || options.keyPairs || options.publicKeys;
    if (anySubItem) {
      var subItemPath = null;
      if (options.keyPairs) {
        subItemPath = options.path + '/keyPairs';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicKeys) {
        subItemPath = options.path + '/publicKeys';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add ssh-settings
  var catparametersUpdateVirtualMachineSshSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineSshSettings2 = catparametersUpdateVirtualMachineSshSettings2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineSshSettings2 = parametersUpdateVirtualMachineSshSettings2.category('ssh-settings')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineSshSettings2.command('add')
  .description($('Add ssh-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sshSettings" : {\r\n             "keyPairs":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ],\r\n             "publicKeys":[\r\n               {\r\n                 "fingerprint":"",\r\n                 "path":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--key-pairs <keyPairs>', $('Add the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Add the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'keyPairs';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'publicKeys';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set key-pairs
  var catparametersUpdateVirtualMachineKeyPairs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineKeyPairs0 = catparametersUpdateVirtualMachineKeyPairs0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineKeyPairs0 = parametersUpdateVirtualMachineKeyPairs0.category('key-pairs')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineKeyPairs0.command('set')
  .description($('Set key-pairs in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete key-pairs
  var catparametersUpdateVirtualMachineKeyPairs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineKeyPairs1 = catparametersUpdateVirtualMachineKeyPairs1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineKeyPairs1 = parametersUpdateVirtualMachineKeyPairs1.category('key-pairs')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineKeyPairs1.command('delete')
  .description($('Remove key-pairs in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fingerprint) {
        subItemPath = options.path + '/fingerprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add key-pairs
  var catparametersUpdateVirtualMachineKeyPairs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineKeyPairs2 = catparametersUpdateVirtualMachineKeyPairs2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineKeyPairs2 = parametersUpdateVirtualMachineKeyPairs2.category('key-pairs')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineKeyPairs2.command('add')
  .description($('Add key-pairs in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "keyPairs" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set public-keys
  var catparametersUpdateVirtualMachinePublicKeys0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachinePublicKeys0 = catparametersUpdateVirtualMachinePublicKeys0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachinePublicKeys0 = parametersUpdateVirtualMachinePublicKeys0.category('public-keys')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachinePublicKeys0.command('set')
  .description($('Set public-keys in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete public-keys
  var catparametersUpdateVirtualMachinePublicKeys1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachinePublicKeys1 = catparametersUpdateVirtualMachinePublicKeys1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachinePublicKeys1 = parametersUpdateVirtualMachinePublicKeys1.category('public-keys')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachinePublicKeys1.command('delete')
  .description($('Remove public-keys in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint', $('Remove the fingerprint value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.fingerprint || options.path;
    if (anySubItem) {
      var subItemPath = null;
      if (options.fingerprint) {
        subItemPath = options.path + '/fingerprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add public-keys
  var catparametersUpdateVirtualMachinePublicKeys2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachinePublicKeys2 = catparametersUpdateVirtualMachinePublicKeys2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachinePublicKeys2 = parametersUpdateVirtualMachinePublicKeys2.category('public-keys')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachinePublicKeys2.command('add')
  .description($('Add public-keys in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "fingerprint":"",\r\n             "path":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set stored-certificate-settings
  var catparametersUpdateVirtualMachineStoredCertificateSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineStoredCertificateSettings0 = catparametersUpdateVirtualMachineStoredCertificateSettings0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineStoredCertificateSettings0 = parametersUpdateVirtualMachineStoredCertificateSettings0.category('stored-certificate-settings')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineStoredCertificateSettings0.command('set')
  .description($('Set stored-certificate-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'storeName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete stored-certificate-settings
  var catparametersUpdateVirtualMachineStoredCertificateSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineStoredCertificateSettings1 = catparametersUpdateVirtualMachineStoredCertificateSettings1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineStoredCertificateSettings1 = parametersUpdateVirtualMachineStoredCertificateSettings1.category('stored-certificate-settings')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineStoredCertificateSettings1.command('delete')
  .description($('Remove stored-certificate-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--store-name', $('Remove the store-name value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.storeName || options.thumbprint;
    if (anySubItem) {
      var subItemPath = null;
      if (options.storeName) {
        subItemPath = options.path + '/storeName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        subItemPath = options.path + '/thumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add stored-certificate-settings
  var catparametersUpdateVirtualMachineStoredCertificateSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineStoredCertificateSettings2 = catparametersUpdateVirtualMachineStoredCertificateSettings2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineStoredCertificateSettings2 = parametersUpdateVirtualMachineStoredCertificateSettings2.category('stored-certificate-settings')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineStoredCertificateSettings2.command('add')
  .description($('Add stored-certificate-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storedCertificateSettings" : {\r\n             "storeName":"",\r\n             "thumbprint":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'storeName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'thumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set subnet-names
  var catparametersUpdateVirtualMachineSubnetNames0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineSubnetNames0 = catparametersUpdateVirtualMachineSubnetNames0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineSubnetNames0 = parametersUpdateVirtualMachineSubnetNames0.category('subnet-names')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineSubnetNames0.command('set')
  .description($('Set subnet-names in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete subnet-names
  var catparametersUpdateVirtualMachineSubnetNames1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineSubnetNames1 = catparametersUpdateVirtualMachineSubnetNames1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineSubnetNames1 = parametersUpdateVirtualMachineSubnetNames1.category('subnet-names')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineSubnetNames1.command('delete')
  .description($('Remove subnet-names in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add subnet-names
  var catparametersUpdateVirtualMachineSubnetNames2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineSubnetNames2 = catparametersUpdateVirtualMachineSubnetNames2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineSubnetNames2 = parametersUpdateVirtualMachineSubnetNames2.category('subnet-names')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineSubnetNames2.command('add')
  .description($('Add subnet-names in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnetNames" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete windows-remote-management
  var catparametersUpdateVirtualMachineWindowsRemoteManagement1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineWindowsRemoteManagement1 = catparametersUpdateVirtualMachineWindowsRemoteManagement1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineWindowsRemoteManagement1 = parametersUpdateVirtualMachineWindowsRemoteManagement1.category('windows-remote-management')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineWindowsRemoteManagement1.command('delete')
  .description($('Remove windows-remote-management in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsRemoteManagement" : {\r\n             "listeners":[\r\n               {\r\n                 "certificateThumbprint":"",\r\n                 "listenerType":0\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--listeners', $('Remove the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var anySubItem = false || options.listeners;
    if (anySubItem) {
      var subItemPath = null;
      if (options.listeners) {
        subItemPath = options.path + '/listeners';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add windows-remote-management
  var catparametersUpdateVirtualMachineWindowsRemoteManagement2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineWindowsRemoteManagement2 = catparametersUpdateVirtualMachineWindowsRemoteManagement2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineWindowsRemoteManagement2 = parametersUpdateVirtualMachineWindowsRemoteManagement2.category('windows-remote-management')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineWindowsRemoteManagement2.command('add')
  .description($('Add windows-remote-management in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsRemoteManagement" : {\r\n             "listeners":[\r\n               {\r\n                 "certificateThumbprint":"",\r\n                 "listenerType":0\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--listeners <listeners>', $('Add the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + 'listeners';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set listeners
  var catparametersUpdateVirtualMachineListeners0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineListeners0 = catparametersUpdateVirtualMachineListeners0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineListeners0 = parametersUpdateVirtualMachineListeners0.category('listeners')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineListeners0.command('set')
  .description($('Set listeners in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":0\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Set the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Set the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateThumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'listenerType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete listeners
  var catparametersUpdateVirtualMachineListeners1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineListeners1 = catparametersUpdateVirtualMachineListeners1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineListeners1 = parametersUpdateVirtualMachineListeners1.category('listeners')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineListeners1.command('delete')
  .description($('Remove listeners in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":0\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--certificate-thumbprint', $('Remove the certificate-thumbprint value.'))
  .option('--listener-type', $('Remove the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.certificateThumbprint || options.listenerType;
    if (anySubItem) {
      var subItemPath = null;
      if (options.certificateThumbprint) {
        subItemPath = options.path + '/certificateThumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.listenerType) {
        subItemPath = options.path + '/listenerType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add listeners
  var catparametersUpdateVirtualMachineListeners2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineListeners2 = catparametersUpdateVirtualMachineListeners2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineListeners2 = parametersUpdateVirtualMachineListeners2.category('listeners')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineListeners2.command('add')
  .description($('Add listeners in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "certificateThumbprint":"",\r\n             "listenerType":0\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Add the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Add the listener-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateThumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'listenerType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete listener-type
  var catparametersUpdateVirtualMachineListenerType1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineListenerType1 = catparametersUpdateVirtualMachineListenerType1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineListenerType1 = parametersUpdateVirtualMachineListenerType1.category('listener-type')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineListenerType1.command('delete')
  .description($('Remove listener-type in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listenerType" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners-index <listeners-index>', $('Indexer: listeners-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add listener-type
  var catparametersUpdateVirtualMachineListenerType2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineListenerType2 = catparametersUpdateVirtualMachineListenerType2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineListenerType2 = parametersUpdateVirtualMachineListenerType2.category('listener-type')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineListenerType2.command('add')
  .description($('Add listener-type in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listenerType" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set data-virtual-hard-disks
  var catparametersUpdateVirtualMachineDataVirtualHardDisks0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDataVirtualHardDisks0 = catparametersUpdateVirtualMachineDataVirtualHardDisks0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineDataVirtualHardDisks0 = parametersUpdateVirtualMachineDataVirtualHardDisks0.category('data-virtual-hard-disks')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineDataVirtualHardDisks0.command('set')
  .description($('Set data-virtual-hard-disks in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataVirtualHardDisks" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "logicalDiskSizeInGB":null,\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "sourceMediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Set the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sourceMediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete data-virtual-hard-disks
  var catparametersUpdateVirtualMachineDataVirtualHardDisks1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDataVirtualHardDisks1 = catparametersUpdateVirtualMachineDataVirtualHardDisks1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineDataVirtualHardDisks1 = parametersUpdateVirtualMachineDataVirtualHardDisks1.category('data-virtual-hard-disks')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineDataVirtualHardDisks1.command('delete')
  .description($('Remove data-virtual-hard-disks in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataVirtualHardDisks" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "logicalDiskSizeInGB":null,\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "sourceMediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--logical-disk-size-in-g-b', $('Remove the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--source-media-link', $('Remove the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.logicalDiskSizeInGB || options.logicalUnitNumber || options.mediaLink || options.name || options.sourceMediaLink;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        subItemPath = options.path + '/iOType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalDiskSizeInGB) {
        subItemPath = options.path + '/logicalDiskSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        subItemPath = options.path + '/logicalUnitNumber';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceMediaLink) {
        subItemPath = options.path + '/sourceMediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add data-virtual-hard-disks
  var catparametersUpdateVirtualMachineDataVirtualHardDisks2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDataVirtualHardDisks2 = catparametersUpdateVirtualMachineDataVirtualHardDisks2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineDataVirtualHardDisks2 = parametersUpdateVirtualMachineDataVirtualHardDisks2.category('data-virtual-hard-disks')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineDataVirtualHardDisks2.command('add')
  .description($('Add data-virtual-hard-disks in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataVirtualHardDisks" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "logicalDiskSizeInGB":null,\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "sourceMediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Add the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Add the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'iOType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalDiskSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalUnitNumber';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'sourceMediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set debug-settings
  var catparametersUpdateVirtualMachineDebugSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDebugSettings0 = catparametersUpdateVirtualMachineDebugSettings0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineDebugSettings0 = parametersUpdateVirtualMachineDebugSettings0.category('debug-settings')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineDebugSettings0.command('set')
  .description($('Set debug-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "debugSettings" : {\r\n             "bootDiagnosticsEnabled":false,\r\n             "consoleScreenshotBlobUri":"",\r\n             "serialOutputBlobUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--boot-diagnostics-enabled <bootDiagnosticsEnabled>', $('Set the boot-diagnostics-enabled value.'))
  .option('--console-screenshot-blob-uri <consoleScreenshotBlobUri>', $('Set the console-screenshot-blob-uri value.'))
  .option('--serial-output-blob-uri <serialOutputBlobUri>', $('Set the serial-output-blob-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/debugSettings';
    var paramPath = options.path + '/' + 'bootDiagnosticsEnabled';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.bootDiagnosticsEnabled) {
      if (options.parse && options.bootDiagnosticsEnabled) {
        options.bootDiagnosticsEnabled = JSON.parse(options.bootDiagnosticsEnabled);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.bootDiagnosticsEnabled}]);
    }
    paramPath = options.path + '/' + 'consoleScreenshotBlobUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.consoleScreenshotBlobUri) {
      if (options.parse && options.consoleScreenshotBlobUri) {
        options.consoleScreenshotBlobUri = JSON.parse(options.consoleScreenshotBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.consoleScreenshotBlobUri}]);
    }
    paramPath = options.path + '/' + 'serialOutputBlobUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.serialOutputBlobUri) {
      if (options.parse && options.serialOutputBlobUri) {
        options.serialOutputBlobUri = JSON.parse(options.serialOutputBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serialOutputBlobUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete debug-settings
  var catparametersUpdateVirtualMachineDebugSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDebugSettings1 = catparametersUpdateVirtualMachineDebugSettings1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineDebugSettings1 = parametersUpdateVirtualMachineDebugSettings1.category('debug-settings')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineDebugSettings1.command('delete')
  .description($('Remove debug-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "debugSettings" : {\r\n             "bootDiagnosticsEnabled":false,\r\n             "consoleScreenshotBlobUri":"",\r\n             "serialOutputBlobUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--boot-diagnostics-enabled', $('Remove the boot-diagnostics-enabled value.'))
  .option('--console-screenshot-blob-uri', $('Remove the console-screenshot-blob-uri value.'))
  .option('--serial-output-blob-uri', $('Remove the serial-output-blob-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/debugSettings';
    var anySubItem = false || options.bootDiagnosticsEnabled || options.consoleScreenshotBlobUri || options.serialOutputBlobUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.bootDiagnosticsEnabled) {
        subItemPath = options.path + '/bootDiagnosticsEnabled';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.consoleScreenshotBlobUri) {
        subItemPath = options.path + '/consoleScreenshotBlobUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.serialOutputBlobUri) {
        subItemPath = options.path + '/serialOutputBlobUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add debug-settings
  var catparametersUpdateVirtualMachineDebugSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineDebugSettings2 = catparametersUpdateVirtualMachineDebugSettings2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineDebugSettings2 = parametersUpdateVirtualMachineDebugSettings2.category('debug-settings')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineDebugSettings2.command('add')
  .description($('Add debug-settings in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "debugSettings" : {\r\n             "bootDiagnosticsEnabled":false,\r\n             "consoleScreenshotBlobUri":"",\r\n             "serialOutputBlobUri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--boot-diagnostics-enabled <bootDiagnosticsEnabled>', $('Add the boot-diagnostics-enabled value.'))
  .option('--console-screenshot-blob-uri <consoleScreenshotBlobUri>', $('Add the console-screenshot-blob-uri value.'))
  .option('--serial-output-blob-uri <serialOutputBlobUri>', $('Add the serial-output-blob-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/debugSettings' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/debugSettings' + '/' + 'bootDiagnosticsEnabled';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.bootDiagnosticsEnabled) {
      if (options.parse && options.bootDiagnosticsEnabled) {
        options.bootDiagnosticsEnabled = JSON.parse(options.bootDiagnosticsEnabled);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.bootDiagnosticsEnabled}]);
    }
    paramPath = '/debugSettings' + '/' + 'consoleScreenshotBlobUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.consoleScreenshotBlobUri) {
      if (options.parse && options.consoleScreenshotBlobUri) {
        options.consoleScreenshotBlobUri = JSON.parse(options.consoleScreenshotBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.consoleScreenshotBlobUri}]);
    }
    paramPath = '/debugSettings' + '/' + 'serialOutputBlobUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.serialOutputBlobUri) {
      if (options.parse && options.serialOutputBlobUri) {
        options.serialOutputBlobUri = JSON.parse(options.serialOutputBlobUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serialOutputBlobUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set os-virtual-hard-disk
  var catparametersUpdateVirtualMachineOSVirtualHardDisk0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineOSVirtualHardDisk0 = catparametersUpdateVirtualMachineOSVirtualHardDisk0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineOSVirtualHardDisk0 = parametersUpdateVirtualMachineOSVirtualHardDisk0.category('os-virtual-hard-disk')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineOSVirtualHardDisk0.command('set')
  .description($('Set os-virtual-hard-disk in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSVirtualHardDisk" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "operatingSystem":"",\r\n             "remoteSourceImageLink":"",\r\n             "resizedSizeInGB":null,\r\n             "sourceImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system <operatingSystem>', $('Set the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Set the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Set the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/oSVirtualHardDisk';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystem';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = options.path + '/' + 'remoteSourceImageLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = options.path + '/' + 'sourceImageName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete os-virtual-hard-disk
  var catparametersUpdateVirtualMachineOSVirtualHardDisk1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineOSVirtualHardDisk1 = catparametersUpdateVirtualMachineOSVirtualHardDisk1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineOSVirtualHardDisk1 = parametersUpdateVirtualMachineOSVirtualHardDisk1.category('os-virtual-hard-disk')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineOSVirtualHardDisk1.command('delete')
  .description($('Remove os-virtual-hard-disk in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSVirtualHardDisk" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "operatingSystem":"",\r\n             "remoteSourceImageLink":"",\r\n             "resizedSizeInGB":null,\r\n             "sourceImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--i-o-type', $('Remove the i-o-type value.'))
  .option('--label', $('Remove the label value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system', $('Remove the operating-system value.'))
  .option('--remote-source-image-link', $('Remove the remote-source-image-link value.'))
  .option('--resized-size-in-g-b', $('Remove the resized-size-in-g-b value.'))
  .option('--source-image-name', $('Remove the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/oSVirtualHardDisk';
    var anySubItem = false || options.hostCaching || options.iOType || options.label || options.mediaLink || options.name || options.operatingSystem || options.remoteSourceImageLink || options.resizedSizeInGB || options.sourceImageName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iOType) {
        subItemPath = options.path + '/iOType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystem) {
        subItemPath = options.path + '/operatingSystem';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSourceImageLink) {
        subItemPath = options.path + '/remoteSourceImageLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resizedSizeInGB) {
        subItemPath = options.path + '/resizedSizeInGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceImageName) {
        subItemPath = options.path + '/sourceImageName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add os-virtual-hard-disk
  var catparametersUpdateVirtualMachineOSVirtualHardDisk2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineOSVirtualHardDisk2 = catparametersUpdateVirtualMachineOSVirtualHardDisk2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineOSVirtualHardDisk2 = parametersUpdateVirtualMachineOSVirtualHardDisk2.category('os-virtual-hard-disk')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineOSVirtualHardDisk2.command('add')
  .description($('Add os-virtual-hard-disk in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSVirtualHardDisk" : {\r\n             "hostCaching":"",\r\n             "iOType":"",\r\n             "label":"",\r\n             "mediaLink":"",\r\n             "name":"",\r\n             "operatingSystem":"",\r\n             "remoteSourceImageLink":"",\r\n             "resizedSizeInGB":null,\r\n             "sourceImageName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system <operatingSystem>', $('Add the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Add the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Add the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/oSVirtualHardDisk' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/oSVirtualHardDisk' + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'iOType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'operatingSystem';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'remoteSourceImageLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'resizedSizeInGB';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'sourceImageName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set resource-extension-references
  var catparametersUpdateVirtualMachineResourceExtensionReferences0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineResourceExtensionReferences0 = catparametersUpdateVirtualMachineResourceExtensionReferences0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineResourceExtensionReferences0 = parametersUpdateVirtualMachineResourceExtensionReferences0.category('resource-extension-references')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineResourceExtensionReferences0.command('set')
  .description($('Set resource-extension-references in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionReferences" : {\r\n             "forceUpdate":null,\r\n             "name":"",\r\n             "publisher":"",\r\n             "referenceName":"",\r\n             "resourceExtensionParameterValues":[\r\n               {\r\n                 "key":"",\r\n                 "type":"",\r\n                 "value":""\r\n               }\r\n             ],\r\n             "state":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--force-update <forceUpdate>', $('Set the force-update value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--reference-name <referenceName>', $('Set the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Set the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Set the state value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'forceUpdate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
        options.forceUpdate = JSON.parse(options.forceUpdate);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'referenceName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionParameterValues';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = options.path + '/' + 'state';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete resource-extension-references
  var catparametersUpdateVirtualMachineResourceExtensionReferences1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineResourceExtensionReferences1 = catparametersUpdateVirtualMachineResourceExtensionReferences1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineResourceExtensionReferences1 = parametersUpdateVirtualMachineResourceExtensionReferences1.category('resource-extension-references')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineResourceExtensionReferences1.command('delete')
  .description($('Remove resource-extension-references in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionReferences" : {\r\n             "forceUpdate":null,\r\n             "name":"",\r\n             "publisher":"",\r\n             "referenceName":"",\r\n             "resourceExtensionParameterValues":[\r\n               {\r\n                 "key":"",\r\n                 "type":"",\r\n                 "value":""\r\n               }\r\n             ],\r\n             "state":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--force-update', $('Remove the force-update value.'))
  .option('--name', $('Remove the name value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--reference-name', $('Remove the reference-name value.'))
  .option('--resource-extension-parameter-values', $('Remove the resource-extension-parameter-values value.'))
  .option('--state', $('Remove the state value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.forceUpdate || options.name || options.publisher || options.referenceName || options.resourceExtensionParameterValues || options.state || options.version;
    if (anySubItem) {
      var subItemPath = null;
      if (options.forceUpdate) {
        subItemPath = options.path + '/forceUpdate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.referenceName) {
        subItemPath = options.path + '/referenceName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceExtensionParameterValues) {
        subItemPath = options.path + '/resourceExtensionParameterValues';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.state) {
        subItemPath = options.path + '/state';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add resource-extension-references
  var catparametersUpdateVirtualMachineResourceExtensionReferences2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineResourceExtensionReferences2 = catparametersUpdateVirtualMachineResourceExtensionReferences2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineResourceExtensionReferences2 = parametersUpdateVirtualMachineResourceExtensionReferences2.category('resource-extension-references')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineResourceExtensionReferences2.command('add')
  .description($('Add resource-extension-references in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionReferences" : {\r\n             "forceUpdate":null,\r\n             "name":"",\r\n             "publisher":"",\r\n             "referenceName":"",\r\n             "resourceExtensionParameterValues":[\r\n               {\r\n                 "key":"",\r\n                 "type":"",\r\n                 "value":""\r\n               }\r\n             ],\r\n             "state":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--force-update <forceUpdate>', $('Add the force-update value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .option('--reference-name <referenceName>', $('Add the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Add the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Add the state value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'forceUpdate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
        options.forceUpdate = JSON.parse(options.forceUpdate);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'publisher';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'referenceName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'resourceExtensionParameterValues';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'state';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'version';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set resource-extension-parameter-values
  var catparametersUpdateVirtualMachineResourceExtensionParameterValues0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineResourceExtensionParameterValues0 = catparametersUpdateVirtualMachineResourceExtensionParameterValues0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateVirtualMachineResourceExtensionParameterValues0 = parametersUpdateVirtualMachineResourceExtensionParameterValues0.category('resource-extension-parameter-values')
  .description($('Commands to set components of virtual-machine in update-parameters file.'));
  setparametersUpdateVirtualMachineResourceExtensionParameterValues0.command('set')
  .description($('Set resource-extension-parameter-values in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionParameterValues" : {\r\n             "key":"",\r\n             "type":"",\r\n             "value":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--key <key>', $('Set the key value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--value <value>', $('Set the value value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'key';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'value';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete resource-extension-parameter-values
  var catparametersUpdateVirtualMachineResourceExtensionParameterValues1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineResourceExtensionParameterValues1 = catparametersUpdateVirtualMachineResourceExtensionParameterValues1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateVirtualMachineResourceExtensionParameterValues1 = parametersUpdateVirtualMachineResourceExtensionParameterValues1.category('resource-extension-parameter-values')
  .description($('Commands to delete components of virtual-machine in update-parameters file.'));
  deleteparametersUpdateVirtualMachineResourceExtensionParameterValues1.command('delete')
  .description($('Remove resource-extension-parameter-values in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionParameterValues" : {\r\n             "key":"",\r\n             "type":"",\r\n             "value":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--key', $('Remove the key value.'))
  .option('--type', $('Remove the type value.'))
  .option('--value', $('Remove the value value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.key || options.type || options.value;
    if (anySubItem) {
      var subItemPath = null;
      if (options.key) {
        subItemPath = options.path + '/key';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.value) {
        subItemPath = options.path + '/value';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add resource-extension-parameter-values
  var catparametersUpdateVirtualMachineResourceExtensionParameterValues2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateVirtualMachineResourceExtensionParameterValues2 = catparametersUpdateVirtualMachineResourceExtensionParameterValues2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateVirtualMachineResourceExtensionParameterValues2 = parametersUpdateVirtualMachineResourceExtensionParameterValues2.category('resource-extension-parameter-values')
  .description($('Commands to add components of virtual-machine in update-parameters file.'));
  addparametersUpdateVirtualMachineResourceExtensionParameterValues2.command('add')
  .description($('Add resource-extension-parameter-values in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "resourceExtensionParameterValues" : {\r\n             "key":"",\r\n             "type":"",\r\n             "value":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--key <key>', $('Add the key value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--value <value>', $('Add the value value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'key';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'value';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachine UpdateLoadBalancedEndpointSet
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "loadBalancedEndpoints":[
    {
      "enableDirectServerReturn":null,
      "idleTimeoutInMinutes":null,
      "loadBalancedEndpointSetName":"",
      "loadBalancerDistribution":"",
      "loadBalancerName":"",
      "loadBalancerProbe":{
        "intervalInSeconds":null,
        "path":"",
        "port":0,
        "protocol":0,
        "timeoutInSeconds":null
      },
      "localPort":null,
      "name":"",
      "port":null,
      "protocol":"",
      "rules":[
        {
          "action":"",
          "description":"",
          "order":null,
          "remoteSubnet":""
        }
      ],
      "virtualIPAddress":"",
      "virtualIPName":""
    }
  ]
}
*/
  var virtualMachineUpdateLoadBalancedEndpointSet = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine')
  .description($('Commands to manage your virtual machine.  '));
  virtualMachineUpdateLoadBalancedEndpointSet.command('update-load-balanced-endpoint-set [service-name] [deployment-name] [parameters]')
  .description($('The Update Load Balanced Endpoint Set operation changes the specified load-balanced InputEndpoints on all the roles of an Infrastructure as a Service deployment. Non-load-balanced endpoints must be changed using UpdateRole.'))
  .usage('[options] <service-name> <deployment-name> <parameters>')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(serviceName, deploymentName, parameters, options, _) {
    if (!serviceName) {
      serviceName = cli.interaction.promptIfNotGiven($('service-name : '), serviceName, _);
    }

    cli.output.verbose('serviceName = ' + serviceName);
    if (!deploymentName) {
      deploymentName = cli.interaction.promptIfNotGiven($('deployment-name : '), deploymentName, _);
    }

    cli.output.verbose('deploymentName = ' + deploymentName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachine.updateLoadBalancedEndpointSet(serviceName, deploymentName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineUpdateLoadBalancedEndpointSetupdateLoadBalancedEndpointSetParameters2 = virtualMachineUpdateLoadBalancedEndpointSet.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  virtualMachineUpdateLoadBalancedEndpointSetupdateLoadBalancedEndpointSetParameters2.command('generate')
  .description($('Generate virtualMachineUpdateLoadBalancedEndpointSet parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"loadBalancedEndpoints\":[{\"enableDirectServerReturn\":null,\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":0,\"protocol\":0,\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}],\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}]}', _);
    var filePath = 'virtualMachineUpdateLoadBalancedEndpointSet_updateLoadBalancedEndpointSet.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"loadBalancedEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":0,\r\n\"protocol\":0,\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n],\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n]\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineUpdateLoadBalancedEndpointSetupdateLoadBalancedEndpointSetParameters2.command('patch')
  .description($('Command to patch virtualMachineUpdateLoadBalancedEndpointSet parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-load-balanced-endpoint-set-parameters delete virtual-machine-update-load-balanced-set-parameters
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1 = parametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1.category('virtual-machine-update-load-balanced-set-parameters')
  .description($('Commands to delete components of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1.command('delete')
  .description($('Remove virtual-machine-update-load-balanced-set-parameters in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n{\r\n  "loadBalancedEndpoints":[\r\n    {\r\n      "enableDirectServerReturn":null,\r\n      "idleTimeoutInMinutes":null,\r\n      "loadBalancedEndpointSetName":"",\r\n      "loadBalancerDistribution":"",\r\n      "loadBalancerName":"",\r\n      "loadBalancerProbe":{\r\n        "intervalInSeconds":null,\r\n        "path":"",\r\n        "port":0,\r\n        "protocol":0,\r\n        "timeoutInSeconds":null\r\n      },\r\n      "localPort":null,\r\n      "name":"",\r\n      "port":null,\r\n      "protocol":"",\r\n      "rules":[\r\n        {\r\n          "action":"",\r\n          "description":"",\r\n          "order":null,\r\n          "remoteSubnet":""\r\n        }\r\n      ],\r\n      "virtualIPAddress":"",\r\n      "virtualIPName":""\r\n    }\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balanced-endpoints', $('Remove the load-balanced-endpoints value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.loadBalancedEndpoints;
    if (anySubItem) {
      var subItemPath = null;
      if (options.loadBalancedEndpoints) {
        subItemPath = options.path + '/loadBalancedEndpoints';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-load-balanced-endpoint-set-parameters add virtual-machine-update-load-balanced-set-parameters
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2 = parametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2.category('virtual-machine-update-load-balanced-set-parameters')
  .description($('Commands to add components of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  addparametersUpdateLoadBalancedEndpointSetVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2.command('add')
  .description($('Add virtual-machine-update-load-balanced-set-parameters in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n{\r\n  "loadBalancedEndpoints":[\r\n    {\r\n      "enableDirectServerReturn":null,\r\n      "idleTimeoutInMinutes":null,\r\n      "loadBalancedEndpointSetName":"",\r\n      "loadBalancerDistribution":"",\r\n      "loadBalancerName":"",\r\n      "loadBalancerProbe":{\r\n        "intervalInSeconds":null,\r\n        "path":"",\r\n        "port":0,\r\n        "protocol":0,\r\n        "timeoutInSeconds":null\r\n      },\r\n      "localPort":null,\r\n      "name":"",\r\n      "port":null,\r\n      "protocol":"",\r\n      "rules":[\r\n        {\r\n          "action":"",\r\n          "description":"",\r\n          "order":null,\r\n          "remoteSubnet":""\r\n        }\r\n      ],\r\n      "virtualIPAddress":"",\r\n      "virtualIPName":""\r\n    }\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--load-balanced-endpoints <loadBalancedEndpoints>', $('Add the load-balanced-endpoints value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'loadBalancedEndpoints';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancedEndpoints) {
      if (options.parse && options.loadBalancedEndpoints) {
        options.loadBalancedEndpoints = JSON.parse(options.loadBalancedEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-load-balanced-endpoint-set-parameters set load-balanced-endpoints
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0 = parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0.category('load-balanced-endpoints')
  .description($('Commands to set components of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  setparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints0.command('set')
  .description($('Set load-balanced-endpoints in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancedEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":0,\r\n               "protocol":0,\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ],\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--rules <rules>', $('Set the rules value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'rules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-load-balanced-endpoint-set-parameters delete load-balanced-endpoints
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1 = parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1.category('load-balanced-endpoints')
  .description($('Commands to delete components of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints1.command('delete')
  .description($('Remove load-balanced-endpoints in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancedEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":0,\r\n               "protocol":0,\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ],\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--enable-direct-server-return', $('Remove the enable-direct-server-return value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name', $('Remove the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution', $('Remove the load-balancer-distribution value.'))
  .option('--load-balancer-name', $('Remove the load-balancer-name value.'))
  .option('--load-balancer-probe', $('Remove the load-balancer-probe value.'))
  .option('--local-port', $('Remove the local-port value.'))
  .option('--name', $('Remove the name value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--rules', $('Remove the rules value.'))
  .option('--virtual-ip-address', $('Remove the virtual-ip-address value.'))
  .option('--virtual-ip-name', $('Remove the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.enableDirectServerReturn || options.idleTimeoutInMinutes || options.loadBalancedEndpointSetName || options.loadBalancerDistribution || options.loadBalancerName || options.loadBalancerProbe || options.localPort || options.name || options.port || options.protocol || options.rules || options.virtualIPAddress || options.virtualIPName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.enableDirectServerReturn) {
        subItemPath = options.path + '/enableDirectServerReturn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancedEndpointSetName) {
        subItemPath = options.path + '/loadBalancedEndpointSetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerDistribution) {
        subItemPath = options.path + '/loadBalancerDistribution';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerName) {
        subItemPath = options.path + '/loadBalancerName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerProbe) {
        subItemPath = options.path + '/loadBalancerProbe';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localPort) {
        subItemPath = options.path + '/localPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.rules) {
        subItemPath = options.path + '/rules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPAddress) {
        subItemPath = options.path + '/virtualIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualIPName) {
        subItemPath = options.path + '/virtualIPName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-load-balanced-endpoint-set-parameters add load-balanced-endpoints
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints2 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints2.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints2 = parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints2.category('load-balanced-endpoints')
  .description($('Commands to add components of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  addparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancedEndpoints2.command('add')
  .description($('Add load-balanced-endpoints in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancedEndpoints" : {\r\n             "enableDirectServerReturn":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "loadBalancedEndpointSetName":"",\r\n             "loadBalancerDistribution":"",\r\n             "loadBalancerName":"",\r\n             "loadBalancerProbe":{\r\n               "intervalInSeconds":null,\r\n               "path":"",\r\n               "port":0,\r\n               "protocol":0,\r\n               "timeoutInSeconds":null\r\n             },\r\n             "localPort":null,\r\n             "name":"",\r\n             "port":null,\r\n             "protocol":"",\r\n             "rules":[\r\n               {\r\n                 "action":"",\r\n                 "description":"",\r\n                 "order":null,\r\n                 "remoteSubnet":""\r\n               }\r\n             ],\r\n             "virtualIPAddress":"",\r\n             "virtualIPName":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Add the enable-direct-server-return value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Add the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Add the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Add the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Add the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--rules <rules>', $('Add the rules value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Add the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Add the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'enableDirectServerReturn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancedEndpointSetName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerDistribution';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerProbe';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'rules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-load-balanced-endpoint-set-parameters set load-balancer-probe
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0 = parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0.category('load-balancer-probe')
  .description($('Commands to set components of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  setparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe0.command('set')
  .description($('Set load-balancer-probe in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":0,\r\n             "protocol":0,\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe';
    var paramPath = options.path + '/' + 'intervalInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-load-balanced-endpoint-set-parameters delete load-balancer-probe
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1 = parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1.category('load-balancer-probe')
  .description($('Commands to delete components of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe1.command('delete')
  .description($('Remove load-balancer-probe in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":0,\r\n             "protocol":0,\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .option('--interval-in-seconds', $('Remove the interval-in-seconds value.'))
  .option('--path', $('Remove the path value.'))
  .option('--port', $('Remove the port value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--timeout-in-seconds', $('Remove the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe';
    var anySubItem = false || options.intervalInSeconds || options.path || options.port || options.protocol || options.timeoutInSeconds;
    if (anySubItem) {
      var subItemPath = null;
      if (options.intervalInSeconds) {
        subItemPath = options.path + '/intervalInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.port) {
        subItemPath = options.path + '/port';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeoutInSeconds) {
        subItemPath = options.path + '/timeoutInSeconds';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-load-balanced-endpoint-set-parameters add load-balancer-probe
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe2 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe2.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe2 = parametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe2.category('load-balancer-probe')
  .description($('Commands to add components of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  addparametersUpdateLoadBalancedEndpointSetVirtualMachineLoadBalancerProbe2.command('add')
  .description($('Add load-balancer-probe in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerProbe" : {\r\n             "intervalInSeconds":null,\r\n             "path":"",\r\n             "port":0,\r\n             "protocol":0,\r\n             "timeoutInSeconds":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Add the interval-in-seconds value.'))
  .option('--path <path>', $('Add the path value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Add the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + 'intervalInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + 'port';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + 'timeoutInSeconds';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-load-balanced-endpoint-set-parameters delete protocol
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol1 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol1.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol1 = parametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol1.category('protocol')
  .description($('Commands to delete components of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol1.command('delete')
  .description($('Remove protocol in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "protocol" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe/protocol';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-load-balanced-endpoint-set-parameters add protocol
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol2 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol2.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol2 = parametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol2.category('protocol')
  .description($('Commands to add components of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  addparametersUpdateLoadBalancedEndpointSetVirtualMachineProtocol2.command('add')
  .description($('Add protocol in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "protocol" : 0\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe/protocol' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-load-balanced-endpoint-set-parameters set rules
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineRules0 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules0.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var setparametersUpdateLoadBalancedEndpointSetVirtualMachineRules0 = parametersUpdateLoadBalancedEndpointSetVirtualMachineRules0.category('rules')
  .description($('Commands to set components of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  setparametersUpdateLoadBalancedEndpointSetVirtualMachineRules0.command('set')
  .description($('Set rules in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-load-balanced-endpoint-set-parameters delete rules
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineRules1 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules1.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineRules1 = parametersUpdateLoadBalancedEndpointSetVirtualMachineRules1.category('rules')
  .description($('Commands to delete components of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  deleteparametersUpdateLoadBalancedEndpointSetVirtualMachineRules1.command('delete')
  .description($('Remove rules in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .option('--action', $('Remove the action value.'))
  .option('--description', $('Remove the description value.'))
  .option('--order', $('Remove the order value.'))
  .option('--remote-subnet', $('Remove the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.action || options.description || options.order || options.remoteSubnet;
    if (anySubItem) {
      var subItemPath = null;
      if (options.action) {
        subItemPath = options.path + '/action';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.order) {
        subItemPath = options.path + '/order';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.remoteSubnet) {
        subItemPath = options.path + '/remoteSubnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-load-balanced-endpoint-set-parameters add rules
  var catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersUpdateLoadBalancedEndpointSetVirtualMachineRules2 = catparametersUpdateLoadBalancedEndpointSetVirtualMachineRules2.category('update-load-balanced-endpoint-set-parameters')
  .description($('Commands to manage configuration of virtual-machine in the parameter file.'));
  var addparametersUpdateLoadBalancedEndpointSetVirtualMachineRules2 = parametersUpdateLoadBalancedEndpointSetVirtualMachineRules2.category('rules')
  .description($('Commands to add components of virtual-machine in update-load-balanced-endpoint-set-parameters file.'));
  addparametersUpdateLoadBalancedEndpointSetVirtualMachineRules2.command('add')
  .description($('Add rules in update-load-balanced-endpoint-set-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "rules" : {\r\n             "action":"",\r\n             "description":"",\r\n             "order":null,\r\n             "remoteSubnet":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--action <action>', $('Add the action value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--order <order>', $('Add the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Add the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'action';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'order';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'remoteSubnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachineOSImage Create
  --parameters
=============================================
{
  "description":"",
  "eula":"",
  "iconUri":"",
  "imageFamily":"",
  "isPremium":false,
  "label":"",
  "language":"",
  "mediaLinkUri":"",
  "name":"",
  "operatingSystemType":"",
  "privacyUri":"",
  "publishedDate":null,
  "recommendedVMSize":"",
  "showInGui":false,
  "smallIconUri":""
}
*/
  var virtualMachineOSImageCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageCreate.command('create [parameters]')
  .description($('The Create OS Image operation adds an operating system image that is stored in a storage account and is available from the image repository.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157192.aspx for more information)'))
  .usage('[options] <parameters>')
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(parameters, options, _) {
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImage.create(parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineOSImageCreatecreateParameters0 = virtualMachineOSImageCreate.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  virtualMachineOSImageCreatecreateParameters0.command('generate')
  .description($('Generate virtualMachineOSImageCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"description\":\"\",\"eula\":\"\",\"iconUri\":\"\",\"imageFamily\":\"\",\"isPremium\":false,\"label\":\"\",\"language\":\"\",\"mediaLinkUri\":\"\",\"name\":\"\",\"operatingSystemType\":\"\",\"privacyUri\":\"\",\"publishedDate\":null,\"recommendedVMSize\":\"\",\"showInGui\":false,\"smallIconUri\":\"\"}', _);
    var filePath = 'virtualMachineOSImageCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"description\":\"\",\r\n\"eula\":\"\",\r\n\"iconUri\":\"\",\r\n\"imageFamily\":\"\",\r\n\"isPremium\":false,\r\n\"label\":\"\",\r\n\"language\":\"\",\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystemType\":\"\",\r\n\"privacyUri\":\"\",\r\n\"publishedDate\":null,\r\n\"recommendedVMSize\":\"\",\r\n\"showInGui\":false,\r\n\"smallIconUri\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineOSImageCreatecreateParameters0.command('patch')
  .description($('Command to patch virtualMachineOSImageCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set virtual-machine-os-image-create-parameters
  var catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0 = catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var setparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0 = parametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0.category('virtual-machine-os-image-create-parameters')
  .description($('Commands to set components of virtual-machine-os-image in create-parameters file.'));
  setparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters0.command('set')
  .description($('Set virtual-machine-os-image-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "isPremium":false,\r\n  "label":"",\r\n  "language":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":"",\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":false,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--icon-uri <iconUri>', $('Set the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Set the image-family value.'))
  .option('--is-premium <isPremium>', $('Set the is-premium value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--language <language>', $('Set the language value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Set the operating-system-type value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Set the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Set the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Set the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'iconUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = options.path + '/' + 'imageFamily';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = options.path + '/' + 'isPremium';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.isPremium) {
      if (options.parse && options.isPremium) {
        options.isPremium = JSON.parse(options.isPremium);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isPremium}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'language';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystemType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'recommendedVMSize';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = options.path + '/' + 'showInGui';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = options.path + '/' + 'smallIconUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete virtual-machine-os-image-create-parameters
  var catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1 = catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var deleteparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1 = parametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1.category('virtual-machine-os-image-create-parameters')
  .description($('Commands to delete components of virtual-machine-os-image in create-parameters file.'));
  deleteparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters1.command('delete')
  .description($('Remove virtual-machine-os-image-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "isPremium":false,\r\n  "label":"",\r\n  "language":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":"",\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":false,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--description', $('Remove the description value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--icon-uri', $('Remove the icon-uri value.'))
  .option('--image-family', $('Remove the image-family value.'))
  .option('--is-premium', $('Remove the is-premium value.'))
  .option('--label', $('Remove the label value.'))
  .option('--language', $('Remove the language value.'))
  .option('--media-link-uri', $('Remove the media-link-uri value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system-type', $('Remove the operating-system-type value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--recommended-vm-size', $('Remove the recommended-vm-size value.'))
  .option('--show-in-gui', $('Remove the show-in-gui value.'))
  .option('--small-icon-uri', $('Remove the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.description || options.eula || options.iconUri || options.imageFamily || options.isPremium || options.label || options.language || options.mediaLinkUri || options.name || options.operatingSystemType || options.privacyUri || options.publishedDate || options.recommendedVMSize || options.showInGui || options.smallIconUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        subItemPath = options.path + '/eula';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iconUri) {
        subItemPath = options.path + '/iconUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.imageFamily) {
        subItemPath = options.path + '/imageFamily';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isPremium) {
        subItemPath = options.path + '/isPremium';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.language) {
        subItemPath = options.path + '/language';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLinkUri) {
        subItemPath = options.path + '/mediaLinkUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystemType) {
        subItemPath = options.path + '/operatingSystemType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        subItemPath = options.path + '/privacyUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        subItemPath = options.path + '/publishedDate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.recommendedVMSize) {
        subItemPath = options.path + '/recommendedVMSize';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.showInGui) {
        subItemPath = options.path + '/showInGui';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.smallIconUri) {
        subItemPath = options.path + '/smallIconUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add virtual-machine-os-image-create-parameters
  var catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters2 = catparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var addparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters2 = parametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters2.category('virtual-machine-os-image-create-parameters')
  .description($('Commands to add components of virtual-machine-os-image in create-parameters file.'));
  addparametersCreateVirtualMachineOSImageVirtualMachineOSImageCreateParameters2.command('add')
  .description($('Add virtual-machine-os-image-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "isPremium":false,\r\n  "label":"",\r\n  "language":"",\r\n  "mediaLinkUri":"",\r\n  "name":"",\r\n  "operatingSystemType":"",\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":false,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--icon-uri <iconUri>', $('Add the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Add the image-family value.'))
  .option('--is-premium <isPremium>', $('Add the is-premium value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--language <language>', $('Add the language value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Add the operating-system-type value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Add the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Add the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Add the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'iconUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = '' + '/' + 'imageFamily';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = '' + '/' + 'isPremium';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.isPremium) {
      if (options.parse && options.isPremium) {
        options.isPremium = JSON.parse(options.isPremium);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isPremium}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'language';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'operatingSystemType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'recommendedVMSize';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = '' + '/' + 'showInGui';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = '' + '/' + 'smallIconUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachineOSImage Delete
  --image-name
  --delete-from-storage
*/
  var virtualMachineOSImageDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageDelete.command('delete [image-name]')
  .description($('The Delete OS Image operation deletes the specified OS image from your image repository.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157203.aspx for more information)'))
  .usage('[options] <image-name>')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(imageName, options, _) {
    if (!imageName) {
      imageName = cli.interaction.promptIfNotGiven($('image-name : '), imageName, _);
    }

    cli.output.verbose('imageName = ' + imageName);
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var deleteFromStorageFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(deleteFromStorageFileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.verbose('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImage.deleteMethod(imageName, deleteFromStorage, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineOSImage Get
  --image-name
*/
  var virtualMachineOSImageGet = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageGet.command('get [image-name]')
  .description($('The Get OS Image operation retrieves the details for an operating system image from the image repository.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157191.aspx for more information)'))
  .usage('[options] <image-name>')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(imageName, options, _) {
    if (!imageName) {
      imageName = cli.interaction.promptIfNotGiven($('image-name : '), imageName, _);
    }

    cli.output.verbose('imageName = ' + imageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImage.get(imageName, _);
    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      display(cli, result);
    }
  });
/*
  VirtualMachineOSImage GetDetails
  --image-name
*/
  var virtualMachineOSImageGetDetails = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageGetDetails.command('get-details [image-name]')
  .description($('Gets OS Image's properties and its replication details. This operation is only for publishers. You have to be registered as image publisher with Windows Azure to be able to call this.'))
  .usage('[options] <image-name>')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(imageName, options, _) {
    if (!imageName) {
      imageName = cli.interaction.promptIfNotGiven($('image-name : '), imageName, _);
    }

    cli.output.verbose('imageName = ' + imageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImage.getDetails(imageName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineOSImage List
*/
  var virtualMachineOSImageList = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageList.command('list')
  .description($('The List OS Images operation retrieves a list of the operating system images from the image repository.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157191.aspx for more information)'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImage.list(_);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineOSImage Replicate
  --image-name
  --parameters
=============================================
{
  "computeImageAttributes":{
    "offer":"",
    "sku":"",
    "version":""
  },
  "marketplaceImageAttributes":{
    "plan":{
      "name":"",
      "product":"",
      "publisher":""
    },
    "publisherId":""
  },
  "targetLocations":[
    ""
  ]
}
*/
  var virtualMachineOSImageReplicate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageReplicate.command('replicate [image-name] [parameters]')
  .description($('Replicate an OS image to multiple target locations. This operation is only for publishers. You have to be registered as image publisher with Windows Azure to be able to call this.'))
  .usage('[options] <image-name> <parameters>')
  .option('--image-name <image-name>', $('image-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(imageName, parameters, options, _) {
    if (!imageName) {
      imageName = cli.interaction.promptIfNotGiven($('image-name : '), imageName, _);
    }

    cli.output.verbose('imageName = ' + imageName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImage.replicate(imageName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineOSImageReplicatereplicateParameters1 = virtualMachineOSImageReplicate.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  virtualMachineOSImageReplicatereplicateParameters1.command('generate')
  .description($('Generate virtualMachineOSImageReplicate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"computeImageAttributes\":{\"offer\":\"\",\"sku\":\"\",\"version\":\"\"},\"marketplaceImageAttributes\":{\"plan\":{\"name\":\"\",\"product\":\"\",\"publisher\":\"\"},\"publisherId\":\"\"},\"targetLocations\":[\"\"]}', _);
    var filePath = 'virtualMachineOSImageReplicate_replicate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"computeImageAttributes\":{\r\n\"offer\":\"\",\r\n\"sku\":\"\",\r\n\"version\":\"\"\r\n},\r\n\"marketplaceImageAttributes\":{\r\n\"plan\":{\r\n\"name\":\"\",\r\n\"product\":\"\",\r\n\"publisher\":\"\"\r\n},\r\n\"publisherId\":\"\"\r\n},\r\n\"targetLocations\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineOSImageReplicatereplicateParameters1.command('patch')
  .description($('Command to patch virtualMachineOSImageReplicate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters set virtual-machine-os-image-replicate-parameters
  var catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0 = catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var setparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0 = parametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0.category('virtual-machine-os-image-replicate-parameters')
  .description($('Commands to set components of virtual-machine-os-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0.command('set')
  .description($('Set virtual-machine-os-image-replicate-parameters in replicate-parameters string or files, e.g. \r\n{\r\n  "computeImageAttributes":{\r\n    "offer":"",\r\n    "sku":"",\r\n    "version":""\r\n  },\r\n  "marketplaceImageAttributes":{\r\n    "plan":{\r\n      "name":"",\r\n      "product":"",\r\n      "publisher":""\r\n    },\r\n    "publisherId":""\r\n  },\r\n  "targetLocations":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--compute-image-attributes <computeImageAttributes>', $('Set the compute-image-attributes value.'))
  .option('--marketplace-image-attributes <marketplaceImageAttributes>', $('Set the marketplace-image-attributes value.'))
  .option('--target-locations <targetLocations>', $('Set the target-locations value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'computeImageAttributes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.computeImageAttributes) {
      if (options.parse && options.computeImageAttributes) {
        options.computeImageAttributes = JSON.parse(options.computeImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computeImageAttributes}]);
    }
    paramPath = options.path + '/' + 'marketplaceImageAttributes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.marketplaceImageAttributes) {
      if (options.parse && options.marketplaceImageAttributes) {
        options.marketplaceImageAttributes = JSON.parse(options.marketplaceImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.marketplaceImageAttributes}]);
    }
    paramPath = options.path + '/' + 'targetLocations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.targetLocations) {
      if (options.parse && options.targetLocations) {
        options.targetLocations = JSON.parse(options.targetLocations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetLocations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete virtual-machine-os-image-replicate-parameters
  var catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1 = catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1 = parametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1.category('virtual-machine-os-image-replicate-parameters')
  .description($('Commands to delete components of virtual-machine-os-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1.command('delete')
  .description($('Remove virtual-machine-os-image-replicate-parameters in replicate-parameters string or files, e.g. \r\n{\r\n  "computeImageAttributes":{\r\n    "offer":"",\r\n    "sku":"",\r\n    "version":""\r\n  },\r\n  "marketplaceImageAttributes":{\r\n    "plan":{\r\n      "name":"",\r\n      "product":"",\r\n      "publisher":""\r\n    },\r\n    "publisherId":""\r\n  },\r\n  "targetLocations":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--compute-image-attributes', $('Remove the compute-image-attributes value.'))
  .option('--marketplace-image-attributes', $('Remove the marketplace-image-attributes value.'))
  .option('--target-locations', $('Remove the target-locations value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.computeImageAttributes || options.marketplaceImageAttributes || options.targetLocations;
    if (anySubItem) {
      var subItemPath = null;
      if (options.computeImageAttributes) {
        subItemPath = options.path + '/computeImageAttributes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.marketplaceImageAttributes) {
        subItemPath = options.path + '/marketplaceImageAttributes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.targetLocations) {
        subItemPath = options.path + '/targetLocations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters add virtual-machine-os-image-replicate-parameters
  var catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2 = catparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var addparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2 = parametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2.category('virtual-machine-os-image-replicate-parameters')
  .description($('Commands to add components of virtual-machine-os-image in replicate-parameters file.'));
  addparametersReplicateVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2.command('add')
  .description($('Add virtual-machine-os-image-replicate-parameters in replicate-parameters string or files, e.g. \r\n{\r\n  "computeImageAttributes":{\r\n    "offer":"",\r\n    "sku":"",\r\n    "version":""\r\n  },\r\n  "marketplaceImageAttributes":{\r\n    "plan":{\r\n      "name":"",\r\n      "product":"",\r\n      "publisher":""\r\n    },\r\n    "publisherId":""\r\n  },\r\n  "targetLocations":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--compute-image-attributes <computeImageAttributes>', $('Add the compute-image-attributes value.'))
  .option('--marketplace-image-attributes <marketplaceImageAttributes>', $('Add the marketplace-image-attributes value.'))
  .option('--target-locations <targetLocations>', $('Add the target-locations value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'computeImageAttributes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.computeImageAttributes) {
      if (options.parse && options.computeImageAttributes) {
        options.computeImageAttributes = JSON.parse(options.computeImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computeImageAttributes}]);
    }
    paramPath = '' + '/' + 'marketplaceImageAttributes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.marketplaceImageAttributes) {
      if (options.parse && options.marketplaceImageAttributes) {
        options.marketplaceImageAttributes = JSON.parse(options.marketplaceImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.marketplaceImageAttributes}]);
    }
    paramPath = '' + '/' + 'targetLocations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.targetLocations) {
      if (options.parse && options.targetLocations) {
        options.targetLocations = JSON.parse(options.targetLocations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetLocations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters set compute-image-attributes
  var catparametersReplicateVirtualMachineOSImageComputeImageAttributes0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageComputeImageAttributes0 = catparametersReplicateVirtualMachineOSImageComputeImageAttributes0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var setparametersReplicateVirtualMachineOSImageComputeImageAttributes0 = parametersReplicateVirtualMachineOSImageComputeImageAttributes0.category('compute-image-attributes')
  .description($('Commands to set components of virtual-machine-os-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineOSImageComputeImageAttributes0.command('set')
  .description($('Set compute-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "computeImageAttributes" : {\r\n             "offer":"",\r\n             "sku":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--offer <offer>', $('Set the offer value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/computeImageAttributes';
    var paramPath = options.path + '/' + 'offer';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.offer) {
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = options.path + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete compute-image-attributes
  var catparametersReplicateVirtualMachineOSImageComputeImageAttributes1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageComputeImageAttributes1 = catparametersReplicateVirtualMachineOSImageComputeImageAttributes1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineOSImageComputeImageAttributes1 = parametersReplicateVirtualMachineOSImageComputeImageAttributes1.category('compute-image-attributes')
  .description($('Commands to delete components of virtual-machine-os-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineOSImageComputeImageAttributes1.command('delete')
  .description($('Remove compute-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "computeImageAttributes" : {\r\n             "offer":"",\r\n             "sku":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--offer', $('Remove the offer value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/computeImageAttributes';
    var anySubItem = false || options.offer || options.sku || options.version;
    if (anySubItem) {
      var subItemPath = null;
      if (options.offer) {
        subItemPath = options.path + '/offer';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters add compute-image-attributes
  var catparametersReplicateVirtualMachineOSImageComputeImageAttributes2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageComputeImageAttributes2 = catparametersReplicateVirtualMachineOSImageComputeImageAttributes2.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var addparametersReplicateVirtualMachineOSImageComputeImageAttributes2 = parametersReplicateVirtualMachineOSImageComputeImageAttributes2.category('compute-image-attributes')
  .description($('Commands to add components of virtual-machine-os-image in replicate-parameters file.'));
  addparametersReplicateVirtualMachineOSImageComputeImageAttributes2.command('add')
  .description($('Add compute-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "computeImageAttributes" : {\r\n             "offer":"",\r\n             "sku":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--offer <offer>', $('Add the offer value.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/computeImageAttributes' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/computeImageAttributes' + '/' + 'offer';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.offer) {
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = '/computeImageAttributes' + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '/computeImageAttributes' + '/' + 'version';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters set marketplace-image-attributes
  var catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0 = catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var setparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0 = parametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0.category('marketplace-image-attributes')
  .description($('Commands to set components of virtual-machine-os-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes0.command('set')
  .description($('Set marketplace-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "marketplaceImageAttributes" : {\r\n             "plan":{\r\n               "name":"",\r\n               "product":"",\r\n               "publisher":""\r\n             },\r\n             "publisherId":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--plan <plan>', $('Set the plan value.'))
  .option('--publisher-id <publisherId>', $('Set the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/marketplaceImageAttributes';
    var paramPath = options.path + '/' + 'plan';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.plan) {
      if (options.parse && options.plan) {
        options.plan = JSON.parse(options.plan);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.plan}]);
    }
    paramPath = options.path + '/' + 'publisherId';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisherId) {
      if (options.parse && options.publisherId) {
        options.publisherId = JSON.parse(options.publisherId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherId}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete marketplace-image-attributes
  var catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1 = catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1 = parametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1.category('marketplace-image-attributes')
  .description($('Commands to delete components of virtual-machine-os-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes1.command('delete')
  .description($('Remove marketplace-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "marketplaceImageAttributes" : {\r\n             "plan":{\r\n               "name":"",\r\n               "product":"",\r\n               "publisher":""\r\n             },\r\n             "publisherId":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--plan', $('Remove the plan value.'))
  .option('--publisher-id', $('Remove the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/marketplaceImageAttributes';
    var anySubItem = false || options.plan || options.publisherId;
    if (anySubItem) {
      var subItemPath = null;
      if (options.plan) {
        subItemPath = options.path + '/plan';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisherId) {
        subItemPath = options.path + '/publisherId';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters add marketplace-image-attributes
  var catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageMarketplaceImageAttributes2 = catparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes2.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var addparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes2 = parametersReplicateVirtualMachineOSImageMarketplaceImageAttributes2.category('marketplace-image-attributes')
  .description($('Commands to add components of virtual-machine-os-image in replicate-parameters file.'));
  addparametersReplicateVirtualMachineOSImageMarketplaceImageAttributes2.command('add')
  .description($('Add marketplace-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "marketplaceImageAttributes" : {\r\n             "plan":{\r\n               "name":"",\r\n               "product":"",\r\n               "publisher":""\r\n             },\r\n             "publisherId":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--plan <plan>', $('Add the plan value.'))
  .option('--publisher-id <publisherId>', $('Add the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/marketplaceImageAttributes' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/marketplaceImageAttributes' + '/' + 'plan';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.plan) {
      if (options.parse && options.plan) {
        options.plan = JSON.parse(options.plan);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.plan}]);
    }
    paramPath = '/marketplaceImageAttributes' + '/' + 'publisherId';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisherId) {
      if (options.parse && options.publisherId) {
        options.publisherId = JSON.parse(options.publisherId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherId}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters set plan
  var catparametersReplicateVirtualMachineOSImagePlan0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImagePlan0 = catparametersReplicateVirtualMachineOSImagePlan0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var setparametersReplicateVirtualMachineOSImagePlan0 = parametersReplicateVirtualMachineOSImagePlan0.category('plan')
  .description($('Commands to set components of virtual-machine-os-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineOSImagePlan0.command('set')
  .description($('Set plan in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "plan" : {\r\n             "name":"",\r\n             "product":"",\r\n             "publisher":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--product <product>', $('Set the product value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/marketplaceImageAttributes/plan';
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'product';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.product) {
      if (options.parse && options.product) {
        options.product = JSON.parse(options.product);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.product}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete plan
  var catparametersReplicateVirtualMachineOSImagePlan1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImagePlan1 = catparametersReplicateVirtualMachineOSImagePlan1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineOSImagePlan1 = parametersReplicateVirtualMachineOSImagePlan1.category('plan')
  .description($('Commands to delete components of virtual-machine-os-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineOSImagePlan1.command('delete')
  .description($('Remove plan in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "plan" : {\r\n             "name":"",\r\n             "product":"",\r\n             "publisher":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--product', $('Remove the product value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/marketplaceImageAttributes/plan';
    var anySubItem = false || options.name || options.product || options.publisher;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.product) {
        subItemPath = options.path + '/product';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters add plan
  var catparametersReplicateVirtualMachineOSImagePlan2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImagePlan2 = catparametersReplicateVirtualMachineOSImagePlan2.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var addparametersReplicateVirtualMachineOSImagePlan2 = parametersReplicateVirtualMachineOSImagePlan2.category('plan')
  .description($('Commands to add components of virtual-machine-os-image in replicate-parameters file.'));
  addparametersReplicateVirtualMachineOSImagePlan2.command('add')
  .description($('Add plan in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "plan" : {\r\n             "name":"",\r\n             "product":"",\r\n             "publisher":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--product <product>', $('Add the product value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/marketplaceImageAttributes/plan' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/marketplaceImageAttributes/plan' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/marketplaceImageAttributes/plan' + '/' + 'product';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.product) {
      if (options.parse && options.product) {
        options.product = JSON.parse(options.product);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.product}]);
    }
    paramPath = '/marketplaceImageAttributes/plan' + '/' + 'publisher';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters set target-locations
  var catparametersReplicateVirtualMachineOSImageTargetLocations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageTargetLocations0 = catparametersReplicateVirtualMachineOSImageTargetLocations0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var setparametersReplicateVirtualMachineOSImageTargetLocations0 = parametersReplicateVirtualMachineOSImageTargetLocations0.category('target-locations')
  .description($('Commands to set components of virtual-machine-os-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineOSImageTargetLocations0.command('set')
  .description($('Set target-locations in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "targetLocations" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete target-locations
  var catparametersReplicateVirtualMachineOSImageTargetLocations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageTargetLocations1 = catparametersReplicateVirtualMachineOSImageTargetLocations1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineOSImageTargetLocations1 = parametersReplicateVirtualMachineOSImageTargetLocations1.category('target-locations')
  .description($('Commands to delete components of virtual-machine-os-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineOSImageTargetLocations1.command('delete')
  .description($('Remove target-locations in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "targetLocations" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters add target-locations
  var catparametersReplicateVirtualMachineOSImageTargetLocations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersReplicateVirtualMachineOSImageTargetLocations2 = catparametersReplicateVirtualMachineOSImageTargetLocations2.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var addparametersReplicateVirtualMachineOSImageTargetLocations2 = parametersReplicateVirtualMachineOSImageTargetLocations2.category('target-locations')
  .description($('Commands to add components of virtual-machine-os-image in replicate-parameters file.'));
  addparametersReplicateVirtualMachineOSImageTargetLocations2.command('add')
  .description($('Add target-locations in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "targetLocations" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachineOSImage Share
  --image-name
  --permission
*/
  var virtualMachineOSImageShare = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageShare.command('share [image-name] [permission]')
  .description($('Share an already replicated OS image. This operation is only for publishers. You have to be registered as image publisher with Windows Azure to be able to call this.'))
  .usage('[options] <image-name> <permission>')
  .option('--image-name <image-name>', $('image-name'))
  .option('--permission <permission>', $('permission'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(imageName, permission, options, _) {
    if (!imageName) {
      imageName = cli.interaction.promptIfNotGiven($('image-name : '), imageName, _);
    }

    cli.output.verbose('imageName = ' + imageName);
    if (!permission) {
      permission = cli.interaction.promptIfNotGiven($('permission : '), permission, _);
    }

    cli.output.verbose('permission = ' + permission);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImage.share(imageName, permission, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineOSImage Unreplicate
  --image-name
*/
  var virtualMachineOSImageUnreplicate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageUnreplicate.command('unreplicate [image-name]')
  .description($('Unreplicate an OS image to multiple target locations. This operation is only for publishers. You have to be registered as image publisher with Windows Azure to be able to call this. Note: The operation removes the published copies of the user OS Image. It does not remove the actual user OS Image. To remove the actual user OS Image, the publisher will have to call Delete OS Image.'))
  .usage('[options] <image-name>')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(imageName, options, _) {
    if (!imageName) {
      imageName = cli.interaction.promptIfNotGiven($('image-name : '), imageName, _);
    }

    cli.output.verbose('imageName = ' + imageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImage.unreplicate(imageName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineOSImage Update
  --image-name
  --parameters
=============================================
{
  "description":"",
  "eula":"",
  "iconUri":"",
  "imageFamily":"",
  "isPremium":null,
  "label":"",
  "language":"",
  "privacyUri":"",
  "publishedDate":null,
  "recommendedVMSize":"",
  "showInGui":null,
  "smallIconUri":""
}
*/
  var virtualMachineOSImageUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image')
  .description($('Commands to manage your virtual machine os image.  '));
  virtualMachineOSImageUpdate.command('update [image-name] [parameters]')
  .description($('The Update OS Image operation updates an OS image that in your image repository.  (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157198.aspx for more information)'))
  .usage('[options] <image-name> <parameters>')
  .option('--image-name <image-name>', $('image-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(imageName, parameters, options, _) {
    if (!imageName) {
      imageName = cli.interaction.promptIfNotGiven($('image-name : '), imageName, _);
    }

    cli.output.verbose('imageName = ' + imageName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImage.update(imageName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineOSImageUpdateupdateParameters1 = virtualMachineOSImageUpdate.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  virtualMachineOSImageUpdateupdateParameters1.command('generate')
  .description($('Generate virtualMachineOSImageUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"description\":\"\",\"eula\":\"\",\"iconUri\":\"\",\"imageFamily\":\"\",\"isPremium\":null,\"label\":\"\",\"language\":\"\",\"privacyUri\":\"\",\"publishedDate\":null,\"recommendedVMSize\":\"\",\"showInGui\":null,\"smallIconUri\":\"\"}', _);
    var filePath = 'virtualMachineOSImageUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"description\":\"\",\r\n\"eula\":\"\",\r\n\"iconUri\":\"\",\r\n\"imageFamily\":\"\",\r\n\"isPremium\":null,\r\n\"label\":\"\",\r\n\"language\":\"\",\r\n\"privacyUri\":\"\",\r\n\"publishedDate\":null,\r\n\"recommendedVMSize\":\"\",\r\n\"showInGui\":null,\r\n\"smallIconUri\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineOSImageUpdateupdateParameters1.command('patch')
  .description($('Command to patch virtualMachineOSImageUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set virtual-machine-os-image-update-parameters
  var catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0 = catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var setparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0 = parametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0.category('virtual-machine-os-image-update-parameters')
  .description($('Commands to set components of virtual-machine-os-image in update-parameters file.'));
  setparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0.command('set')
  .description($('Set virtual-machine-os-image-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "isPremium":null,\r\n  "label":"",\r\n  "language":"",\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":null,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--icon-uri <iconUri>', $('Set the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Set the image-family value.'))
  .option('--is-premium <isPremium>', $('Set the is-premium value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--language <language>', $('Set the language value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Set the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Set the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Set the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'iconUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = options.path + '/' + 'imageFamily';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = options.path + '/' + 'isPremium';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.isPremium) {
      if (options.parse && options.isPremium) {
        options.isPremium = JSON.parse(options.isPremium);
      }
        options.isPremium = JSON.parse(options.isPremium);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isPremium}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'language';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'recommendedVMSize';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = options.path + '/' + 'showInGui';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
        options.showInGui = JSON.parse(options.showInGui);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = options.path + '/' + 'smallIconUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete virtual-machine-os-image-update-parameters
  var catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1 = catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var deleteparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1 = parametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1.category('virtual-machine-os-image-update-parameters')
  .description($('Commands to delete components of virtual-machine-os-image in update-parameters file.'));
  deleteparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1.command('delete')
  .description($('Remove virtual-machine-os-image-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "isPremium":null,\r\n  "label":"",\r\n  "language":"",\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":null,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--description', $('Remove the description value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--icon-uri', $('Remove the icon-uri value.'))
  .option('--image-family', $('Remove the image-family value.'))
  .option('--is-premium', $('Remove the is-premium value.'))
  .option('--label', $('Remove the label value.'))
  .option('--language', $('Remove the language value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--recommended-vm-size', $('Remove the recommended-vm-size value.'))
  .option('--show-in-gui', $('Remove the show-in-gui value.'))
  .option('--small-icon-uri', $('Remove the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.description || options.eula || options.iconUri || options.imageFamily || options.isPremium || options.label || options.language || options.privacyUri || options.publishedDate || options.recommendedVMSize || options.showInGui || options.smallIconUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        subItemPath = options.path + '/eula';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iconUri) {
        subItemPath = options.path + '/iconUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.imageFamily) {
        subItemPath = options.path + '/imageFamily';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.isPremium) {
        subItemPath = options.path + '/isPremium';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.language) {
        subItemPath = options.path + '/language';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        subItemPath = options.path + '/privacyUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        subItemPath = options.path + '/publishedDate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.recommendedVMSize) {
        subItemPath = options.path + '/recommendedVMSize';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.showInGui) {
        subItemPath = options.path + '/showInGui';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.smallIconUri) {
        subItemPath = options.path + '/smallIconUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add virtual-machine-os-image-update-parameters
  var catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2 = catparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-os-image in the parameter file.'));
  var addparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2 = parametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2.category('virtual-machine-os-image-update-parameters')
  .description($('Commands to add components of virtual-machine-os-image in update-parameters file.'));
  addparametersUpdateVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2.command('add')
  .description($('Add virtual-machine-os-image-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "isPremium":null,\r\n  "label":"",\r\n  "language":"",\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":null,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--icon-uri <iconUri>', $('Add the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Add the image-family value.'))
  .option('--is-premium <isPremium>', $('Add the is-premium value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--language <language>', $('Add the language value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Add the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Add the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Add the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'iconUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = '' + '/' + 'imageFamily';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = '' + '/' + 'isPremium';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.isPremium) {
      if (options.parse && options.isPremium) {
        options.isPremium = JSON.parse(options.isPremium);
      }
        options.isPremium = JSON.parse(options.isPremium);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isPremium}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'language';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'recommendedVMSize';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = '' + '/' + 'showInGui';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
        options.showInGui = JSON.parse(options.showInGui);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = '' + '/' + 'smallIconUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachineVMImage Create
  --parameters
=============================================
{
  "dataDiskConfigurations":[
    {
      "hostCaching":"",
      "logicalUnitNumber":null,
      "mediaLink":""
    }
  ],
  "description":"",
  "eula":"",
  "iconUri":"",
  "imageFamily":"",
  "label":"",
  "language":"",
  "name":"",
  "oSDiskConfiguration":{
    "hostCaching":"",
    "mediaLink":"",
    "oS":"",
    "oSState":""
  },
  "privacyUri":"",
  "publishedDate":null,
  "recommendedVMSize":"",
  "showInGui":null,
  "smallIconUri":""
}
*/
  var virtualMachineVMImageCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image')
  .description($('Commands to manage your virtual machine vm image.  '));
  virtualMachineVMImageCreate.command('create [parameters]')
  .description($('The Create VM Image operation creates a VM image that in your image repository.  (see http://msdn.microsoft.com/en-us/library/azure/dn775054.aspx for more information)'))
  .usage('[options] <parameters>')
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(parameters, options, _) {
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImage.create(parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineVMImageCreatecreateParameters0 = virtualMachineVMImageCreate.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  virtualMachineVMImageCreatecreateParameters0.command('generate')
  .description($('Generate virtualMachineVMImageCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"dataDiskConfigurations\":[{\"hostCaching\":\"\",\"logicalUnitNumber\":null,\"mediaLink\":\"\"}],\"description\":\"\",\"eula\":\"\",\"iconUri\":\"\",\"imageFamily\":\"\",\"label\":\"\",\"language\":\"\",\"name\":\"\",\"oSDiskConfiguration\":{\"hostCaching\":\"\",\"mediaLink\":\"\",\"oS\":\"\",\"oSState\":\"\"},\"privacyUri\":\"\",\"publishedDate\":null,\"recommendedVMSize\":\"\",\"showInGui\":null,\"smallIconUri\":\"\"}', _);
    var filePath = 'virtualMachineVMImageCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"dataDiskConfigurations\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"logicalUnitNumber\":null,\r\n\"mediaLink\":\"\"\r\n}\r\n],\r\n\"description\":\"\",\r\n\"eula\":\"\",\r\n\"iconUri\":\"\",\r\n\"imageFamily\":\"\",\r\n\"label\":\"\",\r\n\"language\":\"\",\r\n\"name\":\"\",\r\n\"oSDiskConfiguration\":{\r\n\"hostCaching\":\"\",\r\n\"mediaLink\":\"\",\r\n\"oS\":\"\",\r\n\"oSState\":\"\"\r\n},\r\n\"privacyUri\":\"\",\r\n\"publishedDate\":null,\r\n\"recommendedVMSize\":\"\",\r\n\"showInGui\":null,\r\n\"smallIconUri\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineVMImageCreatecreateParameters0.command('patch')
  .description($('Command to patch virtualMachineVMImageCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set virtual-machine-vm-image-create-parameters
  var catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0 = catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0 = parametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0.category('virtual-machine-vm-image-create-parameters')
  .description($('Commands to set components of virtual-machine-vm-image in create-parameters file.'));
  setparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters0.command('set')
  .description($('Set virtual-machine-vm-image-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "dataDiskConfigurations":[\r\n    {\r\n      "hostCaching":"",\r\n      "logicalUnitNumber":null,\r\n      "mediaLink":""\r\n    }\r\n  ],\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "label":"",\r\n  "language":"",\r\n  "name":"",\r\n  "oSDiskConfiguration":{\r\n    "hostCaching":"",\r\n    "mediaLink":"",\r\n    "oS":"",\r\n    "oSState":""\r\n  },\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":null,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Set the data-disk-configurations value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--icon-uri <iconUri>', $('Set the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Set the image-family value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--language <language>', $('Set the language value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Set the os-disk-configuration value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Set the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Set the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Set the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'dataDiskConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'iconUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = options.path + '/' + 'imageFamily';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'language';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'oSDiskConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'recommendedVMSize';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = options.path + '/' + 'showInGui';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
        options.showInGui = JSON.parse(options.showInGui);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = options.path + '/' + 'smallIconUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete virtual-machine-vm-image-create-parameters
  var catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1 = catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1 = parametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1.category('virtual-machine-vm-image-create-parameters')
  .description($('Commands to delete components of virtual-machine-vm-image in create-parameters file.'));
  deleteparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters1.command('delete')
  .description($('Remove virtual-machine-vm-image-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "dataDiskConfigurations":[\r\n    {\r\n      "hostCaching":"",\r\n      "logicalUnitNumber":null,\r\n      "mediaLink":""\r\n    }\r\n  ],\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "label":"",\r\n  "language":"",\r\n  "name":"",\r\n  "oSDiskConfiguration":{\r\n    "hostCaching":"",\r\n    "mediaLink":"",\r\n    "oS":"",\r\n    "oSState":""\r\n  },\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":null,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disk-configurations', $('Remove the data-disk-configurations value.'))
  .option('--description', $('Remove the description value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--icon-uri', $('Remove the icon-uri value.'))
  .option('--image-family', $('Remove the image-family value.'))
  .option('--label', $('Remove the label value.'))
  .option('--language', $('Remove the language value.'))
  .option('--name', $('Remove the name value.'))
  .option('--os-disk-configuration', $('Remove the os-disk-configuration value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--recommended-vm-size', $('Remove the recommended-vm-size value.'))
  .option('--show-in-gui', $('Remove the show-in-gui value.'))
  .option('--small-icon-uri', $('Remove the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.dataDiskConfigurations || options.description || options.eula || options.iconUri || options.imageFamily || options.label || options.language || options.name || options.oSDiskConfiguration || options.privacyUri || options.publishedDate || options.recommendedVMSize || options.showInGui || options.smallIconUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.dataDiskConfigurations) {
        subItemPath = options.path + '/dataDiskConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        subItemPath = options.path + '/eula';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iconUri) {
        subItemPath = options.path + '/iconUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.imageFamily) {
        subItemPath = options.path + '/imageFamily';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.language) {
        subItemPath = options.path + '/language';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSDiskConfiguration) {
        subItemPath = options.path + '/oSDiskConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        subItemPath = options.path + '/privacyUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        subItemPath = options.path + '/publishedDate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.recommendedVMSize) {
        subItemPath = options.path + '/recommendedVMSize';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.showInGui) {
        subItemPath = options.path + '/showInGui';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.smallIconUri) {
        subItemPath = options.path + '/smallIconUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add virtual-machine-vm-image-create-parameters
  var catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters2 = catparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var addparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters2 = parametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters2.category('virtual-machine-vm-image-create-parameters')
  .description($('Commands to add components of virtual-machine-vm-image in create-parameters file.'));
  addparametersCreateVirtualMachineVMImageVirtualMachineVMImageCreateParameters2.command('add')
  .description($('Add virtual-machine-vm-image-create-parameters in create-parameters string or files, e.g. \r\n{\r\n  "dataDiskConfigurations":[\r\n    {\r\n      "hostCaching":"",\r\n      "logicalUnitNumber":null,\r\n      "mediaLink":""\r\n    }\r\n  ],\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "label":"",\r\n  "language":"",\r\n  "name":"",\r\n  "oSDiskConfiguration":{\r\n    "hostCaching":"",\r\n    "mediaLink":"",\r\n    "oS":"",\r\n    "oSState":""\r\n  },\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":null,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Add the data-disk-configurations value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--icon-uri <iconUri>', $('Add the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Add the image-family value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--language <language>', $('Add the language value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Add the os-disk-configuration value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Add the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Add the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Add the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'dataDiskConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = '' + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'iconUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = '' + '/' + 'imageFamily';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'language';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'oSDiskConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'recommendedVMSize';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = '' + '/' + 'showInGui';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
        options.showInGui = JSON.parse(options.showInGui);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = '' + '/' + 'smallIconUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set data-disk-configurations
  var catparametersCreateVirtualMachineVMImageDataDiskConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageDataDiskConfigurations0 = catparametersCreateVirtualMachineVMImageDataDiskConfigurations0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersCreateVirtualMachineVMImageDataDiskConfigurations0 = parametersCreateVirtualMachineVMImageDataDiskConfigurations0.category('data-disk-configurations')
  .description($('Commands to set components of virtual-machine-vm-image in create-parameters file.'));
  setparametersCreateVirtualMachineVMImageDataDiskConfigurations0.command('set')
  .description($('Set data-disk-configurations in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "hostCaching":"",\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete data-disk-configurations
  var catparametersCreateVirtualMachineVMImageDataDiskConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageDataDiskConfigurations1 = catparametersCreateVirtualMachineVMImageDataDiskConfigurations1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersCreateVirtualMachineVMImageDataDiskConfigurations1 = parametersCreateVirtualMachineVMImageDataDiskConfigurations1.category('data-disk-configurations')
  .description($('Commands to delete components of virtual-machine-vm-image in create-parameters file.'));
  deleteparametersCreateVirtualMachineVMImageDataDiskConfigurations1.command('delete')
  .description($('Remove data-disk-configurations in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "hostCaching":"",\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.hostCaching || options.logicalUnitNumber || options.mediaLink;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        subItemPath = options.path + '/logicalUnitNumber';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add data-disk-configurations
  var catparametersCreateVirtualMachineVMImageDataDiskConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageDataDiskConfigurations2 = catparametersCreateVirtualMachineVMImageDataDiskConfigurations2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var addparametersCreateVirtualMachineVMImageDataDiskConfigurations2 = parametersCreateVirtualMachineVMImageDataDiskConfigurations2.category('data-disk-configurations')
  .description($('Commands to add components of virtual-machine-vm-image in create-parameters file.'));
  addparametersCreateVirtualMachineVMImageDataDiskConfigurations2.command('add')
  .description($('Add data-disk-configurations in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "hostCaching":"",\r\n             "logicalUnitNumber":null,\r\n             "mediaLink":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalUnitNumber';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters set os-disk-configuration
  var catparametersCreateVirtualMachineVMImageOSDiskConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageOSDiskConfiguration0 = catparametersCreateVirtualMachineVMImageOSDiskConfiguration0.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersCreateVirtualMachineVMImageOSDiskConfiguration0 = parametersCreateVirtualMachineVMImageOSDiskConfiguration0.category('os-disk-configuration')
  .description($('Commands to set components of virtual-machine-vm-image in create-parameters file.'));
  setparametersCreateVirtualMachineVMImageOSDiskConfiguration0.command('set')
  .description($('Set os-disk-configuration in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "hostCaching":"",\r\n             "mediaLink":"",\r\n             "oS":"",\r\n             "oSState":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--os <oS>', $('Set the os value.'))
  .option('--os-state <oSState>', $('Set the os-state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/oSDiskConfiguration';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'oS';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oS) {
      if (options.parse && options.oS) {
        options.oS = JSON.parse(options.oS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oS}]);
    }
    paramPath = options.path + '/' + 'oSState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSState) {
      if (options.parse && options.oSState) {
        options.oSState = JSON.parse(options.oSState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSState}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-parameters delete os-disk-configuration
  var catparametersCreateVirtualMachineVMImageOSDiskConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageOSDiskConfiguration1 = catparametersCreateVirtualMachineVMImageOSDiskConfiguration1.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersCreateVirtualMachineVMImageOSDiskConfiguration1 = parametersCreateVirtualMachineVMImageOSDiskConfiguration1.category('os-disk-configuration')
  .description($('Commands to delete components of virtual-machine-vm-image in create-parameters file.'));
  deleteparametersCreateVirtualMachineVMImageOSDiskConfiguration1.command('delete')
  .description($('Remove os-disk-configuration in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "hostCaching":"",\r\n             "mediaLink":"",\r\n             "oS":"",\r\n             "oSState":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--media-link', $('Remove the media-link value.'))
  .option('--os', $('Remove the os value.'))
  .option('--os-state', $('Remove the os-state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/oSDiskConfiguration';
    var anySubItem = false || options.hostCaching || options.mediaLink || options.oS || options.oSState;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.mediaLink) {
        subItemPath = options.path + '/mediaLink';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oS) {
        subItemPath = options.path + '/oS';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSState) {
        subItemPath = options.path + '/oSState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-parameters add os-disk-configuration
  var catparametersCreateVirtualMachineVMImageOSDiskConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersCreateVirtualMachineVMImageOSDiskConfiguration2 = catparametersCreateVirtualMachineVMImageOSDiskConfiguration2.category('create-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var addparametersCreateVirtualMachineVMImageOSDiskConfiguration2 = parametersCreateVirtualMachineVMImageOSDiskConfiguration2.category('os-disk-configuration')
  .description($('Commands to add components of virtual-machine-vm-image in create-parameters file.'));
  addparametersCreateVirtualMachineVMImageOSDiskConfiguration2.command('add')
  .description($('Add os-disk-configuration in create-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "hostCaching":"",\r\n             "mediaLink":"",\r\n             "oS":"",\r\n             "oSState":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--os <oS>', $('Add the os value.'))
  .option('--os-state <oSState>', $('Add the os-state value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/oSDiskConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/oSDiskConfiguration' + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/oSDiskConfiguration' + '/' + 'mediaLink';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/oSDiskConfiguration' + '/' + 'oS';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oS) {
      if (options.parse && options.oS) {
        options.oS = JSON.parse(options.oS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oS}]);
    }
    paramPath = '/oSDiskConfiguration' + '/' + 'oSState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSState) {
      if (options.parse && options.oSState) {
        options.oSState = JSON.parse(options.oSState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSState}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachineVMImage Delete
  --vm-image-name
  --delete-from-storage
*/
  var virtualMachineVMImageDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image')
  .description($('Commands to manage your virtual machine vm image.  '));
  virtualMachineVMImageDelete.command('delete [vm-image-name]')
  .description($('The Delete Virtual Machine Image operation deletes the specified virtual machine image.'))
  .usage('[options] <vm-image-name>')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(vMImageName, options, _) {
    if (!vMImageName) {
      vMImageName = cli.interaction.promptIfNotGiven($('vm-image-name : '), vMImageName, _);
    }

    cli.output.verbose('vMImageName = ' + vMImageName);
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var deleteFromStorageFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(deleteFromStorageFileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.verbose('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImage.deleteMethod(vMImageName, deleteFromStorage, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineVMImage GetDetails
  --vm-image-name
*/
  var virtualMachineVMImageGetDetails = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image')
  .description($('Commands to manage your virtual machine vm image.  '));
  virtualMachineVMImageGetDetails.command('get-details [vm-image-name]')
  .description($('Gets VMImage's properties and its replication details. This operation is only for publishers. You have to be registered as image publisher with Windows Azure to be able to call this.'))
  .usage('[options] <vm-image-name>')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(vMImageName, options, _) {
    if (!vMImageName) {
      vMImageName = cli.interaction.promptIfNotGiven($('vm-image-name : '), vMImageName, _);
    }

    cli.output.verbose('vMImageName = ' + vMImageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImage.getDetails(vMImageName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineVMImage List
*/
  var virtualMachineVMImageList = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image')
  .description($('Commands to manage your virtual machine vm image.  '));
  virtualMachineVMImageList.command('list')
  .description($('The List Virtual Machine Images operation retrieves a list of the virtual machine images.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImage.list(_);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineVMImage Replicate
  --vm-image-name
  --parameters
=============================================
{
  "computeImageAttributes":{
    "offer":"",
    "sku":"",
    "version":""
  },
  "marketplaceImageAttributes":{
    "plan":{
      "name":"",
      "product":"",
      "publisher":""
    },
    "publisherId":""
  },
  "targetLocations":[
    ""
  ]
}
*/
  var virtualMachineVMImageReplicate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image')
  .description($('Commands to manage your virtual machine vm image.  '));
  virtualMachineVMImageReplicate.command('replicate [vm-image-name] [parameters]')
  .description($('Replicate an VM image to multiple target locations. This operation is only for publishers. You have to be registered as image publisher with Windows Azure to be able to call this.'))
  .usage('[options] <vm-image-name> <parameters>')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(vMImageName, parameters, options, _) {
    if (!vMImageName) {
      vMImageName = cli.interaction.promptIfNotGiven($('vm-image-name : '), vMImageName, _);
    }

    cli.output.verbose('vMImageName = ' + vMImageName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImage.replicate(vMImageName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineVMImageReplicatereplicateParameters1 = virtualMachineVMImageReplicate.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  virtualMachineVMImageReplicatereplicateParameters1.command('generate')
  .description($('Generate virtualMachineVMImageReplicate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"computeImageAttributes\":{\"offer\":\"\",\"sku\":\"\",\"version\":\"\"},\"marketplaceImageAttributes\":{\"plan\":{\"name\":\"\",\"product\":\"\",\"publisher\":\"\"},\"publisherId\":\"\"},\"targetLocations\":[\"\"]}', _);
    var filePath = 'virtualMachineVMImageReplicate_replicate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"computeImageAttributes\":{\r\n\"offer\":\"\",\r\n\"sku\":\"\",\r\n\"version\":\"\"\r\n},\r\n\"marketplaceImageAttributes\":{\r\n\"plan\":{\r\n\"name\":\"\",\r\n\"product\":\"\",\r\n\"publisher\":\"\"\r\n},\r\n\"publisherId\":\"\"\r\n},\r\n\"targetLocations\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineVMImageReplicatereplicateParameters1.command('patch')
  .description($('Command to patch virtualMachineVMImageReplicate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters set virtual-machine-vm-image-replicate-parameters
  var catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0 = catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0 = parametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0.category('virtual-machine-vm-image-replicate-parameters')
  .description($('Commands to set components of virtual-machine-vm-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0.command('set')
  .description($('Set virtual-machine-vm-image-replicate-parameters in replicate-parameters string or files, e.g. \r\n{\r\n  "computeImageAttributes":{\r\n    "offer":"",\r\n    "sku":"",\r\n    "version":""\r\n  },\r\n  "marketplaceImageAttributes":{\r\n    "plan":{\r\n      "name":"",\r\n      "product":"",\r\n      "publisher":""\r\n    },\r\n    "publisherId":""\r\n  },\r\n  "targetLocations":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--compute-image-attributes <computeImageAttributes>', $('Set the compute-image-attributes value.'))
  .option('--marketplace-image-attributes <marketplaceImageAttributes>', $('Set the marketplace-image-attributes value.'))
  .option('--target-locations <targetLocations>', $('Set the target-locations value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'computeImageAttributes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.computeImageAttributes) {
      if (options.parse && options.computeImageAttributes) {
        options.computeImageAttributes = JSON.parse(options.computeImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computeImageAttributes}]);
    }
    paramPath = options.path + '/' + 'marketplaceImageAttributes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.marketplaceImageAttributes) {
      if (options.parse && options.marketplaceImageAttributes) {
        options.marketplaceImageAttributes = JSON.parse(options.marketplaceImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.marketplaceImageAttributes}]);
    }
    paramPath = options.path + '/' + 'targetLocations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.targetLocations) {
      if (options.parse && options.targetLocations) {
        options.targetLocations = JSON.parse(options.targetLocations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetLocations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete virtual-machine-vm-image-replicate-parameters
  var catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1 = catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1 = parametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1.category('virtual-machine-vm-image-replicate-parameters')
  .description($('Commands to delete components of virtual-machine-vm-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1.command('delete')
  .description($('Remove virtual-machine-vm-image-replicate-parameters in replicate-parameters string or files, e.g. \r\n{\r\n  "computeImageAttributes":{\r\n    "offer":"",\r\n    "sku":"",\r\n    "version":""\r\n  },\r\n  "marketplaceImageAttributes":{\r\n    "plan":{\r\n      "name":"",\r\n      "product":"",\r\n      "publisher":""\r\n    },\r\n    "publisherId":""\r\n  },\r\n  "targetLocations":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--compute-image-attributes', $('Remove the compute-image-attributes value.'))
  .option('--marketplace-image-attributes', $('Remove the marketplace-image-attributes value.'))
  .option('--target-locations', $('Remove the target-locations value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.computeImageAttributes || options.marketplaceImageAttributes || options.targetLocations;
    if (anySubItem) {
      var subItemPath = null;
      if (options.computeImageAttributes) {
        subItemPath = options.path + '/computeImageAttributes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.marketplaceImageAttributes) {
        subItemPath = options.path + '/marketplaceImageAttributes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.targetLocations) {
        subItemPath = options.path + '/targetLocations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters add virtual-machine-vm-image-replicate-parameters
  var catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2 = catparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var addparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2 = parametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2.category('virtual-machine-vm-image-replicate-parameters')
  .description($('Commands to add components of virtual-machine-vm-image in replicate-parameters file.'));
  addparametersReplicateVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2.command('add')
  .description($('Add virtual-machine-vm-image-replicate-parameters in replicate-parameters string or files, e.g. \r\n{\r\n  "computeImageAttributes":{\r\n    "offer":"",\r\n    "sku":"",\r\n    "version":""\r\n  },\r\n  "marketplaceImageAttributes":{\r\n    "plan":{\r\n      "name":"",\r\n      "product":"",\r\n      "publisher":""\r\n    },\r\n    "publisherId":""\r\n  },\r\n  "targetLocations":[\r\n    ""\r\n  ]\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--compute-image-attributes <computeImageAttributes>', $('Add the compute-image-attributes value.'))
  .option('--marketplace-image-attributes <marketplaceImageAttributes>', $('Add the marketplace-image-attributes value.'))
  .option('--target-locations <targetLocations>', $('Add the target-locations value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'computeImageAttributes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.computeImageAttributes) {
      if (options.parse && options.computeImageAttributes) {
        options.computeImageAttributes = JSON.parse(options.computeImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computeImageAttributes}]);
    }
    paramPath = '' + '/' + 'marketplaceImageAttributes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.marketplaceImageAttributes) {
      if (options.parse && options.marketplaceImageAttributes) {
        options.marketplaceImageAttributes = JSON.parse(options.marketplaceImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.marketplaceImageAttributes}]);
    }
    paramPath = '' + '/' + 'targetLocations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.targetLocations) {
      if (options.parse && options.targetLocations) {
        options.targetLocations = JSON.parse(options.targetLocations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetLocations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters set compute-image-attributes
  var catparametersReplicateVirtualMachineVMImageComputeImageAttributes0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageComputeImageAttributes0 = catparametersReplicateVirtualMachineVMImageComputeImageAttributes0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersReplicateVirtualMachineVMImageComputeImageAttributes0 = parametersReplicateVirtualMachineVMImageComputeImageAttributes0.category('compute-image-attributes')
  .description($('Commands to set components of virtual-machine-vm-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineVMImageComputeImageAttributes0.command('set')
  .description($('Set compute-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "computeImageAttributes" : {\r\n             "offer":"",\r\n             "sku":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--offer <offer>', $('Set the offer value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/computeImageAttributes';
    var paramPath = options.path + '/' + 'offer';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.offer) {
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = options.path + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete compute-image-attributes
  var catparametersReplicateVirtualMachineVMImageComputeImageAttributes1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageComputeImageAttributes1 = catparametersReplicateVirtualMachineVMImageComputeImageAttributes1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineVMImageComputeImageAttributes1 = parametersReplicateVirtualMachineVMImageComputeImageAttributes1.category('compute-image-attributes')
  .description($('Commands to delete components of virtual-machine-vm-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineVMImageComputeImageAttributes1.command('delete')
  .description($('Remove compute-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "computeImageAttributes" : {\r\n             "offer":"",\r\n             "sku":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--offer', $('Remove the offer value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/computeImageAttributes';
    var anySubItem = false || options.offer || options.sku || options.version;
    if (anySubItem) {
      var subItemPath = null;
      if (options.offer) {
        subItemPath = options.path + '/offer';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters add compute-image-attributes
  var catparametersReplicateVirtualMachineVMImageComputeImageAttributes2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageComputeImageAttributes2 = catparametersReplicateVirtualMachineVMImageComputeImageAttributes2.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var addparametersReplicateVirtualMachineVMImageComputeImageAttributes2 = parametersReplicateVirtualMachineVMImageComputeImageAttributes2.category('compute-image-attributes')
  .description($('Commands to add components of virtual-machine-vm-image in replicate-parameters file.'));
  addparametersReplicateVirtualMachineVMImageComputeImageAttributes2.command('add')
  .description($('Add compute-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "computeImageAttributes" : {\r\n             "offer":"",\r\n             "sku":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--offer <offer>', $('Add the offer value.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/computeImageAttributes' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/computeImageAttributes' + '/' + 'offer';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.offer) {
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = '/computeImageAttributes' + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '/computeImageAttributes' + '/' + 'version';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters set marketplace-image-attributes
  var catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0 = catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0 = parametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0.category('marketplace-image-attributes')
  .description($('Commands to set components of virtual-machine-vm-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes0.command('set')
  .description($('Set marketplace-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "marketplaceImageAttributes" : {\r\n             "plan":{\r\n               "name":"",\r\n               "product":"",\r\n               "publisher":""\r\n             },\r\n             "publisherId":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--plan <plan>', $('Set the plan value.'))
  .option('--publisher-id <publisherId>', $('Set the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/marketplaceImageAttributes';
    var paramPath = options.path + '/' + 'plan';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.plan) {
      if (options.parse && options.plan) {
        options.plan = JSON.parse(options.plan);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.plan}]);
    }
    paramPath = options.path + '/' + 'publisherId';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisherId) {
      if (options.parse && options.publisherId) {
        options.publisherId = JSON.parse(options.publisherId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherId}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete marketplace-image-attributes
  var catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1 = catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1 = parametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1.category('marketplace-image-attributes')
  .description($('Commands to delete components of virtual-machine-vm-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes1.command('delete')
  .description($('Remove marketplace-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "marketplaceImageAttributes" : {\r\n             "plan":{\r\n               "name":"",\r\n               "product":"",\r\n               "publisher":""\r\n             },\r\n             "publisherId":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--plan', $('Remove the plan value.'))
  .option('--publisher-id', $('Remove the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/marketplaceImageAttributes';
    var anySubItem = false || options.plan || options.publisherId;
    if (anySubItem) {
      var subItemPath = null;
      if (options.plan) {
        subItemPath = options.path + '/plan';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisherId) {
        subItemPath = options.path + '/publisherId';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters add marketplace-image-attributes
  var catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageMarketplaceImageAttributes2 = catparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes2.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var addparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes2 = parametersReplicateVirtualMachineVMImageMarketplaceImageAttributes2.category('marketplace-image-attributes')
  .description($('Commands to add components of virtual-machine-vm-image in replicate-parameters file.'));
  addparametersReplicateVirtualMachineVMImageMarketplaceImageAttributes2.command('add')
  .description($('Add marketplace-image-attributes in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "marketplaceImageAttributes" : {\r\n             "plan":{\r\n               "name":"",\r\n               "product":"",\r\n               "publisher":""\r\n             },\r\n             "publisherId":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--plan <plan>', $('Add the plan value.'))
  .option('--publisher-id <publisherId>', $('Add the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/marketplaceImageAttributes' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/marketplaceImageAttributes' + '/' + 'plan';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.plan) {
      if (options.parse && options.plan) {
        options.plan = JSON.parse(options.plan);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.plan}]);
    }
    paramPath = '/marketplaceImageAttributes' + '/' + 'publisherId';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisherId) {
      if (options.parse && options.publisherId) {
        options.publisherId = JSON.parse(options.publisherId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherId}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters set plan
  var catparametersReplicateVirtualMachineVMImagePlan0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImagePlan0 = catparametersReplicateVirtualMachineVMImagePlan0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersReplicateVirtualMachineVMImagePlan0 = parametersReplicateVirtualMachineVMImagePlan0.category('plan')
  .description($('Commands to set components of virtual-machine-vm-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineVMImagePlan0.command('set')
  .description($('Set plan in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "plan" : {\r\n             "name":"",\r\n             "product":"",\r\n             "publisher":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--product <product>', $('Set the product value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/marketplaceImageAttributes/plan';
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'product';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.product) {
      if (options.parse && options.product) {
        options.product = JSON.parse(options.product);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.product}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete plan
  var catparametersReplicateVirtualMachineVMImagePlan1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImagePlan1 = catparametersReplicateVirtualMachineVMImagePlan1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineVMImagePlan1 = parametersReplicateVirtualMachineVMImagePlan1.category('plan')
  .description($('Commands to delete components of virtual-machine-vm-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineVMImagePlan1.command('delete')
  .description($('Remove plan in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "plan" : {\r\n             "name":"",\r\n             "product":"",\r\n             "publisher":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--product', $('Remove the product value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/marketplaceImageAttributes/plan';
    var anySubItem = false || options.name || options.product || options.publisher;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.product) {
        subItemPath = options.path + '/product';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters add plan
  var catparametersReplicateVirtualMachineVMImagePlan2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImagePlan2 = catparametersReplicateVirtualMachineVMImagePlan2.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var addparametersReplicateVirtualMachineVMImagePlan2 = parametersReplicateVirtualMachineVMImagePlan2.category('plan')
  .description($('Commands to add components of virtual-machine-vm-image in replicate-parameters file.'));
  addparametersReplicateVirtualMachineVMImagePlan2.command('add')
  .description($('Add plan in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "plan" : {\r\n             "name":"",\r\n             "product":"",\r\n             "publisher":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--product <product>', $('Add the product value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/marketplaceImageAttributes/plan' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/marketplaceImageAttributes/plan' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/marketplaceImageAttributes/plan' + '/' + 'product';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.product) {
      if (options.parse && options.product) {
        options.product = JSON.parse(options.product);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.product}]);
    }
    paramPath = '/marketplaceImageAttributes/plan' + '/' + 'publisher';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters set target-locations
  var catparametersReplicateVirtualMachineVMImageTargetLocations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageTargetLocations0 = catparametersReplicateVirtualMachineVMImageTargetLocations0.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersReplicateVirtualMachineVMImageTargetLocations0 = parametersReplicateVirtualMachineVMImageTargetLocations0.category('target-locations')
  .description($('Commands to set components of virtual-machine-vm-image in replicate-parameters file.'));
  setparametersReplicateVirtualMachineVMImageTargetLocations0.command('set')
  .description($('Set target-locations in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "targetLocations" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //replicate-parameters delete target-locations
  var catparametersReplicateVirtualMachineVMImageTargetLocations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageTargetLocations1 = catparametersReplicateVirtualMachineVMImageTargetLocations1.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersReplicateVirtualMachineVMImageTargetLocations1 = parametersReplicateVirtualMachineVMImageTargetLocations1.category('target-locations')
  .description($('Commands to delete components of virtual-machine-vm-image in replicate-parameters file.'));
  deleteparametersReplicateVirtualMachineVMImageTargetLocations1.command('delete')
  .description($('Remove target-locations in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "targetLocations" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //replicate-parameters add target-locations
  var catparametersReplicateVirtualMachineVMImageTargetLocations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersReplicateVirtualMachineVMImageTargetLocations2 = catparametersReplicateVirtualMachineVMImageTargetLocations2.category('replicate-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var addparametersReplicateVirtualMachineVMImageTargetLocations2 = parametersReplicateVirtualMachineVMImageTargetLocations2.category('target-locations')
  .description($('Commands to add components of virtual-machine-vm-image in replicate-parameters file.'));
  addparametersReplicateVirtualMachineVMImageTargetLocations2.command('add')
  .description($('Add target-locations in replicate-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "targetLocations" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachineVMImage Share
  --vm-image-name
  --permission
*/
  var virtualMachineVMImageShare = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image')
  .description($('Commands to manage your virtual machine vm image.  '));
  virtualMachineVMImageShare.command('share [vm-image-name] [permission]')
  .description($('Share an already replicated VM image. This operation is only for publishers. You have to be registered as image publisher with Windows Azure to be able to call this.'))
  .usage('[options] <vm-image-name> <permission>')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('--permission <permission>', $('permission'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(vMImageName, permission, options, _) {
    if (!vMImageName) {
      vMImageName = cli.interaction.promptIfNotGiven($('vm-image-name : '), vMImageName, _);
    }

    cli.output.verbose('vMImageName = ' + vMImageName);
    if (!permission) {
      permission = cli.interaction.promptIfNotGiven($('permission : '), permission, _);
    }

    cli.output.verbose('permission = ' + permission);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImage.share(vMImageName, permission, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineVMImage Unreplicate
  --vm-image-name
*/
  var virtualMachineVMImageUnreplicate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image')
  .description($('Commands to manage your virtual machine vm image.  '));
  virtualMachineVMImageUnreplicate.command('unreplicate [vm-image-name]')
  .description($('Unreplicate an VM image to multiple target locations. This operation is only for publishers. You have to be registered as image publisher with Windows Azure to be able to call this. Note: The operation removes the published copies of the user VM Image. It does not remove the actual user VM Image. To remove the actual user VM Image, the publisher will have to call Delete VM Image.'))
  .usage('[options] <vm-image-name>')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(vMImageName, options, _) {
    if (!vMImageName) {
      vMImageName = cli.interaction.promptIfNotGiven($('vm-image-name : '), vMImageName, _);
    }

    cli.output.verbose('vMImageName = ' + vMImageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImage.unreplicate(vMImageName, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineVMImage Update
  --image-name
  --parameters
=============================================
{
  "dataDiskConfigurations":[
    {
      "hostCaching":"",
      "logicalUnitNumber":null,
      "name":""
    }
  ],
  "description":"",
  "eula":"",
  "iconUri":"",
  "imageFamily":"",
  "label":"",
  "language":"",
  "oSDiskConfiguration":{
    "hostCaching":""
  },
  "privacyUri":"",
  "publishedDate":null,
  "recommendedVMSize":"",
  "showInGui":null,
  "smallIconUri":""
}
*/
  var virtualMachineVMImageUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image')
  .description($('Commands to manage your virtual machine vm image.  '));
  virtualMachineVMImageUpdate.command('update [image-name] [parameters]')
  .description($('The Update VM Image operation updates a VM image that in your image repository.'))
  .usage('[options] <image-name> <parameters>')
  .option('--image-name <image-name>', $('image-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(imageName, parameters, options, _) {
    if (!imageName) {
      imageName = cli.interaction.promptIfNotGiven($('image-name : '), imageName, _);
    }

    cli.output.verbose('imageName = ' + imageName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImage.update(imageName, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineVMImageUpdateupdateParameters1 = virtualMachineVMImageUpdate.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  virtualMachineVMImageUpdateupdateParameters1.command('generate')
  .description($('Generate virtualMachineVMImageUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"dataDiskConfigurations\":[{\"hostCaching\":\"\",\"logicalUnitNumber\":null,\"name\":\"\"}],\"description\":\"\",\"eula\":\"\",\"iconUri\":\"\",\"imageFamily\":\"\",\"label\":\"\",\"language\":\"\",\"oSDiskConfiguration\":{\"hostCaching\":\"\"},\"privacyUri\":\"\",\"publishedDate\":null,\"recommendedVMSize\":\"\",\"showInGui\":null,\"smallIconUri\":\"\"}', _);
    var filePath = 'virtualMachineVMImageUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"dataDiskConfigurations\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"logicalUnitNumber\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"description\":\"\",\r\n\"eula\":\"\",\r\n\"iconUri\":\"\",\r\n\"imageFamily\":\"\",\r\n\"label\":\"\",\r\n\"language\":\"\",\r\n\"oSDiskConfiguration\":{\r\n\"hostCaching\":\"\"\r\n},\r\n\"privacyUri\":\"\",\r\n\"publishedDate\":null,\r\n\"recommendedVMSize\":\"\",\r\n\"showInGui\":null,\r\n\"smallIconUri\":\"\"\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineVMImageUpdateupdateParameters1.command('patch')
  .description($('Command to patch virtualMachineVMImageUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set virtual-machine-vm-image-update-parameters
  var catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0 = catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0 = parametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0.category('virtual-machine-vm-image-update-parameters')
  .description($('Commands to set components of virtual-machine-vm-image in update-parameters file.'));
  setparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0.command('set')
  .description($('Set virtual-machine-vm-image-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "dataDiskConfigurations":[\r\n    {\r\n      "hostCaching":"",\r\n      "logicalUnitNumber":null,\r\n      "name":""\r\n    }\r\n  ],\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "label":"",\r\n  "language":"",\r\n  "oSDiskConfiguration":{\r\n    "hostCaching":""\r\n  },\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":null,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Set the data-disk-configurations value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--icon-uri <iconUri>', $('Set the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Set the image-family value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--language <language>', $('Set the language value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Set the os-disk-configuration value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Set the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Set the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Set the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'dataDiskConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'iconUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = options.path + '/' + 'imageFamily';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'language';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = options.path + '/' + 'oSDiskConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'recommendedVMSize';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = options.path + '/' + 'showInGui';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
        options.showInGui = JSON.parse(options.showInGui);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = options.path + '/' + 'smallIconUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete virtual-machine-vm-image-update-parameters
  var catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1 = catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1 = parametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1.category('virtual-machine-vm-image-update-parameters')
  .description($('Commands to delete components of virtual-machine-vm-image in update-parameters file.'));
  deleteparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1.command('delete')
  .description($('Remove virtual-machine-vm-image-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "dataDiskConfigurations":[\r\n    {\r\n      "hostCaching":"",\r\n      "logicalUnitNumber":null,\r\n      "name":""\r\n    }\r\n  ],\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "label":"",\r\n  "language":"",\r\n  "oSDiskConfiguration":{\r\n    "hostCaching":""\r\n  },\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":null,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disk-configurations', $('Remove the data-disk-configurations value.'))
  .option('--description', $('Remove the description value.'))
  .option('--eula', $('Remove the eula value.'))
  .option('--icon-uri', $('Remove the icon-uri value.'))
  .option('--image-family', $('Remove the image-family value.'))
  .option('--label', $('Remove the label value.'))
  .option('--language', $('Remove the language value.'))
  .option('--os-disk-configuration', $('Remove the os-disk-configuration value.'))
  .option('--privacy-uri', $('Remove the privacy-uri value.'))
  .option('--published-date', $('Remove the published-date value.'))
  .option('--recommended-vm-size', $('Remove the recommended-vm-size value.'))
  .option('--show-in-gui', $('Remove the show-in-gui value.'))
  .option('--small-icon-uri', $('Remove the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.dataDiskConfigurations || options.description || options.eula || options.iconUri || options.imageFamily || options.label || options.language || options.oSDiskConfiguration || options.privacyUri || options.publishedDate || options.recommendedVMSize || options.showInGui || options.smallIconUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.dataDiskConfigurations) {
        subItemPath = options.path + '/dataDiskConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.eula) {
        subItemPath = options.path + '/eula';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.iconUri) {
        subItemPath = options.path + '/iconUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.imageFamily) {
        subItemPath = options.path + '/imageFamily';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.label) {
        subItemPath = options.path + '/label';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.language) {
        subItemPath = options.path + '/language';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSDiskConfiguration) {
        subItemPath = options.path + '/oSDiskConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privacyUri) {
        subItemPath = options.path + '/privacyUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publishedDate) {
        subItemPath = options.path + '/publishedDate';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.recommendedVMSize) {
        subItemPath = options.path + '/recommendedVMSize';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.showInGui) {
        subItemPath = options.path + '/showInGui';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.smallIconUri) {
        subItemPath = options.path + '/smallIconUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add virtual-machine-vm-image-update-parameters
  var catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2 = catparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var addparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2 = parametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2.category('virtual-machine-vm-image-update-parameters')
  .description($('Commands to add components of virtual-machine-vm-image in update-parameters file.'));
  addparametersUpdateVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2.command('add')
  .description($('Add virtual-machine-vm-image-update-parameters in update-parameters string or files, e.g. \r\n{\r\n  "dataDiskConfigurations":[\r\n    {\r\n      "hostCaching":"",\r\n      "logicalUnitNumber":null,\r\n      "name":""\r\n    }\r\n  ],\r\n  "description":"",\r\n  "eula":"",\r\n  "iconUri":"",\r\n  "imageFamily":"",\r\n  "label":"",\r\n  "language":"",\r\n  "oSDiskConfiguration":{\r\n    "hostCaching":""\r\n  },\r\n  "privacyUri":"",\r\n  "publishedDate":null,\r\n  "recommendedVMSize":"",\r\n  "showInGui":null,\r\n  "smallIconUri":""\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Add the data-disk-configurations value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--icon-uri <iconUri>', $('Add the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Add the image-family value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--language <language>', $('Add the language value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Add the os-disk-configuration value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Add the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Add the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Add the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'dataDiskConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = '' + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'iconUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = '' + '/' + 'imageFamily';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'language';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = '' + '/' + 'oSDiskConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'recommendedVMSize';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = '' + '/' + 'showInGui';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
        options.showInGui = JSON.parse(options.showInGui);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = '' + '/' + 'smallIconUri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set data-disk-configurations
  var catparametersUpdateVirtualMachineVMImageDataDiskConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageDataDiskConfigurations0 = catparametersUpdateVirtualMachineVMImageDataDiskConfigurations0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersUpdateVirtualMachineVMImageDataDiskConfigurations0 = parametersUpdateVirtualMachineVMImageDataDiskConfigurations0.category('data-disk-configurations')
  .description($('Commands to set components of virtual-machine-vm-image in update-parameters file.'));
  setparametersUpdateVirtualMachineVMImageDataDiskConfigurations0.command('set')
  .description($('Set data-disk-configurations in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "hostCaching":"",\r\n             "logicalUnitNumber":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete data-disk-configurations
  var catparametersUpdateVirtualMachineVMImageDataDiskConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageDataDiskConfigurations1 = catparametersUpdateVirtualMachineVMImageDataDiskConfigurations1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersUpdateVirtualMachineVMImageDataDiskConfigurations1 = parametersUpdateVirtualMachineVMImageDataDiskConfigurations1.category('data-disk-configurations')
  .description($('Commands to delete components of virtual-machine-vm-image in update-parameters file.'));
  deleteparametersUpdateVirtualMachineVMImageDataDiskConfigurations1.command('delete')
  .description($('Remove data-disk-configurations in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "hostCaching":"",\r\n             "logicalUnitNumber":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .option('--logical-unit-number', $('Remove the logical-unit-number value.'))
  .option('--name', $('Remove the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.hostCaching || options.logicalUnitNumber || options.name;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.logicalUnitNumber) {
        subItemPath = options.path + '/logicalUnitNumber';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add data-disk-configurations
  var catparametersUpdateVirtualMachineVMImageDataDiskConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageDataDiskConfigurations2 = catparametersUpdateVirtualMachineVMImageDataDiskConfigurations2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var addparametersUpdateVirtualMachineVMImageDataDiskConfigurations2 = parametersUpdateVirtualMachineVMImageDataDiskConfigurations2.category('data-disk-configurations')
  .description($('Commands to add components of virtual-machine-vm-image in update-parameters file.'));
  addparametersUpdateVirtualMachineVMImageDataDiskConfigurations2.command('add')
  .description($('Add data-disk-configurations in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDiskConfigurations" : {\r\n             "hostCaching":"",\r\n             "logicalUnitNumber":null,\r\n             "name":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalUnitNumber';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters set os-disk-configuration
  var catparametersUpdateVirtualMachineVMImageOSDiskConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageOSDiskConfiguration0 = catparametersUpdateVirtualMachineVMImageOSDiskConfiguration0.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var setparametersUpdateVirtualMachineVMImageOSDiskConfiguration0 = parametersUpdateVirtualMachineVMImageOSDiskConfiguration0.category('os-disk-configuration')
  .description($('Commands to set components of virtual-machine-vm-image in update-parameters file.'));
  setparametersUpdateVirtualMachineVMImageOSDiskConfiguration0.command('set')
  .description($('Set os-disk-configuration in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "hostCaching":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/oSDiskConfiguration';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //update-parameters delete os-disk-configuration
  var catparametersUpdateVirtualMachineVMImageOSDiskConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageOSDiskConfiguration1 = catparametersUpdateVirtualMachineVMImageOSDiskConfiguration1.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var deleteparametersUpdateVirtualMachineVMImageOSDiskConfiguration1 = parametersUpdateVirtualMachineVMImageOSDiskConfiguration1.category('os-disk-configuration')
  .description($('Commands to delete components of virtual-machine-vm-image in update-parameters file.'));
  deleteparametersUpdateVirtualMachineVMImageOSDiskConfiguration1.command('delete')
  .description($('Remove os-disk-configuration in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "hostCaching":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--host-caching', $('Remove the host-caching value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/oSDiskConfiguration';
    var anySubItem = false || options.hostCaching;
    if (anySubItem) {
      var subItemPath = null;
      if (options.hostCaching) {
        subItemPath = options.path + '/hostCaching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //update-parameters add os-disk-configuration
  var catparametersUpdateVirtualMachineVMImageOSDiskConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersUpdateVirtualMachineVMImageOSDiskConfiguration2 = catparametersUpdateVirtualMachineVMImageOSDiskConfiguration2.category('update-parameters')
  .description($('Commands to manage configuration of virtual-machine-vm-image in the parameter file.'));
  var addparametersUpdateVirtualMachineVMImageOSDiskConfiguration2 = parametersUpdateVirtualMachineVMImageOSDiskConfiguration2.category('os-disk-configuration')
  .description($('Commands to add components of virtual-machine-vm-image in update-parameters file.'));
  addparametersUpdateVirtualMachineVMImageOSDiskConfiguration2.command('add')
  .description($('Add os-disk-configuration in update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "oSDiskConfiguration" : {\r\n             "hostCaching":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/oSDiskConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/oSDiskConfiguration' + '/' + 'hostCaching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });




};
