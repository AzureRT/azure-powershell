/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

function beautify(jsonText) {
    var obj = JSON.parse(jsonText);
    return JSON.stringify(obj, null, 2);
}

exports.init = function (cli) {

/*

  Deployment ChangeConfigurationByName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "configuration":"",
  "extendedProperties":{
  },
  "extensionConfiguration":{
    "allRoles":[
      {
        "id":""
      }
    ],
    "namedRoles":[
      {
        "extensions":[
          {
            "id":""
          }
        ],
        "roleName":""
      }
    ]
  },
  "mode":null,
  "treatWarningsAsError":null
}

  var deploymentChangeConfigurationByName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentChangeConfigurationByName.command('change-configuration-by-name')
  .description($('change-configuration-by-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.changeConfigurationByName(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentChangeConfigurationByNamechangeConfigurationByNameParameters2 = deploymentChangeConfigurationByName.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentChangeConfigurationByNamechangeConfigurationByNameGenerate2 = deploymentChangeConfigurationByNamechangeConfigurationByNameParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentChangeConfigurationByNamechangeConfigurationByNameGenerate2.command('change-configuration-by-name')
  .description($('Generate deploymentChangeConfigurationByName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"configuration\":\"\",\"extendedProperties\":{},\"extensionConfiguration\":{\"allRoles\":[{\"id\":\"\"}],\"namedRoles\":[{\"extensions\":[{\"id\":\"\"}],\"roleName\":\"\"}]},\"mode\":null,\"treatWarningsAsError\":null}', _);
    var filePath = 'deploymentChangeConfigurationByName_changeConfigurationByName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"configuration\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"extensionConfiguration\":{\r\n\"allRoles\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"namedRoles\":[\r\n{\r\n\"extensions\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\"\r\n}\r\n]\r\n},\r\n\"mode\":null,\r\n\"treatWarningsAsError\":null\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentChangeConfigurationByNamechangeConfigurationByNameParameters2.command('patch')
  .description($('Command to patch deploymentChangeConfigurationByName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-change-configuration-parameters
  var catparametersDeploymentDeploymentChangeConfigurationParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentChangeConfigurationParameters0 = catparametersDeploymentDeploymentChangeConfigurationParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentDeploymentChangeConfigurationParameters0 = parametersDeploymentDeploymentChangeConfigurationParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentDeploymentChangeConfigurationParameters0.command('deployment-change-configuration-parameters')
  .description($('Set catparametersDeploymentDeploymentChangeConfigurationParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Set the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Set the extension-configuration value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Set the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = options.path + '/' + 'treatWarningsAsError';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-change-configuration-parameters
  var catparametersDeploymentDeploymentChangeConfigurationParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentChangeConfigurationParameters1 = catparametersDeploymentDeploymentChangeConfigurationParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentDeploymentChangeConfigurationParameters1 = parametersDeploymentDeploymentChangeConfigurationParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentDeploymentChangeConfigurationParameters1.command('deployment-change-configuration-parameters')
  .description($('Remove catparametersDeploymentDeploymentChangeConfigurationParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-change-configuration-parameters
  var catparametersDeploymentDeploymentChangeConfigurationParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentChangeConfigurationParameters2 = catparametersDeploymentDeploymentChangeConfigurationParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentDeploymentChangeConfigurationParameters2 = parametersDeploymentDeploymentChangeConfigurationParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentDeploymentChangeConfigurationParameters2.command('deployment-change-configuration-parameters')
  .description($('Remove catparametersDeploymentDeploymentChangeConfigurationParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Add the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Add the extension-configuration value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Add the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = '' + '/' + 'treatWarningsAsError';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-configuration
  var catparametersDeploymentExtensionConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensionConfiguration0 = catparametersDeploymentExtensionConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentExtensionConfiguration0 = parametersDeploymentExtensionConfiguration0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentExtensionConfiguration0.command('extension-configuration')
  .description($('Set catparametersDeploymentExtensionConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Set the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Set the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration';
    var paramPath = options.path + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = options.path + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-configuration
  var catparametersDeploymentExtensionConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensionConfiguration1 = catparametersDeploymentExtensionConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentExtensionConfiguration1 = parametersDeploymentExtensionConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentExtensionConfiguration1.command('extension-configuration')
  .description($('Remove catparametersDeploymentExtensionConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-configuration
  var catparametersDeploymentExtensionConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensionConfiguration2 = catparametersDeploymentExtensionConfiguration2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentExtensionConfiguration2 = parametersDeploymentExtensionConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentExtensionConfiguration2.command('extension-configuration')
  .description($('Remove catparametersDeploymentExtensionConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Add the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Add the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration' + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = '/extensionConfiguration' + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set all-roles
  var catparametersDeploymentAllRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentAllRoles0 = catparametersDeploymentAllRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentAllRoles0 = parametersDeploymentAllRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentAllRoles0.command('all-roles')
  .description($('Set catparametersDeploymentAllRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove all-roles
  var catparametersDeploymentAllRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentAllRoles1 = catparametersDeploymentAllRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentAllRoles1 = parametersDeploymentAllRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentAllRoles1.command('all-roles')
  .description($('Remove catparametersDeploymentAllRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add all-roles
  var catparametersDeploymentAllRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentAllRoles2 = catparametersDeploymentAllRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentAllRoles2 = parametersDeploymentAllRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentAllRoles2.command('all-roles')
  .description($('Remove catparametersDeploymentAllRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set named-roles
  var catparametersDeploymentNamedRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentNamedRoles0 = catparametersDeploymentNamedRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentNamedRoles0 = parametersDeploymentNamedRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentNamedRoles0.command('named-roles')
  .description($('Set catparametersDeploymentNamedRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove named-roles
  var catparametersDeploymentNamedRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentNamedRoles1 = catparametersDeploymentNamedRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentNamedRoles1 = parametersDeploymentNamedRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentNamedRoles1.command('named-roles')
  .description($('Remove catparametersDeploymentNamedRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add named-roles
  var catparametersDeploymentNamedRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentNamedRoles2 = catparametersDeploymentNamedRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentNamedRoles2 = parametersDeploymentNamedRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentNamedRoles2.command('named-roles')
  .description($('Remove catparametersDeploymentNamedRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--extensions <extensions>', $('Add the extensions value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extensions
  var catparametersDeploymentExtensions0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensions0 = catparametersDeploymentExtensions0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentExtensions0 = parametersDeploymentExtensions0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentExtensions0.command('extensions')
  .description($('Set catparametersDeploymentExtensions0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extensions
  var catparametersDeploymentExtensions1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensions1 = catparametersDeploymentExtensions1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentExtensions1 = parametersDeploymentExtensions1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentExtensions1.command('extensions')
  .description($('Remove catparametersDeploymentExtensions1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extensions
  var catparametersDeploymentExtensions2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensions2 = catparametersDeploymentExtensions2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentExtensions2 = parametersDeploymentExtensions2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentExtensions2.command('extensions')
  .description($('Remove catparametersDeploymentExtensions2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });



*/
/*

  Deployment ChangeConfigurationBySlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "configuration":"",
  "extendedProperties":{
  },
  "extensionConfiguration":{
    "allRoles":[
      {
        "id":""
      }
    ],
    "namedRoles":[
      {
        "extensions":[
          {
            "id":""
          }
        ],
        "roleName":""
      }
    ]
  },
  "mode":null,
  "treatWarningsAsError":null
}

  var deploymentChangeConfigurationBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentChangeConfigurationBySlot.command('change-configuration-by-slot')
  .description($('change-configuration-by-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var deploymentSlotObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deploymentSlotObj = JSON.parse(fileContent);
    }
    else {
      deploymentSlotObj = {};
    }
    cli.output.info('deploymentSlotObj = ' + JSON.stringify(deploymentSlotObj));
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.changeConfigurationBySlot(options.serviceName, options.deploymentSlot, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentChangeConfigurationBySlotchangeConfigurationBySlotParameters2 = deploymentChangeConfigurationBySlot.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentChangeConfigurationBySlotchangeConfigurationBySlotGenerate2 = deploymentChangeConfigurationBySlotchangeConfigurationBySlotParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentChangeConfigurationBySlotchangeConfigurationBySlotGenerate2.command('change-configuration-by-slot')
  .description($('Generate deploymentChangeConfigurationBySlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"configuration\":\"\",\"extendedProperties\":{},\"extensionConfiguration\":{\"allRoles\":[{\"id\":\"\"}],\"namedRoles\":[{\"extensions\":[{\"id\":\"\"}],\"roleName\":\"\"}]},\"mode\":null,\"treatWarningsAsError\":null}', _);
    var filePath = 'deploymentChangeConfigurationBySlot_changeConfigurationBySlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"configuration\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"extensionConfiguration\":{\r\n\"allRoles\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"namedRoles\":[\r\n{\r\n\"extensions\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\"\r\n}\r\n]\r\n},\r\n\"mode\":null,\r\n\"treatWarningsAsError\":null\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentChangeConfigurationBySlotchangeConfigurationBySlotParameters2.command('patch')
  .description($('Command to patch deploymentChangeConfigurationBySlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-change-configuration-parameters
  var catparametersDeploymentDeploymentChangeConfigurationParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentChangeConfigurationParameters0 = catparametersDeploymentDeploymentChangeConfigurationParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentDeploymentChangeConfigurationParameters0 = parametersDeploymentDeploymentChangeConfigurationParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentDeploymentChangeConfigurationParameters0.command('deployment-change-configuration-parameters')
  .description($('Set catparametersDeploymentDeploymentChangeConfigurationParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Set the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Set the extension-configuration value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Set the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = options.path + '/' + 'treatWarningsAsError';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-change-configuration-parameters
  var catparametersDeploymentDeploymentChangeConfigurationParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentChangeConfigurationParameters1 = catparametersDeploymentDeploymentChangeConfigurationParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentDeploymentChangeConfigurationParameters1 = parametersDeploymentDeploymentChangeConfigurationParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentDeploymentChangeConfigurationParameters1.command('deployment-change-configuration-parameters')
  .description($('Remove catparametersDeploymentDeploymentChangeConfigurationParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-change-configuration-parameters
  var catparametersDeploymentDeploymentChangeConfigurationParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentChangeConfigurationParameters2 = catparametersDeploymentDeploymentChangeConfigurationParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentDeploymentChangeConfigurationParameters2 = parametersDeploymentDeploymentChangeConfigurationParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentDeploymentChangeConfigurationParameters2.command('deployment-change-configuration-parameters')
  .description($('Remove catparametersDeploymentDeploymentChangeConfigurationParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Add the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Add the extension-configuration value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Add the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = '' + '/' + 'treatWarningsAsError';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-configuration
  var catparametersDeploymentExtensionConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensionConfiguration0 = catparametersDeploymentExtensionConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentExtensionConfiguration0 = parametersDeploymentExtensionConfiguration0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentExtensionConfiguration0.command('extension-configuration')
  .description($('Set catparametersDeploymentExtensionConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Set the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Set the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration';
    var paramPath = options.path + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = options.path + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-configuration
  var catparametersDeploymentExtensionConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensionConfiguration1 = catparametersDeploymentExtensionConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentExtensionConfiguration1 = parametersDeploymentExtensionConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentExtensionConfiguration1.command('extension-configuration')
  .description($('Remove catparametersDeploymentExtensionConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-configuration
  var catparametersDeploymentExtensionConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensionConfiguration2 = catparametersDeploymentExtensionConfiguration2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentExtensionConfiguration2 = parametersDeploymentExtensionConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentExtensionConfiguration2.command('extension-configuration')
  .description($('Remove catparametersDeploymentExtensionConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Add the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Add the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration' + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = '/extensionConfiguration' + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set all-roles
  var catparametersDeploymentAllRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentAllRoles0 = catparametersDeploymentAllRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentAllRoles0 = parametersDeploymentAllRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentAllRoles0.command('all-roles')
  .description($('Set catparametersDeploymentAllRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove all-roles
  var catparametersDeploymentAllRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentAllRoles1 = catparametersDeploymentAllRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentAllRoles1 = parametersDeploymentAllRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentAllRoles1.command('all-roles')
  .description($('Remove catparametersDeploymentAllRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add all-roles
  var catparametersDeploymentAllRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentAllRoles2 = catparametersDeploymentAllRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentAllRoles2 = parametersDeploymentAllRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentAllRoles2.command('all-roles')
  .description($('Remove catparametersDeploymentAllRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set named-roles
  var catparametersDeploymentNamedRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentNamedRoles0 = catparametersDeploymentNamedRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentNamedRoles0 = parametersDeploymentNamedRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentNamedRoles0.command('named-roles')
  .description($('Set catparametersDeploymentNamedRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove named-roles
  var catparametersDeploymentNamedRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentNamedRoles1 = catparametersDeploymentNamedRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentNamedRoles1 = parametersDeploymentNamedRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentNamedRoles1.command('named-roles')
  .description($('Remove catparametersDeploymentNamedRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add named-roles
  var catparametersDeploymentNamedRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentNamedRoles2 = catparametersDeploymentNamedRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentNamedRoles2 = parametersDeploymentNamedRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentNamedRoles2.command('named-roles')
  .description($('Remove catparametersDeploymentNamedRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--extensions <extensions>', $('Add the extensions value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extensions
  var catparametersDeploymentExtensions0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensions0 = catparametersDeploymentExtensions0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentExtensions0 = parametersDeploymentExtensions0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentExtensions0.command('extensions')
  .description($('Set catparametersDeploymentExtensions0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extensions
  var catparametersDeploymentExtensions1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensions1 = catparametersDeploymentExtensions1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentExtensions1 = parametersDeploymentExtensions1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentExtensions1.command('extensions')
  .description($('Remove catparametersDeploymentExtensions1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extensions
  var catparametersDeploymentExtensions2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensions2 = catparametersDeploymentExtensions2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentExtensions2 = parametersDeploymentExtensions2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentExtensions2.command('extensions')
  .description($('Remove catparametersDeploymentExtensions2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });



*/
/*

  Deployment Create
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "configuration":"",
  "extendedProperties":{
  },
  "extensionConfiguration":{
    "allRoles":[
      {
        "id":""
      }
    ],
    "namedRoles":[
      {
        "extensions":[
          {
            "id":""
          }
        ],
        "roleName":""
      }
    ]
  },
  "label":"",
  "name":"",
  "packageUri":"",
  "startDeployment":null,
  "treatWarningsAsError":null
}

  var deploymentCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentCreate.command('create')
  .description($('create method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var deploymentSlotObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deploymentSlotObj = JSON.parse(fileContent);
    }
    else {
      deploymentSlotObj = {};
    }
    cli.output.info('deploymentSlotObj = ' + JSON.stringify(deploymentSlotObj));
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.create(options.serviceName, options.deploymentSlot, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentCreatecreateParameters2 = deploymentCreate.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentCreatecreateGenerate2 = deploymentCreatecreateParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentCreatecreateGenerate2.command('create')
  .description($('Generate deploymentCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"configuration\":\"\",\"extendedProperties\":{},\"extensionConfiguration\":{\"allRoles\":[{\"id\":\"\"}],\"namedRoles\":[{\"extensions\":[{\"id\":\"\"}],\"roleName\":\"\"}]},\"label\":\"\",\"name\":\"\",\"packageUri\":\"\",\"startDeployment\":null,\"treatWarningsAsError\":null}', _);
    var filePath = 'deploymentCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"configuration\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"extensionConfiguration\":{\r\n\"allRoles\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"namedRoles\":[\r\n{\r\n\"extensions\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\"\r\n}\r\n]\r\n},\r\n\"label\":\"\",\r\n\"name\":\"\",\r\n\"packageUri\":\"\",\r\n\"startDeployment\":null,\r\n\"treatWarningsAsError\":null\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentCreatecreateParameters2.command('patch')
  .description($('Command to patch deploymentCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-create-parameters
  var catparametersDeploymentDeploymentCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentCreateParameters0 = catparametersDeploymentDeploymentCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentDeploymentCreateParameters0 = parametersDeploymentDeploymentCreateParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentDeploymentCreateParameters0.command('deployment-create-parameters')
  .description($('Set catparametersDeploymentDeploymentCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Set the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Set the extension-configuration value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--package-uri <packageUri>', $('Set the package-uri value.'))
  .option('--start-deployment <startDeployment>', $('Set the start-deployment value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Set the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'packageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = options.path + '/' + 'startDeployment';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.startDeployment) {
      if (options.parse && options.startDeployment) {
        options.startDeployment = JSON.parse(options.startDeployment);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.startDeployment}]);
    }
    paramPath = options.path + '/' + 'treatWarningsAsError';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-create-parameters
  var catparametersDeploymentDeploymentCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentCreateParameters1 = catparametersDeploymentDeploymentCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentDeploymentCreateParameters1 = parametersDeploymentDeploymentCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentDeploymentCreateParameters1.command('deployment-create-parameters')
  .description($('Remove catparametersDeploymentDeploymentCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-create-parameters
  var catparametersDeploymentDeploymentCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentCreateParameters2 = catparametersDeploymentDeploymentCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentDeploymentCreateParameters2 = parametersDeploymentDeploymentCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentDeploymentCreateParameters2.command('deployment-create-parameters')
  .description($('Remove catparametersDeploymentDeploymentCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Add the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Add the extension-configuration value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--package-uri <packageUri>', $('Add the package-uri value.'))
  .option('--start-deployment <startDeployment>', $('Add the start-deployment value.'))
  .option('--treat-warnings-as-error <treatWarningsAsError>', $('Add the treat-warnings-as-error value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'packageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = '' + '/' + 'startDeployment';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.startDeployment) {
      if (options.parse && options.startDeployment) {
        options.startDeployment = JSON.parse(options.startDeployment);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.startDeployment}]);
    }
    paramPath = '' + '/' + 'treatWarningsAsError';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.treatWarningsAsError) {
      if (options.parse && options.treatWarningsAsError) {
        options.treatWarningsAsError = JSON.parse(options.treatWarningsAsError);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.treatWarningsAsError}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-configuration
  var catparametersDeploymentExtensionConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensionConfiguration0 = catparametersDeploymentExtensionConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentExtensionConfiguration0 = parametersDeploymentExtensionConfiguration0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentExtensionConfiguration0.command('extension-configuration')
  .description($('Set catparametersDeploymentExtensionConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Set the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Set the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration';
    var paramPath = options.path + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = options.path + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-configuration
  var catparametersDeploymentExtensionConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensionConfiguration1 = catparametersDeploymentExtensionConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentExtensionConfiguration1 = parametersDeploymentExtensionConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentExtensionConfiguration1.command('extension-configuration')
  .description($('Remove catparametersDeploymentExtensionConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-configuration
  var catparametersDeploymentExtensionConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensionConfiguration2 = catparametersDeploymentExtensionConfiguration2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentExtensionConfiguration2 = parametersDeploymentExtensionConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentExtensionConfiguration2.command('extension-configuration')
  .description($('Remove catparametersDeploymentExtensionConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Add the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Add the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration' + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = '/extensionConfiguration' + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set all-roles
  var catparametersDeploymentAllRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentAllRoles0 = catparametersDeploymentAllRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentAllRoles0 = parametersDeploymentAllRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentAllRoles0.command('all-roles')
  .description($('Set catparametersDeploymentAllRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove all-roles
  var catparametersDeploymentAllRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentAllRoles1 = catparametersDeploymentAllRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentAllRoles1 = parametersDeploymentAllRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentAllRoles1.command('all-roles')
  .description($('Remove catparametersDeploymentAllRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add all-roles
  var catparametersDeploymentAllRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentAllRoles2 = catparametersDeploymentAllRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentAllRoles2 = parametersDeploymentAllRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentAllRoles2.command('all-roles')
  .description($('Remove catparametersDeploymentAllRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set named-roles
  var catparametersDeploymentNamedRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentNamedRoles0 = catparametersDeploymentNamedRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentNamedRoles0 = parametersDeploymentNamedRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentNamedRoles0.command('named-roles')
  .description($('Set catparametersDeploymentNamedRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove named-roles
  var catparametersDeploymentNamedRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentNamedRoles1 = catparametersDeploymentNamedRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentNamedRoles1 = parametersDeploymentNamedRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentNamedRoles1.command('named-roles')
  .description($('Remove catparametersDeploymentNamedRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add named-roles
  var catparametersDeploymentNamedRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentNamedRoles2 = catparametersDeploymentNamedRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentNamedRoles2 = parametersDeploymentNamedRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentNamedRoles2.command('named-roles')
  .description($('Remove catparametersDeploymentNamedRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--extensions <extensions>', $('Add the extensions value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extensions
  var catparametersDeploymentExtensions0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensions0 = catparametersDeploymentExtensions0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentExtensions0 = parametersDeploymentExtensions0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentExtensions0.command('extensions')
  .description($('Set catparametersDeploymentExtensions0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extensions
  var catparametersDeploymentExtensions1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensions1 = catparametersDeploymentExtensions1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentExtensions1 = parametersDeploymentExtensions1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentExtensions1.command('extensions')
  .description($('Remove catparametersDeploymentExtensions1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extensions
  var catparametersDeploymentExtensions2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensions2 = catparametersDeploymentExtensions2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentExtensions2 = parametersDeploymentExtensions2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentExtensions2.command('extensions')
  .description($('Remove catparametersDeploymentExtensions2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });



*/
/*

  Deployment DeleteByName
  --service-name
  --deployment-name
  --delete-from-storage

  var deploymentDeleteByName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentDeleteByName.command('delete-by-name')
  .description($('delete-by-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(fileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.info('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.deleteByName(options.serviceName, options.deploymentName, options.deleteFromStorage, _);
    cli.output.json(result);
  });

*/
/*

  Deployment DeleteBySlot
  --service-name
  --deployment-slot
=============================================
0

  var deploymentDeleteBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentDeleteBySlot.command('delete-by-slot')
  .description($('delete-by-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var deploymentSlotObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deploymentSlotObj = JSON.parse(fileContent);
    }
    else {
      deploymentSlotObj = {};
    }
    cli.output.info('deploymentSlotObj = ' + JSON.stringify(deploymentSlotObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.deleteBySlot(options.serviceName, options.deploymentSlot, _);
    cli.output.json(result);
  });

*/
/*

  Deployment DeleteRoleInstanceByDeploymentName
  --service-name
  --deployment-name
  --role-instance-name
=============================================
{
  "name":[
    ""
  ]
}

  var deploymentDeleteRoleInstanceByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentDeleteRoleInstanceByDeploymentName.command('delete-role-instance-by-deployment-name')
  .description($('delete-role-instance-by-deployment-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('roleInstanceName = ' + options.roleInstanceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.deleteRoleInstanceByDeploymentName(options.serviceName, options.deploymentName, options.roleInstanceName, _);
    cli.output.json(result);
  });

*/
/*

  Deployment DeleteRoleInstanceByDeploymentSlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "name":[
    ""
  ]
}

  var deploymentDeleteRoleInstanceByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentDeleteRoleInstanceByDeploymentSlot.command('delete-role-instance-by-deployment-slot')
  .description($('delete-role-instance-by-deployment-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentSlot = ' + options.deploymentSlot);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      var parametersValArr = options.parameters.split(',');
      cli.output.info('parametersValArr : ' + parametersValArr);
      parametersObj = {};
      parametersObj.instanceIDs = parametersValArr;
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.deleteRoleInstanceByDeploymentSlot(options.serviceName, options.deploymentSlot, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentDeleteRoleInstanceByDeploymentSlotdeleteRoleInstanceByDeploymentSlotParameters2 = deploymentDeleteRoleInstanceByDeploymentSlot.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentDeleteRoleInstanceByDeploymentSlotdeleteRoleInstanceByDeploymentSlotGenerate2 = deploymentDeleteRoleInstanceByDeploymentSlotdeleteRoleInstanceByDeploymentSlotParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentDeleteRoleInstanceByDeploymentSlotdeleteRoleInstanceByDeploymentSlotGenerate2.command('delete-role-instance-by-deployment-slot')
  .description($('Generate deploymentDeleteRoleInstanceByDeploymentSlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"name\":[\"\"]}', _);
    var filePath = 'deploymentDeleteRoleInstanceByDeploymentSlot_deleteRoleInstanceByDeploymentSlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"name\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentDeleteRoleInstanceByDeploymentSlotdeleteRoleInstanceByDeploymentSlotParameters2.command('patch')
  .description($('Command to patch deploymentDeleteRoleInstanceByDeploymentSlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-delete-role-instance-parameters
  var catparametersDeploymentDeploymentDeleteRoleInstanceParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentDeleteRoleInstanceParameters0 = catparametersDeploymentDeploymentDeleteRoleInstanceParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentDeploymentDeleteRoleInstanceParameters0 = parametersDeploymentDeploymentDeleteRoleInstanceParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentDeploymentDeleteRoleInstanceParameters0.command('deployment-delete-role-instance-parameters')
  .description($('Set catparametersDeploymentDeploymentDeleteRoleInstanceParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-delete-role-instance-parameters
  var catparametersDeploymentDeploymentDeleteRoleInstanceParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentDeleteRoleInstanceParameters1 = catparametersDeploymentDeploymentDeleteRoleInstanceParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentDeploymentDeleteRoleInstanceParameters1 = parametersDeploymentDeploymentDeleteRoleInstanceParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentDeploymentDeleteRoleInstanceParameters1.command('deployment-delete-role-instance-parameters')
  .description($('Remove catparametersDeploymentDeploymentDeleteRoleInstanceParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-delete-role-instance-parameters
  var catparametersDeploymentDeploymentDeleteRoleInstanceParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentDeleteRoleInstanceParameters2 = catparametersDeploymentDeploymentDeleteRoleInstanceParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentDeploymentDeleteRoleInstanceParameters2 = parametersDeploymentDeploymentDeleteRoleInstanceParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentDeploymentDeleteRoleInstanceParameters2.command('deployment-delete-role-instance-parameters')
  .description($('Remove catparametersDeploymentDeploymentDeleteRoleInstanceParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set name
  var catparametersDeploymentName0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentName0 = catparametersDeploymentName0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentName0 = parametersDeploymentName0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentName0.command('name')
  .description($('Set catparametersDeploymentName0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/name' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove name
  var catparametersDeploymentName1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentName1 = catparametersDeploymentName1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentName1 = parametersDeploymentName1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentName1.command('name')
  .description($('Remove catparametersDeploymentName1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/name' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add name
  var catparametersDeploymentName2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentName2 = catparametersDeploymentName2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentName2 = parametersDeploymentName2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentName2.command('name')
  .description($('Remove catparametersDeploymentName2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/name' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });



*/
/*

  Deployment GetByName
  --service-name
  --deployment-name

  var deploymentGetByName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentGetByName.command('get-by-name')
  .description($('get-by-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.getByName(options.serviceName, options.deploymentName, _);
    cli.output.json(result);
  });

*/
/*

  Deployment GetBySlot
  --service-name
  --deployment-slot
=============================================
0

  var deploymentGetBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentGetBySlot.command('get-by-slot')
  .description($('get-by-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var deploymentSlotObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deploymentSlotObj = JSON.parse(fileContent);
    }
    else {
      deploymentSlotObj = {};
    }
    cli.output.info('deploymentSlotObj = ' + JSON.stringify(deploymentSlotObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.getBySlot(options.serviceName, options.deploymentSlot, _);
    cli.output.json(result);
  });

*/
/*

  Deployment GetPackageByName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "containerUri":"",
  "overwriteExisting":null
}

  var deploymentGetPackageByName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentGetPackageByName.command('get-package-by-name')
  .description($('get-package-by-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.getPackageByName(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentGetPackageByNamegetPackageByNameParameters2 = deploymentGetPackageByName.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentGetPackageByNamegetPackageByNameGenerate2 = deploymentGetPackageByNamegetPackageByNameParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentGetPackageByNamegetPackageByNameGenerate2.command('get-package-by-name')
  .description($('Generate deploymentGetPackageByName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"containerUri\":\"\",\"overwriteExisting\":null}', _);
    var filePath = 'deploymentGetPackageByName_getPackageByName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"containerUri\":\"\",\r\n\"overwriteExisting\":null\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentGetPackageByNamegetPackageByNameParameters2.command('patch')
  .description($('Command to patch deploymentGetPackageByName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-get-package-parameters
  var catparametersDeploymentDeploymentGetPackageParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentGetPackageParameters0 = catparametersDeploymentDeploymentGetPackageParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentDeploymentGetPackageParameters0 = parametersDeploymentDeploymentGetPackageParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentDeploymentGetPackageParameters0.command('deployment-get-package-parameters')
  .description($('Set catparametersDeploymentDeploymentGetPackageParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--container-uri <containerUri>', $('Set the container-uri value.'))
  .option('--overwrite-existing <overwriteExisting>', $('Set the overwrite-existing value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'containerUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.containerUri) {
      if (options.parse && options.containerUri) {
        options.containerUri = JSON.parse(options.containerUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.containerUri}]);
    }
    paramPath = options.path + '/' + 'overwriteExisting';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.overwriteExisting) {
      if (options.parse && options.overwriteExisting) {
        options.overwriteExisting = JSON.parse(options.overwriteExisting);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.overwriteExisting}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-get-package-parameters
  var catparametersDeploymentDeploymentGetPackageParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentGetPackageParameters1 = catparametersDeploymentDeploymentGetPackageParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentDeploymentGetPackageParameters1 = parametersDeploymentDeploymentGetPackageParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentDeploymentGetPackageParameters1.command('deployment-get-package-parameters')
  .description($('Remove catparametersDeploymentDeploymentGetPackageParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-get-package-parameters
  var catparametersDeploymentDeploymentGetPackageParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentGetPackageParameters2 = catparametersDeploymentDeploymentGetPackageParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentDeploymentGetPackageParameters2 = parametersDeploymentDeploymentGetPackageParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentDeploymentGetPackageParameters2.command('deployment-get-package-parameters')
  .description($('Remove catparametersDeploymentDeploymentGetPackageParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--container-uri <containerUri>', $('Add the container-uri value.'))
  .option('--overwrite-existing <overwriteExisting>', $('Add the overwrite-existing value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'containerUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.containerUri) {
      if (options.parse && options.containerUri) {
        options.containerUri = JSON.parse(options.containerUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.containerUri}]);
    }
    paramPath = '' + '/' + 'overwriteExisting';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.overwriteExisting) {
      if (options.parse && options.overwriteExisting) {
        options.overwriteExisting = JSON.parse(options.overwriteExisting);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.overwriteExisting}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });



*/
/*

  Deployment GetPackageBySlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "containerUri":"",
  "overwriteExisting":null
}

  var deploymentGetPackageBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentGetPackageBySlot.command('get-package-by-slot')
  .description($('get-package-by-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var deploymentSlotObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deploymentSlotObj = JSON.parse(fileContent);
    }
    else {
      deploymentSlotObj = {};
    }
    cli.output.info('deploymentSlotObj = ' + JSON.stringify(deploymentSlotObj));
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.getPackageBySlot(options.serviceName, options.deploymentSlot, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentGetPackageBySlotgetPackageBySlotParameters2 = deploymentGetPackageBySlot.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentGetPackageBySlotgetPackageBySlotGenerate2 = deploymentGetPackageBySlotgetPackageBySlotParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentGetPackageBySlotgetPackageBySlotGenerate2.command('get-package-by-slot')
  .description($('Generate deploymentGetPackageBySlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"containerUri\":\"\",\"overwriteExisting\":null}', _);
    var filePath = 'deploymentGetPackageBySlot_getPackageBySlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"containerUri\":\"\",\r\n\"overwriteExisting\":null\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentGetPackageBySlotgetPackageBySlotParameters2.command('patch')
  .description($('Command to patch deploymentGetPackageBySlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-get-package-parameters
  var catparametersDeploymentDeploymentGetPackageParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentGetPackageParameters0 = catparametersDeploymentDeploymentGetPackageParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentDeploymentGetPackageParameters0 = parametersDeploymentDeploymentGetPackageParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentDeploymentGetPackageParameters0.command('deployment-get-package-parameters')
  .description($('Set catparametersDeploymentDeploymentGetPackageParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--container-uri <containerUri>', $('Set the container-uri value.'))
  .option('--overwrite-existing <overwriteExisting>', $('Set the overwrite-existing value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'containerUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.containerUri) {
      if (options.parse && options.containerUri) {
        options.containerUri = JSON.parse(options.containerUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.containerUri}]);
    }
    paramPath = options.path + '/' + 'overwriteExisting';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.overwriteExisting) {
      if (options.parse && options.overwriteExisting) {
        options.overwriteExisting = JSON.parse(options.overwriteExisting);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.overwriteExisting}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-get-package-parameters
  var catparametersDeploymentDeploymentGetPackageParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentGetPackageParameters1 = catparametersDeploymentDeploymentGetPackageParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentDeploymentGetPackageParameters1 = parametersDeploymentDeploymentGetPackageParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentDeploymentGetPackageParameters1.command('deployment-get-package-parameters')
  .description($('Remove catparametersDeploymentDeploymentGetPackageParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-get-package-parameters
  var catparametersDeploymentDeploymentGetPackageParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentGetPackageParameters2 = catparametersDeploymentDeploymentGetPackageParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentDeploymentGetPackageParameters2 = parametersDeploymentDeploymentGetPackageParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentDeploymentGetPackageParameters2.command('deployment-get-package-parameters')
  .description($('Remove catparametersDeploymentDeploymentGetPackageParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--container-uri <containerUri>', $('Add the container-uri value.'))
  .option('--overwrite-existing <overwriteExisting>', $('Add the overwrite-existing value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'containerUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.containerUri) {
      if (options.parse && options.containerUri) {
        options.containerUri = JSON.parse(options.containerUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.containerUri}]);
    }
    paramPath = '' + '/' + 'overwriteExisting';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.overwriteExisting) {
      if (options.parse && options.overwriteExisting) {
        options.overwriteExisting = JSON.parse(options.overwriteExisting);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.overwriteExisting}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });



*/
/*

  Deployment ListEvents
  --service-name
  --deployment-name
  --start-time
  --end-time

  var deploymentListEvents = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentListEvents.command('list-events')
  .description($('list-events method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--start-time <start-time>', $('start-time'))
  .option('--end-time <end-time>', $('end-time'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('startTime = ' + options.startTime);
    cli.output.info('endTime = ' + options.endTime);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.listEvents(options.serviceName, options.deploymentName, options.startTime, options.endTime, _);
    cli.output.json(result);
  });

*/
/*

  Deployment ListEventsBySlot
  --service-name
  --deployment-slot
  --start-time
  --end-time
=============================================
0

  var deploymentListEventsBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentListEventsBySlot.command('list-events-by-slot')
  .description($('list-events-by-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--start-time <start-time>', $('start-time'))
  .option('--end-time <end-time>', $('end-time'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var deploymentSlotObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deploymentSlotObj = JSON.parse(fileContent);
    }
    else {
      deploymentSlotObj = {};
    }
    cli.output.info('deploymentSlotObj = ' + JSON.stringify(deploymentSlotObj));
    cli.output.info('startTime = ' + options.startTime);
    cli.output.info('endTime = ' + options.endTime);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.listEventsBySlot(options.serviceName, options.deploymentSlot, options.startTime, options.endTime, _);
    cli.output.json(result);
  });

*/
/*

  Deployment RebootRoleInstanceByDeploymentName
  --service-name
  --deployment-name
  --role-instance-name

  var deploymentRebootRoleInstanceByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentRebootRoleInstanceByDeploymentName.command('reboot-role-instance-by-deployment-name')
  .description($('reboot-role-instance-by-deployment-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('roleInstanceName = ' + options.roleInstanceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.rebootRoleInstanceByDeploymentName(options.serviceName, options.deploymentName, options.roleInstanceName, _);
    cli.output.json(result);
  });

*/
/*

  Deployment RebootRoleInstanceByDeploymentSlot
  --service-name
  --deployment-slot
  --role-instance-name
=============================================
0

  var deploymentRebootRoleInstanceByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentRebootRoleInstanceByDeploymentSlot.command('reboot-role-instance-by-deployment-slot')
  .description($('reboot-role-instance-by-deployment-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var deploymentSlotObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deploymentSlotObj = JSON.parse(fileContent);
    }
    else {
      deploymentSlotObj = {};
    }
    cli.output.info('deploymentSlotObj = ' + JSON.stringify(deploymentSlotObj));
    cli.output.info('roleInstanceName = ' + options.roleInstanceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.rebootRoleInstanceByDeploymentSlot(options.serviceName, options.deploymentSlot, options.roleInstanceName, _);
    cli.output.json(result);
  });

*/
/*

  Deployment RebuildRoleInstanceByDeploymentName
  --service-name
  --deployment-name
  --role-instance-name
  --resources

  var deploymentRebuildRoleInstanceByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentRebuildRoleInstanceByDeploymentName.command('rebuild-role-instance-by-deployment-name')
  .description($('rebuild-role-instance-by-deployment-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--resources <resources>', $('resources'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('roleInstanceName = ' + options.roleInstanceName);
    cli.output.info('resources = ' + options.resources);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.rebuildRoleInstanceByDeploymentName(options.serviceName, options.deploymentName, options.roleInstanceName, options.resources, _);
    cli.output.json(result);
  });

*/
/*

  Deployment RebuildRoleInstanceByDeploymentSlot
  --service-name
  --deployment-slot
  --role-instance-name
  --resources

  var deploymentRebuildRoleInstanceByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentRebuildRoleInstanceByDeploymentSlot.command('rebuild-role-instance-by-deployment-slot')
  .description($('rebuild-role-instance-by-deployment-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-slot <deployment-slot>', $('deployment-slot'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--resources <resources>', $('resources'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentSlot = ' + options.deploymentSlot);
    cli.output.info('roleInstanceName = ' + options.roleInstanceName);
    cli.output.info('resources = ' + options.resources);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.rebuildRoleInstanceByDeploymentSlot(options.serviceName, options.deploymentSlot, options.roleInstanceName, options.resources, _);
    cli.output.json(result);
  });

*/
/*

  Deployment ReimageRoleInstanceByDeploymentName
  --service-name
  --deployment-name
  --role-instance-name

  var deploymentReimageRoleInstanceByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentReimageRoleInstanceByDeploymentName.command('reimage-role-instance-by-deployment-name')
  .description($('reimage-role-instance-by-deployment-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('roleInstanceName = ' + options.roleInstanceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.reimageRoleInstanceByDeploymentName(options.serviceName, options.deploymentName, options.roleInstanceName, _);
    cli.output.json(result);
  });

*/
/*

  Deployment ReimageRoleInstanceByDeploymentSlot
  --service-name
  --deployment-slot
  --role-instance-name
=============================================
0

  var deploymentReimageRoleInstanceByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentReimageRoleInstanceByDeploymentSlot.command('reimage-role-instance-by-deployment-slot')
  .description($('reimage-role-instance-by-deployment-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--role-instance-name <role-instance-name>', $('role-instance-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var deploymentSlotObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deploymentSlotObj = JSON.parse(fileContent);
    }
    else {
      deploymentSlotObj = {};
    }
    cli.output.info('deploymentSlotObj = ' + JSON.stringify(deploymentSlotObj));
    cli.output.info('roleInstanceName = ' + options.roleInstanceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.reimageRoleInstanceByDeploymentSlot(options.serviceName, options.deploymentSlot, options.roleInstanceName, _);
    cli.output.json(result);
  });

*/
/*

  Deployment RollbackUpdateOrUpgradeByDeploymentName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "force":false,
  "mode":0
}

  var deploymentRollbackUpdateOrUpgradeByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentRollbackUpdateOrUpgradeByDeploymentName.command('rollback-update-or-upgrade-by-deployment-name')
  .description($('rollback-update-or-upgrade-by-deployment-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.rollbackUpdateOrUpgradeByDeploymentName(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentRollbackUpdateOrUpgradeByDeploymentNamerollbackUpdateOrUpgradeByDeploymentNameParameters2 = deploymentRollbackUpdateOrUpgradeByDeploymentName.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentRollbackUpdateOrUpgradeByDeploymentNamerollbackUpdateOrUpgradeByDeploymentNameGenerate2 = deploymentRollbackUpdateOrUpgradeByDeploymentNamerollbackUpdateOrUpgradeByDeploymentNameParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentRollbackUpdateOrUpgradeByDeploymentNamerollbackUpdateOrUpgradeByDeploymentNameGenerate2.command('rollback-update-or-upgrade-by-deployment-name')
  .description($('Generate deploymentRollbackUpdateOrUpgradeByDeploymentName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"force\":false,\"mode\":0}', _);
    var filePath = 'deploymentRollbackUpdateOrUpgradeByDeploymentName_rollbackUpdateOrUpgradeByDeploymentName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"force\":false,\r\n\"mode\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentRollbackUpdateOrUpgradeByDeploymentNamerollbackUpdateOrUpgradeByDeploymentNameParameters2.command('patch')
  .description($('Command to patch deploymentRollbackUpdateOrUpgradeByDeploymentName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-rollback-update-or-upgrade-parameters
  var catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = parametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.command('deployment-rollback-update-or-upgrade-parameters')
  .description($('Set catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--force <force>', $('Set the force value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'force';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-rollback-update-or-upgrade-parameters
  var catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = parametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.command('deployment-rollback-update-or-upgrade-parameters')
  .description($('Remove catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-rollback-update-or-upgrade-parameters
  var catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = parametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.command('deployment-rollback-update-or-upgrade-parameters')
  .description($('Remove catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--force <force>', $('Add the force value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'force';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove mode
  var catparametersDeploymentMode1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentMode1 = catparametersDeploymentMode1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentMode1 = parametersDeploymentMode1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentMode1.command('mode')
  .description($('Remove catparametersDeploymentMode1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/mode';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add mode
  var catparametersDeploymentMode2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentMode2 = catparametersDeploymentMode2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentMode2 = parametersDeploymentMode2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentMode2.command('mode')
  .description($('Remove catparametersDeploymentMode2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/mode' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });



*/
/*

  Deployment RollbackUpdateOrUpgradeByDeploymentSlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "force":false,
  "mode":0
}

  var deploymentRollbackUpdateOrUpgradeByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentRollbackUpdateOrUpgradeByDeploymentSlot.command('rollback-update-or-upgrade-by-deployment-slot')
  .description($('rollback-update-or-upgrade-by-deployment-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var deploymentSlotObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deploymentSlotObj = JSON.parse(fileContent);
    }
    else {
      deploymentSlotObj = {};
    }
    cli.output.info('deploymentSlotObj = ' + JSON.stringify(deploymentSlotObj));
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.rollbackUpdateOrUpgradeByDeploymentSlot(options.serviceName, options.deploymentSlot, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentRollbackUpdateOrUpgradeByDeploymentSlotrollbackUpdateOrUpgradeByDeploymentSlotParameters2 = deploymentRollbackUpdateOrUpgradeByDeploymentSlot.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentRollbackUpdateOrUpgradeByDeploymentSlotrollbackUpdateOrUpgradeByDeploymentSlotGenerate2 = deploymentRollbackUpdateOrUpgradeByDeploymentSlotrollbackUpdateOrUpgradeByDeploymentSlotParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentRollbackUpdateOrUpgradeByDeploymentSlotrollbackUpdateOrUpgradeByDeploymentSlotGenerate2.command('rollback-update-or-upgrade-by-deployment-slot')
  .description($('Generate deploymentRollbackUpdateOrUpgradeByDeploymentSlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"force\":false,\"mode\":0}', _);
    var filePath = 'deploymentRollbackUpdateOrUpgradeByDeploymentSlot_rollbackUpdateOrUpgradeByDeploymentSlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"force\":false,\r\n\"mode\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentRollbackUpdateOrUpgradeByDeploymentSlotrollbackUpdateOrUpgradeByDeploymentSlotParameters2.command('patch')
  .description($('Command to patch deploymentRollbackUpdateOrUpgradeByDeploymentSlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-rollback-update-or-upgrade-parameters
  var catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 = parametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters0.command('deployment-rollback-update-or-upgrade-parameters')
  .description($('Set catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--force <force>', $('Set the force value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'force';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-rollback-update-or-upgrade-parameters
  var catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 = parametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters1.command('deployment-rollback-update-or-upgrade-parameters')
  .description($('Remove catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-rollback-update-or-upgrade-parameters
  var catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 = parametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters2.command('deployment-rollback-update-or-upgrade-parameters')
  .description($('Remove catparametersDeploymentDeploymentRollbackUpdateOrUpgradeParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--force <force>', $('Add the force value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'force';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove mode
  var catparametersDeploymentMode1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentMode1 = catparametersDeploymentMode1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentMode1 = parametersDeploymentMode1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentMode1.command('mode')
  .description($('Remove catparametersDeploymentMode1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/mode';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add mode
  var catparametersDeploymentMode2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentMode2 = catparametersDeploymentMode2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentMode2 = parametersDeploymentMode2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentMode2.command('mode')
  .description($('Remove catparametersDeploymentMode2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/mode' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });



*/
/*

  Deployment Swap
  --service-name
  --parameters
=============================================
{
  "productionDeployment":"",
  "sourceDeployment":""
}

  var deploymentSwap = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentSwap.command('swap')
  .description($('swap method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--production-deployment <production-deployment>', $('production-deployment'))
  .option('--source-deployment <source-deployment>', $('source-deployment'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = {};
      cli.output.info('productionDeployment = ' + options.productionDeployment);
      parametersObj.productionDeployment = options.productionDeployment;
      cli.output.info('sourceDeployment = ' + options.sourceDeployment);
      parametersObj.sourceDeployment = options.sourceDeployment;
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.swap(options.serviceName, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentSwapswapParameters1 = deploymentSwap.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentSwapswapGenerate1 = deploymentSwapswapParameters1.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentSwapswapGenerate1.command('swap')
  .description($('Generate deploymentSwap parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"productionDeployment\":\"\",\"sourceDeployment\":\"\"}', _);
    var filePath = 'deploymentSwap_swap.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"productionDeployment\":\"\",\r\n\"sourceDeployment\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentSwapswapParameters1.command('patch')
  .description($('Command to patch deploymentSwap parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-swap-parameters
  var catparametersDeploymentDeploymentSwapParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentSwapParameters0 = catparametersDeploymentDeploymentSwapParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentDeploymentSwapParameters0 = parametersDeploymentDeploymentSwapParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentDeploymentSwapParameters0.command('deployment-swap-parameters')
  .description($('Set catparametersDeploymentDeploymentSwapParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--production-deployment <productionDeployment>', $('Set the production-deployment value.'))
  .option('--source-deployment <sourceDeployment>', $('Set the source-deployment value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'productionDeployment';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.productionDeployment) {
      if (options.parse && options.productionDeployment) {
        options.productionDeployment = JSON.parse(options.productionDeployment);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.productionDeployment}]);
    }
    paramPath = options.path + '/' + 'sourceDeployment';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceDeployment) {
      if (options.parse && options.sourceDeployment) {
        options.sourceDeployment = JSON.parse(options.sourceDeployment);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceDeployment}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-swap-parameters
  var catparametersDeploymentDeploymentSwapParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentSwapParameters1 = catparametersDeploymentDeploymentSwapParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentDeploymentSwapParameters1 = parametersDeploymentDeploymentSwapParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentDeploymentSwapParameters1.command('deployment-swap-parameters')
  .description($('Remove catparametersDeploymentDeploymentSwapParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-swap-parameters
  var catparametersDeploymentDeploymentSwapParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentSwapParameters2 = catparametersDeploymentDeploymentSwapParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentDeploymentSwapParameters2 = parametersDeploymentDeploymentSwapParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentDeploymentSwapParameters2.command('deployment-swap-parameters')
  .description($('Remove catparametersDeploymentDeploymentSwapParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--production-deployment <productionDeployment>', $('Add the production-deployment value.'))
  .option('--source-deployment <sourceDeployment>', $('Add the source-deployment value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'productionDeployment';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.productionDeployment) {
      if (options.parse && options.productionDeployment) {
        options.productionDeployment = JSON.parse(options.productionDeployment);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.productionDeployment}]);
    }
    paramPath = '' + '/' + 'sourceDeployment';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceDeployment) {
      if (options.parse && options.sourceDeployment) {
        options.sourceDeployment = JSON.parse(options.sourceDeployment);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceDeployment}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });



*/
/*

  Deployment UpdateStatusByDeploymentName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "status":0
}

  var deploymentUpdateStatusByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentUpdateStatusByDeploymentName.command('update-status-by-deployment-name')
  .description($('update-status-by-deployment-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.updateStatusByDeploymentName(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentUpdateStatusByDeploymentNameupdateStatusByDeploymentNameParameters2 = deploymentUpdateStatusByDeploymentName.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentUpdateStatusByDeploymentNameupdateStatusByDeploymentNameGenerate2 = deploymentUpdateStatusByDeploymentNameupdateStatusByDeploymentNameParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentUpdateStatusByDeploymentNameupdateStatusByDeploymentNameGenerate2.command('update-status-by-deployment-name')
  .description($('Generate deploymentUpdateStatusByDeploymentName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"status\":0}', _);
    var filePath = 'deploymentUpdateStatusByDeploymentName_updateStatusByDeploymentName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"status\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentUpdateStatusByDeploymentNameupdateStatusByDeploymentNameParameters2.command('patch')
  .description($('Command to patch deploymentUpdateStatusByDeploymentName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-update-status-parameters
  var catparametersDeploymentDeploymentUpdateStatusParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentUpdateStatusParameters0 = catparametersDeploymentDeploymentUpdateStatusParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentDeploymentUpdateStatusParameters0 = parametersDeploymentDeploymentUpdateStatusParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentDeploymentUpdateStatusParameters0.command('deployment-update-status-parameters')
  .description($('Set catparametersDeploymentDeploymentUpdateStatusParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--status <status>', $('Set the status value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'status';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.status) {
      if (options.parse && options.status) {
        options.status = JSON.parse(options.status);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.status}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-update-status-parameters
  var catparametersDeploymentDeploymentUpdateStatusParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentUpdateStatusParameters1 = catparametersDeploymentDeploymentUpdateStatusParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentDeploymentUpdateStatusParameters1 = parametersDeploymentDeploymentUpdateStatusParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentDeploymentUpdateStatusParameters1.command('deployment-update-status-parameters')
  .description($('Remove catparametersDeploymentDeploymentUpdateStatusParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-update-status-parameters
  var catparametersDeploymentDeploymentUpdateStatusParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentUpdateStatusParameters2 = catparametersDeploymentDeploymentUpdateStatusParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentDeploymentUpdateStatusParameters2 = parametersDeploymentDeploymentUpdateStatusParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentDeploymentUpdateStatusParameters2.command('deployment-update-status-parameters')
  .description($('Remove catparametersDeploymentDeploymentUpdateStatusParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--status <status>', $('Add the status value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'status';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.status) {
      if (options.parse && options.status) {
        options.status = JSON.parse(options.status);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.status}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove status
  var catparametersDeploymentStatus1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentStatus1 = catparametersDeploymentStatus1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentStatus1 = parametersDeploymentStatus1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentStatus1.command('status')
  .description($('Remove catparametersDeploymentStatus1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/status';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add status
  var catparametersDeploymentStatus2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentStatus2 = catparametersDeploymentStatus2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentStatus2 = parametersDeploymentStatus2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentStatus2.command('status')
  .description($('Remove catparametersDeploymentStatus2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/status' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });



*/
/*

  Deployment UpdateStatusByDeploymentSlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "status":0
}

  var deploymentUpdateStatusByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentUpdateStatusByDeploymentSlot.command('update-status-by-deployment-slot')
  .description($('update-status-by-deployment-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var deploymentSlotObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deploymentSlotObj = JSON.parse(fileContent);
    }
    else {
      deploymentSlotObj = {};
    }
    cli.output.info('deploymentSlotObj = ' + JSON.stringify(deploymentSlotObj));
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.updateStatusByDeploymentSlot(options.serviceName, options.deploymentSlot, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentUpdateStatusByDeploymentSlotupdateStatusByDeploymentSlotParameters2 = deploymentUpdateStatusByDeploymentSlot.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentUpdateStatusByDeploymentSlotupdateStatusByDeploymentSlotGenerate2 = deploymentUpdateStatusByDeploymentSlotupdateStatusByDeploymentSlotParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentUpdateStatusByDeploymentSlotupdateStatusByDeploymentSlotGenerate2.command('update-status-by-deployment-slot')
  .description($('Generate deploymentUpdateStatusByDeploymentSlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"status\":0}', _);
    var filePath = 'deploymentUpdateStatusByDeploymentSlot_updateStatusByDeploymentSlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"status\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentUpdateStatusByDeploymentSlotupdateStatusByDeploymentSlotParameters2.command('patch')
  .description($('Command to patch deploymentUpdateStatusByDeploymentSlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-update-status-parameters
  var catparametersDeploymentDeploymentUpdateStatusParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentUpdateStatusParameters0 = catparametersDeploymentDeploymentUpdateStatusParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentDeploymentUpdateStatusParameters0 = parametersDeploymentDeploymentUpdateStatusParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentDeploymentUpdateStatusParameters0.command('deployment-update-status-parameters')
  .description($('Set catparametersDeploymentDeploymentUpdateStatusParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--status <status>', $('Set the status value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'status';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.status) {
      if (options.parse && options.status) {
        options.status = JSON.parse(options.status);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.status}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-update-status-parameters
  var catparametersDeploymentDeploymentUpdateStatusParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentUpdateStatusParameters1 = catparametersDeploymentDeploymentUpdateStatusParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentDeploymentUpdateStatusParameters1 = parametersDeploymentDeploymentUpdateStatusParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentDeploymentUpdateStatusParameters1.command('deployment-update-status-parameters')
  .description($('Remove catparametersDeploymentDeploymentUpdateStatusParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-update-status-parameters
  var catparametersDeploymentDeploymentUpdateStatusParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentUpdateStatusParameters2 = catparametersDeploymentDeploymentUpdateStatusParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentDeploymentUpdateStatusParameters2 = parametersDeploymentDeploymentUpdateStatusParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentDeploymentUpdateStatusParameters2.command('deployment-update-status-parameters')
  .description($('Remove catparametersDeploymentDeploymentUpdateStatusParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--status <status>', $('Add the status value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'status';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.status) {
      if (options.parse && options.status) {
        options.status = JSON.parse(options.status);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.status}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove status
  var catparametersDeploymentStatus1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentStatus1 = catparametersDeploymentStatus1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentStatus1 = parametersDeploymentStatus1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentStatus1.command('status')
  .description($('Remove catparametersDeploymentStatus1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/status';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add status
  var catparametersDeploymentStatus2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentStatus2 = catparametersDeploymentStatus2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentStatus2 = parametersDeploymentStatus2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentStatus2.command('status')
  .description($('Remove catparametersDeploymentStatus2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/status' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });



*/
/*

  Deployment UpgradeByName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "configuration":"",
  "extendedProperties":{
  },
  "extensionConfiguration":{
    "allRoles":[
      {
        "id":""
      }
    ],
    "namedRoles":[
      {
        "extensions":[
          {
            "id":""
          }
        ],
        "roleName":""
      }
    ]
  },
  "force":false,
  "label":"",
  "mode":0,
  "packageUri":"",
  "roleToUpgrade":""
}

  var deploymentUpgradeByName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentUpgradeByName.command('upgrade-by-name')
  .description($('upgrade-by-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.upgradeByName(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentUpgradeByNameupgradeByNameParameters2 = deploymentUpgradeByName.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentUpgradeByNameupgradeByNameGenerate2 = deploymentUpgradeByNameupgradeByNameParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentUpgradeByNameupgradeByNameGenerate2.command('upgrade-by-name')
  .description($('Generate deploymentUpgradeByName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"configuration\":\"\",\"extendedProperties\":{},\"extensionConfiguration\":{\"allRoles\":[{\"id\":\"\"}],\"namedRoles\":[{\"extensions\":[{\"id\":\"\"}],\"roleName\":\"\"}]},\"force\":false,\"label\":\"\",\"mode\":0,\"packageUri\":\"\",\"roleToUpgrade\":\"\"}', _);
    var filePath = 'deploymentUpgradeByName_upgradeByName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"configuration\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"extensionConfiguration\":{\r\n\"allRoles\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"namedRoles\":[\r\n{\r\n\"extensions\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\"\r\n}\r\n]\r\n},\r\n\"force\":false,\r\n\"label\":\"\",\r\n\"mode\":0,\r\n\"packageUri\":\"\",\r\n\"roleToUpgrade\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentUpgradeByNameupgradeByNameParameters2.command('patch')
  .description($('Command to patch deploymentUpgradeByName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-upgrade-parameters
  var catparametersDeploymentDeploymentUpgradeParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentUpgradeParameters0 = catparametersDeploymentDeploymentUpgradeParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentDeploymentUpgradeParameters0 = parametersDeploymentDeploymentUpgradeParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentDeploymentUpgradeParameters0.command('deployment-upgrade-parameters')
  .description($('Set catparametersDeploymentDeploymentUpgradeParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Set the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Set the extension-configuration value.'))
  .option('--force <force>', $('Set the force value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .option('--package-uri <packageUri>', $('Set the package-uri value.'))
  .option('--role-to-upgrade <roleToUpgrade>', $('Set the role-to-upgrade value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = options.path + '/' + 'force';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = options.path + '/' + 'packageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = options.path + '/' + 'roleToUpgrade';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleToUpgrade) {
      if (options.parse && options.roleToUpgrade) {
        options.roleToUpgrade = JSON.parse(options.roleToUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleToUpgrade}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-upgrade-parameters
  var catparametersDeploymentDeploymentUpgradeParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentUpgradeParameters1 = catparametersDeploymentDeploymentUpgradeParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentDeploymentUpgradeParameters1 = parametersDeploymentDeploymentUpgradeParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentDeploymentUpgradeParameters1.command('deployment-upgrade-parameters')
  .description($('Remove catparametersDeploymentDeploymentUpgradeParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-upgrade-parameters
  var catparametersDeploymentDeploymentUpgradeParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentUpgradeParameters2 = catparametersDeploymentDeploymentUpgradeParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentDeploymentUpgradeParameters2 = parametersDeploymentDeploymentUpgradeParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentDeploymentUpgradeParameters2.command('deployment-upgrade-parameters')
  .description($('Remove catparametersDeploymentDeploymentUpgradeParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Add the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Add the extension-configuration value.'))
  .option('--force <force>', $('Add the force value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .option('--package-uri <packageUri>', $('Add the package-uri value.'))
  .option('--role-to-upgrade <roleToUpgrade>', $('Add the role-to-upgrade value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = '' + '/' + 'force';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = '' + '/' + 'packageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = '' + '/' + 'roleToUpgrade';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleToUpgrade) {
      if (options.parse && options.roleToUpgrade) {
        options.roleToUpgrade = JSON.parse(options.roleToUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleToUpgrade}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-configuration
  var catparametersDeploymentExtensionConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensionConfiguration0 = catparametersDeploymentExtensionConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentExtensionConfiguration0 = parametersDeploymentExtensionConfiguration0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentExtensionConfiguration0.command('extension-configuration')
  .description($('Set catparametersDeploymentExtensionConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Set the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Set the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration';
    var paramPath = options.path + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = options.path + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-configuration
  var catparametersDeploymentExtensionConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensionConfiguration1 = catparametersDeploymentExtensionConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentExtensionConfiguration1 = parametersDeploymentExtensionConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentExtensionConfiguration1.command('extension-configuration')
  .description($('Remove catparametersDeploymentExtensionConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-configuration
  var catparametersDeploymentExtensionConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensionConfiguration2 = catparametersDeploymentExtensionConfiguration2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentExtensionConfiguration2 = parametersDeploymentExtensionConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentExtensionConfiguration2.command('extension-configuration')
  .description($('Remove catparametersDeploymentExtensionConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Add the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Add the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration' + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = '/extensionConfiguration' + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set all-roles
  var catparametersDeploymentAllRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentAllRoles0 = catparametersDeploymentAllRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentAllRoles0 = parametersDeploymentAllRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentAllRoles0.command('all-roles')
  .description($('Set catparametersDeploymentAllRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove all-roles
  var catparametersDeploymentAllRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentAllRoles1 = catparametersDeploymentAllRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentAllRoles1 = parametersDeploymentAllRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentAllRoles1.command('all-roles')
  .description($('Remove catparametersDeploymentAllRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add all-roles
  var catparametersDeploymentAllRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentAllRoles2 = catparametersDeploymentAllRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentAllRoles2 = parametersDeploymentAllRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentAllRoles2.command('all-roles')
  .description($('Remove catparametersDeploymentAllRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set named-roles
  var catparametersDeploymentNamedRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentNamedRoles0 = catparametersDeploymentNamedRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentNamedRoles0 = parametersDeploymentNamedRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentNamedRoles0.command('named-roles')
  .description($('Set catparametersDeploymentNamedRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove named-roles
  var catparametersDeploymentNamedRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentNamedRoles1 = catparametersDeploymentNamedRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentNamedRoles1 = parametersDeploymentNamedRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentNamedRoles1.command('named-roles')
  .description($('Remove catparametersDeploymentNamedRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add named-roles
  var catparametersDeploymentNamedRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentNamedRoles2 = catparametersDeploymentNamedRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentNamedRoles2 = parametersDeploymentNamedRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentNamedRoles2.command('named-roles')
  .description($('Remove catparametersDeploymentNamedRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--extensions <extensions>', $('Add the extensions value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extensions
  var catparametersDeploymentExtensions0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensions0 = catparametersDeploymentExtensions0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentExtensions0 = parametersDeploymentExtensions0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentExtensions0.command('extensions')
  .description($('Set catparametersDeploymentExtensions0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extensions
  var catparametersDeploymentExtensions1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensions1 = catparametersDeploymentExtensions1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentExtensions1 = parametersDeploymentExtensions1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentExtensions1.command('extensions')
  .description($('Remove catparametersDeploymentExtensions1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extensions
  var catparametersDeploymentExtensions2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensions2 = catparametersDeploymentExtensions2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentExtensions2 = parametersDeploymentExtensions2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentExtensions2.command('extensions')
  .description($('Remove catparametersDeploymentExtensions2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove mode
  var catparametersDeploymentMode1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentMode1 = catparametersDeploymentMode1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentMode1 = parametersDeploymentMode1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentMode1.command('mode')
  .description($('Remove catparametersDeploymentMode1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/mode';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add mode
  var catparametersDeploymentMode2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentMode2 = catparametersDeploymentMode2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentMode2 = parametersDeploymentMode2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentMode2.command('mode')
  .description($('Remove catparametersDeploymentMode2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/mode' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });



*/
/*

  Deployment UpgradeBySlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "configuration":"",
  "extendedProperties":{
  },
  "extensionConfiguration":{
    "allRoles":[
      {
        "id":""
      }
    ],
    "namedRoles":[
      {
        "extensions":[
          {
            "id":""
          }
        ],
        "roleName":""
      }
    ]
  },
  "force":false,
  "label":"",
  "mode":0,
  "packageUri":"",
  "roleToUpgrade":""
}

  var deploymentUpgradeBySlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentUpgradeBySlot.command('upgrade-by-slot')
  .description($('upgrade-by-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var deploymentSlotObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deploymentSlotObj = JSON.parse(fileContent);
    }
    else {
      deploymentSlotObj = {};
    }
    cli.output.info('deploymentSlotObj = ' + JSON.stringify(deploymentSlotObj));
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.upgradeBySlot(options.serviceName, options.deploymentSlot, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentUpgradeBySlotupgradeBySlotParameters2 = deploymentUpgradeBySlot.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentUpgradeBySlotupgradeBySlotGenerate2 = deploymentUpgradeBySlotupgradeBySlotParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentUpgradeBySlotupgradeBySlotGenerate2.command('upgrade-by-slot')
  .description($('Generate deploymentUpgradeBySlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"configuration\":\"\",\"extendedProperties\":{},\"extensionConfiguration\":{\"allRoles\":[{\"id\":\"\"}],\"namedRoles\":[{\"extensions\":[{\"id\":\"\"}],\"roleName\":\"\"}]},\"force\":false,\"label\":\"\",\"mode\":0,\"packageUri\":\"\",\"roleToUpgrade\":\"\"}', _);
    var filePath = 'deploymentUpgradeBySlot_upgradeBySlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"configuration\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"extensionConfiguration\":{\r\n\"allRoles\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"namedRoles\":[\r\n{\r\n\"extensions\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\"\r\n}\r\n]\r\n},\r\n\"force\":false,\r\n\"label\":\"\",\r\n\"mode\":0,\r\n\"packageUri\":\"\",\r\n\"roleToUpgrade\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentUpgradeBySlotupgradeBySlotParameters2.command('patch')
  .description($('Command to patch deploymentUpgradeBySlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-upgrade-parameters
  var catparametersDeploymentDeploymentUpgradeParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentUpgradeParameters0 = catparametersDeploymentDeploymentUpgradeParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentDeploymentUpgradeParameters0 = parametersDeploymentDeploymentUpgradeParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentDeploymentUpgradeParameters0.command('deployment-upgrade-parameters')
  .description($('Set catparametersDeploymentDeploymentUpgradeParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Set the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Set the extension-configuration value.'))
  .option('--force <force>', $('Set the force value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .option('--package-uri <packageUri>', $('Set the package-uri value.'))
  .option('--role-to-upgrade <roleToUpgrade>', $('Set the role-to-upgrade value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = options.path + '/' + 'force';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = options.path + '/' + 'packageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = options.path + '/' + 'roleToUpgrade';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleToUpgrade) {
      if (options.parse && options.roleToUpgrade) {
        options.roleToUpgrade = JSON.parse(options.roleToUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleToUpgrade}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-upgrade-parameters
  var catparametersDeploymentDeploymentUpgradeParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentUpgradeParameters1 = catparametersDeploymentDeploymentUpgradeParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentDeploymentUpgradeParameters1 = parametersDeploymentDeploymentUpgradeParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentDeploymentUpgradeParameters1.command('deployment-upgrade-parameters')
  .description($('Remove catparametersDeploymentDeploymentUpgradeParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-upgrade-parameters
  var catparametersDeploymentDeploymentUpgradeParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentUpgradeParameters2 = catparametersDeploymentDeploymentUpgradeParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentDeploymentUpgradeParameters2 = parametersDeploymentDeploymentUpgradeParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentDeploymentUpgradeParameters2.command('deployment-upgrade-parameters')
  .description($('Remove catparametersDeploymentDeploymentUpgradeParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration <configuration>', $('Add the configuration value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--extension-configuration <extensionConfiguration>', $('Add the extension-configuration value.'))
  .option('--force <force>', $('Add the force value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .option('--package-uri <packageUri>', $('Add the package-uri value.'))
  .option('--role-to-upgrade <roleToUpgrade>', $('Add the role-to-upgrade value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'configuration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configuration) {
      if (options.parse && options.configuration) {
        options.configuration = JSON.parse(options.configuration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configuration}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'extensionConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionConfiguration) {
      if (options.parse && options.extensionConfiguration) {
        options.extensionConfiguration = JSON.parse(options.extensionConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionConfiguration}]);
    }
    paramPath = '' + '/' + 'force';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.force) {
      if (options.parse && options.force) {
        options.force = JSON.parse(options.force);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.force}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    paramPath = '' + '/' + 'packageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.packageUri) {
      if (options.parse && options.packageUri) {
        options.packageUri = JSON.parse(options.packageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.packageUri}]);
    }
    paramPath = '' + '/' + 'roleToUpgrade';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleToUpgrade) {
      if (options.parse && options.roleToUpgrade) {
        options.roleToUpgrade = JSON.parse(options.roleToUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleToUpgrade}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-configuration
  var catparametersDeploymentExtensionConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensionConfiguration0 = catparametersDeploymentExtensionConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentExtensionConfiguration0 = parametersDeploymentExtensionConfiguration0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentExtensionConfiguration0.command('extension-configuration')
  .description($('Set catparametersDeploymentExtensionConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Set the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Set the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration';
    var paramPath = options.path + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = options.path + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-configuration
  var catparametersDeploymentExtensionConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensionConfiguration1 = catparametersDeploymentExtensionConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentExtensionConfiguration1 = parametersDeploymentExtensionConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentExtensionConfiguration1.command('extension-configuration')
  .description($('Remove catparametersDeploymentExtensionConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-configuration
  var catparametersDeploymentExtensionConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensionConfiguration2 = catparametersDeploymentExtensionConfiguration2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentExtensionConfiguration2 = parametersDeploymentExtensionConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentExtensionConfiguration2.command('extension-configuration')
  .description($('Remove catparametersDeploymentExtensionConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--all-roles <allRoles>', $('Add the all-roles value.'))
  .option('--named-roles <namedRoles>', $('Add the named-roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration' + '/' + 'allRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.allRoles) {
      if (options.parse && options.allRoles) {
        options.allRoles = JSON.parse(options.allRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.allRoles}]);
    }
    paramPath = '/extensionConfiguration' + '/' + 'namedRoles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.namedRoles) {
      if (options.parse && options.namedRoles) {
        options.namedRoles = JSON.parse(options.namedRoles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.namedRoles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set all-roles
  var catparametersDeploymentAllRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentAllRoles0 = catparametersDeploymentAllRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentAllRoles0 = parametersDeploymentAllRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentAllRoles0.command('all-roles')
  .description($('Set catparametersDeploymentAllRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove all-roles
  var catparametersDeploymentAllRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentAllRoles1 = catparametersDeploymentAllRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentAllRoles1 = parametersDeploymentAllRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentAllRoles1.command('all-roles')
  .description($('Remove catparametersDeploymentAllRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add all-roles
  var catparametersDeploymentAllRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentAllRoles2 = catparametersDeploymentAllRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentAllRoles2 = parametersDeploymentAllRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentAllRoles2.command('all-roles')
  .description($('Remove catparametersDeploymentAllRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/allRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set named-roles
  var catparametersDeploymentNamedRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentNamedRoles0 = catparametersDeploymentNamedRoles0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentNamedRoles0 = parametersDeploymentNamedRoles0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentNamedRoles0.command('named-roles')
  .description($('Set catparametersDeploymentNamedRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove named-roles
  var catparametersDeploymentNamedRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentNamedRoles1 = catparametersDeploymentNamedRoles1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentNamedRoles1 = parametersDeploymentNamedRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentNamedRoles1.command('named-roles')
  .description($('Remove catparametersDeploymentNamedRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add named-roles
  var catparametersDeploymentNamedRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentNamedRoles2 = catparametersDeploymentNamedRoles2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentNamedRoles2 = parametersDeploymentNamedRoles2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentNamedRoles2.command('named-roles')
  .description($('Remove catparametersDeploymentNamedRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--extensions <extensions>', $('Add the extensions value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    paramPath = '/extensionConfiguration/namedRoles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extensions
  var catparametersDeploymentExtensions0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensions0 = catparametersDeploymentExtensions0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentExtensions0 = parametersDeploymentExtensions0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentExtensions0.command('extensions')
  .description($('Set catparametersDeploymentExtensions0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extensions
  var catparametersDeploymentExtensions1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensions1 = catparametersDeploymentExtensions1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentExtensions1 = parametersDeploymentExtensions1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentExtensions1.command('extensions')
  .description($('Remove catparametersDeploymentExtensions1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--named-roles-index <named-roles-index>', $('Indexer: named-roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extensions
  var catparametersDeploymentExtensions2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentExtensions2 = catparametersDeploymentExtensions2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentExtensions2 = parametersDeploymentExtensions2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentExtensions2.command('extensions')
  .description($('Remove catparametersDeploymentExtensions2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionConfiguration/namedRoles/' + options.namedRolesIndex + '/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove mode
  var catparametersDeploymentMode1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentMode1 = catparametersDeploymentMode1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentMode1 = parametersDeploymentMode1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentMode1.command('mode')
  .description($('Remove catparametersDeploymentMode1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/mode';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add mode
  var catparametersDeploymentMode2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentMode2 = catparametersDeploymentMode2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentMode2 = parametersDeploymentMode2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentMode2.command('mode')
  .description($('Remove catparametersDeploymentMode2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/mode' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });



*/
/*

  Deployment WalkUpgradeDomainByDeploymentName
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "upgradeDomain":0
}

  var deploymentWalkUpgradeDomainByDeploymentName = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentWalkUpgradeDomainByDeploymentName.command('walk-upgrade-domain-by-deployment-name')
  .description($('walk-upgrade-domain-by-deployment-name method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.walkUpgradeDomainByDeploymentName(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentWalkUpgradeDomainByDeploymentNamewalkUpgradeDomainByDeploymentNameParameters2 = deploymentWalkUpgradeDomainByDeploymentName.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentWalkUpgradeDomainByDeploymentNamewalkUpgradeDomainByDeploymentNameGenerate2 = deploymentWalkUpgradeDomainByDeploymentNamewalkUpgradeDomainByDeploymentNameParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentWalkUpgradeDomainByDeploymentNamewalkUpgradeDomainByDeploymentNameGenerate2.command('walk-upgrade-domain-by-deployment-name')
  .description($('Generate deploymentWalkUpgradeDomainByDeploymentName parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"upgradeDomain\":0}', _);
    var filePath = 'deploymentWalkUpgradeDomainByDeploymentName_walkUpgradeDomainByDeploymentName.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"upgradeDomain\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentWalkUpgradeDomainByDeploymentNamewalkUpgradeDomainByDeploymentNameParameters2.command('patch')
  .description($('Command to patch deploymentWalkUpgradeDomainByDeploymentName parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-walk-upgrade-domain-parameters
  var catparametersDeploymentDeploymentWalkUpgradeDomainParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentWalkUpgradeDomainParameters0 = catparametersDeploymentDeploymentWalkUpgradeDomainParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentDeploymentWalkUpgradeDomainParameters0 = parametersDeploymentDeploymentWalkUpgradeDomainParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentDeploymentWalkUpgradeDomainParameters0.command('deployment-walk-upgrade-domain-parameters')
  .description($('Set catparametersDeploymentDeploymentWalkUpgradeDomainParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--upgrade-domain <upgradeDomain>', $('Set the upgrade-domain value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'upgradeDomain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.upgradeDomain) {
      if (options.parse && options.upgradeDomain) {
        options.upgradeDomain = JSON.parse(options.upgradeDomain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.upgradeDomain}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-walk-upgrade-domain-parameters
  var catparametersDeploymentDeploymentWalkUpgradeDomainParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentWalkUpgradeDomainParameters1 = catparametersDeploymentDeploymentWalkUpgradeDomainParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentDeploymentWalkUpgradeDomainParameters1 = parametersDeploymentDeploymentWalkUpgradeDomainParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentDeploymentWalkUpgradeDomainParameters1.command('deployment-walk-upgrade-domain-parameters')
  .description($('Remove catparametersDeploymentDeploymentWalkUpgradeDomainParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-walk-upgrade-domain-parameters
  var catparametersDeploymentDeploymentWalkUpgradeDomainParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentWalkUpgradeDomainParameters2 = catparametersDeploymentDeploymentWalkUpgradeDomainParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentDeploymentWalkUpgradeDomainParameters2 = parametersDeploymentDeploymentWalkUpgradeDomainParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentDeploymentWalkUpgradeDomainParameters2.command('deployment-walk-upgrade-domain-parameters')
  .description($('Remove catparametersDeploymentDeploymentWalkUpgradeDomainParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--upgrade-domain <upgradeDomain>', $('Add the upgrade-domain value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'upgradeDomain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.upgradeDomain) {
      if (options.parse && options.upgradeDomain) {
        options.upgradeDomain = JSON.parse(options.upgradeDomain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.upgradeDomain}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });



*/
/*

  Deployment WalkUpgradeDomainByDeploymentSlot
  --service-name
  --deployment-slot
  --parameters
=============================================
{
  "upgradeDomain":0
}

  var deploymentWalkUpgradeDomainByDeploymentSlot = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment').description($('Commands to manage your deployment.'));
  deploymentWalkUpgradeDomainByDeploymentSlot.command('walk-upgrade-domain-by-deployment-slot')
  .description($('walk-upgrade-domain-by-deployment-slot method to manage your deployment.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var deploymentSlotObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deploymentSlotObj = JSON.parse(fileContent);
    }
    else {
      deploymentSlotObj = {};
    }
    cli.output.info('deploymentSlotObj = ' + JSON.stringify(deploymentSlotObj));
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.deployments.walkUpgradeDomainByDeploymentSlot(options.serviceName, options.deploymentSlot, parametersObj, _);
    cli.output.json(result);
  });
  var deploymentWalkUpgradeDomainByDeploymentSlotwalkUpgradeDomainByDeploymentSlotParameters2 = deploymentWalkUpgradeDomainByDeploymentSlot.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var deploymentWalkUpgradeDomainByDeploymentSlotwalkUpgradeDomainByDeploymentSlotGenerate2 = deploymentWalkUpgradeDomainByDeploymentSlotwalkUpgradeDomainByDeploymentSlotParameters2.category('generate')
  .description($('Commands to generate parameter file for your deployment.'));
  deploymentWalkUpgradeDomainByDeploymentSlotwalkUpgradeDomainByDeploymentSlotGenerate2.command('walk-upgrade-domain-by-deployment-slot')
  .description($('Generate deploymentWalkUpgradeDomainByDeploymentSlot parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"upgradeDomain\":0}', _);
    var filePath = 'deploymentWalkUpgradeDomainByDeploymentSlot_walkUpgradeDomainByDeploymentSlot.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"upgradeDomain\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  deploymentWalkUpgradeDomainByDeploymentSlotwalkUpgradeDomainByDeploymentSlotParameters2.command('patch')
  .description($('Command to patch deploymentWalkUpgradeDomainByDeploymentSlot parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set deployment-walk-upgrade-domain-parameters
  var catparametersDeploymentDeploymentWalkUpgradeDomainParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentWalkUpgradeDomainParameters0 = catparametersDeploymentDeploymentWalkUpgradeDomainParameters0.category('parameters')
  .description($('Commands to manage parameter for your deployment.'));
  var setparametersDeploymentDeploymentWalkUpgradeDomainParameters0 = parametersDeploymentDeploymentWalkUpgradeDomainParameters0.category('set')
  .description($('Commands to set parameter file for your deployment.'));
  setparametersDeploymentDeploymentWalkUpgradeDomainParameters0.command('deployment-walk-upgrade-domain-parameters')
  .description($('Set catparametersDeploymentDeploymentWalkUpgradeDomainParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--upgrade-domain <upgradeDomain>', $('Set the upgrade-domain value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'upgradeDomain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.upgradeDomain) {
      if (options.parse && options.upgradeDomain) {
        options.upgradeDomain = JSON.parse(options.upgradeDomain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.upgradeDomain}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-walk-upgrade-domain-parameters
  var catparametersDeploymentDeploymentWalkUpgradeDomainParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentWalkUpgradeDomainParameters1 = catparametersDeploymentDeploymentWalkUpgradeDomainParameters1.category('parameters')
  .description($('Commands to remove parameter for your deployment.'));
  var removeparametersDeploymentDeploymentWalkUpgradeDomainParameters1 = parametersDeploymentDeploymentWalkUpgradeDomainParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your deployment.'));
  removeparametersDeploymentDeploymentWalkUpgradeDomainParameters1.command('deployment-walk-upgrade-domain-parameters')
  .description($('Remove catparametersDeploymentDeploymentWalkUpgradeDomainParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-walk-upgrade-domain-parameters
  var catparametersDeploymentDeploymentWalkUpgradeDomainParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('deployment');
  var parametersDeploymentDeploymentWalkUpgradeDomainParameters2 = catparametersDeploymentDeploymentWalkUpgradeDomainParameters2.category('parameters')
  .description($('Commands to add parameter for your deployment.'));
  var addparametersDeploymentDeploymentWalkUpgradeDomainParameters2 = parametersDeploymentDeploymentWalkUpgradeDomainParameters2.category('add')
  .description($('Commands to add values in the parameter file for your deployment.'));
  addparametersDeploymentDeploymentWalkUpgradeDomainParameters2.command('deployment-walk-upgrade-domain-parameters')
  .description($('Remove catparametersDeploymentDeploymentWalkUpgradeDomainParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--upgrade-domain <upgradeDomain>', $('Add the upgrade-domain value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'upgradeDomain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.upgradeDomain) {
      if (options.parse && options.upgradeDomain) {
        options.upgradeDomain = JSON.parse(options.upgradeDomain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.upgradeDomain}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });



*/
/*
  DNSServer AddDNSServer
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "address":"",
  "name":""
}
*/
  var dnsServerAddDNSServer = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server').description($('Commands to manage your dns server.'));
  dnsServerAddDNSServer.command('add-dns-server')
  .description($('add-dns-server method to manage your dns server.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--address <address>', $('address'))
  .option('--name <name>', $('name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = {};
      cli.output.info('address = ' + options.address);
      parametersObj.address = options.address;
      cli.output.info('name = ' + options.name);
      parametersObj.name = options.name;
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.dnsServers.addDNSServer(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var dnsServerAddDNSServeraddDNSServerParameters2 = dnsServerAddDNSServer.category('parameters')
  .description($('Commands to manage parameter for your dns server.'));
  var dnsServerAddDNSServeraddDNSServerGenerate2 = dnsServerAddDNSServeraddDNSServerParameters2.category('generate')
  .description($('Commands to generate parameter file for your dns server.'));
  dnsServerAddDNSServeraddDNSServerGenerate2.command('add-dns-server')
  .description($('Generate dnsServerAddDNSServer parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"address\":\"\",\"name\":\"\"}', _);
    var filePath = 'dnsServerAddDNSServer_addDNSServer.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"address\":\"\",\r\n\"name\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  dnsServerAddDNSServeraddDNSServerParameters2.command('patch')
  .description($('Command to patch dnsServerAddDNSServer parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set dns-add-parameters
  var catparametersDNSServerDNSAddParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server');
  var parametersDNSServerDNSAddParameters0 = catparametersDNSServerDNSAddParameters0.category('parameters')
  .description($('Commands to manage parameter for your dns-server.'));
  var setparametersDNSServerDNSAddParameters0 = parametersDNSServerDNSAddParameters0.category('set')
  .description($('Commands to set parameter file for your dns-server.'));
  setparametersDNSServerDNSAddParameters0.command('dns-add-parameters')
  .description($('Set catparametersDNSServerDNSAddParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--address <address>', $('Set the address value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'address';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.address) {
      if (options.parse && options.address) {
        options.address = JSON.parse(options.address);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.address}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove dns-add-parameters
  var catparametersDNSServerDNSAddParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server');
  var parametersDNSServerDNSAddParameters1 = catparametersDNSServerDNSAddParameters1.category('parameters')
  .description($('Commands to remove parameter for your dns-server.'));
  var removeparametersDNSServerDNSAddParameters1 = parametersDNSServerDNSAddParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your dns-server.'));
  removeparametersDNSServerDNSAddParameters1.command('dns-add-parameters')
  .description($('Remove catparametersDNSServerDNSAddParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add dns-add-parameters
  var catparametersDNSServerDNSAddParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server');
  var parametersDNSServerDNSAddParameters2 = catparametersDNSServerDNSAddParameters2.category('parameters')
  .description($('Commands to add parameter for your dns-server.'));
  var addparametersDNSServerDNSAddParameters2 = parametersDNSServerDNSAddParameters2.category('add')
  .description($('Commands to add values in the parameter file for your dns-server.'));
  addparametersDNSServerDNSAddParameters2.command('dns-add-parameters')
  .description($('Remove catparametersDNSServerDNSAddParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--address <address>', $('Add the address value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'address';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.address) {
      if (options.parse && options.address) {
        options.address = JSON.parse(options.address);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.address}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  DNSServer DeleteDNSServer
  --service-name
  --deployment-name
  --dns-server-name
*/
  var dnsServerDeleteDNSServer = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server').description($('Commands to manage your dns server.'));
  dnsServerDeleteDNSServer.command('delete-dns-server')
  .description($('delete-dns-server method to manage your dns server.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--dns-server-name <dns-server-name>', $('dns-server-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('dnsServerName = ' + options.dnsServerName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.dnsServers.deleteDNSServer(options.serviceName, options.deploymentName, options.dnsServerName, _);
    cli.output.json(result);
  });
/*
  DNSServer UpdateDNSServer
  --service-name
  --deployment-name
  --dns-server-name
  --parameters
=============================================
{
  "address":"",
  "name":""
}
*/
  var dnsServerUpdateDNSServer = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server').description($('Commands to manage your dns server.'));
  dnsServerUpdateDNSServer.command('update-dns-server')
  .description($('update-dns-server method to manage your dns server.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--dns-server-name <dns-server-name>', $('dns-server-name'))
  .option('--address <address>', $('address'))
  .option('--name <name>', $('name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('dnsServerName = ' + options.dnsServerName);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = {};
      cli.output.info('address = ' + options.address);
      parametersObj.address = options.address;
      cli.output.info('name = ' + options.name);
      parametersObj.name = options.name;
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.dnsServers.updateDNSServer(options.serviceName, options.deploymentName, options.dnsServerName, parametersObj, _);
    cli.output.json(result);
  });
  var dnsServerUpdateDNSServerupdateDNSServerParameters3 = dnsServerUpdateDNSServer.category('parameters')
  .description($('Commands to manage parameter for your dns server.'));
  var dnsServerUpdateDNSServerupdateDNSServerGenerate3 = dnsServerUpdateDNSServerupdateDNSServerParameters3.category('generate')
  .description($('Commands to generate parameter file for your dns server.'));
  dnsServerUpdateDNSServerupdateDNSServerGenerate3.command('update-dns-server')
  .description($('Generate dnsServerUpdateDNSServer parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"address\":\"\",\"name\":\"\"}', _);
    var filePath = 'dnsServerUpdateDNSServer_updateDNSServer.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"address\":\"\",\r\n\"name\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  dnsServerUpdateDNSServerupdateDNSServerParameters3.command('patch')
  .description($('Command to patch dnsServerUpdateDNSServer parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set dns-update-parameters
  var catparametersDNSServerDNSUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server');
  var parametersDNSServerDNSUpdateParameters0 = catparametersDNSServerDNSUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your dns-server.'));
  var setparametersDNSServerDNSUpdateParameters0 = parametersDNSServerDNSUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your dns-server.'));
  setparametersDNSServerDNSUpdateParameters0.command('dns-update-parameters')
  .description($('Set catparametersDNSServerDNSUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--address <address>', $('Set the address value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'address';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.address) {
      if (options.parse && options.address) {
        options.address = JSON.parse(options.address);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.address}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove dns-update-parameters
  var catparametersDNSServerDNSUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server');
  var parametersDNSServerDNSUpdateParameters1 = catparametersDNSServerDNSUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your dns-server.'));
  var removeparametersDNSServerDNSUpdateParameters1 = parametersDNSServerDNSUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your dns-server.'));
  removeparametersDNSServerDNSUpdateParameters1.command('dns-update-parameters')
  .description($('Remove catparametersDNSServerDNSUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add dns-update-parameters
  var catparametersDNSServerDNSUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('dns-server');
  var parametersDNSServerDNSUpdateParameters2 = catparametersDNSServerDNSUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your dns-server.'));
  var addparametersDNSServerDNSUpdateParameters2 = parametersDNSServerDNSUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your dns-server.'));
  addparametersDNSServerDNSUpdateParameters2.command('dns-update-parameters')
  .description($('Remove catparametersDNSServerDNSUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--address <address>', $('Add the address value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'address';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.address) {
      if (options.parse && options.address) {
        options.address = JSON.parse(options.address);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.address}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  ExtensionImage Register
  --parameters
=============================================
{
  "blockRoleUponFailure":null,
  "certificate":{
    "storeLocation":"",
    "storeName":"",
    "thumbprintAlgorithm":"",
    "thumbprintRequired":null
  },
  "companyName":"",
  "description":"",
  "disallowMajorVersionUpgrade":null,
  "eula":"",
  "extensionEndpoints":{
    "inputEndpoints":[
      {
        "localPort":"",
        "name":"",
        "port":0,
        "protocol":""
      }
    ],
    "instanceInputEndpoints":[
      {
        "fixedPortMax":0,
        "fixedPortMin":0,
        "localPort":"",
        "name":"",
        "protocol":""
      }
    ],
    "internalEndpoints":[
      {
        "name":"",
        "port":0,
        "protocol":""
      }
    ]
  },
  "homepageUri":"",
  "hostingResources":"",
  "isInternalExtension":null,
  "isJsonExtension":null,
  "label":"",
  "localResources":[
    {
      "name":"",
      "sizeInMB":null
    }
  ],
  "mediaLink":"",
  "privacyUri":"",
  "privateConfigurationSchema":"",
  "providerNameSpace":"",
  "publicConfigurationSchema":"",
  "publishedDate":null,
  "publisherName":"",
  "regions":"",
  "replicationCompleted":null,
  "sampleConfig":"",
  "supportedOS":"",
  "type":"",
  "version":""
}
*/
  var extensionImageRegister = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image').description($('Commands to manage your extension image.'));
  extensionImageRegister.command('register')
  .description($('register method to manage your extension image.'))
  .usage('[options]')
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.extensionImages.register(parametersObj, _);
    cli.output.json(result);
  });
  var extensionImageRegisterregisterParameters0 = extensionImageRegister.category('parameters')
  .description($('Commands to manage parameter for your extension image.'));
  var extensionImageRegisterregisterGenerate0 = extensionImageRegisterregisterParameters0.category('generate')
  .description($('Commands to generate parameter file for your extension image.'));
  extensionImageRegisterregisterGenerate0.command('register')
  .description($('Generate extensionImageRegister parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"blockRoleUponFailure\":null,\"certificate\":{\"storeLocation\":\"\",\"storeName\":\"\",\"thumbprintAlgorithm\":\"\",\"thumbprintRequired\":null},\"companyName\":\"\",\"description\":\"\",\"disallowMajorVersionUpgrade\":null,\"eula\":\"\",\"extensionEndpoints\":{\"inputEndpoints\":[{\"localPort\":\"\",\"name\":\"\",\"port\":0,\"protocol\":\"\"}],\"instanceInputEndpoints\":[{\"fixedPortMax\":0,\"fixedPortMin\":0,\"localPort\":\"\",\"name\":\"\",\"protocol\":\"\"}],\"internalEndpoints\":[{\"name\":\"\",\"port\":0,\"protocol\":\"\"}]},\"homepageUri\":\"\",\"hostingResources\":\"\",\"isInternalExtension\":null,\"isJsonExtension\":null,\"label\":\"\",\"localResources\":[{\"name\":\"\",\"sizeInMB\":null}],\"mediaLink\":\"\",\"privacyUri\":\"\",\"privateConfigurationSchema\":\"\",\"providerNameSpace\":\"\",\"publicConfigurationSchema\":\"\",\"publishedDate\":null,\"publisherName\":\"\",\"regions\":\"\",\"replicationCompleted\":null,\"sampleConfig\":\"\",\"supportedOS\":\"\",\"type\":\"\",\"version\":\"\"}', _);
    var filePath = 'extensionImageRegister_register.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"blockRoleUponFailure\":null,\r\n\"certificate\":{\r\n\"storeLocation\":\"\",\r\n\"storeName\":\"\",\r\n\"thumbprintAlgorithm\":\"\",\r\n\"thumbprintRequired\":null\r\n},\r\n\"companyName\":\"\",\r\n\"description\":\"\",\r\n\"disallowMajorVersionUpgrade\":null,\r\n\"eula\":\"\",\r\n\"extensionEndpoints\":{\r\n\"inputEndpoints\":[\r\n{\r\n\"localPort\":\"\",\r\n\"name\":\"\",\r\n\"port\":0,\r\n\"protocol\":\"\"\r\n}\r\n],\r\n\"instanceInputEndpoints\":[\r\n{\r\n\"fixedPortMax\":0,\r\n\"fixedPortMin\":0,\r\n\"localPort\":\"\",\r\n\"name\":\"\",\r\n\"protocol\":\"\"\r\n}\r\n],\r\n\"internalEndpoints\":[\r\n{\r\n\"name\":\"\",\r\n\"port\":0,\r\n\"protocol\":\"\"\r\n}\r\n]\r\n},\r\n\"homepageUri\":\"\",\r\n\"hostingResources\":\"\",\r\n\"isInternalExtension\":null,\r\n\"isJsonExtension\":null,\r\n\"label\":\"\",\r\n\"localResources\":[\r\n{\r\n\"name\":\"\",\r\n\"sizeInMB\":null\r\n}\r\n],\r\n\"mediaLink\":\"\",\r\n\"privacyUri\":\"\",\r\n\"privateConfigurationSchema\":\"\",\r\n\"providerNameSpace\":\"\",\r\n\"publicConfigurationSchema\":\"\",\r\n\"publishedDate\":null,\r\n\"publisherName\":\"\",\r\n\"regions\":\"\",\r\n\"replicationCompleted\":null,\r\n\"sampleConfig\":\"\",\r\n\"supportedOS\":\"\",\r\n\"type\":\"\",\r\n\"version\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  extensionImageRegisterregisterParameters0.command('patch')
  .description($('Command to patch extensionImageRegister parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-image-register-parameters
  var catparametersExtensionImageExtensionImageRegisterParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageExtensionImageRegisterParameters0 = catparametersExtensionImageExtensionImageRegisterParameters0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersExtensionImageExtensionImageRegisterParameters0 = parametersExtensionImageExtensionImageRegisterParameters0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersExtensionImageExtensionImageRegisterParameters0.command('extension-image-register-parameters')
  .description($('Set catparametersExtensionImageExtensionImageRegisterParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--block-role-upon-failure <blockRoleUponFailure>', $('Set the block-role-upon-failure value.'))
  .option('--certificate <certificate>', $('Set the certificate value.'))
  .option('--company-name <companyName>', $('Set the company-name value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--disallow-major-version-upgrade <disallowMajorVersionUpgrade>', $('Set the disallow-major-version-upgrade value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--extension-endpoints <extensionEndpoints>', $('Set the extension-endpoints value.'))
  .option('--homepage-uri <homepageUri>', $('Set the homepage-uri value.'))
  .option('--hosting-resources <hostingResources>', $('Set the hosting-resources value.'))
  .option('--is-internal-extension <isInternalExtension>', $('Set the is-internal-extension value.'))
  .option('--is-json-extension <isJsonExtension>', $('Set the is-json-extension value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--local-resources <localResources>', $('Set the local-resources value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--private-configuration-schema <privateConfigurationSchema>', $('Set the private-configuration-schema value.'))
  .option('--provider-name-space <providerNameSpace>', $('Set the provider-name-space value.'))
  .option('--public-configuration-schema <publicConfigurationSchema>', $('Set the public-configuration-schema value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--publisher-name <publisherName>', $('Set the publisher-name value.'))
  .option('--regions <regions>', $('Set the regions value.'))
  .option('--replication-completed <replicationCompleted>', $('Set the replication-completed value.'))
  .option('--sample-config <sampleConfig>', $('Set the sample-config value.'))
  .option('--supported-os <supportedOS>', $('Set the supported-os value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'blockRoleUponFailure';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.blockRoleUponFailure) {
      if (options.parse && options.blockRoleUponFailure) {
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.blockRoleUponFailure}]);
    }
    paramPath = options.path + '/' + 'certificate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificate) {
      if (options.parse && options.certificate) {
        options.certificate = JSON.parse(options.certificate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificate}]);
    }
    paramPath = options.path + '/' + 'companyName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.companyName) {
      if (options.parse && options.companyName) {
        options.companyName = JSON.parse(options.companyName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.companyName}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'disallowMajorVersionUpgrade';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disallowMajorVersionUpgrade) {
      if (options.parse && options.disallowMajorVersionUpgrade) {
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disallowMajorVersionUpgrade}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'extensionEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionEndpoints) {
      if (options.parse && options.extensionEndpoints) {
        options.extensionEndpoints = JSON.parse(options.extensionEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionEndpoints}]);
    }
    paramPath = options.path + '/' + 'homepageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.homepageUri) {
      if (options.parse && options.homepageUri) {
        options.homepageUri = JSON.parse(options.homepageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.homepageUri}]);
    }
    paramPath = options.path + '/' + 'hostingResources';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostingResources) {
      if (options.parse && options.hostingResources) {
        options.hostingResources = JSON.parse(options.hostingResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostingResources}]);
    }
    paramPath = options.path + '/' + 'isInternalExtension';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isInternalExtension) {
      if (options.parse && options.isInternalExtension) {
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isInternalExtension}]);
    }
    paramPath = options.path + '/' + 'isJsonExtension';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isJsonExtension) {
      if (options.parse && options.isJsonExtension) {
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isJsonExtension}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'localResources';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localResources) {
      if (options.parse && options.localResources) {
        options.localResources = JSON.parse(options.localResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localResources}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'privateConfigurationSchema';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privateConfigurationSchema) {
      if (options.parse && options.privateConfigurationSchema) {
        options.privateConfigurationSchema = JSON.parse(options.privateConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfigurationSchema}]);
    }
    paramPath = options.path + '/' + 'providerNameSpace';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.providerNameSpace) {
      if (options.parse && options.providerNameSpace) {
        options.providerNameSpace = JSON.parse(options.providerNameSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNameSpace}]);
    }
    paramPath = options.path + '/' + 'publicConfigurationSchema';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicConfigurationSchema) {
      if (options.parse && options.publicConfigurationSchema) {
        options.publicConfigurationSchema = JSON.parse(options.publicConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfigurationSchema}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'publisherName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisherName) {
      if (options.parse && options.publisherName) {
        options.publisherName = JSON.parse(options.publisherName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherName}]);
    }
    paramPath = options.path + '/' + 'regions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.regions) {
      if (options.parse && options.regions) {
        options.regions = JSON.parse(options.regions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.regions}]);
    }
    paramPath = options.path + '/' + 'replicationCompleted';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.replicationCompleted) {
      if (options.parse && options.replicationCompleted) {
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.replicationCompleted}]);
    }
    paramPath = options.path + '/' + 'sampleConfig';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sampleConfig) {
      if (options.parse && options.sampleConfig) {
        options.sampleConfig = JSON.parse(options.sampleConfig);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sampleConfig}]);
    }
    paramPath = options.path + '/' + 'supportedOS';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.supportedOS) {
      if (options.parse && options.supportedOS) {
        options.supportedOS = JSON.parse(options.supportedOS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.supportedOS}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-image-register-parameters
  var catparametersExtensionImageExtensionImageRegisterParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageExtensionImageRegisterParameters1 = catparametersExtensionImageExtensionImageRegisterParameters1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersExtensionImageExtensionImageRegisterParameters1 = parametersExtensionImageExtensionImageRegisterParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersExtensionImageExtensionImageRegisterParameters1.command('extension-image-register-parameters')
  .description($('Remove catparametersExtensionImageExtensionImageRegisterParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-image-register-parameters
  var catparametersExtensionImageExtensionImageRegisterParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageExtensionImageRegisterParameters2 = catparametersExtensionImageExtensionImageRegisterParameters2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersExtensionImageExtensionImageRegisterParameters2 = parametersExtensionImageExtensionImageRegisterParameters2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersExtensionImageExtensionImageRegisterParameters2.command('extension-image-register-parameters')
  .description($('Remove catparametersExtensionImageExtensionImageRegisterParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--block-role-upon-failure <blockRoleUponFailure>', $('Add the block-role-upon-failure value.'))
  .option('--certificate <certificate>', $('Add the certificate value.'))
  .option('--company-name <companyName>', $('Add the company-name value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--disallow-major-version-upgrade <disallowMajorVersionUpgrade>', $('Add the disallow-major-version-upgrade value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--extension-endpoints <extensionEndpoints>', $('Add the extension-endpoints value.'))
  .option('--homepage-uri <homepageUri>', $('Add the homepage-uri value.'))
  .option('--hosting-resources <hostingResources>', $('Add the hosting-resources value.'))
  .option('--is-internal-extension <isInternalExtension>', $('Add the is-internal-extension value.'))
  .option('--is-json-extension <isJsonExtension>', $('Add the is-json-extension value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--local-resources <localResources>', $('Add the local-resources value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--private-configuration-schema <privateConfigurationSchema>', $('Add the private-configuration-schema value.'))
  .option('--provider-name-space <providerNameSpace>', $('Add the provider-name-space value.'))
  .option('--public-configuration-schema <publicConfigurationSchema>', $('Add the public-configuration-schema value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--publisher-name <publisherName>', $('Add the publisher-name value.'))
  .option('--regions <regions>', $('Add the regions value.'))
  .option('--replication-completed <replicationCompleted>', $('Add the replication-completed value.'))
  .option('--sample-config <sampleConfig>', $('Add the sample-config value.'))
  .option('--supported-os <supportedOS>', $('Add the supported-os value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'blockRoleUponFailure';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.blockRoleUponFailure) {
      if (options.parse && options.blockRoleUponFailure) {
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.blockRoleUponFailure}]);
    }
    paramPath = '' + '/' + 'certificate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificate) {
      if (options.parse && options.certificate) {
        options.certificate = JSON.parse(options.certificate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificate}]);
    }
    paramPath = '' + '/' + 'companyName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.companyName) {
      if (options.parse && options.companyName) {
        options.companyName = JSON.parse(options.companyName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.companyName}]);
    }
    paramPath = '' + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'disallowMajorVersionUpgrade';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disallowMajorVersionUpgrade) {
      if (options.parse && options.disallowMajorVersionUpgrade) {
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disallowMajorVersionUpgrade}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'extensionEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionEndpoints) {
      if (options.parse && options.extensionEndpoints) {
        options.extensionEndpoints = JSON.parse(options.extensionEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionEndpoints}]);
    }
    paramPath = '' + '/' + 'homepageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.homepageUri) {
      if (options.parse && options.homepageUri) {
        options.homepageUri = JSON.parse(options.homepageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.homepageUri}]);
    }
    paramPath = '' + '/' + 'hostingResources';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostingResources) {
      if (options.parse && options.hostingResources) {
        options.hostingResources = JSON.parse(options.hostingResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostingResources}]);
    }
    paramPath = '' + '/' + 'isInternalExtension';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isInternalExtension) {
      if (options.parse && options.isInternalExtension) {
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isInternalExtension}]);
    }
    paramPath = '' + '/' + 'isJsonExtension';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isJsonExtension) {
      if (options.parse && options.isJsonExtension) {
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isJsonExtension}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'localResources';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localResources) {
      if (options.parse && options.localResources) {
        options.localResources = JSON.parse(options.localResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localResources}]);
    }
    paramPath = '' + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'privateConfigurationSchema';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privateConfigurationSchema) {
      if (options.parse && options.privateConfigurationSchema) {
        options.privateConfigurationSchema = JSON.parse(options.privateConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfigurationSchema}]);
    }
    paramPath = '' + '/' + 'providerNameSpace';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.providerNameSpace) {
      if (options.parse && options.providerNameSpace) {
        options.providerNameSpace = JSON.parse(options.providerNameSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNameSpace}]);
    }
    paramPath = '' + '/' + 'publicConfigurationSchema';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicConfigurationSchema) {
      if (options.parse && options.publicConfigurationSchema) {
        options.publicConfigurationSchema = JSON.parse(options.publicConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfigurationSchema}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'publisherName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisherName) {
      if (options.parse && options.publisherName) {
        options.publisherName = JSON.parse(options.publisherName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherName}]);
    }
    paramPath = '' + '/' + 'regions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.regions) {
      if (options.parse && options.regions) {
        options.regions = JSON.parse(options.regions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.regions}]);
    }
    paramPath = '' + '/' + 'replicationCompleted';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.replicationCompleted) {
      if (options.parse && options.replicationCompleted) {
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.replicationCompleted}]);
    }
    paramPath = '' + '/' + 'sampleConfig';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sampleConfig) {
      if (options.parse && options.sampleConfig) {
        options.sampleConfig = JSON.parse(options.sampleConfig);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sampleConfig}]);
    }
    paramPath = '' + '/' + 'supportedOS';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.supportedOS) {
      if (options.parse && options.supportedOS) {
        options.supportedOS = JSON.parse(options.supportedOS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.supportedOS}]);
    }
    paramPath = '' + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '' + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set certificate
  var catparametersExtensionImageCertificate0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageCertificate0 = catparametersExtensionImageCertificate0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersExtensionImageCertificate0 = parametersExtensionImageCertificate0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersExtensionImageCertificate0.command('certificate')
  .description($('Set catparametersExtensionImageCertificate0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--store-location <storeLocation>', $('Set the store-location value.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Set the thumbprint-algorithm value.'))
  .option('--thumbprint-required <thumbprintRequired>', $('Set the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/certificate';
    var paramPath = options.path + '/' + 'storeLocation';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeLocation) {
      if (options.parse && options.storeLocation) {
        options.storeLocation = JSON.parse(options.storeLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeLocation}]);
    }
    paramPath = options.path + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = options.path + '/' + 'thumbprintRequired';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintRequired) {
      if (options.parse && options.thumbprintRequired) {
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintRequired}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove certificate
  var catparametersExtensionImageCertificate1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageCertificate1 = catparametersExtensionImageCertificate1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersExtensionImageCertificate1 = parametersExtensionImageCertificate1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersExtensionImageCertificate1.command('certificate')
  .description($('Remove catparametersExtensionImageCertificate1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/certificate';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add certificate
  var catparametersExtensionImageCertificate2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageCertificate2 = catparametersExtensionImageCertificate2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersExtensionImageCertificate2 = parametersExtensionImageCertificate2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersExtensionImageCertificate2.command('certificate')
  .description($('Remove catparametersExtensionImageCertificate2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--store-location <storeLocation>', $('Add the store-location value.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Add the thumbprint-algorithm value.'))
  .option('--thumbprint-required <thumbprintRequired>', $('Add the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/certificate' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/certificate' + '/' + 'storeLocation';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeLocation) {
      if (options.parse && options.storeLocation) {
        options.storeLocation = JSON.parse(options.storeLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeLocation}]);
    }
    paramPath = '/certificate' + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/certificate' + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = '/certificate' + '/' + 'thumbprintRequired';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintRequired) {
      if (options.parse && options.thumbprintRequired) {
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintRequired}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-endpoints
  var catparametersExtensionImageExtensionEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageExtensionEndpoints0 = catparametersExtensionImageExtensionEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersExtensionImageExtensionEndpoints0 = parametersExtensionImageExtensionEndpoints0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersExtensionImageExtensionEndpoints0.command('extension-endpoints')
  .description($('Set catparametersExtensionImageExtensionEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--instance-input-endpoints <instanceInputEndpoints>', $('Set the instance-input-endpoints value.'))
  .option('--internal-endpoints <internalEndpoints>', $('Set the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints';
    var paramPath = options.path + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'instanceInputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.instanceInputEndpoints) {
      if (options.parse && options.instanceInputEndpoints) {
        options.instanceInputEndpoints = JSON.parse(options.instanceInputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.instanceInputEndpoints}]);
    }
    paramPath = options.path + '/' + 'internalEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.internalEndpoints) {
      if (options.parse && options.internalEndpoints) {
        options.internalEndpoints = JSON.parse(options.internalEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.internalEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-endpoints
  var catparametersExtensionImageExtensionEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageExtensionEndpoints1 = catparametersExtensionImageExtensionEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersExtensionImageExtensionEndpoints1 = parametersExtensionImageExtensionEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersExtensionImageExtensionEndpoints1.command('extension-endpoints')
  .description($('Remove catparametersExtensionImageExtensionEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-endpoints
  var catparametersExtensionImageExtensionEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageExtensionEndpoints2 = catparametersExtensionImageExtensionEndpoints2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersExtensionImageExtensionEndpoints2 = parametersExtensionImageExtensionEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersExtensionImageExtensionEndpoints2.command('extension-endpoints')
  .description($('Remove catparametersExtensionImageExtensionEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--instance-input-endpoints <instanceInputEndpoints>', $('Add the instance-input-endpoints value.'))
  .option('--internal-endpoints <internalEndpoints>', $('Add the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints' + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/extensionEndpoints' + '/' + 'instanceInputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.instanceInputEndpoints) {
      if (options.parse && options.instanceInputEndpoints) {
        options.instanceInputEndpoints = JSON.parse(options.instanceInputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.instanceInputEndpoints}]);
    }
    paramPath = '/extensionEndpoints' + '/' + 'internalEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.internalEndpoints) {
      if (options.parse && options.internalEndpoints) {
        options.internalEndpoints = JSON.parse(options.internalEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.internalEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set input-endpoints
  var catparametersExtensionImageInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInputEndpoints0 = catparametersExtensionImageInputEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersExtensionImageInputEndpoints0 = parametersExtensionImageInputEndpoints0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersExtensionImageInputEndpoints0.command('input-endpoints')
  .description($('Set catparametersExtensionImageInputEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove input-endpoints
  var catparametersExtensionImageInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInputEndpoints1 = catparametersExtensionImageInputEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersExtensionImageInputEndpoints1 = parametersExtensionImageInputEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersExtensionImageInputEndpoints1.command('input-endpoints')
  .description($('Remove catparametersExtensionImageInputEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add input-endpoints
  var catparametersExtensionImageInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInputEndpoints2 = catparametersExtensionImageInputEndpoints2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersExtensionImageInputEndpoints2 = parametersExtensionImageInputEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersExtensionImageInputEndpoints2.command('input-endpoints')
  .description($('Remove catparametersExtensionImageInputEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set instance-input-endpoints
  var catparametersExtensionImageInstanceInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInstanceInputEndpoints0 = catparametersExtensionImageInstanceInputEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersExtensionImageInstanceInputEndpoints0 = parametersExtensionImageInstanceInputEndpoints0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersExtensionImageInstanceInputEndpoints0.command('instance-input-endpoints')
  .description($('Set catparametersExtensionImageInstanceInputEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fixed-port-max <fixedPortMax>', $('Set the fixed-port-max value.'))
  .option('--fixed-port-min <fixedPortMin>', $('Set the fixed-port-min value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fixedPortMax';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fixedPortMax) {
      if (options.parse && options.fixedPortMax) {
        options.fixedPortMax = JSON.parse(options.fixedPortMax);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMax}]);
    }
    paramPath = options.path + '/' + 'fixedPortMin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fixedPortMin) {
      if (options.parse && options.fixedPortMin) {
        options.fixedPortMin = JSON.parse(options.fixedPortMin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMin}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove instance-input-endpoints
  var catparametersExtensionImageInstanceInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInstanceInputEndpoints1 = catparametersExtensionImageInstanceInputEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersExtensionImageInstanceInputEndpoints1 = parametersExtensionImageInstanceInputEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersExtensionImageInstanceInputEndpoints1.command('instance-input-endpoints')
  .description($('Remove catparametersExtensionImageInstanceInputEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add instance-input-endpoints
  var catparametersExtensionImageInstanceInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInstanceInputEndpoints2 = catparametersExtensionImageInstanceInputEndpoints2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersExtensionImageInstanceInputEndpoints2 = parametersExtensionImageInstanceInputEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersExtensionImageInstanceInputEndpoints2.command('instance-input-endpoints')
  .description($('Remove catparametersExtensionImageInstanceInputEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fixed-port-max <fixedPortMax>', $('Add the fixed-port-max value.'))
  .option('--fixed-port-min <fixedPortMin>', $('Add the fixed-port-min value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'fixedPortMax';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fixedPortMax) {
      if (options.parse && options.fixedPortMax) {
        options.fixedPortMax = JSON.parse(options.fixedPortMax);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMax}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'fixedPortMin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fixedPortMin) {
      if (options.parse && options.fixedPortMin) {
        options.fixedPortMin = JSON.parse(options.fixedPortMin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMin}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set internal-endpoints
  var catparametersExtensionImageInternalEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInternalEndpoints0 = catparametersExtensionImageInternalEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersExtensionImageInternalEndpoints0 = parametersExtensionImageInternalEndpoints0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersExtensionImageInternalEndpoints0.command('internal-endpoints')
  .description($('Set catparametersExtensionImageInternalEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove internal-endpoints
  var catparametersExtensionImageInternalEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInternalEndpoints1 = catparametersExtensionImageInternalEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersExtensionImageInternalEndpoints1 = parametersExtensionImageInternalEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersExtensionImageInternalEndpoints1.command('internal-endpoints')
  .description($('Remove catparametersExtensionImageInternalEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add internal-endpoints
  var catparametersExtensionImageInternalEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInternalEndpoints2 = catparametersExtensionImageInternalEndpoints2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersExtensionImageInternalEndpoints2 = parametersExtensionImageInternalEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersExtensionImageInternalEndpoints2.command('internal-endpoints')
  .description($('Remove catparametersExtensionImageInternalEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set local-resources
  var catparametersExtensionImageLocalResources0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageLocalResources0 = catparametersExtensionImageLocalResources0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersExtensionImageLocalResources0 = parametersExtensionImageLocalResources0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersExtensionImageLocalResources0.command('local-resources')
  .description($('Set catparametersExtensionImageLocalResources0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--size-in-m-b <sizeInMB>', $('Set the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sizeInMB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sizeInMB) {
      if (options.parse && options.sizeInMB) {
        options.sizeInMB = JSON.parse(options.sizeInMB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sizeInMB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove local-resources
  var catparametersExtensionImageLocalResources1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageLocalResources1 = catparametersExtensionImageLocalResources1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersExtensionImageLocalResources1 = parametersExtensionImageLocalResources1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersExtensionImageLocalResources1.command('local-resources')
  .description($('Remove catparametersExtensionImageLocalResources1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add local-resources
  var catparametersExtensionImageLocalResources2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageLocalResources2 = catparametersExtensionImageLocalResources2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersExtensionImageLocalResources2 = parametersExtensionImageLocalResources2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersExtensionImageLocalResources2.command('local-resources')
  .description($('Remove catparametersExtensionImageLocalResources2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--size-in-m-b <sizeInMB>', $('Add the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + 'sizeInMB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sizeInMB) {
      if (options.parse && options.sizeInMB) {
        options.sizeInMB = JSON.parse(options.sizeInMB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sizeInMB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  ExtensionImage Unregister
  --provider-namespace
  --type
  --version
*/
  var extensionImageUnregister = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image').description($('Commands to manage your extension image.'));
  extensionImageUnregister.command('unregister')
  .description($('unregister method to manage your extension image.'))
  .usage('[options]')
  .option('--provider-namespace <provider-namespace>', $('provider-namespace'))
  .option('--type <type>', $('type'))
  .option('--version <version>', $('version'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('providerNamespace = ' + options.providerNamespace);
    cli.output.info('type = ' + options.type);
    cli.output.info('version = ' + options.version);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.extensionImages.unregister(options.providerNamespace, options.type, options.version, _);
    cli.output.json(result);
  });
/*
  ExtensionImage Update
  --parameters
=============================================
{
  "blockRoleUponFailure":null,
  "certificate":{
    "storeLocation":"",
    "storeName":"",
    "thumbprintAlgorithm":"",
    "thumbprintRequired":null
  },
  "companyName":"",
  "description":"",
  "disallowMajorVersionUpgrade":null,
  "eula":"",
  "extensionEndpoints":{
    "inputEndpoints":[
      {
        "localPort":"",
        "name":"",
        "port":0,
        "protocol":""
      }
    ],
    "instanceInputEndpoints":[
      {
        "fixedPortMax":0,
        "fixedPortMin":0,
        "localPort":"",
        "name":"",
        "protocol":""
      }
    ],
    "internalEndpoints":[
      {
        "name":"",
        "port":0,
        "protocol":""
      }
    ]
  },
  "homepageUri":"",
  "hostingResources":"",
  "isInternalExtension":null,
  "isJsonExtension":null,
  "label":"",
  "localResources":[
    {
      "name":"",
      "sizeInMB":null
    }
  ],
  "mediaLink":"",
  "privacyUri":"",
  "privateConfigurationSchema":"",
  "providerNameSpace":"",
  "publicConfigurationSchema":"",
  "publishedDate":null,
  "publisherName":"",
  "regions":"",
  "replicationCompleted":null,
  "sampleConfig":"",
  "supportedOS":"",
  "type":"",
  "version":""
}
*/
  var extensionImageUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image').description($('Commands to manage your extension image.'));
  extensionImageUpdate.command('update')
  .description($('update method to manage your extension image.'))
  .usage('[options]')
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.extensionImages.update(parametersObj, _);
    cli.output.json(result);
  });
  var extensionImageUpdateupdateParameters0 = extensionImageUpdate.category('parameters')
  .description($('Commands to manage parameter for your extension image.'));
  var extensionImageUpdateupdateGenerate0 = extensionImageUpdateupdateParameters0.category('generate')
  .description($('Commands to generate parameter file for your extension image.'));
  extensionImageUpdateupdateGenerate0.command('update')
  .description($('Generate extensionImageUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"blockRoleUponFailure\":null,\"certificate\":{\"storeLocation\":\"\",\"storeName\":\"\",\"thumbprintAlgorithm\":\"\",\"thumbprintRequired\":null},\"companyName\":\"\",\"description\":\"\",\"disallowMajorVersionUpgrade\":null,\"eula\":\"\",\"extensionEndpoints\":{\"inputEndpoints\":[{\"localPort\":\"\",\"name\":\"\",\"port\":0,\"protocol\":\"\"}],\"instanceInputEndpoints\":[{\"fixedPortMax\":0,\"fixedPortMin\":0,\"localPort\":\"\",\"name\":\"\",\"protocol\":\"\"}],\"internalEndpoints\":[{\"name\":\"\",\"port\":0,\"protocol\":\"\"}]},\"homepageUri\":\"\",\"hostingResources\":\"\",\"isInternalExtension\":null,\"isJsonExtension\":null,\"label\":\"\",\"localResources\":[{\"name\":\"\",\"sizeInMB\":null}],\"mediaLink\":\"\",\"privacyUri\":\"\",\"privateConfigurationSchema\":\"\",\"providerNameSpace\":\"\",\"publicConfigurationSchema\":\"\",\"publishedDate\":null,\"publisherName\":\"\",\"regions\":\"\",\"replicationCompleted\":null,\"sampleConfig\":\"\",\"supportedOS\":\"\",\"type\":\"\",\"version\":\"\"}', _);
    var filePath = 'extensionImageUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"blockRoleUponFailure\":null,\r\n\"certificate\":{\r\n\"storeLocation\":\"\",\r\n\"storeName\":\"\",\r\n\"thumbprintAlgorithm\":\"\",\r\n\"thumbprintRequired\":null\r\n},\r\n\"companyName\":\"\",\r\n\"description\":\"\",\r\n\"disallowMajorVersionUpgrade\":null,\r\n\"eula\":\"\",\r\n\"extensionEndpoints\":{\r\n\"inputEndpoints\":[\r\n{\r\n\"localPort\":\"\",\r\n\"name\":\"\",\r\n\"port\":0,\r\n\"protocol\":\"\"\r\n}\r\n],\r\n\"instanceInputEndpoints\":[\r\n{\r\n\"fixedPortMax\":0,\r\n\"fixedPortMin\":0,\r\n\"localPort\":\"\",\r\n\"name\":\"\",\r\n\"protocol\":\"\"\r\n}\r\n],\r\n\"internalEndpoints\":[\r\n{\r\n\"name\":\"\",\r\n\"port\":0,\r\n\"protocol\":\"\"\r\n}\r\n]\r\n},\r\n\"homepageUri\":\"\",\r\n\"hostingResources\":\"\",\r\n\"isInternalExtension\":null,\r\n\"isJsonExtension\":null,\r\n\"label\":\"\",\r\n\"localResources\":[\r\n{\r\n\"name\":\"\",\r\n\"sizeInMB\":null\r\n}\r\n],\r\n\"mediaLink\":\"\",\r\n\"privacyUri\":\"\",\r\n\"privateConfigurationSchema\":\"\",\r\n\"providerNameSpace\":\"\",\r\n\"publicConfigurationSchema\":\"\",\r\n\"publishedDate\":null,\r\n\"publisherName\":\"\",\r\n\"regions\":\"\",\r\n\"replicationCompleted\":null,\r\n\"sampleConfig\":\"\",\r\n\"supportedOS\":\"\",\r\n\"type\":\"\",\r\n\"version\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  extensionImageUpdateupdateParameters0.command('patch')
  .description($('Command to patch extensionImageUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-image-update-parameters
  var catparametersExtensionImageExtensionImageUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageExtensionImageUpdateParameters0 = catparametersExtensionImageExtensionImageUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersExtensionImageExtensionImageUpdateParameters0 = parametersExtensionImageExtensionImageUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersExtensionImageExtensionImageUpdateParameters0.command('extension-image-update-parameters')
  .description($('Set catparametersExtensionImageExtensionImageUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--block-role-upon-failure <blockRoleUponFailure>', $('Set the block-role-upon-failure value.'))
  .option('--certificate <certificate>', $('Set the certificate value.'))
  .option('--company-name <companyName>', $('Set the company-name value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--disallow-major-version-upgrade <disallowMajorVersionUpgrade>', $('Set the disallow-major-version-upgrade value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--extension-endpoints <extensionEndpoints>', $('Set the extension-endpoints value.'))
  .option('--homepage-uri <homepageUri>', $('Set the homepage-uri value.'))
  .option('--hosting-resources <hostingResources>', $('Set the hosting-resources value.'))
  .option('--is-internal-extension <isInternalExtension>', $('Set the is-internal-extension value.'))
  .option('--is-json-extension <isJsonExtension>', $('Set the is-json-extension value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--local-resources <localResources>', $('Set the local-resources value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--private-configuration-schema <privateConfigurationSchema>', $('Set the private-configuration-schema value.'))
  .option('--provider-name-space <providerNameSpace>', $('Set the provider-name-space value.'))
  .option('--public-configuration-schema <publicConfigurationSchema>', $('Set the public-configuration-schema value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--publisher-name <publisherName>', $('Set the publisher-name value.'))
  .option('--regions <regions>', $('Set the regions value.'))
  .option('--replication-completed <replicationCompleted>', $('Set the replication-completed value.'))
  .option('--sample-config <sampleConfig>', $('Set the sample-config value.'))
  .option('--supported-os <supportedOS>', $('Set the supported-os value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'blockRoleUponFailure';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.blockRoleUponFailure) {
      if (options.parse && options.blockRoleUponFailure) {
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.blockRoleUponFailure}]);
    }
    paramPath = options.path + '/' + 'certificate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificate) {
      if (options.parse && options.certificate) {
        options.certificate = JSON.parse(options.certificate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificate}]);
    }
    paramPath = options.path + '/' + 'companyName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.companyName) {
      if (options.parse && options.companyName) {
        options.companyName = JSON.parse(options.companyName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.companyName}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'disallowMajorVersionUpgrade';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disallowMajorVersionUpgrade) {
      if (options.parse && options.disallowMajorVersionUpgrade) {
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disallowMajorVersionUpgrade}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'extensionEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionEndpoints) {
      if (options.parse && options.extensionEndpoints) {
        options.extensionEndpoints = JSON.parse(options.extensionEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionEndpoints}]);
    }
    paramPath = options.path + '/' + 'homepageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.homepageUri) {
      if (options.parse && options.homepageUri) {
        options.homepageUri = JSON.parse(options.homepageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.homepageUri}]);
    }
    paramPath = options.path + '/' + 'hostingResources';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostingResources) {
      if (options.parse && options.hostingResources) {
        options.hostingResources = JSON.parse(options.hostingResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostingResources}]);
    }
    paramPath = options.path + '/' + 'isInternalExtension';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isInternalExtension) {
      if (options.parse && options.isInternalExtension) {
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isInternalExtension}]);
    }
    paramPath = options.path + '/' + 'isJsonExtension';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isJsonExtension) {
      if (options.parse && options.isJsonExtension) {
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isJsonExtension}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'localResources';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localResources) {
      if (options.parse && options.localResources) {
        options.localResources = JSON.parse(options.localResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localResources}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'privateConfigurationSchema';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privateConfigurationSchema) {
      if (options.parse && options.privateConfigurationSchema) {
        options.privateConfigurationSchema = JSON.parse(options.privateConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfigurationSchema}]);
    }
    paramPath = options.path + '/' + 'providerNameSpace';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.providerNameSpace) {
      if (options.parse && options.providerNameSpace) {
        options.providerNameSpace = JSON.parse(options.providerNameSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNameSpace}]);
    }
    paramPath = options.path + '/' + 'publicConfigurationSchema';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicConfigurationSchema) {
      if (options.parse && options.publicConfigurationSchema) {
        options.publicConfigurationSchema = JSON.parse(options.publicConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfigurationSchema}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'publisherName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisherName) {
      if (options.parse && options.publisherName) {
        options.publisherName = JSON.parse(options.publisherName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherName}]);
    }
    paramPath = options.path + '/' + 'regions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.regions) {
      if (options.parse && options.regions) {
        options.regions = JSON.parse(options.regions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.regions}]);
    }
    paramPath = options.path + '/' + 'replicationCompleted';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.replicationCompleted) {
      if (options.parse && options.replicationCompleted) {
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.replicationCompleted}]);
    }
    paramPath = options.path + '/' + 'sampleConfig';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sampleConfig) {
      if (options.parse && options.sampleConfig) {
        options.sampleConfig = JSON.parse(options.sampleConfig);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sampleConfig}]);
    }
    paramPath = options.path + '/' + 'supportedOS';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.supportedOS) {
      if (options.parse && options.supportedOS) {
        options.supportedOS = JSON.parse(options.supportedOS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.supportedOS}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-image-update-parameters
  var catparametersExtensionImageExtensionImageUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageExtensionImageUpdateParameters1 = catparametersExtensionImageExtensionImageUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersExtensionImageExtensionImageUpdateParameters1 = parametersExtensionImageExtensionImageUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersExtensionImageExtensionImageUpdateParameters1.command('extension-image-update-parameters')
  .description($('Remove catparametersExtensionImageExtensionImageUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-image-update-parameters
  var catparametersExtensionImageExtensionImageUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageExtensionImageUpdateParameters2 = catparametersExtensionImageExtensionImageUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersExtensionImageExtensionImageUpdateParameters2 = parametersExtensionImageExtensionImageUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersExtensionImageExtensionImageUpdateParameters2.command('extension-image-update-parameters')
  .description($('Remove catparametersExtensionImageExtensionImageUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--block-role-upon-failure <blockRoleUponFailure>', $('Add the block-role-upon-failure value.'))
  .option('--certificate <certificate>', $('Add the certificate value.'))
  .option('--company-name <companyName>', $('Add the company-name value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--disallow-major-version-upgrade <disallowMajorVersionUpgrade>', $('Add the disallow-major-version-upgrade value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--extension-endpoints <extensionEndpoints>', $('Add the extension-endpoints value.'))
  .option('--homepage-uri <homepageUri>', $('Add the homepage-uri value.'))
  .option('--hosting-resources <hostingResources>', $('Add the hosting-resources value.'))
  .option('--is-internal-extension <isInternalExtension>', $('Add the is-internal-extension value.'))
  .option('--is-json-extension <isJsonExtension>', $('Add the is-json-extension value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--local-resources <localResources>', $('Add the local-resources value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--private-configuration-schema <privateConfigurationSchema>', $('Add the private-configuration-schema value.'))
  .option('--provider-name-space <providerNameSpace>', $('Add the provider-name-space value.'))
  .option('--public-configuration-schema <publicConfigurationSchema>', $('Add the public-configuration-schema value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--publisher-name <publisherName>', $('Add the publisher-name value.'))
  .option('--regions <regions>', $('Add the regions value.'))
  .option('--replication-completed <replicationCompleted>', $('Add the replication-completed value.'))
  .option('--sample-config <sampleConfig>', $('Add the sample-config value.'))
  .option('--supported-os <supportedOS>', $('Add the supported-os value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'blockRoleUponFailure';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.blockRoleUponFailure) {
      if (options.parse && options.blockRoleUponFailure) {
        options.blockRoleUponFailure = JSON.parse(options.blockRoleUponFailure);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.blockRoleUponFailure}]);
    }
    paramPath = '' + '/' + 'certificate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificate) {
      if (options.parse && options.certificate) {
        options.certificate = JSON.parse(options.certificate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificate}]);
    }
    paramPath = '' + '/' + 'companyName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.companyName) {
      if (options.parse && options.companyName) {
        options.companyName = JSON.parse(options.companyName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.companyName}]);
    }
    paramPath = '' + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'disallowMajorVersionUpgrade';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disallowMajorVersionUpgrade) {
      if (options.parse && options.disallowMajorVersionUpgrade) {
        options.disallowMajorVersionUpgrade = JSON.parse(options.disallowMajorVersionUpgrade);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disallowMajorVersionUpgrade}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'extensionEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionEndpoints) {
      if (options.parse && options.extensionEndpoints) {
        options.extensionEndpoints = JSON.parse(options.extensionEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionEndpoints}]);
    }
    paramPath = '' + '/' + 'homepageUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.homepageUri) {
      if (options.parse && options.homepageUri) {
        options.homepageUri = JSON.parse(options.homepageUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.homepageUri}]);
    }
    paramPath = '' + '/' + 'hostingResources';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostingResources) {
      if (options.parse && options.hostingResources) {
        options.hostingResources = JSON.parse(options.hostingResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostingResources}]);
    }
    paramPath = '' + '/' + 'isInternalExtension';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isInternalExtension) {
      if (options.parse && options.isInternalExtension) {
        options.isInternalExtension = JSON.parse(options.isInternalExtension);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isInternalExtension}]);
    }
    paramPath = '' + '/' + 'isJsonExtension';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isJsonExtension) {
      if (options.parse && options.isJsonExtension) {
        options.isJsonExtension = JSON.parse(options.isJsonExtension);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isJsonExtension}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'localResources';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localResources) {
      if (options.parse && options.localResources) {
        options.localResources = JSON.parse(options.localResources);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localResources}]);
    }
    paramPath = '' + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'privateConfigurationSchema';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privateConfigurationSchema) {
      if (options.parse && options.privateConfigurationSchema) {
        options.privateConfigurationSchema = JSON.parse(options.privateConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfigurationSchema}]);
    }
    paramPath = '' + '/' + 'providerNameSpace';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.providerNameSpace) {
      if (options.parse && options.providerNameSpace) {
        options.providerNameSpace = JSON.parse(options.providerNameSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNameSpace}]);
    }
    paramPath = '' + '/' + 'publicConfigurationSchema';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicConfigurationSchema) {
      if (options.parse && options.publicConfigurationSchema) {
        options.publicConfigurationSchema = JSON.parse(options.publicConfigurationSchema);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfigurationSchema}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'publisherName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisherName) {
      if (options.parse && options.publisherName) {
        options.publisherName = JSON.parse(options.publisherName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherName}]);
    }
    paramPath = '' + '/' + 'regions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.regions) {
      if (options.parse && options.regions) {
        options.regions = JSON.parse(options.regions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.regions}]);
    }
    paramPath = '' + '/' + 'replicationCompleted';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.replicationCompleted) {
      if (options.parse && options.replicationCompleted) {
        options.replicationCompleted = JSON.parse(options.replicationCompleted);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.replicationCompleted}]);
    }
    paramPath = '' + '/' + 'sampleConfig';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sampleConfig) {
      if (options.parse && options.sampleConfig) {
        options.sampleConfig = JSON.parse(options.sampleConfig);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sampleConfig}]);
    }
    paramPath = '' + '/' + 'supportedOS';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.supportedOS) {
      if (options.parse && options.supportedOS) {
        options.supportedOS = JSON.parse(options.supportedOS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.supportedOS}]);
    }
    paramPath = '' + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '' + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set certificate
  var catparametersExtensionImageCertificate0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageCertificate0 = catparametersExtensionImageCertificate0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersExtensionImageCertificate0 = parametersExtensionImageCertificate0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersExtensionImageCertificate0.command('certificate')
  .description($('Set catparametersExtensionImageCertificate0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--store-location <storeLocation>', $('Set the store-location value.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Set the thumbprint-algorithm value.'))
  .option('--thumbprint-required <thumbprintRequired>', $('Set the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/certificate';
    var paramPath = options.path + '/' + 'storeLocation';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeLocation) {
      if (options.parse && options.storeLocation) {
        options.storeLocation = JSON.parse(options.storeLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeLocation}]);
    }
    paramPath = options.path + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = options.path + '/' + 'thumbprintRequired';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintRequired) {
      if (options.parse && options.thumbprintRequired) {
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintRequired}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove certificate
  var catparametersExtensionImageCertificate1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageCertificate1 = catparametersExtensionImageCertificate1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersExtensionImageCertificate1 = parametersExtensionImageCertificate1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersExtensionImageCertificate1.command('certificate')
  .description($('Remove catparametersExtensionImageCertificate1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/certificate';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add certificate
  var catparametersExtensionImageCertificate2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageCertificate2 = catparametersExtensionImageCertificate2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersExtensionImageCertificate2 = parametersExtensionImageCertificate2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersExtensionImageCertificate2.command('certificate')
  .description($('Remove catparametersExtensionImageCertificate2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--store-location <storeLocation>', $('Add the store-location value.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Add the thumbprint-algorithm value.'))
  .option('--thumbprint-required <thumbprintRequired>', $('Add the thumbprint-required value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/certificate' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/certificate' + '/' + 'storeLocation';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeLocation) {
      if (options.parse && options.storeLocation) {
        options.storeLocation = JSON.parse(options.storeLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeLocation}]);
    }
    paramPath = '/certificate' + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/certificate' + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = '/certificate' + '/' + 'thumbprintRequired';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintRequired) {
      if (options.parse && options.thumbprintRequired) {
        options.thumbprintRequired = JSON.parse(options.thumbprintRequired);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintRequired}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-endpoints
  var catparametersExtensionImageExtensionEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageExtensionEndpoints0 = catparametersExtensionImageExtensionEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersExtensionImageExtensionEndpoints0 = parametersExtensionImageExtensionEndpoints0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersExtensionImageExtensionEndpoints0.command('extension-endpoints')
  .description($('Set catparametersExtensionImageExtensionEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--instance-input-endpoints <instanceInputEndpoints>', $('Set the instance-input-endpoints value.'))
  .option('--internal-endpoints <internalEndpoints>', $('Set the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints';
    var paramPath = options.path + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'instanceInputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.instanceInputEndpoints) {
      if (options.parse && options.instanceInputEndpoints) {
        options.instanceInputEndpoints = JSON.parse(options.instanceInputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.instanceInputEndpoints}]);
    }
    paramPath = options.path + '/' + 'internalEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.internalEndpoints) {
      if (options.parse && options.internalEndpoints) {
        options.internalEndpoints = JSON.parse(options.internalEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.internalEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-endpoints
  var catparametersExtensionImageExtensionEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageExtensionEndpoints1 = catparametersExtensionImageExtensionEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersExtensionImageExtensionEndpoints1 = parametersExtensionImageExtensionEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersExtensionImageExtensionEndpoints1.command('extension-endpoints')
  .description($('Remove catparametersExtensionImageExtensionEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-endpoints
  var catparametersExtensionImageExtensionEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageExtensionEndpoints2 = catparametersExtensionImageExtensionEndpoints2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersExtensionImageExtensionEndpoints2 = parametersExtensionImageExtensionEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersExtensionImageExtensionEndpoints2.command('extension-endpoints')
  .description($('Remove catparametersExtensionImageExtensionEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--instance-input-endpoints <instanceInputEndpoints>', $('Add the instance-input-endpoints value.'))
  .option('--internal-endpoints <internalEndpoints>', $('Add the internal-endpoints value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints' + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/extensionEndpoints' + '/' + 'instanceInputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.instanceInputEndpoints) {
      if (options.parse && options.instanceInputEndpoints) {
        options.instanceInputEndpoints = JSON.parse(options.instanceInputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.instanceInputEndpoints}]);
    }
    paramPath = '/extensionEndpoints' + '/' + 'internalEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.internalEndpoints) {
      if (options.parse && options.internalEndpoints) {
        options.internalEndpoints = JSON.parse(options.internalEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.internalEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set input-endpoints
  var catparametersExtensionImageInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInputEndpoints0 = catparametersExtensionImageInputEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersExtensionImageInputEndpoints0 = parametersExtensionImageInputEndpoints0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersExtensionImageInputEndpoints0.command('input-endpoints')
  .description($('Set catparametersExtensionImageInputEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove input-endpoints
  var catparametersExtensionImageInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInputEndpoints1 = catparametersExtensionImageInputEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersExtensionImageInputEndpoints1 = parametersExtensionImageInputEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersExtensionImageInputEndpoints1.command('input-endpoints')
  .description($('Remove catparametersExtensionImageInputEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add input-endpoints
  var catparametersExtensionImageInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInputEndpoints2 = catparametersExtensionImageInputEndpoints2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersExtensionImageInputEndpoints2 = parametersExtensionImageInputEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersExtensionImageInputEndpoints2.command('input-endpoints')
  .description($('Remove catparametersExtensionImageInputEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/extensionEndpoints/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set instance-input-endpoints
  var catparametersExtensionImageInstanceInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInstanceInputEndpoints0 = catparametersExtensionImageInstanceInputEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersExtensionImageInstanceInputEndpoints0 = parametersExtensionImageInstanceInputEndpoints0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersExtensionImageInstanceInputEndpoints0.command('instance-input-endpoints')
  .description($('Set catparametersExtensionImageInstanceInputEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fixed-port-max <fixedPortMax>', $('Set the fixed-port-max value.'))
  .option('--fixed-port-min <fixedPortMin>', $('Set the fixed-port-min value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fixedPortMax';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fixedPortMax) {
      if (options.parse && options.fixedPortMax) {
        options.fixedPortMax = JSON.parse(options.fixedPortMax);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMax}]);
    }
    paramPath = options.path + '/' + 'fixedPortMin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fixedPortMin) {
      if (options.parse && options.fixedPortMin) {
        options.fixedPortMin = JSON.parse(options.fixedPortMin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMin}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove instance-input-endpoints
  var catparametersExtensionImageInstanceInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInstanceInputEndpoints1 = catparametersExtensionImageInstanceInputEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersExtensionImageInstanceInputEndpoints1 = parametersExtensionImageInstanceInputEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersExtensionImageInstanceInputEndpoints1.command('instance-input-endpoints')
  .description($('Remove catparametersExtensionImageInstanceInputEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add instance-input-endpoints
  var catparametersExtensionImageInstanceInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInstanceInputEndpoints2 = catparametersExtensionImageInstanceInputEndpoints2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersExtensionImageInstanceInputEndpoints2 = parametersExtensionImageInstanceInputEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersExtensionImageInstanceInputEndpoints2.command('instance-input-endpoints')
  .description($('Remove catparametersExtensionImageInstanceInputEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fixed-port-max <fixedPortMax>', $('Add the fixed-port-max value.'))
  .option('--fixed-port-min <fixedPortMin>', $('Add the fixed-port-min value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'fixedPortMax';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fixedPortMax) {
      if (options.parse && options.fixedPortMax) {
        options.fixedPortMax = JSON.parse(options.fixedPortMax);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMax}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'fixedPortMin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fixedPortMin) {
      if (options.parse && options.fixedPortMin) {
        options.fixedPortMin = JSON.parse(options.fixedPortMin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fixedPortMin}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/instanceInputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set internal-endpoints
  var catparametersExtensionImageInternalEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInternalEndpoints0 = catparametersExtensionImageInternalEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersExtensionImageInternalEndpoints0 = parametersExtensionImageInternalEndpoints0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersExtensionImageInternalEndpoints0.command('internal-endpoints')
  .description($('Set catparametersExtensionImageInternalEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove internal-endpoints
  var catparametersExtensionImageInternalEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInternalEndpoints1 = catparametersExtensionImageInternalEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersExtensionImageInternalEndpoints1 = parametersExtensionImageInternalEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersExtensionImageInternalEndpoints1.command('internal-endpoints')
  .description($('Remove catparametersExtensionImageInternalEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add internal-endpoints
  var catparametersExtensionImageInternalEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageInternalEndpoints2 = catparametersExtensionImageInternalEndpoints2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersExtensionImageInternalEndpoints2 = parametersExtensionImageInternalEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersExtensionImageInternalEndpoints2.command('internal-endpoints')
  .description($('Remove catparametersExtensionImageInternalEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/extensionEndpoints/internalEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set local-resources
  var catparametersExtensionImageLocalResources0 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageLocalResources0 = catparametersExtensionImageLocalResources0.category('parameters')
  .description($('Commands to manage parameter for your extension-image.'));
  var setparametersExtensionImageLocalResources0 = parametersExtensionImageLocalResources0.category('set')
  .description($('Commands to set parameter file for your extension-image.'));
  setparametersExtensionImageLocalResources0.command('local-resources')
  .description($('Set catparametersExtensionImageLocalResources0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--size-in-m-b <sizeInMB>', $('Set the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sizeInMB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sizeInMB) {
      if (options.parse && options.sizeInMB) {
        options.sizeInMB = JSON.parse(options.sizeInMB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sizeInMB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove local-resources
  var catparametersExtensionImageLocalResources1 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageLocalResources1 = catparametersExtensionImageLocalResources1.category('parameters')
  .description($('Commands to remove parameter for your extension-image.'));
  var removeparametersExtensionImageLocalResources1 = parametersExtensionImageLocalResources1.category('remove')
  .description($('Commands to remove values in the parameter file for your extension-image.'));
  removeparametersExtensionImageLocalResources1.command('local-resources')
  .description($('Remove catparametersExtensionImageLocalResources1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add local-resources
  var catparametersExtensionImageLocalResources2 = cli.category('invoke').description('Commands to invoke service management operations.').category('extension-image');
  var parametersExtensionImageLocalResources2 = catparametersExtensionImageLocalResources2.category('parameters')
  .description($('Commands to add parameter for your extension-image.'));
  var addparametersExtensionImageLocalResources2 = parametersExtensionImageLocalResources2.category('add')
  .description($('Commands to add values in the parameter file for your extension-image.'));
  addparametersExtensionImageLocalResources2.command('local-resources')
  .description($('Remove catparametersExtensionImageLocalResources2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--size-in-m-b <sizeInMB>', $('Add the size-in-m-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/localResources' + (options.index ? ('/' + options.index) : '') + '/' + 'sizeInMB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sizeInMB) {
      if (options.parse && options.sizeInMB) {
        options.sizeInMB = JSON.parse(options.sizeInMB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sizeInMB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  HostedService AddExtension
  --service-name
  --parameters
=============================================
{
  "id":"",
  "privateConfiguration":"",
  "providerNamespace":"",
  "publicConfiguration":"",
  "thumbprint":"",
  "thumbprintAlgorithm":"",
  "type":"",
  "version":""
}
*/
  var hostedServiceAddExtension = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceAddExtension.command('add-extension')
  .description($('add-extension method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--id <id>', $('id'))
  .option('--private-configuration <private-configuration>', $('private-configuration'))
  .option('--provider-namespace <provider-namespace>', $('provider-namespace'))
  .option('--public-configuration <public-configuration>', $('public-configuration'))
  .option('--thumbprint <thumbprint>', $('thumbprint'))
  .option('--thumbprint-algorithm <thumbprint-algorithm>', $('thumbprint-algorithm'))
  .option('--type <type>', $('type'))
  .option('--version <version>', $('version'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = {};
      cli.output.info('id = ' + options.id);
      parametersObj.id = options.id;
      cli.output.info('privateConfiguration = ' + options.privateConfiguration);
      parametersObj.privateConfiguration = options.privateConfiguration;
      cli.output.info('providerNamespace = ' + options.providerNamespace);
      parametersObj.providerNamespace = options.providerNamespace;
      cli.output.info('publicConfiguration = ' + options.publicConfiguration);
      parametersObj.publicConfiguration = options.publicConfiguration;
      cli.output.info('thumbprint = ' + options.thumbprint);
      parametersObj.thumbprint = options.thumbprint;
      cli.output.info('thumbprintAlgorithm = ' + options.thumbprintAlgorithm);
      parametersObj.thumbprintAlgorithm = options.thumbprintAlgorithm;
      cli.output.info('type = ' + options.type);
      parametersObj.type = options.type;
      cli.output.info('version = ' + options.version);
      parametersObj.version = options.version;
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.addExtension(options.serviceName, parametersObj, _);
    cli.output.json(result);
  });
  var hostedServiceAddExtensionaddExtensionParameters1 = hostedServiceAddExtension.category('parameters')
  .description($('Commands to manage parameter for your hosted service.'));
  var hostedServiceAddExtensionaddExtensionGenerate1 = hostedServiceAddExtensionaddExtensionParameters1.category('generate')
  .description($('Commands to generate parameter file for your hosted service.'));
  hostedServiceAddExtensionaddExtensionGenerate1.command('add-extension')
  .description($('Generate hostedServiceAddExtension parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"id\":\"\",\"privateConfiguration\":\"\",\"providerNamespace\":\"\",\"publicConfiguration\":\"\",\"thumbprint\":\"\",\"thumbprintAlgorithm\":\"\",\"type\":\"\",\"version\":\"\"}', _);
    var filePath = 'hostedServiceAddExtension_addExtension.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"id\":\"\",\r\n\"privateConfiguration\":\"\",\r\n\"providerNamespace\":\"\",\r\n\"publicConfiguration\":\"\",\r\n\"thumbprint\":\"\",\r\n\"thumbprintAlgorithm\":\"\",\r\n\"type\":\"\",\r\n\"version\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  hostedServiceAddExtensionaddExtensionParameters1.command('patch')
  .description($('Command to patch hostedServiceAddExtension parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set hosted-service-add-extension-parameters
  var catparametersHostedServiceHostedServiceAddExtensionParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersHostedServiceHostedServiceAddExtensionParameters0 = catparametersHostedServiceHostedServiceAddExtensionParameters0.category('parameters')
  .description($('Commands to manage parameter for your hosted-service.'));
  var setparametersHostedServiceHostedServiceAddExtensionParameters0 = parametersHostedServiceHostedServiceAddExtensionParameters0.category('set')
  .description($('Commands to set parameter file for your hosted-service.'));
  setparametersHostedServiceHostedServiceAddExtensionParameters0.command('hosted-service-add-extension-parameters')
  .description($('Set catparametersHostedServiceHostedServiceAddExtensionParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--private-configuration <privateConfiguration>', $('Set the private-configuration value.'))
  .option('--provider-namespace <providerNamespace>', $('Set the provider-namespace value.'))
  .option('--public-configuration <publicConfiguration>', $('Set the public-configuration value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Set the thumbprint-algorithm value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'privateConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privateConfiguration) {
      if (options.parse && options.privateConfiguration) {
        options.privateConfiguration = JSON.parse(options.privateConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfiguration}]);
    }
    paramPath = options.path + '/' + 'providerNamespace';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.providerNamespace) {
      if (options.parse && options.providerNamespace) {
        options.providerNamespace = JSON.parse(options.providerNamespace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNamespace}]);
    }
    paramPath = options.path + '/' + 'publicConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicConfiguration) {
      if (options.parse && options.publicConfiguration) {
        options.publicConfiguration = JSON.parse(options.publicConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfiguration}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = options.path + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove hosted-service-add-extension-parameters
  var catparametersHostedServiceHostedServiceAddExtensionParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersHostedServiceHostedServiceAddExtensionParameters1 = catparametersHostedServiceHostedServiceAddExtensionParameters1.category('parameters')
  .description($('Commands to remove parameter for your hosted-service.'));
  var removeparametersHostedServiceHostedServiceAddExtensionParameters1 = parametersHostedServiceHostedServiceAddExtensionParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your hosted-service.'));
  removeparametersHostedServiceHostedServiceAddExtensionParameters1.command('hosted-service-add-extension-parameters')
  .description($('Remove catparametersHostedServiceHostedServiceAddExtensionParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add hosted-service-add-extension-parameters
  var catparametersHostedServiceHostedServiceAddExtensionParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersHostedServiceHostedServiceAddExtensionParameters2 = catparametersHostedServiceHostedServiceAddExtensionParameters2.category('parameters')
  .description($('Commands to add parameter for your hosted-service.'));
  var addparametersHostedServiceHostedServiceAddExtensionParameters2 = parametersHostedServiceHostedServiceAddExtensionParameters2.category('add')
  .description($('Commands to add values in the parameter file for your hosted-service.'));
  addparametersHostedServiceHostedServiceAddExtensionParameters2.command('hosted-service-add-extension-parameters')
  .description($('Remove catparametersHostedServiceHostedServiceAddExtensionParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--private-configuration <privateConfiguration>', $('Add the private-configuration value.'))
  .option('--provider-namespace <providerNamespace>', $('Add the provider-namespace value.'))
  .option('--public-configuration <publicConfiguration>', $('Add the public-configuration value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Add the thumbprint-algorithm value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '' + '/' + 'privateConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privateConfiguration) {
      if (options.parse && options.privateConfiguration) {
        options.privateConfiguration = JSON.parse(options.privateConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateConfiguration}]);
    }
    paramPath = '' + '/' + 'providerNamespace';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.providerNamespace) {
      if (options.parse && options.providerNamespace) {
        options.providerNamespace = JSON.parse(options.providerNamespace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.providerNamespace}]);
    }
    paramPath = '' + '/' + 'publicConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicConfiguration) {
      if (options.parse && options.publicConfiguration) {
        options.publicConfiguration = JSON.parse(options.publicConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicConfiguration}]);
    }
    paramPath = '' + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = '' + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    paramPath = '' + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '' + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  HostedService CheckNameAvailability
  --service-name
*/
  var hostedServiceCheckNameAvailability = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceCheckNameAvailability.command('check-name-availability')
  .description($('check-name-availability method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.checkNameAvailability(options.serviceName, _);
    cli.output.json(result);
  });
/*
  HostedService Create
  --parameters
=============================================
{
  "affinityGroup":"",
  "description":"",
  "extendedProperties":{
  },
  "label":"",
  "location":"",
  "reverseDnsFqdn":"",
  "serviceName":""
}
*/
  var hostedServiceCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceCreate.command('create')
  .description($('create method to manage your hosted service.'))
  .usage('[options]')
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.create(parametersObj, _);
    cli.output.json(result);
  });
  var hostedServiceCreatecreateParameters0 = hostedServiceCreate.category('parameters')
  .description($('Commands to manage parameter for your hosted service.'));
  var hostedServiceCreatecreateGenerate0 = hostedServiceCreatecreateParameters0.category('generate')
  .description($('Commands to generate parameter file for your hosted service.'));
  hostedServiceCreatecreateGenerate0.command('create')
  .description($('Generate hostedServiceCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"affinityGroup\":\"\",\"description\":\"\",\"extendedProperties\":{},\"label\":\"\",\"location\":\"\",\"reverseDnsFqdn\":\"\",\"serviceName\":\"\"}', _);
    var filePath = 'hostedServiceCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"affinityGroup\":\"\",\r\n\"description\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"label\":\"\",\r\n\"location\":\"\",\r\n\"reverseDnsFqdn\":\"\",\r\n\"serviceName\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  hostedServiceCreatecreateParameters0.command('patch')
  .description($('Command to patch hostedServiceCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set hosted-service-create-parameters
  var catparametersHostedServiceHostedServiceCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersHostedServiceHostedServiceCreateParameters0 = catparametersHostedServiceHostedServiceCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your hosted-service.'));
  var setparametersHostedServiceHostedServiceCreateParameters0 = parametersHostedServiceHostedServiceCreateParameters0.category('set')
  .description($('Commands to set parameter file for your hosted-service.'));
  setparametersHostedServiceHostedServiceCreateParameters0.command('hosted-service-create-parameters')
  .description($('Set catparametersHostedServiceHostedServiceCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--affinity-group <affinityGroup>', $('Set the affinity-group value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--reverse-dns-fqdn <reverseDnsFqdn>', $('Set the reverse-dns-fqdn value.'))
  .option('--service-name <serviceName>', $('Set the service-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'affinityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.affinityGroup) {
      if (options.parse && options.affinityGroup) {
        options.affinityGroup = JSON.parse(options.affinityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.affinityGroup}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'reverseDnsFqdn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.reverseDnsFqdn) {
      if (options.parse && options.reverseDnsFqdn) {
        options.reverseDnsFqdn = JSON.parse(options.reverseDnsFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reverseDnsFqdn}]);
    }
    paramPath = options.path + '/' + 'serviceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.serviceName) {
      if (options.parse && options.serviceName) {
        options.serviceName = JSON.parse(options.serviceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serviceName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove hosted-service-create-parameters
  var catparametersHostedServiceHostedServiceCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersHostedServiceHostedServiceCreateParameters1 = catparametersHostedServiceHostedServiceCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your hosted-service.'));
  var removeparametersHostedServiceHostedServiceCreateParameters1 = parametersHostedServiceHostedServiceCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your hosted-service.'));
  removeparametersHostedServiceHostedServiceCreateParameters1.command('hosted-service-create-parameters')
  .description($('Remove catparametersHostedServiceHostedServiceCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add hosted-service-create-parameters
  var catparametersHostedServiceHostedServiceCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersHostedServiceHostedServiceCreateParameters2 = catparametersHostedServiceHostedServiceCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your hosted-service.'));
  var addparametersHostedServiceHostedServiceCreateParameters2 = parametersHostedServiceHostedServiceCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your hosted-service.'));
  addparametersHostedServiceHostedServiceCreateParameters2.command('hosted-service-create-parameters')
  .description($('Remove catparametersHostedServiceHostedServiceCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--affinity-group <affinityGroup>', $('Add the affinity-group value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--reverse-dns-fqdn <reverseDnsFqdn>', $('Add the reverse-dns-fqdn value.'))
  .option('--service-name <serviceName>', $('Add the service-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'affinityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.affinityGroup) {
      if (options.parse && options.affinityGroup) {
        options.affinityGroup = JSON.parse(options.affinityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.affinityGroup}]);
    }
    paramPath = '' + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'location';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '' + '/' + 'reverseDnsFqdn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.reverseDnsFqdn) {
      if (options.parse && options.reverseDnsFqdn) {
        options.reverseDnsFqdn = JSON.parse(options.reverseDnsFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reverseDnsFqdn}]);
    }
    paramPath = '' + '/' + 'serviceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.serviceName) {
      if (options.parse && options.serviceName) {
        options.serviceName = JSON.parse(options.serviceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serviceName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  HostedService Delete
  --service-name
*/
  var hostedServiceDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceDelete.command('delete')
  .description($('delete method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.deleteMethod(options.serviceName, _);
    cli.output.json(result);
  });
/*
  HostedService DeleteAll
  --service-name
*/
  var hostedServiceDeleteAll = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceDeleteAll.command('delete-all')
  .description($('delete-all method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.deleteAll(options.serviceName, _);
    cli.output.json(result);
  });
/*
  HostedService DeleteExtension
  --service-name
  --extension-id
*/
  var hostedServiceDeleteExtension = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceDeleteExtension.command('delete-extension')
  .description($('delete-extension method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--extension-id <extension-id>', $('extension-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('extensionId = ' + options.extensionId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.deleteExtension(options.serviceName, options.extensionId, _);
    cli.output.json(result);
  });
/*
  HostedService Get
  --service-name
*/
  var hostedServiceGet = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceGet.command('get')
  .description($('get method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.get(options.serviceName, _);
    cli.output.json(result);
  });
/*
  HostedService GetDetailed
  --service-name
*/
  var hostedServiceGetDetailed = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceGetDetailed.command('get-detailed')
  .description($('get-detailed method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.getDetailed(options.serviceName, _);
    cli.output.json(result);
  });
/*
  HostedService GetExtension
  --service-name
  --extension-id
*/
  var hostedServiceGetExtension = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceGetExtension.command('get-extension')
  .description($('get-extension method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--extension-id <extension-id>', $('extension-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('extensionId = ' + options.extensionId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.getExtension(options.serviceName, options.extensionId, _);
    cli.output.json(result);
  });
/*
  HostedService List
*/
  var hostedServiceList = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceList.command('list')
  .description($('list method to manage your hosted service.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.list(_);
    cli.output.json(result);
  });
/*
  HostedService ListAvailableExtensions
*/
  var hostedServiceListAvailableExtensions = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceListAvailableExtensions.command('list-available-extensions')
  .description($('list-available-extensions method to manage your hosted service.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.listAvailableExtensions(_);
    cli.output.json(result);
  });
/*
  HostedService ListExtensions
  --service-name
*/
  var hostedServiceListExtensions = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceListExtensions.command('list-extensions')
  .description($('list-extensions method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.listExtensions(options.serviceName, _);
    cli.output.json(result);
  });
/*
  HostedService ListExtensionVersions
  --provider-namespace
  --extension-type
*/
  var hostedServiceListExtensionVersions = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceListExtensionVersions.command('list-extension-versions')
  .description($('list-extension-versions method to manage your hosted service.'))
  .usage('[options]')
  .option('--provider-namespace <provider-namespace>', $('provider-namespace'))
  .option('--extension-type <extension-type>', $('extension-type'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('providerNamespace = ' + options.providerNamespace);
    cli.output.info('extensionType = ' + options.extensionType);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.listExtensionVersions(options.providerNamespace, options.extensionType, _);
    cli.output.json(result);
  });
/*
  HostedService Update
  --service-name
  --parameters
=============================================
{
  "description":"",
  "extendedProperties":{
  },
  "label":"",
  "reverseDnsFqdn":""
}
*/
  var hostedServiceUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service').description($('Commands to manage your hosted service.'));
  hostedServiceUpdate.command('update')
  .description($('update method to manage your hosted service.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.hostedServices.update(options.serviceName, parametersObj, _);
    cli.output.json(result);
  });
  var hostedServiceUpdateupdateParameters1 = hostedServiceUpdate.category('parameters')
  .description($('Commands to manage parameter for your hosted service.'));
  var hostedServiceUpdateupdateGenerate1 = hostedServiceUpdateupdateParameters1.category('generate')
  .description($('Commands to generate parameter file for your hosted service.'));
  hostedServiceUpdateupdateGenerate1.command('update')
  .description($('Generate hostedServiceUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"description\":\"\",\"extendedProperties\":{},\"label\":\"\",\"reverseDnsFqdn\":\"\"}', _);
    var filePath = 'hostedServiceUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"description\":\"\",\r\n\"extendedProperties\":{\r\n},\r\n\"label\":\"\",\r\n\"reverseDnsFqdn\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  hostedServiceUpdateupdateParameters1.command('patch')
  .description($('Command to patch hostedServiceUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set hosted-service-update-parameters
  var catparametersHostedServiceHostedServiceUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersHostedServiceHostedServiceUpdateParameters0 = catparametersHostedServiceHostedServiceUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your hosted-service.'));
  var setparametersHostedServiceHostedServiceUpdateParameters0 = parametersHostedServiceHostedServiceUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your hosted-service.'));
  setparametersHostedServiceHostedServiceUpdateParameters0.command('hosted-service-update-parameters')
  .description($('Set catparametersHostedServiceHostedServiceUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--extended-properties <extendedProperties>', $('Set the extended-properties value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--reverse-dns-fqdn <reverseDnsFqdn>', $('Set the reverse-dns-fqdn value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'reverseDnsFqdn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.reverseDnsFqdn) {
      if (options.parse && options.reverseDnsFqdn) {
        options.reverseDnsFqdn = JSON.parse(options.reverseDnsFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reverseDnsFqdn}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove hosted-service-update-parameters
  var catparametersHostedServiceHostedServiceUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersHostedServiceHostedServiceUpdateParameters1 = catparametersHostedServiceHostedServiceUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your hosted-service.'));
  var removeparametersHostedServiceHostedServiceUpdateParameters1 = parametersHostedServiceHostedServiceUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your hosted-service.'));
  removeparametersHostedServiceHostedServiceUpdateParameters1.command('hosted-service-update-parameters')
  .description($('Remove catparametersHostedServiceHostedServiceUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add hosted-service-update-parameters
  var catparametersHostedServiceHostedServiceUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('hosted-service');
  var parametersHostedServiceHostedServiceUpdateParameters2 = catparametersHostedServiceHostedServiceUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your hosted-service.'));
  var addparametersHostedServiceHostedServiceUpdateParameters2 = parametersHostedServiceHostedServiceUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your hosted-service.'));
  addparametersHostedServiceHostedServiceUpdateParameters2.command('hosted-service-update-parameters')
  .description($('Remove catparametersHostedServiceHostedServiceUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--extended-properties <extendedProperties>', $('Add the extended-properties value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--reverse-dns-fqdn <reverseDnsFqdn>', $('Add the reverse-dns-fqdn value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'extendedProperties';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extendedProperties) {
      if (options.parse && options.extendedProperties) {
        options.extendedProperties = JSON.parse(options.extendedProperties);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extendedProperties}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'reverseDnsFqdn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.reverseDnsFqdn) {
      if (options.parse && options.reverseDnsFqdn) {
        options.reverseDnsFqdn = JSON.parse(options.reverseDnsFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reverseDnsFqdn}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  LoadBalancer Create
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "frontendIPConfiguration":{
    "staticVirtualNetworkIPAddress":"",
    "subnetName":"",
    "type":""
  },
  "name":""
}
*/
  var loadBalancerCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer').description($('Commands to manage your load balancer.'));
  loadBalancerCreate.command('create')
  .description($('create method to manage your load balancer.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.loadBalancers.create(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var loadBalancerCreatecreateParameters2 = loadBalancerCreate.category('parameters')
  .description($('Commands to manage parameter for your load balancer.'));
  var loadBalancerCreatecreateGenerate2 = loadBalancerCreatecreateParameters2.category('generate')
  .description($('Commands to generate parameter file for your load balancer.'));
  loadBalancerCreatecreateGenerate2.command('create')
  .description($('Generate loadBalancerCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"frontendIPConfiguration\":{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\",\"type\":\"\"},\"name\":\"\"}', _);
    var filePath = 'loadBalancerCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"frontendIPConfiguration\":{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\",\r\n\"type\":\"\"\r\n},\r\n\"name\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  loadBalancerCreatecreateParameters2.command('patch')
  .description($('Command to patch loadBalancerCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancer-create-parameters
  var catparametersLoadBalancerLoadBalancerCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersLoadBalancerLoadBalancerCreateParameters0 = catparametersLoadBalancerLoadBalancerCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your load-balancer.'));
  var setparametersLoadBalancerLoadBalancerCreateParameters0 = parametersLoadBalancerLoadBalancerCreateParameters0.category('set')
  .description($('Commands to set parameter file for your load-balancer.'));
  setparametersLoadBalancerLoadBalancerCreateParameters0.command('load-balancer-create-parameters')
  .description($('Set catparametersLoadBalancerLoadBalancerCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'frontendIPConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancer-create-parameters
  var catparametersLoadBalancerLoadBalancerCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersLoadBalancerLoadBalancerCreateParameters1 = catparametersLoadBalancerLoadBalancerCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your load-balancer.'));
  var removeparametersLoadBalancerLoadBalancerCreateParameters1 = parametersLoadBalancerLoadBalancerCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your load-balancer.'));
  removeparametersLoadBalancerLoadBalancerCreateParameters1.command('load-balancer-create-parameters')
  .description($('Remove catparametersLoadBalancerLoadBalancerCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancer-create-parameters
  var catparametersLoadBalancerLoadBalancerCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersLoadBalancerLoadBalancerCreateParameters2 = catparametersLoadBalancerLoadBalancerCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your load-balancer.'));
  var addparametersLoadBalancerLoadBalancerCreateParameters2 = parametersLoadBalancerLoadBalancerCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your load-balancer.'));
  addparametersLoadBalancerLoadBalancerCreateParameters2.command('load-balancer-create-parameters')
  .description($('Remove catparametersLoadBalancerLoadBalancerCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Add the frontend-ip-configuration value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'frontendIPConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set frontend-ip-configuration
  var catparametersLoadBalancerFrontendIPConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersLoadBalancerFrontendIPConfiguration0 = catparametersLoadBalancerFrontendIPConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your load-balancer.'));
  var setparametersLoadBalancerFrontendIPConfiguration0 = parametersLoadBalancerFrontendIPConfiguration0.category('set')
  .description($('Commands to set parameter file for your load-balancer.'));
  setparametersLoadBalancerFrontendIPConfiguration0.command('frontend-ip-configuration')
  .description($('Set catparametersLoadBalancerFrontendIPConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .option('--type <type>', $('Set the type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/frontendIPConfiguration';
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove frontend-ip-configuration
  var catparametersLoadBalancerFrontendIPConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersLoadBalancerFrontendIPConfiguration1 = catparametersLoadBalancerFrontendIPConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your load-balancer.'));
  var removeparametersLoadBalancerFrontendIPConfiguration1 = parametersLoadBalancerFrontendIPConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your load-balancer.'));
  removeparametersLoadBalancerFrontendIPConfiguration1.command('frontend-ip-configuration')
  .description($('Remove catparametersLoadBalancerFrontendIPConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/frontendIPConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add frontend-ip-configuration
  var catparametersLoadBalancerFrontendIPConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersLoadBalancerFrontendIPConfiguration2 = catparametersLoadBalancerFrontendIPConfiguration2.category('parameters')
  .description($('Commands to add parameter for your load-balancer.'));
  var addparametersLoadBalancerFrontendIPConfiguration2 = parametersLoadBalancerFrontendIPConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your load-balancer.'));
  addparametersLoadBalancerFrontendIPConfiguration2.command('frontend-ip-configuration')
  .description($('Remove catparametersLoadBalancerFrontendIPConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .option('--type <type>', $('Add the type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/frontendIPConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/frontendIPConfiguration' + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/frontendIPConfiguration' + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = '/frontendIPConfiguration' + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  LoadBalancer Delete
  --service-name
  --deployment-name
  --load-balancer-name
*/
  var loadBalancerDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer').description($('Commands to manage your load balancer.'));
  loadBalancerDelete.command('delete')
  .description($('delete method to manage your load balancer.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--load-balancer-name <load-balancer-name>', $('load-balancer-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('loadBalancerName = ' + options.loadBalancerName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.loadBalancers.deleteMethod(options.serviceName, options.deploymentName, options.loadBalancerName, _);
    cli.output.json(result);
  });
/*
  LoadBalancer Update
  --service-name
  --deployment-name
  --load-balancer-name
  --parameters
=============================================
{
  "frontendIPConfiguration":{
    "staticVirtualNetworkIPAddress":"",
    "subnetName":"",
    "type":""
  },
  "name":""
}
*/
  var loadBalancerUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer').description($('Commands to manage your load balancer.'));
  loadBalancerUpdate.command('update')
  .description($('update method to manage your load balancer.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--load-balancer-name <load-balancer-name>', $('load-balancer-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('loadBalancerName = ' + options.loadBalancerName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.loadBalancers.update(options.serviceName, options.deploymentName, options.loadBalancerName, parametersObj, _);
    cli.output.json(result);
  });
  var loadBalancerUpdateupdateParameters3 = loadBalancerUpdate.category('parameters')
  .description($('Commands to manage parameter for your load balancer.'));
  var loadBalancerUpdateupdateGenerate3 = loadBalancerUpdateupdateParameters3.category('generate')
  .description($('Commands to generate parameter file for your load balancer.'));
  loadBalancerUpdateupdateGenerate3.command('update')
  .description($('Generate loadBalancerUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"frontendIPConfiguration\":{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\",\"type\":\"\"},\"name\":\"\"}', _);
    var filePath = 'loadBalancerUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"frontendIPConfiguration\":{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\",\r\n\"type\":\"\"\r\n},\r\n\"name\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  loadBalancerUpdateupdateParameters3.command('patch')
  .description($('Command to patch loadBalancerUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancer-update-parameters
  var catparametersLoadBalancerLoadBalancerUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersLoadBalancerLoadBalancerUpdateParameters0 = catparametersLoadBalancerLoadBalancerUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your load-balancer.'));
  var setparametersLoadBalancerLoadBalancerUpdateParameters0 = parametersLoadBalancerLoadBalancerUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your load-balancer.'));
  setparametersLoadBalancerLoadBalancerUpdateParameters0.command('load-balancer-update-parameters')
  .description($('Set catparametersLoadBalancerLoadBalancerUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'frontendIPConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancer-update-parameters
  var catparametersLoadBalancerLoadBalancerUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersLoadBalancerLoadBalancerUpdateParameters1 = catparametersLoadBalancerLoadBalancerUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your load-balancer.'));
  var removeparametersLoadBalancerLoadBalancerUpdateParameters1 = parametersLoadBalancerLoadBalancerUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your load-balancer.'));
  removeparametersLoadBalancerLoadBalancerUpdateParameters1.command('load-balancer-update-parameters')
  .description($('Remove catparametersLoadBalancerLoadBalancerUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancer-update-parameters
  var catparametersLoadBalancerLoadBalancerUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersLoadBalancerLoadBalancerUpdateParameters2 = catparametersLoadBalancerLoadBalancerUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your load-balancer.'));
  var addparametersLoadBalancerLoadBalancerUpdateParameters2 = parametersLoadBalancerLoadBalancerUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your load-balancer.'));
  addparametersLoadBalancerLoadBalancerUpdateParameters2.command('load-balancer-update-parameters')
  .description($('Remove catparametersLoadBalancerLoadBalancerUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Add the frontend-ip-configuration value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'frontendIPConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set frontend-ip-configuration
  var catparametersLoadBalancerFrontendIPConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersLoadBalancerFrontendIPConfiguration0 = catparametersLoadBalancerFrontendIPConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your load-balancer.'));
  var setparametersLoadBalancerFrontendIPConfiguration0 = parametersLoadBalancerFrontendIPConfiguration0.category('set')
  .description($('Commands to set parameter file for your load-balancer.'));
  setparametersLoadBalancerFrontendIPConfiguration0.command('frontend-ip-configuration')
  .description($('Set catparametersLoadBalancerFrontendIPConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .option('--type <type>', $('Set the type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/frontendIPConfiguration';
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove frontend-ip-configuration
  var catparametersLoadBalancerFrontendIPConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersLoadBalancerFrontendIPConfiguration1 = catparametersLoadBalancerFrontendIPConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your load-balancer.'));
  var removeparametersLoadBalancerFrontendIPConfiguration1 = parametersLoadBalancerFrontendIPConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your load-balancer.'));
  removeparametersLoadBalancerFrontendIPConfiguration1.command('frontend-ip-configuration')
  .description($('Remove catparametersLoadBalancerFrontendIPConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/frontendIPConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add frontend-ip-configuration
  var catparametersLoadBalancerFrontendIPConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('load-balancer');
  var parametersLoadBalancerFrontendIPConfiguration2 = catparametersLoadBalancerFrontendIPConfiguration2.category('parameters')
  .description($('Commands to add parameter for your load-balancer.'));
  var addparametersLoadBalancerFrontendIPConfiguration2 = parametersLoadBalancerFrontendIPConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your load-balancer.'));
  addparametersLoadBalancerFrontendIPConfiguration2.command('frontend-ip-configuration')
  .description($('Remove catparametersLoadBalancerFrontendIPConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .option('--type <type>', $('Add the type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/frontendIPConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/frontendIPConfiguration' + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/frontendIPConfiguration' + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = '/frontendIPConfiguration' + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  OperatingSystem List
*/
  var operatingSystemList = cli.category('invoke').description('Commands to invoke service management operations.').category('operating-system').description($('Commands to manage your operating system.'));
  operatingSystemList.command('list')
  .description($('list method to manage your operating system.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.operatingSystems.list(_);
    cli.output.json(result);
  });
/*
  OperatingSystem ListFamilies
*/
  var operatingSystemListFamilies = cli.category('invoke').description('Commands to invoke service management operations.').category('operating-system').description($('Commands to manage your operating system.'));
  operatingSystemListFamilies.command('list-families')
  .description($('list-families method to manage your operating system.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.operatingSystems.listFamilies(_);
    cli.output.json(result);
  });
/*
  ServiceCertificate Create
  --service-name
  --parameters
=============================================
{
  "certificateFormat":0,
  "data":[
  ],
  "password":""
}
*/
  var serviceCertificateCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate').description($('Commands to manage your service certificate.'));
  serviceCertificateCreate.command('create')
  .description($('create method to manage your service certificate.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.serviceCertificates.create(options.serviceName, parametersObj, _);
    cli.output.json(result);
  });
  var serviceCertificateCreatecreateParameters1 = serviceCertificateCreate.category('parameters')
  .description($('Commands to manage parameter for your service certificate.'));
  var serviceCertificateCreatecreateGenerate1 = serviceCertificateCreatecreateParameters1.category('generate')
  .description($('Commands to generate parameter file for your service certificate.'));
  serviceCertificateCreatecreateGenerate1.command('create')
  .description($('Generate serviceCertificateCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"certificateFormat\":0,\"data\":[],\"password\":\"\"}', _);
    var filePath = 'serviceCertificateCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"certificateFormat\":0,\r\n\"data\":[\r\n],\r\n\"password\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  serviceCertificateCreatecreateParameters1.command('patch')
  .description($('Command to patch serviceCertificateCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set service-certificate-create-parameters
  var catparametersServiceCertificateServiceCertificateCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersServiceCertificateServiceCertificateCreateParameters0 = catparametersServiceCertificateServiceCertificateCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your service-certificate.'));
  var setparametersServiceCertificateServiceCertificateCreateParameters0 = parametersServiceCertificateServiceCertificateCreateParameters0.category('set')
  .description($('Commands to set parameter file for your service-certificate.'));
  setparametersServiceCertificateServiceCertificateCreateParameters0.command('service-certificate-create-parameters')
  .description($('Set catparametersServiceCertificateServiceCertificateCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--certificate-format <certificateFormat>', $('Set the certificate-format value.'))
  .option('--data <data>', $('Set the data value.'))
  .option('--password <password>', $('Set the password value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'certificateFormat';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateFormat) {
      if (options.parse && options.certificateFormat) {
        options.certificateFormat = JSON.parse(options.certificateFormat);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateFormat}]);
    }
    paramPath = options.path + '/' + 'data';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.data) {
      if (options.parse && options.data) {
        options.data = JSON.parse(options.data);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.data}]);
    }
    paramPath = options.path + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove service-certificate-create-parameters
  var catparametersServiceCertificateServiceCertificateCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersServiceCertificateServiceCertificateCreateParameters1 = catparametersServiceCertificateServiceCertificateCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your service-certificate.'));
  var removeparametersServiceCertificateServiceCertificateCreateParameters1 = parametersServiceCertificateServiceCertificateCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your service-certificate.'));
  removeparametersServiceCertificateServiceCertificateCreateParameters1.command('service-certificate-create-parameters')
  .description($('Remove catparametersServiceCertificateServiceCertificateCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add service-certificate-create-parameters
  var catparametersServiceCertificateServiceCertificateCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersServiceCertificateServiceCertificateCreateParameters2 = catparametersServiceCertificateServiceCertificateCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your service-certificate.'));
  var addparametersServiceCertificateServiceCertificateCreateParameters2 = parametersServiceCertificateServiceCertificateCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your service-certificate.'));
  addparametersServiceCertificateServiceCertificateCreateParameters2.command('service-certificate-create-parameters')
  .description($('Remove catparametersServiceCertificateServiceCertificateCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--certificate-format <certificateFormat>', $('Add the certificate-format value.'))
  .option('--data <data>', $('Add the data value.'))
  .option('--password <password>', $('Add the password value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'certificateFormat';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateFormat) {
      if (options.parse && options.certificateFormat) {
        options.certificateFormat = JSON.parse(options.certificateFormat);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateFormat}]);
    }
    paramPath = '' + '/' + 'data';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.data) {
      if (options.parse && options.data) {
        options.data = JSON.parse(options.data);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.data}]);
    }
    paramPath = '' + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove certificate-format
  var catparametersServiceCertificateCertificateFormat1 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersServiceCertificateCertificateFormat1 = catparametersServiceCertificateCertificateFormat1.category('parameters')
  .description($('Commands to remove parameter for your service-certificate.'));
  var removeparametersServiceCertificateCertificateFormat1 = parametersServiceCertificateCertificateFormat1.category('remove')
  .description($('Commands to remove values in the parameter file for your service-certificate.'));
  removeparametersServiceCertificateCertificateFormat1.command('certificate-format')
  .description($('Remove catparametersServiceCertificateCertificateFormat1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/certificateFormat';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add certificate-format
  var catparametersServiceCertificateCertificateFormat2 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersServiceCertificateCertificateFormat2 = catparametersServiceCertificateCertificateFormat2.category('parameters')
  .description($('Commands to add parameter for your service-certificate.'));
  var addparametersServiceCertificateCertificateFormat2 = parametersServiceCertificateCertificateFormat2.category('add')
  .description($('Commands to add values in the parameter file for your service-certificate.'));
  addparametersServiceCertificateCertificateFormat2.command('certificate-format')
  .description($('Remove catparametersServiceCertificateCertificateFormat2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/certificateFormat' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  ServiceCertificate Delete
  --parameters
=============================================
{
  "serviceName":"",
  "thumbprint":"",
  "thumbprintAlgorithm":""
}
*/
  var serviceCertificateDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate').description($('Commands to manage your service certificate.'));
  serviceCertificateDelete.command('delete')
  .description($('delete method to manage your service certificate.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--thumbprint <thumbprint>', $('thumbprint'))
  .option('--thumbprint-algorithm <thumbprint-algorithm>', $('thumbprint-algorithm'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = {};
      cli.output.info('serviceName = ' + options.serviceName);
      parametersObj.serviceName = options.serviceName;
      cli.output.info('thumbprint = ' + options.thumbprint);
      parametersObj.thumbprint = options.thumbprint;
      cli.output.info('thumbprintAlgorithm = ' + options.thumbprintAlgorithm);
      parametersObj.thumbprintAlgorithm = options.thumbprintAlgorithm;
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.serviceCertificates.deleteMethod(parametersObj, _);
    cli.output.json(result);
  });
  var serviceCertificateDeletedeleteParameters0 = serviceCertificateDelete.category('parameters')
  .description($('Commands to manage parameter for your service certificate.'));
  var serviceCertificateDeletedeleteGenerate0 = serviceCertificateDeletedeleteParameters0.category('generate')
  .description($('Commands to generate parameter file for your service certificate.'));
  serviceCertificateDeletedeleteGenerate0.command('delete')
  .description($('Generate serviceCertificateDelete parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"serviceName\":\"\",\"thumbprint\":\"\",\"thumbprintAlgorithm\":\"\"}', _);
    var filePath = 'serviceCertificateDelete_delete.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"serviceName\":\"\",\r\n\"thumbprint\":\"\",\r\n\"thumbprintAlgorithm\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  serviceCertificateDeletedeleteParameters0.command('patch')
  .description($('Command to patch serviceCertificateDelete parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set service-certificate-delete-parameters
  var catparametersServiceCertificateServiceCertificateDeleteParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersServiceCertificateServiceCertificateDeleteParameters0 = catparametersServiceCertificateServiceCertificateDeleteParameters0.category('parameters')
  .description($('Commands to manage parameter for your service-certificate.'));
  var setparametersServiceCertificateServiceCertificateDeleteParameters0 = parametersServiceCertificateServiceCertificateDeleteParameters0.category('set')
  .description($('Commands to set parameter file for your service-certificate.'));
  setparametersServiceCertificateServiceCertificateDeleteParameters0.command('service-certificate-delete-parameters')
  .description($('Set catparametersServiceCertificateServiceCertificateDeleteParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--service-name <serviceName>', $('Set the service-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Set the thumbprint-algorithm value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'serviceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.serviceName) {
      if (options.parse && options.serviceName) {
        options.serviceName = JSON.parse(options.serviceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serviceName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = options.path + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove service-certificate-delete-parameters
  var catparametersServiceCertificateServiceCertificateDeleteParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersServiceCertificateServiceCertificateDeleteParameters1 = catparametersServiceCertificateServiceCertificateDeleteParameters1.category('parameters')
  .description($('Commands to remove parameter for your service-certificate.'));
  var removeparametersServiceCertificateServiceCertificateDeleteParameters1 = parametersServiceCertificateServiceCertificateDeleteParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your service-certificate.'));
  removeparametersServiceCertificateServiceCertificateDeleteParameters1.command('service-certificate-delete-parameters')
  .description($('Remove catparametersServiceCertificateServiceCertificateDeleteParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add service-certificate-delete-parameters
  var catparametersServiceCertificateServiceCertificateDeleteParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersServiceCertificateServiceCertificateDeleteParameters2 = catparametersServiceCertificateServiceCertificateDeleteParameters2.category('parameters')
  .description($('Commands to add parameter for your service-certificate.'));
  var addparametersServiceCertificateServiceCertificateDeleteParameters2 = parametersServiceCertificateServiceCertificateDeleteParameters2.category('add')
  .description($('Commands to add values in the parameter file for your service-certificate.'));
  addparametersServiceCertificateServiceCertificateDeleteParameters2.command('service-certificate-delete-parameters')
  .description($('Remove catparametersServiceCertificateServiceCertificateDeleteParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--service-name <serviceName>', $('Add the service-name value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Add the thumbprint-algorithm value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'serviceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.serviceName) {
      if (options.parse && options.serviceName) {
        options.serviceName = JSON.parse(options.serviceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serviceName}]);
    }
    paramPath = '' + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = '' + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  ServiceCertificate Get
  --parameters
=============================================
{
  "serviceName":"",
  "thumbprint":"",
  "thumbprintAlgorithm":""
}
*/
  var serviceCertificateGet = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate').description($('Commands to manage your service certificate.'));
  serviceCertificateGet.command('get')
  .description($('get method to manage your service certificate.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--thumbprint <thumbprint>', $('thumbprint'))
  .option('--thumbprint-algorithm <thumbprint-algorithm>', $('thumbprint-algorithm'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = {};
      cli.output.info('serviceName = ' + options.serviceName);
      parametersObj.serviceName = options.serviceName;
      cli.output.info('thumbprint = ' + options.thumbprint);
      parametersObj.thumbprint = options.thumbprint;
      cli.output.info('thumbprintAlgorithm = ' + options.thumbprintAlgorithm);
      parametersObj.thumbprintAlgorithm = options.thumbprintAlgorithm;
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.serviceCertificates.get(parametersObj, _);
    cli.output.json(result);
  });
  var serviceCertificateGetgetParameters0 = serviceCertificateGet.category('parameters')
  .description($('Commands to manage parameter for your service certificate.'));
  var serviceCertificateGetgetGenerate0 = serviceCertificateGetgetParameters0.category('generate')
  .description($('Commands to generate parameter file for your service certificate.'));
  serviceCertificateGetgetGenerate0.command('get')
  .description($('Generate serviceCertificateGet parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"serviceName\":\"\",\"thumbprint\":\"\",\"thumbprintAlgorithm\":\"\"}', _);
    var filePath = 'serviceCertificateGet_get.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"serviceName\":\"\",\r\n\"thumbprint\":\"\",\r\n\"thumbprintAlgorithm\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  serviceCertificateGetgetParameters0.command('patch')
  .description($('Command to patch serviceCertificateGet parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set service-certificate-get-parameters
  var catparametersServiceCertificateServiceCertificateGetParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersServiceCertificateServiceCertificateGetParameters0 = catparametersServiceCertificateServiceCertificateGetParameters0.category('parameters')
  .description($('Commands to manage parameter for your service-certificate.'));
  var setparametersServiceCertificateServiceCertificateGetParameters0 = parametersServiceCertificateServiceCertificateGetParameters0.category('set')
  .description($('Commands to set parameter file for your service-certificate.'));
  setparametersServiceCertificateServiceCertificateGetParameters0.command('service-certificate-get-parameters')
  .description($('Set catparametersServiceCertificateServiceCertificateGetParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--service-name <serviceName>', $('Set the service-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Set the thumbprint-algorithm value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'serviceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.serviceName) {
      if (options.parse && options.serviceName) {
        options.serviceName = JSON.parse(options.serviceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serviceName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = options.path + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove service-certificate-get-parameters
  var catparametersServiceCertificateServiceCertificateGetParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersServiceCertificateServiceCertificateGetParameters1 = catparametersServiceCertificateServiceCertificateGetParameters1.category('parameters')
  .description($('Commands to remove parameter for your service-certificate.'));
  var removeparametersServiceCertificateServiceCertificateGetParameters1 = parametersServiceCertificateServiceCertificateGetParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your service-certificate.'));
  removeparametersServiceCertificateServiceCertificateGetParameters1.command('service-certificate-get-parameters')
  .description($('Remove catparametersServiceCertificateServiceCertificateGetParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add service-certificate-get-parameters
  var catparametersServiceCertificateServiceCertificateGetParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate');
  var parametersServiceCertificateServiceCertificateGetParameters2 = catparametersServiceCertificateServiceCertificateGetParameters2.category('parameters')
  .description($('Commands to add parameter for your service-certificate.'));
  var addparametersServiceCertificateServiceCertificateGetParameters2 = parametersServiceCertificateServiceCertificateGetParameters2.category('add')
  .description($('Commands to add values in the parameter file for your service-certificate.'));
  addparametersServiceCertificateServiceCertificateGetParameters2.command('service-certificate-get-parameters')
  .description($('Remove catparametersServiceCertificateServiceCertificateGetParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--service-name <serviceName>', $('Add the service-name value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .option('--thumbprint-algorithm <thumbprintAlgorithm>', $('Add the thumbprint-algorithm value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'serviceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.serviceName) {
      if (options.parse && options.serviceName) {
        options.serviceName = JSON.parse(options.serviceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.serviceName}]);
    }
    paramPath = '' + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = '' + '/' + 'thumbprintAlgorithm';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprintAlgorithm) {
      if (options.parse && options.thumbprintAlgorithm) {
        options.thumbprintAlgorithm = JSON.parse(options.thumbprintAlgorithm);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprintAlgorithm}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  ServiceCertificate List
  --service-name
*/
  var serviceCertificateList = cli.category('invoke').description('Commands to invoke service management operations.').category('service-certificate').description($('Commands to manage your service certificate.'));
  serviceCertificateList.command('list')
  .description($('list method to manage your service certificate.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.serviceCertificates.list(options.serviceName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineDisk CreateDataDisk
  --service-name
  --deployment-name
  --role-name
  --parameters
=============================================
{
  "hostCaching":"",
  "label":"",
  "logicalDiskSizeInGB":0,
  "logicalUnitNumber":null,
  "mediaLinkUri":"",
  "name":"",
  "sourceMediaLinkUri":""
}
*/
  var virtualMachineDiskCreateDataDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskCreateDataDisk.command('create-data-disk')
  .description($('create-data-disk method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-name <role-name>', $('role-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('roleName = ' + options.roleName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.createDataDisk(options.serviceName, options.deploymentName, options.roleName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineDiskCreateDataDiskcreateDataDiskParameters3 = virtualMachineDiskCreateDataDisk.category('parameters')
  .description($('Commands to manage parameter for your virtual machine disk.'));
  var virtualMachineDiskCreateDataDiskcreateDataDiskGenerate3 = virtualMachineDiskCreateDataDiskcreateDataDiskParameters3.category('generate')
  .description($('Commands to generate parameter file for your virtual machine disk.'));
  virtualMachineDiskCreateDataDiskcreateDataDiskGenerate3.command('create-data-disk')
  .description($('Generate virtualMachineDiskCreateDataDisk parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"hostCaching\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":0,\"logicalUnitNumber\":null,\"mediaLinkUri\":\"\",\"name\":\"\",\"sourceMediaLinkUri\":\"\"}', _);
    var filePath = 'virtualMachineDiskCreateDataDisk_createDataDisk.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"hostCaching\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":0,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"sourceMediaLinkUri\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineDiskCreateDataDiskcreateDataDiskParameters3.command('patch')
  .description($('Command to patch virtualMachineDiskCreateDataDisk parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-data-disk-create-parameters
  var catparametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters0 = catparametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-disk.'));
  var setparametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters0 = parametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-disk.'));
  setparametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters0.command('virtual-machine-data-disk-create-parameters')
  .description($('Set catparametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--source-media-link-uri <sourceMediaLinkUri>', $('Set the source-media-link-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sourceMediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceMediaLinkUri) {
      if (options.parse && options.sourceMediaLinkUri) {
        options.sourceMediaLinkUri = JSON.parse(options.sourceMediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLinkUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-data-disk-create-parameters
  var catparametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters1 = catparametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-disk.'));
  var removeparametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters1 = parametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-disk.'));
  removeparametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters1.command('virtual-machine-data-disk-create-parameters')
  .description($('Remove catparametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-data-disk-create-parameters
  var catparametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters2 = catparametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-disk.'));
  var addparametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters2 = parametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-disk.'));
  addparametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters2.command('virtual-machine-data-disk-create-parameters')
  .description($('Remove catparametersVirtualMachineDiskVirtualMachineDataDiskCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Add the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--source-media-link-uri <sourceMediaLinkUri>', $('Add the source-media-link-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = '' + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'sourceMediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceMediaLinkUri) {
      if (options.parse && options.sourceMediaLinkUri) {
        options.sourceMediaLinkUri = JSON.parse(options.sourceMediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLinkUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineDisk CreateDisk
  --parameters
=============================================
{
  "label":"",
  "mediaLinkUri":"",
  "name":"",
  "operatingSystemType":""
}
*/
  var virtualMachineDiskCreateDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskCreateDisk.command('create-disk')
  .description($('create-disk method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.createDisk(parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineDiskCreateDiskcreateDiskParameters0 = virtualMachineDiskCreateDisk.category('parameters')
  .description($('Commands to manage parameter for your virtual machine disk.'));
  var virtualMachineDiskCreateDiskcreateDiskGenerate0 = virtualMachineDiskCreateDiskcreateDiskParameters0.category('generate')
  .description($('Commands to generate parameter file for your virtual machine disk.'));
  virtualMachineDiskCreateDiskcreateDiskGenerate0.command('create-disk')
  .description($('Generate virtualMachineDiskCreateDisk parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"label\":\"\",\"mediaLinkUri\":\"\",\"name\":\"\",\"operatingSystemType\":\"\"}', _);
    var filePath = 'virtualMachineDiskCreateDisk_createDisk.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"label\":\"\",\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystemType\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineDiskCreateDiskcreateDiskParameters0.command('patch')
  .description($('Command to patch virtualMachineDiskCreateDisk parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-disk-create-parameters
  var catparametersVirtualMachineDiskVirtualMachineDiskCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersVirtualMachineDiskVirtualMachineDiskCreateParameters0 = catparametersVirtualMachineDiskVirtualMachineDiskCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-disk.'));
  var setparametersVirtualMachineDiskVirtualMachineDiskCreateParameters0 = parametersVirtualMachineDiskVirtualMachineDiskCreateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-disk.'));
  setparametersVirtualMachineDiskVirtualMachineDiskCreateParameters0.command('virtual-machine-disk-create-parameters')
  .description($('Set catparametersVirtualMachineDiskVirtualMachineDiskCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Set the operating-system-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-disk-create-parameters
  var catparametersVirtualMachineDiskVirtualMachineDiskCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersVirtualMachineDiskVirtualMachineDiskCreateParameters1 = catparametersVirtualMachineDiskVirtualMachineDiskCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-disk.'));
  var removeparametersVirtualMachineDiskVirtualMachineDiskCreateParameters1 = parametersVirtualMachineDiskVirtualMachineDiskCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-disk.'));
  removeparametersVirtualMachineDiskVirtualMachineDiskCreateParameters1.command('virtual-machine-disk-create-parameters')
  .description($('Remove catparametersVirtualMachineDiskVirtualMachineDiskCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-disk-create-parameters
  var catparametersVirtualMachineDiskVirtualMachineDiskCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersVirtualMachineDiskVirtualMachineDiskCreateParameters2 = catparametersVirtualMachineDiskVirtualMachineDiskCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-disk.'));
  var addparametersVirtualMachineDiskVirtualMachineDiskCreateParameters2 = parametersVirtualMachineDiskVirtualMachineDiskCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-disk.'));
  addparametersVirtualMachineDiskVirtualMachineDiskCreateParameters2.command('virtual-machine-disk-create-parameters')
  .description($('Remove catparametersVirtualMachineDiskVirtualMachineDiskCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Add the operating-system-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineDisk DeleteDataDisk
  --service-name
  --deployment-name
  --role-name
  --logical-unit-number
  --delete-from-storage
*/
  var virtualMachineDiskDeleteDataDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskDeleteDataDisk.command('delete-data-disk')
  .description($('delete-data-disk method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-name <role-name>', $('role-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('roleName = ' + options.roleName);
    var logicalUnitNumberObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      logicalUnitNumberObj = JSON.parse(fileContent);
    }
    else {
      logicalUnitNumberObj = {};
    }
    cli.output.info('logicalUnitNumberObj = ' + JSON.stringify(logicalUnitNumberObj));
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(fileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.info('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.deleteDataDisk(options.serviceName, options.deploymentName, options.roleName, options.logicalUnitNumber, options.deleteFromStorage, _);
    cli.output.json(result);
  });
/*
  VirtualMachineDisk DeleteDisk
  --name
  --delete-from-storage
*/
  var virtualMachineDiskDeleteDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskDeleteDisk.command('delete-disk')
  .description($('delete-disk method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--name <name>', $('name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('name = ' + options.name);
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(fileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.info('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.deleteDisk(options.name, options.deleteFromStorage, _);
    cli.output.json(result);
  });
/*
  VirtualMachineDisk GetDataDisk
  --service-name
  --deployment-name
  --role-name
  --logical-unit-number
*/
  var virtualMachineDiskGetDataDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskGetDataDisk.command('get-data-disk')
  .description($('get-data-disk method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-name <role-name>', $('role-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('roleName = ' + options.roleName);
    var logicalUnitNumberObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      logicalUnitNumberObj = JSON.parse(fileContent);
    }
    else {
      logicalUnitNumberObj = {};
    }
    cli.output.info('logicalUnitNumberObj = ' + JSON.stringify(logicalUnitNumberObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.getDataDisk(options.serviceName, options.deploymentName, options.roleName, options.logicalUnitNumber, _);
    cli.output.json(result);
  });
/*
  VirtualMachineDisk GetDisk
  --name
*/
  var virtualMachineDiskGetDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskGetDisk.command('get-disk')
  .description($('get-disk method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--name <name>', $('name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('name = ' + options.name);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.getDisk(options.name, _);
    cli.output.json(result);
  });
/*
  VirtualMachineDisk ListDisks
*/
  var virtualMachineDiskListDisks = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskListDisks.command('list-disks')
  .description($('list-disks method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.listDisks(_);
    cli.output.json(result);
  });
/*
  VirtualMachineDisk UpdateDataDisk
  --service-name
  --deployment-name
  --role-name
  --logical-unit-number
  --parameters
=============================================
{
  "hostCaching":"",
  "label":"",
  "logicalDiskSizeInGB":0,
  "logicalUnitNumber":null,
  "mediaLinkUri":"",
  "name":""
}
*/
  var virtualMachineDiskUpdateDataDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskUpdateDataDisk.command('update-data-disk')
  .description($('update-data-disk method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--role-name <role-name>', $('role-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('roleName = ' + options.roleName);
    var logicalUnitNumberObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      logicalUnitNumberObj = JSON.parse(fileContent);
    }
    else {
      logicalUnitNumberObj = {};
    }
    cli.output.info('logicalUnitNumberObj = ' + JSON.stringify(logicalUnitNumberObj));
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.updateDataDisk(options.serviceName, options.deploymentName, options.roleName, options.logicalUnitNumber, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineDiskUpdateDataDiskupdateDataDiskParameters4 = virtualMachineDiskUpdateDataDisk.category('parameters')
  .description($('Commands to manage parameter for your virtual machine disk.'));
  var virtualMachineDiskUpdateDataDiskupdateDataDiskGenerate4 = virtualMachineDiskUpdateDataDiskupdateDataDiskParameters4.category('generate')
  .description($('Commands to generate parameter file for your virtual machine disk.'));
  virtualMachineDiskUpdateDataDiskupdateDataDiskGenerate4.command('update-data-disk')
  .description($('Generate virtualMachineDiskUpdateDataDisk parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"hostCaching\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":0,\"logicalUnitNumber\":null,\"mediaLinkUri\":\"\",\"name\":\"\"}', _);
    var filePath = 'virtualMachineDiskUpdateDataDisk_updateDataDisk.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"hostCaching\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":0,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineDiskUpdateDataDiskupdateDataDiskParameters4.command('patch')
  .description($('Command to patch virtualMachineDiskUpdateDataDisk parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-data-disk-update-parameters
  var catparametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0 = catparametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-disk.'));
  var setparametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0 = parametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-disk.'));
  setparametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0.command('virtual-machine-data-disk-update-parameters')
  .description($('Set catparametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-data-disk-update-parameters
  var catparametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1 = catparametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-disk.'));
  var removeparametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1 = parametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-disk.'));
  removeparametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1.command('virtual-machine-data-disk-update-parameters')
  .description($('Remove catparametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-data-disk-update-parameters
  var catparametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2 = catparametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-disk.'));
  var addparametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2 = parametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-disk.'));
  addparametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2.command('virtual-machine-data-disk-update-parameters')
  .description($('Remove catparametersVirtualMachineDiskVirtualMachineDataDiskUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Add the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = '' + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineDisk UpdateDisk
  --name
  --parameters
=============================================
{
  "hasOperatingSystem":null,
  "label":"",
  "mediaLinkUri":"",
  "name":"",
  "operatingSystemType":"",
  "resizedSizeInGB":null
}
*/
  var virtualMachineDiskUpdateDisk = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskUpdateDisk.command('update-disk')
  .description($('update-disk method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--name <name>', $('name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('name = ' + options.name);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.updateDisk(options.name, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineDiskUpdateDiskupdateDiskParameters1 = virtualMachineDiskUpdateDisk.category('parameters')
  .description($('Commands to manage parameter for your virtual machine disk.'));
  var virtualMachineDiskUpdateDiskupdateDiskGenerate1 = virtualMachineDiskUpdateDiskupdateDiskParameters1.category('generate')
  .description($('Commands to generate parameter file for your virtual machine disk.'));
  virtualMachineDiskUpdateDiskupdateDiskGenerate1.command('update-disk')
  .description($('Generate virtualMachineDiskUpdateDisk parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"hasOperatingSystem\":null,\"label\":\"\",\"mediaLinkUri\":\"\",\"name\":\"\",\"operatingSystemType\":\"\",\"resizedSizeInGB\":null}', _);
    var filePath = 'virtualMachineDiskUpdateDisk_updateDisk.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"hasOperatingSystem\":null,\r\n\"label\":\"\",\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystemType\":\"\",\r\n\"resizedSizeInGB\":null\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineDiskUpdateDiskupdateDiskParameters1.command('patch')
  .description($('Command to patch virtualMachineDiskUpdateDisk parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-disk-update-parameters
  var catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-disk.'));
  var setparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = parametersVirtualMachineDiskVirtualMachineDiskUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-disk.'));
  setparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters0.command('virtual-machine-disk-update-parameters')
  .description($('Set catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--has-operating-system <hasOperatingSystem>', $('Set the has-operating-system value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Set the operating-system-type value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'hasOperatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hasOperatingSystem) {
      if (options.parse && options.hasOperatingSystem) {
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hasOperatingSystem}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-disk-update-parameters
  var catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-disk.'));
  var removeparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = parametersVirtualMachineDiskVirtualMachineDiskUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-disk.'));
  removeparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters1.command('virtual-machine-disk-update-parameters')
  .description($('Remove catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-disk-update-parameters
  var catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-disk.'));
  var addparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = parametersVirtualMachineDiskVirtualMachineDiskUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-disk.'));
  addparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters2.command('virtual-machine-disk-update-parameters')
  .description($('Remove catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--has-operating-system <hasOperatingSystem>', $('Add the has-operating-system value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Add the operating-system-type value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'hasOperatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hasOperatingSystem) {
      if (options.parse && options.hasOperatingSystem) {
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hasOperatingSystem}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = '' + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineDisk UpdateDiskSize
  --name
  --parameters
=============================================
{
  "hasOperatingSystem":null,
  "label":"",
  "mediaLinkUri":"",
  "name":"",
  "operatingSystemType":"",
  "resizedSizeInGB":null
}
*/
  var virtualMachineDiskUpdateDiskSize = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk').description($('Commands to manage your virtual machine disk.'));
  virtualMachineDiskUpdateDiskSize.command('update-disk-size')
  .description($('update-disk-size method to manage your virtual machine disk.'))
  .usage('[options]')
  .option('--name <name>', $('name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('name = ' + options.name);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineDisks.updateDiskSize(options.name, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineDiskUpdateDiskSizeupdateDiskSizeParameters1 = virtualMachineDiskUpdateDiskSize.category('parameters')
  .description($('Commands to manage parameter for your virtual machine disk.'));
  var virtualMachineDiskUpdateDiskSizeupdateDiskSizeGenerate1 = virtualMachineDiskUpdateDiskSizeupdateDiskSizeParameters1.category('generate')
  .description($('Commands to generate parameter file for your virtual machine disk.'));
  virtualMachineDiskUpdateDiskSizeupdateDiskSizeGenerate1.command('update-disk-size')
  .description($('Generate virtualMachineDiskUpdateDiskSize parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"hasOperatingSystem\":null,\"label\":\"\",\"mediaLinkUri\":\"\",\"name\":\"\",\"operatingSystemType\":\"\",\"resizedSizeInGB\":null}', _);
    var filePath = 'virtualMachineDiskUpdateDiskSize_updateDiskSize.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"hasOperatingSystem\":null,\r\n\"label\":\"\",\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystemType\":\"\",\r\n\"resizedSizeInGB\":null\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineDiskUpdateDiskSizeupdateDiskSizeParameters1.command('patch')
  .description($('Command to patch virtualMachineDiskUpdateDiskSize parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-disk-update-parameters
  var catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-disk.'));
  var setparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters0 = parametersVirtualMachineDiskVirtualMachineDiskUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-disk.'));
  setparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters0.command('virtual-machine-disk-update-parameters')
  .description($('Set catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--has-operating-system <hasOperatingSystem>', $('Set the has-operating-system value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Set the operating-system-type value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'hasOperatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hasOperatingSystem) {
      if (options.parse && options.hasOperatingSystem) {
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hasOperatingSystem}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-disk-update-parameters
  var catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-disk.'));
  var removeparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters1 = parametersVirtualMachineDiskVirtualMachineDiskUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-disk.'));
  removeparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters1.command('virtual-machine-disk-update-parameters')
  .description($('Remove catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-disk-update-parameters
  var catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-disk');
  var parametersVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-disk.'));
  var addparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters2 = parametersVirtualMachineDiskVirtualMachineDiskUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-disk.'));
  addparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters2.command('virtual-machine-disk-update-parameters')
  .description($('Remove catparametersVirtualMachineDiskVirtualMachineDiskUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--has-operating-system <hasOperatingSystem>', $('Add the has-operating-system value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Add the operating-system-type value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'hasOperatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hasOperatingSystem) {
      if (options.parse && options.hasOperatingSystem) {
        options.hasOperatingSystem = JSON.parse(options.hasOperatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hasOperatingSystem}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = '' + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineExtension List
*/
  var virtualMachineExtensionList = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-extension').description($('Commands to manage your virtual machine extension.'));
  virtualMachineExtensionList.command('list')
  .description($('list method to manage your virtual machine extension.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineExtensions.list(_);
    cli.output.json(result);
  });
/*
  VirtualMachineExtension ListVersions
  --publisher-name
  --extension-name
*/
  var virtualMachineExtensionListVersions = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-extension').description($('Commands to manage your virtual machine extension.'));
  virtualMachineExtensionListVersions.command('list-versions')
  .description($('list-versions method to manage your virtual machine extension.'))
  .usage('[options]')
  .option('--publisher-name <publisher-name>', $('publisher-name'))
  .option('--extension-name <extension-name>', $('extension-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('publisherName = ' + options.publisherName);
    cli.output.info('extensionName = ' + options.extensionName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineExtensions.listVersions(options.publisherName, options.extensionName, _);
    cli.output.json(result);
  });
/*
  VirtualMachine BeginShutdown
  --service-name
  --deployment-name
  --virtual-machine-name
  --parameters
=============================================
{
  "postShutdownAction":0
}
*/
  var virtualMachineBeginShutdown = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineBeginShutdown.command('begin-shutdown')
  .description($('begin-shutdown method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.beginShutdown(options.serviceName, options.deploymentName, options.virtualMachineName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineBeginShutdownbeginShutdownParameters3 = virtualMachineBeginShutdown.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineBeginShutdownbeginShutdownGenerate3 = virtualMachineBeginShutdownbeginShutdownParameters3.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineBeginShutdownbeginShutdownGenerate3.command('begin-shutdown')
  .description($('Generate virtualMachineBeginShutdown parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"postShutdownAction\":0}', _);
    var filePath = 'virtualMachineBeginShutdown_beginShutdown.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"postShutdownAction\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineBeginShutdownbeginShutdownParameters3.command('patch')
  .description($('Command to patch virtualMachineBeginShutdown parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-shutdown-parameters
  var catparametersVirtualMachineVirtualMachineShutdownParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineShutdownParameters0 = catparametersVirtualMachineVirtualMachineShutdownParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineVirtualMachineShutdownParameters0 = parametersVirtualMachineVirtualMachineShutdownParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineVirtualMachineShutdownParameters0.command('virtual-machine-shutdown-parameters')
  .description($('Set catparametersVirtualMachineVirtualMachineShutdownParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--post-shutdown-action <postShutdownAction>', $('Set the post-shutdown-action value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'postShutdownAction';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.postShutdownAction) {
      if (options.parse && options.postShutdownAction) {
        options.postShutdownAction = JSON.parse(options.postShutdownAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postShutdownAction}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-shutdown-parameters
  var catparametersVirtualMachineVirtualMachineShutdownParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineShutdownParameters1 = catparametersVirtualMachineVirtualMachineShutdownParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineVirtualMachineShutdownParameters1 = parametersVirtualMachineVirtualMachineShutdownParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineVirtualMachineShutdownParameters1.command('virtual-machine-shutdown-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineShutdownParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-shutdown-parameters
  var catparametersVirtualMachineVirtualMachineShutdownParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineShutdownParameters2 = catparametersVirtualMachineVirtualMachineShutdownParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineVirtualMachineShutdownParameters2 = parametersVirtualMachineVirtualMachineShutdownParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineVirtualMachineShutdownParameters2.command('virtual-machine-shutdown-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineShutdownParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--post-shutdown-action <postShutdownAction>', $('Add the post-shutdown-action value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'postShutdownAction';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.postShutdownAction) {
      if (options.parse && options.postShutdownAction) {
        options.postShutdownAction = JSON.parse(options.postShutdownAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postShutdownAction}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove post-shutdown-action
  var catparametersVirtualMachinePostShutdownAction1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePostShutdownAction1 = catparametersVirtualMachinePostShutdownAction1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachinePostShutdownAction1 = parametersVirtualMachinePostShutdownAction1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachinePostShutdownAction1.command('post-shutdown-action')
  .description($('Remove catparametersVirtualMachinePostShutdownAction1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/postShutdownAction';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add post-shutdown-action
  var catparametersVirtualMachinePostShutdownAction2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePostShutdownAction2 = catparametersVirtualMachinePostShutdownAction2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachinePostShutdownAction2 = parametersVirtualMachinePostShutdownAction2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachinePostShutdownAction2.command('post-shutdown-action')
  .description($('Remove catparametersVirtualMachinePostShutdownAction2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/postShutdownAction' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine CaptureOSImage
  --service-name
  --deployment-name
  --virtual-machine-name
  --parameters
=============================================
{
  "postCaptureAction":0,
  "provisioningConfiguration":{
    "adminPassword":"",
    "adminUserName":"",
    "computerName":"",
    "configurationSetType":"",
    "customData":"",
    "disableSshPasswordAuthentication":null,
    "domainJoin":{
      "credentials":{
        "domain":"",
        "password":"",
        "userName":""
      },
      "domainToJoin":"",
      "ldapMachineObjectOU":"",
      "provisioning":{
        "accountData":""
      }
    },
    "enableAutomaticUpdates":null,
    "hostName":"",
    "inputEndpoints":[
      {
        "enableDirectServerReturn":null,
        "endpointAcl":{
          "rules":[
            {
              "action":"",
              "description":"",
              "order":null,
              "remoteSubnet":""
            }
          ]
        },
        "idleTimeoutInMinutes":null,
        "loadBalancedEndpointSetName":"",
        "loadBalancerDistribution":"",
        "loadBalancerName":"",
        "loadBalancerProbe":{
          "intervalInSeconds":null,
          "path":"",
          "port":0,
          "protocol":0,
          "timeoutInSeconds":null
        },
        "localPort":null,
        "name":"",
        "port":null,
        "protocol":"",
        "virtualIPAddress":"",
        "virtualIPName":""
      }
    ],
    "iPForwarding":"",
    "networkInterfaces":[
      {
        "iPConfigurations":[
          {
            "staticVirtualNetworkIPAddress":"",
            "subnetName":""
          }
        ],
        "iPForwarding":"",
        "name":"",
        "networkSecurityGroup":""
      }
    ],
    "networkSecurityGroup":"",
    "publicIPs":[
      {
        "domainNameLabel":"",
        "idleTimeoutInMinutes":null,
        "name":""
      }
    ],
    "resetPasswordOnFirstLogon":null,
    "sshSettings":{
      "keyPairs":[
        {
          "fingerprint":"",
          "path":""
        }
      ],
      "publicKeys":[
        {
          "fingerprint":"",
          "path":""
        }
      ]
    },
    "staticVirtualNetworkIPAddress":"",
    "storedCertificateSettings":[
      {
        "storeName":"",
        "thumbprint":""
      }
    ],
    "subnetNames":[
      ""
    ],
    "timeZone":"",
    "userName":"",
    "userPassword":"",
    "windowsRemoteManagement":{
      "listeners":[
        {
          "certificateThumbprint":"",
          "listenerType":0
        }
      ]
    }
  },
  "targetImageLabel":"",
  "targetImageName":""
}
*/
  var virtualMachineCaptureOSImage = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineCaptureOSImage.command('capture-os-image')
  .description($('capture-os-image method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.captureOSImage(options.serviceName, options.deploymentName, options.virtualMachineName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineCaptureOSImagecaptureOSImageParameters3 = virtualMachineCaptureOSImage.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineCaptureOSImagecaptureOSImageGenerate3 = virtualMachineCaptureOSImagecaptureOSImageParameters3.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineCaptureOSImagecaptureOSImageGenerate3.command('capture-os-image')
  .description($('Generate virtualMachineCaptureOSImage parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"postCaptureAction\":0,\"provisioningConfiguration\":{\"adminPassword\":\"\",\"adminUserName\":\"\",\"computerName\":\"\",\"configurationSetType\":\"\",\"customData\":\"\",\"disableSshPasswordAuthentication\":null,\"domainJoin\":{\"credentials\":{\"domain\":\"\",\"password\":\"\",\"userName\":\"\"},\"domainToJoin\":\"\",\"ldapMachineObjectOU\":\"\",\"provisioning\":{\"accountData\":\"\"}},\"enableAutomaticUpdates\":null,\"hostName\":\"\",\"inputEndpoints\":[{\"enableDirectServerReturn\":null,\"endpointAcl\":{\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}]},\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":0,\"protocol\":0,\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}],\"iPForwarding\":\"\",\"networkInterfaces\":[{\"iPConfigurations\":[{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\"}],\"iPForwarding\":\"\",\"name\":\"\",\"networkSecurityGroup\":\"\"}],\"networkSecurityGroup\":\"\",\"publicIPs\":[{\"domainNameLabel\":\"\",\"idleTimeoutInMinutes\":null,\"name\":\"\"}],\"resetPasswordOnFirstLogon\":null,\"sshSettings\":{\"keyPairs\":[{\"fingerprint\":\"\",\"path\":\"\"}],\"publicKeys\":[{\"fingerprint\":\"\",\"path\":\"\"}]},\"staticVirtualNetworkIPAddress\":\"\",\"storedCertificateSettings\":[{\"storeName\":\"\",\"thumbprint\":\"\"}],\"subnetNames\":[\"\"],\"timeZone\":\"\",\"userName\":\"\",\"userPassword\":\"\",\"windowsRemoteManagement\":{\"listeners\":[{\"certificateThumbprint\":\"\",\"listenerType\":0}]}},\"targetImageLabel\":\"\",\"targetImageName\":\"\"}', _);
    var filePath = 'virtualMachineCaptureOSImage_captureOSImage.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"postCaptureAction\":0,\r\n\"provisioningConfiguration\":{\r\n\"adminPassword\":\"\",\r\n\"adminUserName\":\"\",\r\n\"computerName\":\"\",\r\n\"configurationSetType\":\"\",\r\n\"customData\":\"\",\r\n\"disableSshPasswordAuthentication\":null,\r\n\"domainJoin\":{\r\n\"credentials\":{\r\n\"domain\":\"\",\r\n\"password\":\"\",\r\n\"userName\":\"\"\r\n},\r\n\"domainToJoin\":\"\",\r\n\"ldapMachineObjectOU\":\"\",\r\n\"provisioning\":{\r\n\"accountData\":\"\"\r\n}\r\n},\r\n\"enableAutomaticUpdates\":null,\r\n\"hostName\":\"\",\r\n\"inputEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"endpointAcl\":{\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n]\r\n},\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":0,\r\n\"protocol\":0,\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"networkInterfaces\":[\r\n{\r\n\"iPConfigurations\":[\r\n{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"name\":\"\",\r\n\"networkSecurityGroup\":\"\"\r\n}\r\n],\r\n\"networkSecurityGroup\":\"\",\r\n\"publicIPs\":[\r\n{\r\n\"domainNameLabel\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"resetPasswordOnFirstLogon\":null,\r\n\"sshSettings\":{\r\n\"keyPairs\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n],\r\n\"publicKeys\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n]\r\n},\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"storedCertificateSettings\":[\r\n{\r\n\"storeName\":\"\",\r\n\"thumbprint\":\"\"\r\n}\r\n],\r\n\"subnetNames\":[\r\n\"\"\r\n],\r\n\"timeZone\":\"\",\r\n\"userName\":\"\",\r\n\"userPassword\":\"\",\r\n\"windowsRemoteManagement\":{\r\n\"listeners\":[\r\n{\r\n\"certificateThumbprint\":\"\",\r\n\"listenerType\":0\r\n}\r\n]\r\n}\r\n},\r\n\"targetImageLabel\":\"\",\r\n\"targetImageName\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineCaptureOSImagecaptureOSImageParameters3.command('patch')
  .description($('Command to patch virtualMachineCaptureOSImage parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-capture-os-image-parameters
  var catparametersVirtualMachineVirtualMachineCaptureOSImageParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineCaptureOSImageParameters0 = catparametersVirtualMachineVirtualMachineCaptureOSImageParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineVirtualMachineCaptureOSImageParameters0 = parametersVirtualMachineVirtualMachineCaptureOSImageParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineVirtualMachineCaptureOSImageParameters0.command('virtual-machine-capture-os-image-parameters')
  .description($('Set catparametersVirtualMachineVirtualMachineCaptureOSImageParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--post-capture-action <postCaptureAction>', $('Set the post-capture-action value.'))
  .option('--provisioning-configuration <provisioningConfiguration>', $('Set the provisioning-configuration value.'))
  .option('--target-image-label <targetImageLabel>', $('Set the target-image-label value.'))
  .option('--target-image-name <targetImageName>', $('Set the target-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'postCaptureAction';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.postCaptureAction) {
      if (options.parse && options.postCaptureAction) {
        options.postCaptureAction = JSON.parse(options.postCaptureAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postCaptureAction}]);
    }
    paramPath = options.path + '/' + 'provisioningConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioningConfiguration) {
      if (options.parse && options.provisioningConfiguration) {
        options.provisioningConfiguration = JSON.parse(options.provisioningConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningConfiguration}]);
    }
    paramPath = options.path + '/' + 'targetImageLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.targetImageLabel) {
      if (options.parse && options.targetImageLabel) {
        options.targetImageLabel = JSON.parse(options.targetImageLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetImageLabel}]);
    }
    paramPath = options.path + '/' + 'targetImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.targetImageName) {
      if (options.parse && options.targetImageName) {
        options.targetImageName = JSON.parse(options.targetImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-capture-os-image-parameters
  var catparametersVirtualMachineVirtualMachineCaptureOSImageParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineCaptureOSImageParameters1 = catparametersVirtualMachineVirtualMachineCaptureOSImageParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineVirtualMachineCaptureOSImageParameters1 = parametersVirtualMachineVirtualMachineCaptureOSImageParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineVirtualMachineCaptureOSImageParameters1.command('virtual-machine-capture-os-image-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineCaptureOSImageParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-capture-os-image-parameters
  var catparametersVirtualMachineVirtualMachineCaptureOSImageParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineCaptureOSImageParameters2 = catparametersVirtualMachineVirtualMachineCaptureOSImageParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineVirtualMachineCaptureOSImageParameters2 = parametersVirtualMachineVirtualMachineCaptureOSImageParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineVirtualMachineCaptureOSImageParameters2.command('virtual-machine-capture-os-image-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineCaptureOSImageParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--post-capture-action <postCaptureAction>', $('Add the post-capture-action value.'))
  .option('--provisioning-configuration <provisioningConfiguration>', $('Add the provisioning-configuration value.'))
  .option('--target-image-label <targetImageLabel>', $('Add the target-image-label value.'))
  .option('--target-image-name <targetImageName>', $('Add the target-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'postCaptureAction';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.postCaptureAction) {
      if (options.parse && options.postCaptureAction) {
        options.postCaptureAction = JSON.parse(options.postCaptureAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postCaptureAction}]);
    }
    paramPath = '' + '/' + 'provisioningConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioningConfiguration) {
      if (options.parse && options.provisioningConfiguration) {
        options.provisioningConfiguration = JSON.parse(options.provisioningConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningConfiguration}]);
    }
    paramPath = '' + '/' + 'targetImageLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.targetImageLabel) {
      if (options.parse && options.targetImageLabel) {
        options.targetImageLabel = JSON.parse(options.targetImageLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetImageLabel}]);
    }
    paramPath = '' + '/' + 'targetImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.targetImageName) {
      if (options.parse && options.targetImageName) {
        options.targetImageName = JSON.parse(options.targetImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove post-capture-action
  var catparametersVirtualMachinePostCaptureAction1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePostCaptureAction1 = catparametersVirtualMachinePostCaptureAction1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachinePostCaptureAction1 = parametersVirtualMachinePostCaptureAction1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachinePostCaptureAction1.command('post-capture-action')
  .description($('Remove catparametersVirtualMachinePostCaptureAction1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/postCaptureAction';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add post-capture-action
  var catparametersVirtualMachinePostCaptureAction2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePostCaptureAction2 = catparametersVirtualMachinePostCaptureAction2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachinePostCaptureAction2 = parametersVirtualMachinePostCaptureAction2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachinePostCaptureAction2.command('post-capture-action')
  .description($('Remove catparametersVirtualMachinePostCaptureAction2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/postCaptureAction' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set provisioning-configuration
  var catparametersVirtualMachineProvisioningConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProvisioningConfiguration0 = catparametersVirtualMachineProvisioningConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineProvisioningConfiguration0 = parametersVirtualMachineProvisioningConfiguration0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineProvisioningConfiguration0.command('provisioning-configuration')
  .description($('Set catparametersVirtualMachineProvisioningConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Set the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Set the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Set the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Set the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Set the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Set the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Set the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Set the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Set the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Set the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Set the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .option('--user-password <userPassword>', $('Set the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Set the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration';
    var paramPath = options.path + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'adminUserName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = options.path + '/' + 'computerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = options.path + '/' + 'configurationSetType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = options.path + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'disableSshPasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'domainJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'hostName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = options.path + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'networkInterfaces';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'publicIPs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = options.path + '/' + 'resetPasswordOnFirstLogon';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = options.path + '/' + 'sshSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'storedCertificateSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = options.path + '/' + 'subnetNames';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = options.path + '/' + 'userPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = options.path + '/' + 'windowsRemoteManagement';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove provisioning-configuration
  var catparametersVirtualMachineProvisioningConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProvisioningConfiguration1 = catparametersVirtualMachineProvisioningConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineProvisioningConfiguration1 = parametersVirtualMachineProvisioningConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineProvisioningConfiguration1.command('provisioning-configuration')
  .description($('Remove catparametersVirtualMachineProvisioningConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add provisioning-configuration
  var catparametersVirtualMachineProvisioningConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProvisioningConfiguration2 = catparametersVirtualMachineProvisioningConfiguration2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineProvisioningConfiguration2 = parametersVirtualMachineProvisioningConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineProvisioningConfiguration2.command('provisioning-configuration')
  .description($('Remove catparametersVirtualMachineProvisioningConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--admin-password <adminPassword>', $('Add the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Add the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Add the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Add the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Add the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Add the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Add the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Add the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Add the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Add the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Add the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Add the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Add the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Add the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Add the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Add the time-zone value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .option('--user-password <userPassword>', $('Add the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Add the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration' + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'adminUserName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'computerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'configurationSetType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'disableSshPasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'domainJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'hostName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'networkInterfaces';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'publicIPs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'resetPasswordOnFirstLogon';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'sshSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'storedCertificateSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'subnetNames';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'userPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = '/provisioningConfiguration' + '/' + 'windowsRemoteManagement';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set domain-join
  var catparametersVirtualMachineDomainJoin0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDomainJoin0 = catparametersVirtualMachineDomainJoin0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineDomainJoin0 = parametersVirtualMachineDomainJoin0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineDomainJoin0.command('domain-join')
  .description($('Set catparametersVirtualMachineDomainJoin0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--credentials <credentials>', $('Set the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Set the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Set the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Set the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/domainJoin';
    var paramPath = options.path + '/' + 'credentials';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = options.path + '/' + 'domainToJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = options.path + '/' + 'ldapMachineObjectOU';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = options.path + '/' + 'provisioning';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove domain-join
  var catparametersVirtualMachineDomainJoin1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDomainJoin1 = catparametersVirtualMachineDomainJoin1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineDomainJoin1 = parametersVirtualMachineDomainJoin1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineDomainJoin1.command('domain-join')
  .description($('Remove catparametersVirtualMachineDomainJoin1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/domainJoin';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add domain-join
  var catparametersVirtualMachineDomainJoin2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDomainJoin2 = catparametersVirtualMachineDomainJoin2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineDomainJoin2 = parametersVirtualMachineDomainJoin2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineDomainJoin2.command('domain-join')
  .description($('Remove catparametersVirtualMachineDomainJoin2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--credentials <credentials>', $('Add the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Add the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Add the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Add the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/domainJoin' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/domainJoin' + '/' + 'credentials';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = '/provisioningConfiguration/domainJoin' + '/' + 'domainToJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = '/provisioningConfiguration/domainJoin' + '/' + 'ldapMachineObjectOU';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = '/provisioningConfiguration/domainJoin' + '/' + 'provisioning';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set credentials
  var catparametersVirtualMachineCredentials0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineCredentials0 = catparametersVirtualMachineCredentials0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineCredentials0 = parametersVirtualMachineCredentials0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineCredentials0.command('credentials')
  .description($('Set catparametersVirtualMachineCredentials0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain <domain>', $('Set the domain value.'))
  .option('--password <password>', $('Set the password value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/domainJoin/credentials';
    var paramPath = options.path + '/' + 'domain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = options.path + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove credentials
  var catparametersVirtualMachineCredentials1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineCredentials1 = catparametersVirtualMachineCredentials1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineCredentials1 = parametersVirtualMachineCredentials1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineCredentials1.command('credentials')
  .description($('Remove catparametersVirtualMachineCredentials1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/domainJoin/credentials';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add credentials
  var catparametersVirtualMachineCredentials2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineCredentials2 = catparametersVirtualMachineCredentials2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineCredentials2 = parametersVirtualMachineCredentials2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineCredentials2.command('credentials')
  .description($('Remove catparametersVirtualMachineCredentials2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain <domain>', $('Add the domain value.'))
  .option('--password <password>', $('Add the password value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/domainJoin/credentials' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/domainJoin/credentials' + '/' + 'domain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = '/provisioningConfiguration/domainJoin/credentials' + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = '/provisioningConfiguration/domainJoin/credentials' + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set provisioning
  var catparametersVirtualMachineProvisioning0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProvisioning0 = catparametersVirtualMachineProvisioning0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineProvisioning0 = parametersVirtualMachineProvisioning0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineProvisioning0.command('provisioning')
  .description($('Set catparametersVirtualMachineProvisioning0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--account-data <accountData>', $('Set the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/domainJoin/provisioning';
    var paramPath = options.path + '/' + 'accountData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove provisioning
  var catparametersVirtualMachineProvisioning1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProvisioning1 = catparametersVirtualMachineProvisioning1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineProvisioning1 = parametersVirtualMachineProvisioning1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineProvisioning1.command('provisioning')
  .description($('Remove catparametersVirtualMachineProvisioning1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/domainJoin/provisioning';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add provisioning
  var catparametersVirtualMachineProvisioning2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProvisioning2 = catparametersVirtualMachineProvisioning2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineProvisioning2 = parametersVirtualMachineProvisioning2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineProvisioning2.command('provisioning')
  .description($('Remove catparametersVirtualMachineProvisioning2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--account-data <accountData>', $('Add the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/domainJoin/provisioning' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/domainJoin/provisioning' + '/' + 'accountData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set input-endpoints
  var catparametersVirtualMachineInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineInputEndpoints0 = catparametersVirtualMachineInputEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineInputEndpoints0 = parametersVirtualMachineInputEndpoints0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineInputEndpoints0.command('input-endpoints')
  .description($('Set catparametersVirtualMachineInputEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Set the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'endpointAcl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove input-endpoints
  var catparametersVirtualMachineInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineInputEndpoints1 = catparametersVirtualMachineInputEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineInputEndpoints1 = parametersVirtualMachineInputEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineInputEndpoints1.command('input-endpoints')
  .description($('Remove catparametersVirtualMachineInputEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add input-endpoints
  var catparametersVirtualMachineInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineInputEndpoints2 = catparametersVirtualMachineInputEndpoints2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineInputEndpoints2 = parametersVirtualMachineInputEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineInputEndpoints2.command('input-endpoints')
  .description($('Remove catparametersVirtualMachineInputEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Add the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Add the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Add the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Add the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Add the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Add the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Add the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Add the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'endpointAcl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set endpoint-acl
  var catparametersVirtualMachineEndpointAcl0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineEndpointAcl0 = catparametersVirtualMachineEndpointAcl0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineEndpointAcl0 = parametersVirtualMachineEndpointAcl0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineEndpointAcl0.command('endpoint-acl')
  .description($('Set catparametersVirtualMachineEndpointAcl0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--rules <rules>', $('Set the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var paramPath = options.path + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove endpoint-acl
  var catparametersVirtualMachineEndpointAcl1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineEndpointAcl1 = catparametersVirtualMachineEndpointAcl1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineEndpointAcl1 = parametersVirtualMachineEndpointAcl1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineEndpointAcl1.command('endpoint-acl')
  .description($('Remove catparametersVirtualMachineEndpointAcl1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add endpoint-acl
  var catparametersVirtualMachineEndpointAcl2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineEndpointAcl2 = catparametersVirtualMachineEndpointAcl2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineEndpointAcl2 = parametersVirtualMachineEndpointAcl2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineEndpointAcl2.command('endpoint-acl')
  .description($('Remove catparametersVirtualMachineEndpointAcl2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--rules <rules>', $('Add the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set rules
  var catparametersVirtualMachineRules0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRules0 = catparametersVirtualMachineRules0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineRules0 = parametersVirtualMachineRules0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineRules0.command('rules')
  .description($('Set catparametersVirtualMachineRules0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove rules
  var catparametersVirtualMachineRules1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRules1 = catparametersVirtualMachineRules1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineRules1 = parametersVirtualMachineRules1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineRules1.command('rules')
  .description($('Remove catparametersVirtualMachineRules1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add rules
  var catparametersVirtualMachineRules2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRules2 = catparametersVirtualMachineRules2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineRules2 = parametersVirtualMachineRules2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineRules2.command('rules')
  .description($('Remove catparametersVirtualMachineRules2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--action <action>', $('Add the action value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--order <order>', $('Add the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Add the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancer-probe
  var catparametersVirtualMachineLoadBalancerProbe0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancerProbe0 = catparametersVirtualMachineLoadBalancerProbe0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineLoadBalancerProbe0 = parametersVirtualMachineLoadBalancerProbe0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineLoadBalancerProbe0.command('load-balancer-probe')
  .description($('Set catparametersVirtualMachineLoadBalancerProbe0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var paramPath = options.path + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancer-probe
  var catparametersVirtualMachineLoadBalancerProbe1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancerProbe1 = catparametersVirtualMachineLoadBalancerProbe1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineLoadBalancerProbe1 = parametersVirtualMachineLoadBalancerProbe1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineLoadBalancerProbe1.command('load-balancer-probe')
  .description($('Remove catparametersVirtualMachineLoadBalancerProbe1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancer-probe
  var catparametersVirtualMachineLoadBalancerProbe2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancerProbe2 = catparametersVirtualMachineLoadBalancerProbe2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineLoadBalancerProbe2 = parametersVirtualMachineLoadBalancerProbe2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineLoadBalancerProbe2.command('load-balancer-probe')
  .description($('Remove catparametersVirtualMachineLoadBalancerProbe2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Add the interval-in-seconds value.'))
  .option('--path <path>', $('Add the path value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Add the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove protocol
  var catparametersVirtualMachineProtocol1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProtocol1 = catparametersVirtualMachineProtocol1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineProtocol1 = parametersVirtualMachineProtocol1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineProtocol1.command('protocol')
  .description($('Remove catparametersVirtualMachineProtocol1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add protocol
  var catparametersVirtualMachineProtocol2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProtocol2 = catparametersVirtualMachineProtocol2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineProtocol2 = parametersVirtualMachineProtocol2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineProtocol2.command('protocol')
  .description($('Remove catparametersVirtualMachineProtocol2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set network-interfaces
  var catparametersVirtualMachineNetworkInterfaces0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineNetworkInterfaces0 = catparametersVirtualMachineNetworkInterfaces0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineNetworkInterfaces0 = parametersVirtualMachineNetworkInterfaces0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineNetworkInterfaces0.command('network-interfaces')
  .description($('Set catparametersVirtualMachineNetworkInterfaces0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove network-interfaces
  var catparametersVirtualMachineNetworkInterfaces1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineNetworkInterfaces1 = catparametersVirtualMachineNetworkInterfaces1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineNetworkInterfaces1 = parametersVirtualMachineNetworkInterfaces1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineNetworkInterfaces1.command('network-interfaces')
  .description($('Remove catparametersVirtualMachineNetworkInterfaces1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add network-interfaces
  var catparametersVirtualMachineNetworkInterfaces2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineNetworkInterfaces2 = catparametersVirtualMachineNetworkInterfaces2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineNetworkInterfaces2 = parametersVirtualMachineNetworkInterfaces2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineNetworkInterfaces2.command('network-interfaces')
  .description($('Remove catparametersVirtualMachineNetworkInterfaces2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/provisioningConfiguration/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ip-configurations
  var catparametersVirtualMachineIPConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineIPConfigurations0 = catparametersVirtualMachineIPConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineIPConfigurations0 = parametersVirtualMachineIPConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineIPConfigurations0.command('ip-configurations')
  .description($('Set catparametersVirtualMachineIPConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ip-configurations
  var catparametersVirtualMachineIPConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineIPConfigurations1 = catparametersVirtualMachineIPConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineIPConfigurations1 = parametersVirtualMachineIPConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineIPConfigurations1.command('ip-configurations')
  .description($('Remove catparametersVirtualMachineIPConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ip-configurations
  var catparametersVirtualMachineIPConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineIPConfigurations2 = catparametersVirtualMachineIPConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineIPConfigurations2 = parametersVirtualMachineIPConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineIPConfigurations2.command('ip-configurations')
  .description($('Remove catparametersVirtualMachineIPConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/provisioningConfiguration/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set public-ip
  var catparametersVirtualMachinePublicIPs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicIPs0 = catparametersVirtualMachinePublicIPs0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachinePublicIPs0 = parametersVirtualMachinePublicIPs0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachinePublicIPs0.command('public-ip')
  .description($('Set catparametersVirtualMachinePublicIPs0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--domain-name-label <domainNameLabel>', $('Set the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'domainNameLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove public-ip
  var catparametersVirtualMachinePublicIPs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicIPs1 = catparametersVirtualMachinePublicIPs1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachinePublicIPs1 = parametersVirtualMachinePublicIPs1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachinePublicIPs1.command('public-ip')
  .description($('Remove catparametersVirtualMachinePublicIPs1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add public-ip
  var catparametersVirtualMachinePublicIPs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicIPs2 = catparametersVirtualMachinePublicIPs2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachinePublicIPs2 = parametersVirtualMachinePublicIPs2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachinePublicIPs2.command('public-ip')
  .description($('Remove catparametersVirtualMachinePublicIPs2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain-name-label <domainNameLabel>', $('Add the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'domainNameLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/provisioningConfiguration/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ssh-settings
  var catparametersVirtualMachineSshSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSshSettings0 = catparametersVirtualMachineSshSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineSshSettings0 = parametersVirtualMachineSshSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineSshSettings0.command('ssh-settings')
  .description($('Set catparametersVirtualMachineSshSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--key-pairs <keyPairs>', $('Set the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Set the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/sshSettings';
    var paramPath = options.path + '/' + 'keyPairs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = options.path + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ssh-settings
  var catparametersVirtualMachineSshSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSshSettings1 = catparametersVirtualMachineSshSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineSshSettings1 = parametersVirtualMachineSshSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineSshSettings1.command('ssh-settings')
  .description($('Remove catparametersVirtualMachineSshSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/sshSettings';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ssh-settings
  var catparametersVirtualMachineSshSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSshSettings2 = catparametersVirtualMachineSshSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineSshSettings2 = parametersVirtualMachineSshSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineSshSettings2.command('ssh-settings')
  .description($('Remove catparametersVirtualMachineSshSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--key-pairs <keyPairs>', $('Add the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Add the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/sshSettings' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/sshSettings' + '/' + 'keyPairs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = '/provisioningConfiguration/sshSettings' + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set key-pairs
  var catparametersVirtualMachineKeyPairs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineKeyPairs0 = catparametersVirtualMachineKeyPairs0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineKeyPairs0 = parametersVirtualMachineKeyPairs0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineKeyPairs0.command('key-pairs')
  .description($('Set catparametersVirtualMachineKeyPairs0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove key-pairs
  var catparametersVirtualMachineKeyPairs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineKeyPairs1 = catparametersVirtualMachineKeyPairs1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineKeyPairs1 = parametersVirtualMachineKeyPairs1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineKeyPairs1.command('key-pairs')
  .description($('Remove catparametersVirtualMachineKeyPairs1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add key-pairs
  var catparametersVirtualMachineKeyPairs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineKeyPairs2 = catparametersVirtualMachineKeyPairs2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineKeyPairs2 = parametersVirtualMachineKeyPairs2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineKeyPairs2.command('key-pairs')
  .description($('Remove catparametersVirtualMachineKeyPairs2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/provisioningConfiguration/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set public-keys
  var catparametersVirtualMachinePublicKeys0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicKeys0 = catparametersVirtualMachinePublicKeys0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachinePublicKeys0 = parametersVirtualMachinePublicKeys0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachinePublicKeys0.command('public-keys')
  .description($('Set catparametersVirtualMachinePublicKeys0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove public-keys
  var catparametersVirtualMachinePublicKeys1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicKeys1 = catparametersVirtualMachinePublicKeys1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachinePublicKeys1 = parametersVirtualMachinePublicKeys1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachinePublicKeys1.command('public-keys')
  .description($('Remove catparametersVirtualMachinePublicKeys1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add public-keys
  var catparametersVirtualMachinePublicKeys2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicKeys2 = catparametersVirtualMachinePublicKeys2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachinePublicKeys2 = parametersVirtualMachinePublicKeys2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachinePublicKeys2.command('public-keys')
  .description($('Remove catparametersVirtualMachinePublicKeys2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/provisioningConfiguration/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set stored-certificate-settings
  var catparametersVirtualMachineStoredCertificateSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineStoredCertificateSettings0 = catparametersVirtualMachineStoredCertificateSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineStoredCertificateSettings0 = parametersVirtualMachineStoredCertificateSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineStoredCertificateSettings0.command('stored-certificate-settings')
  .description($('Set catparametersVirtualMachineStoredCertificateSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove stored-certificate-settings
  var catparametersVirtualMachineStoredCertificateSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineStoredCertificateSettings1 = catparametersVirtualMachineStoredCertificateSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineStoredCertificateSettings1 = parametersVirtualMachineStoredCertificateSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineStoredCertificateSettings1.command('stored-certificate-settings')
  .description($('Remove catparametersVirtualMachineStoredCertificateSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add stored-certificate-settings
  var catparametersVirtualMachineStoredCertificateSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineStoredCertificateSettings2 = catparametersVirtualMachineStoredCertificateSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineStoredCertificateSettings2 = parametersVirtualMachineStoredCertificateSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineStoredCertificateSettings2.command('stored-certificate-settings')
  .description($('Remove catparametersVirtualMachineStoredCertificateSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/provisioningConfiguration/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set subnet-names
  var catparametersVirtualMachineSubnetNames0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSubnetNames0 = catparametersVirtualMachineSubnetNames0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineSubnetNames0 = parametersVirtualMachineSubnetNames0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineSubnetNames0.command('subnet-names')
  .description($('Set catparametersVirtualMachineSubnetNames0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/subnetNames' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove subnet-names
  var catparametersVirtualMachineSubnetNames1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSubnetNames1 = catparametersVirtualMachineSubnetNames1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineSubnetNames1 = parametersVirtualMachineSubnetNames1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineSubnetNames1.command('subnet-names')
  .description($('Remove catparametersVirtualMachineSubnetNames1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/subnetNames' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add subnet-names
  var catparametersVirtualMachineSubnetNames2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSubnetNames2 = catparametersVirtualMachineSubnetNames2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineSubnetNames2 = parametersVirtualMachineSubnetNames2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineSubnetNames2.command('subnet-names')
  .description($('Remove catparametersVirtualMachineSubnetNames2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/subnetNames' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set windows-remote-management
  var catparametersVirtualMachineWindowsRemoteManagement0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineWindowsRemoteManagement0 = catparametersVirtualMachineWindowsRemoteManagement0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineWindowsRemoteManagement0 = parametersVirtualMachineWindowsRemoteManagement0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineWindowsRemoteManagement0.command('windows-remote-management')
  .description($('Set catparametersVirtualMachineWindowsRemoteManagement0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--listeners <listeners>', $('Set the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/windowsRemoteManagement';
    var paramPath = options.path + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove windows-remote-management
  var catparametersVirtualMachineWindowsRemoteManagement1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineWindowsRemoteManagement1 = catparametersVirtualMachineWindowsRemoteManagement1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineWindowsRemoteManagement1 = parametersVirtualMachineWindowsRemoteManagement1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineWindowsRemoteManagement1.command('windows-remote-management')
  .description($('Remove catparametersVirtualMachineWindowsRemoteManagement1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/windowsRemoteManagement';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add windows-remote-management
  var catparametersVirtualMachineWindowsRemoteManagement2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineWindowsRemoteManagement2 = catparametersVirtualMachineWindowsRemoteManagement2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineWindowsRemoteManagement2 = parametersVirtualMachineWindowsRemoteManagement2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineWindowsRemoteManagement2.command('windows-remote-management')
  .description($('Remove catparametersVirtualMachineWindowsRemoteManagement2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--listeners <listeners>', $('Add the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/windowsRemoteManagement' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/windowsRemoteManagement' + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set listeners
  var catparametersVirtualMachineListeners0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListeners0 = catparametersVirtualMachineListeners0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineListeners0 = parametersVirtualMachineListeners0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineListeners0.command('listeners')
  .description($('Set catparametersVirtualMachineListeners0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Set the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Set the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/provisioningConfiguration/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'listenerType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove listeners
  var catparametersVirtualMachineListeners1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListeners1 = catparametersVirtualMachineListeners1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineListeners1 = parametersVirtualMachineListeners1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineListeners1.command('listeners')
  .description($('Remove catparametersVirtualMachineListeners1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add listeners
  var catparametersVirtualMachineListeners2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListeners2 = catparametersVirtualMachineListeners2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineListeners2 = parametersVirtualMachineListeners2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineListeners2.command('listeners')
  .description($('Remove catparametersVirtualMachineListeners2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Add the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Add the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/provisioningConfiguration/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = '/provisioningConfiguration/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'listenerType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove listener-type
  var catparametersVirtualMachineListenerType1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListenerType1 = catparametersVirtualMachineListenerType1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineListenerType1 = parametersVirtualMachineListenerType1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineListenerType1.command('listener-type')
  .description($('Remove catparametersVirtualMachineListenerType1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners-index <listeners-index>', $('Indexer: listeners-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/provisioningConfiguration/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add listener-type
  var catparametersVirtualMachineListenerType2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListenerType2 = catparametersVirtualMachineListenerType2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineListenerType2 = parametersVirtualMachineListenerType2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineListenerType2.command('listener-type')
  .description($('Remove catparametersVirtualMachineListenerType2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/provisioningConfiguration/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine CaptureVMImage
  --service-name
  --deployment-name
  --virtual-machine-name
  --parameters
=============================================
{
  "operationType":"",
  "oSState":"",
  "vMImageLabel":"",
  "vMImageName":"",
  "requestId":"",
  "statusCode":0
}
*/
  var virtualMachineCaptureVMImage = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineCaptureVMImage.command('capture-vm-image')
  .description($('capture-vm-image method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.captureVMImage(options.serviceName, options.deploymentName, options.virtualMachineName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineCaptureVMImagecaptureVMImageParameters3 = virtualMachineCaptureVMImage.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineCaptureVMImagecaptureVMImageGenerate3 = virtualMachineCaptureVMImagecaptureVMImageParameters3.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineCaptureVMImagecaptureVMImageGenerate3.command('capture-vm-image')
  .description($('Generate virtualMachineCaptureVMImage parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"operationType\":\"\",\"oSState\":\"\",\"vMImageLabel\":\"\",\"vMImageName\":\"\",\"requestId\":\"\",\"statusCode\":0}', _);
    var filePath = 'virtualMachineCaptureVMImage_captureVMImage.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"operationType\":\"\",\r\n\"oSState\":\"\",\r\n\"vMImageLabel\":\"\",\r\n\"vMImageName\":\"\",\r\n\"requestId\":\"\",\r\n\"statusCode\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineCaptureVMImagecaptureVMImageParameters3.command('patch')
  .description($('Command to patch virtualMachineCaptureVMImage parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-capture-vm-image-parameters
  var catparametersVirtualMachineVirtualMachineCaptureVMImageParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineCaptureVMImageParameters0 = catparametersVirtualMachineVirtualMachineCaptureVMImageParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineVirtualMachineCaptureVMImageParameters0 = parametersVirtualMachineVirtualMachineCaptureVMImageParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineVirtualMachineCaptureVMImageParameters0.command('virtual-machine-capture-vm-image-parameters')
  .description($('Set catparametersVirtualMachineVirtualMachineCaptureVMImageParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--operation-type <operationType>', $('Set the operation-type value.'))
  .option('--os-state <oSState>', $('Set the os-state value.'))
  .option('--vm-image-label <vmImageLabel>', $('Set the vm-image-label value.'))
  .option('--vm-image-name <vmImageName>', $('Set the vm-image-name value.'))
  .option('--request-id <requestId>', $('Set the request-id value.'))
  .option('--status-code <statusCode>', $('Set the status-code value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'operationType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operationType) {
      if (options.parse && options.operationType) {
        options.operationType = JSON.parse(options.operationType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operationType}]);
    }
    paramPath = options.path + '/' + 'oSState';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSState) {
      if (options.parse && options.oSState) {
        options.oSState = JSON.parse(options.oSState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSState}]);
    }
    paramPath = options.path + '/' + 'vmImageLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageLabel) {
      if (options.parse && options.vmImageLabel) {
        options.vmImageLabel = JSON.parse(options.vmImageLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageLabel}]);
    }
    paramPath = options.path + '/' + 'vmImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageName) {
      if (options.parse && options.vmImageName) {
        options.vmImageName = JSON.parse(options.vmImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageName}]);
    }
    paramPath = options.path + '/' + 'requestId';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.requestId) {
      if (options.parse && options.requestId) {
        options.requestId = JSON.parse(options.requestId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.requestId}]);
    }
    paramPath = options.path + '/' + 'statusCode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.statusCode) {
      if (options.parse && options.statusCode) {
        options.statusCode = JSON.parse(options.statusCode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.statusCode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-capture-vm-image-parameters
  var catparametersVirtualMachineVirtualMachineCaptureVMImageParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineCaptureVMImageParameters1 = catparametersVirtualMachineVirtualMachineCaptureVMImageParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineVirtualMachineCaptureVMImageParameters1 = parametersVirtualMachineVirtualMachineCaptureVMImageParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineVirtualMachineCaptureVMImageParameters1.command('virtual-machine-capture-vm-image-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineCaptureVMImageParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-capture-vm-image-parameters
  var catparametersVirtualMachineVirtualMachineCaptureVMImageParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineCaptureVMImageParameters2 = catparametersVirtualMachineVirtualMachineCaptureVMImageParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineVirtualMachineCaptureVMImageParameters2 = parametersVirtualMachineVirtualMachineCaptureVMImageParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineVirtualMachineCaptureVMImageParameters2.command('virtual-machine-capture-vm-image-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineCaptureVMImageParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--operation-type <operationType>', $('Add the operation-type value.'))
  .option('--os-state <oSState>', $('Add the os-state value.'))
  .option('--vm-image-label <vmImageLabel>', $('Add the vm-image-label value.'))
  .option('--vm-image-name <vmImageName>', $('Add the vm-image-name value.'))
  .option('--request-id <requestId>', $('Add the request-id value.'))
  .option('--status-code <statusCode>', $('Add the status-code value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'operationType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operationType) {
      if (options.parse && options.operationType) {
        options.operationType = JSON.parse(options.operationType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operationType}]);
    }
    paramPath = '' + '/' + 'oSState';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSState) {
      if (options.parse && options.oSState) {
        options.oSState = JSON.parse(options.oSState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSState}]);
    }
    paramPath = '' + '/' + 'vmImageLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageLabel) {
      if (options.parse && options.vmImageLabel) {
        options.vmImageLabel = JSON.parse(options.vmImageLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageLabel}]);
    }
    paramPath = '' + '/' + 'vmImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageName) {
      if (options.parse && options.vmImageName) {
        options.vmImageName = JSON.parse(options.vmImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageName}]);
    }
    paramPath = '' + '/' + 'requestId';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.requestId) {
      if (options.parse && options.requestId) {
        options.requestId = JSON.parse(options.requestId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.requestId}]);
    }
    paramPath = '' + '/' + 'statusCode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.statusCode) {
      if (options.parse && options.statusCode) {
        options.statusCode = JSON.parse(options.statusCode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.statusCode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine Create
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "availabilitySetName":"",
  "configurationSets":[
    {
      "adminPassword":"",
      "adminUserName":"",
      "computerName":"",
      "configurationSetType":"",
      "customData":"",
      "disableSshPasswordAuthentication":null,
      "domainJoin":{
        "credentials":{
          "domain":"",
          "password":"",
          "userName":""
        },
        "domainToJoin":"",
        "ldapMachineObjectOU":"",
        "provisioning":{
          "accountData":""
        }
      },
      "enableAutomaticUpdates":null,
      "hostName":"",
      "inputEndpoints":[
        {
          "enableDirectServerReturn":null,
          "endpointAcl":{
            "rules":[
              {
                "action":"",
                "description":"",
                "order":null,
                "remoteSubnet":""
              }
            ]
          },
          "idleTimeoutInMinutes":null,
          "loadBalancedEndpointSetName":"",
          "loadBalancerDistribution":"",
          "loadBalancerName":"",
          "loadBalancerProbe":{
            "intervalInSeconds":null,
            "path":"",
            "port":0,
            "protocol":0,
            "timeoutInSeconds":null
          },
          "localPort":null,
          "name":"",
          "port":null,
          "protocol":"",
          "virtualIPAddress":"",
          "virtualIPName":""
        }
      ],
      "iPForwarding":"",
      "networkInterfaces":[
        {
          "iPConfigurations":[
            {
              "staticVirtualNetworkIPAddress":"",
              "subnetName":""
            }
          ],
          "iPForwarding":"",
          "name":"",
          "networkSecurityGroup":""
        }
      ],
      "networkSecurityGroup":"",
      "publicIPs":[
        {
          "domainNameLabel":"",
          "idleTimeoutInMinutes":null,
          "name":""
        }
      ],
      "resetPasswordOnFirstLogon":null,
      "sshSettings":{
        "keyPairs":[
          {
            "fingerprint":"",
            "path":""
          }
        ],
        "publicKeys":[
          {
            "fingerprint":"",
            "path":""
          }
        ]
      },
      "staticVirtualNetworkIPAddress":"",
      "storedCertificateSettings":[
        {
          "storeName":"",
          "thumbprint":""
        }
      ],
      "subnetNames":[
        ""
      ],
      "timeZone":"",
      "userName":"",
      "userPassword":"",
      "windowsRemoteManagement":{
        "listeners":[
          {
            "certificateThumbprint":"",
            "listenerType":0
          }
        ]
      }
    }
  ],
  "dataVirtualHardDisks":[
    {
      "hostCaching":"",
      "iOType":"",
      "label":"",
      "logicalDiskSizeInGB":null,
      "logicalUnitNumber":null,
      "mediaLink":"",
      "name":"",
      "sourceMediaLink":""
    }
  ],
  "mediaLocation":"",
  "oSVirtualHardDisk":{
    "hostCaching":"",
    "iOType":"",
    "label":"",
    "mediaLink":"",
    "name":"",
    "operatingSystem":"",
    "remoteSourceImageLink":"",
    "resizedSizeInGB":null,
    "sourceImageName":""
  },
  "provisionGuestAgent":null,
  "resourceExtensionReferences":[
    {
      "forceUpdate":null,
      "name":"",
      "publisher":"",
      "referenceName":"",
      "resourceExtensionParameterValues":[
        {
          "key":"",
          "type":"",
          "value":""
        }
      ],
      "state":"",
      "version":""
    }
  ],
  "roleName":"",
  "roleSize":"",
  "vMImageInput":{
    "dataDiskConfigurations":[
      {
        "diskName":"",
        "resizedSizeInGB":null
      }
    ],
    "oSDiskConfiguration":{
      "resizedSizeInGB":null
    }
  },
  "vMImageName":""
}
*/
  var virtualMachineCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineCreate.command('create')
  .description($('create method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.create(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineCreatecreateParameters2 = virtualMachineCreate.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineCreatecreateGenerate2 = virtualMachineCreatecreateParameters2.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineCreatecreateGenerate2.command('create')
  .description($('Generate virtualMachineCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"availabilitySetName\":\"\",\"configurationSets\":[{\"adminPassword\":\"\",\"adminUserName\":\"\",\"computerName\":\"\",\"configurationSetType\":\"\",\"customData\":\"\",\"disableSshPasswordAuthentication\":null,\"domainJoin\":{\"credentials\":{\"domain\":\"\",\"password\":\"\",\"userName\":\"\"},\"domainToJoin\":\"\",\"ldapMachineObjectOU\":\"\",\"provisioning\":{\"accountData\":\"\"}},\"enableAutomaticUpdates\":null,\"hostName\":\"\",\"inputEndpoints\":[{\"enableDirectServerReturn\":null,\"endpointAcl\":{\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}]},\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":0,\"protocol\":0,\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}],\"iPForwarding\":\"\",\"networkInterfaces\":[{\"iPConfigurations\":[{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\"}],\"iPForwarding\":\"\",\"name\":\"\",\"networkSecurityGroup\":\"\"}],\"networkSecurityGroup\":\"\",\"publicIPs\":[{\"domainNameLabel\":\"\",\"idleTimeoutInMinutes\":null,\"name\":\"\"}],\"resetPasswordOnFirstLogon\":null,\"sshSettings\":{\"keyPairs\":[{\"fingerprint\":\"\",\"path\":\"\"}],\"publicKeys\":[{\"fingerprint\":\"\",\"path\":\"\"}]},\"staticVirtualNetworkIPAddress\":\"\",\"storedCertificateSettings\":[{\"storeName\":\"\",\"thumbprint\":\"\"}],\"subnetNames\":[\"\"],\"timeZone\":\"\",\"userName\":\"\",\"userPassword\":\"\",\"windowsRemoteManagement\":{\"listeners\":[{\"certificateThumbprint\":\"\",\"listenerType\":0}]}}],\"dataVirtualHardDisks\":[{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":null,\"logicalUnitNumber\":null,\"mediaLink\":\"\",\"name\":\"\",\"sourceMediaLink\":\"\"}],\"mediaLocation\":\"\",\"oSVirtualHardDisk\":{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"mediaLink\":\"\",\"name\":\"\",\"operatingSystem\":\"\",\"remoteSourceImageLink\":\"\",\"resizedSizeInGB\":null,\"sourceImageName\":\"\"},\"provisionGuestAgent\":null,\"resourceExtensionReferences\":[{\"forceUpdate\":null,\"name\":\"\",\"publisher\":\"\",\"referenceName\":\"\",\"resourceExtensionParameterValues\":[{\"key\":\"\",\"type\":\"\",\"value\":\"\"}],\"state\":\"\",\"version\":\"\"}],\"roleName\":\"\",\"roleSize\":\"\",\"vMImageInput\":{\"dataDiskConfigurations\":[{\"diskName\":\"\",\"resizedSizeInGB\":null}],\"oSDiskConfiguration\":{\"resizedSizeInGB\":null}},\"vMImageName\":\"\"}', _);
    var filePath = 'virtualMachineCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"availabilitySetName\":\"\",\r\n\"configurationSets\":[\r\n{\r\n\"adminPassword\":\"\",\r\n\"adminUserName\":\"\",\r\n\"computerName\":\"\",\r\n\"configurationSetType\":\"\",\r\n\"customData\":\"\",\r\n\"disableSshPasswordAuthentication\":null,\r\n\"domainJoin\":{\r\n\"credentials\":{\r\n\"domain\":\"\",\r\n\"password\":\"\",\r\n\"userName\":\"\"\r\n},\r\n\"domainToJoin\":\"\",\r\n\"ldapMachineObjectOU\":\"\",\r\n\"provisioning\":{\r\n\"accountData\":\"\"\r\n}\r\n},\r\n\"enableAutomaticUpdates\":null,\r\n\"hostName\":\"\",\r\n\"inputEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"endpointAcl\":{\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n]\r\n},\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":0,\r\n\"protocol\":0,\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"networkInterfaces\":[\r\n{\r\n\"iPConfigurations\":[\r\n{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"name\":\"\",\r\n\"networkSecurityGroup\":\"\"\r\n}\r\n],\r\n\"networkSecurityGroup\":\"\",\r\n\"publicIPs\":[\r\n{\r\n\"domainNameLabel\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"resetPasswordOnFirstLogon\":null,\r\n\"sshSettings\":{\r\n\"keyPairs\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n],\r\n\"publicKeys\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n]\r\n},\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"storedCertificateSettings\":[\r\n{\r\n\"storeName\":\"\",\r\n\"thumbprint\":\"\"\r\n}\r\n],\r\n\"subnetNames\":[\r\n\"\"\r\n],\r\n\"timeZone\":\"\",\r\n\"userName\":\"\",\r\n\"userPassword\":\"\",\r\n\"windowsRemoteManagement\":{\r\n\"listeners\":[\r\n{\r\n\"certificateThumbprint\":\"\",\r\n\"listenerType\":0\r\n}\r\n]\r\n}\r\n}\r\n],\r\n\"dataVirtualHardDisks\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":null,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"sourceMediaLink\":\"\"\r\n}\r\n],\r\n\"mediaLocation\":\"\",\r\n\"oSVirtualHardDisk\":{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystem\":\"\",\r\n\"remoteSourceImageLink\":\"\",\r\n\"resizedSizeInGB\":null,\r\n\"sourceImageName\":\"\"\r\n},\r\n\"provisionGuestAgent\":null,\r\n\"resourceExtensionReferences\":[\r\n{\r\n\"forceUpdate\":null,\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"referenceName\":\"\",\r\n\"resourceExtensionParameterValues\":[\r\n{\r\n\"key\":\"\",\r\n\"type\":\"\",\r\n\"value\":\"\"\r\n}\r\n],\r\n\"state\":\"\",\r\n\"version\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\",\r\n\"roleSize\":\"\",\r\n\"vMImageInput\":{\r\n\"dataDiskConfigurations\":[\r\n{\r\n\"diskName\":\"\",\r\n\"resizedSizeInGB\":null\r\n}\r\n],\r\n\"oSDiskConfiguration\":{\r\n\"resizedSizeInGB\":null\r\n}\r\n},\r\n\"vMImageName\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineCreatecreateParameters2.command('patch')
  .description($('Command to patch virtualMachineCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-create-parameters
  var catparametersVirtualMachineVirtualMachineCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineCreateParameters0 = catparametersVirtualMachineVirtualMachineCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineVirtualMachineCreateParameters0 = parametersVirtualMachineVirtualMachineCreateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineVirtualMachineCreateParameters0.command('virtual-machine-create-parameters')
  .description($('Set catparametersVirtualMachineVirtualMachineCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--availability-set-name <availabilitySetName>', $('Set the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Set the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Set the data-virtual-hard-disks value.'))
  .option('--media-location <mediaLocation>', $('Set the media-location value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Set the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Set the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Set the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .option('--role-size <roleSize>', $('Set the role-size value.'))
  .option('--vm-image-input <vmImageInput>', $('Set the vm-image-input value.'))
  .option('--vm-image-name <vmImageName>', $('Set the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'availabilitySetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = options.path + '/' + 'configurationSets';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = options.path + '/' + 'dataVirtualHardDisks';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = options.path + '/' + 'mediaLocation';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLocation) {
      if (options.parse && options.mediaLocation) {
        options.mediaLocation = JSON.parse(options.mediaLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLocation}]);
    }
    paramPath = options.path + '/' + 'oSVirtualHardDisk';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = options.path + '/' + 'provisionGuestAgent';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionReferences';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = options.path + '/' + 'roleSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    paramPath = options.path + '/' + 'vmImageInput';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageInput) {
      if (options.parse && options.vmImageInput) {
        options.vmImageInput = JSON.parse(options.vmImageInput);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageInput}]);
    }
    paramPath = options.path + '/' + 'vmImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageName) {
      if (options.parse && options.vmImageName) {
        options.vmImageName = JSON.parse(options.vmImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-create-parameters
  var catparametersVirtualMachineVirtualMachineCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineCreateParameters1 = catparametersVirtualMachineVirtualMachineCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineVirtualMachineCreateParameters1 = parametersVirtualMachineVirtualMachineCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineVirtualMachineCreateParameters1.command('virtual-machine-create-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-create-parameters
  var catparametersVirtualMachineVirtualMachineCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineCreateParameters2 = catparametersVirtualMachineVirtualMachineCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineVirtualMachineCreateParameters2 = parametersVirtualMachineVirtualMachineCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineVirtualMachineCreateParameters2.command('virtual-machine-create-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--availability-set-name <availabilitySetName>', $('Add the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Add the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Add the data-virtual-hard-disks value.'))
  .option('--media-location <mediaLocation>', $('Add the media-location value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Add the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Add the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Add the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .option('--role-size <roleSize>', $('Add the role-size value.'))
  .option('--vm-image-input <vmImageInput>', $('Add the vm-image-input value.'))
  .option('--vm-image-name <vmImageName>', $('Add the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'availabilitySetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = '' + '/' + 'configurationSets';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = '' + '/' + 'dataVirtualHardDisks';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = '' + '/' + 'mediaLocation';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLocation) {
      if (options.parse && options.mediaLocation) {
        options.mediaLocation = JSON.parse(options.mediaLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLocation}]);
    }
    paramPath = '' + '/' + 'oSVirtualHardDisk';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = '' + '/' + 'provisionGuestAgent';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = '' + '/' + 'resourceExtensionReferences';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = '' + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = '' + '/' + 'roleSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    paramPath = '' + '/' + 'vmImageInput';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageInput) {
      if (options.parse && options.vmImageInput) {
        options.vmImageInput = JSON.parse(options.vmImageInput);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageInput}]);
    }
    paramPath = '' + '/' + 'vmImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageName) {
      if (options.parse && options.vmImageName) {
        options.vmImageName = JSON.parse(options.vmImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set configuration-sets
  var catparametersVirtualMachineConfigurationSets0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineConfigurationSets0 = catparametersVirtualMachineConfigurationSets0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineConfigurationSets0 = parametersVirtualMachineConfigurationSets0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineConfigurationSets0.command('configuration-sets')
  .description($('Set catparametersVirtualMachineConfigurationSets0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Set the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Set the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Set the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Set the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Set the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Set the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Set the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Set the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Set the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Set the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Set the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .option('--user-password <userPassword>', $('Set the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Set the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'adminUserName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = options.path + '/' + 'computerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = options.path + '/' + 'configurationSetType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = options.path + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'disableSshPasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'domainJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'hostName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = options.path + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'networkInterfaces';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'publicIPs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = options.path + '/' + 'resetPasswordOnFirstLogon';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = options.path + '/' + 'sshSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'storedCertificateSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = options.path + '/' + 'subnetNames';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = options.path + '/' + 'userPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = options.path + '/' + 'windowsRemoteManagement';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove configuration-sets
  var catparametersVirtualMachineConfigurationSets1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineConfigurationSets1 = catparametersVirtualMachineConfigurationSets1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineConfigurationSets1 = parametersVirtualMachineConfigurationSets1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineConfigurationSets1.command('configuration-sets')
  .description($('Remove catparametersVirtualMachineConfigurationSets1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add configuration-sets
  var catparametersVirtualMachineConfigurationSets2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineConfigurationSets2 = catparametersVirtualMachineConfigurationSets2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineConfigurationSets2 = parametersVirtualMachineConfigurationSets2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineConfigurationSets2.command('configuration-sets')
  .description($('Remove catparametersVirtualMachineConfigurationSets2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--admin-password <adminPassword>', $('Add the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Add the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Add the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Add the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Add the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Add the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Add the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Add the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Add the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Add the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Add the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Add the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Add the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Add the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Add the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Add the time-zone value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .option('--user-password <userPassword>', $('Add the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Add the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminUserName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'computerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'configurationSetType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'disableSshPasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'domainJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'hostName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkInterfaces';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'resetPasswordOnFirstLogon';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'sshSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'storedCertificateSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetNames';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'windowsRemoteManagement';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set domain-join
  var catparametersVirtualMachineDomainJoin0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDomainJoin0 = catparametersVirtualMachineDomainJoin0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineDomainJoin0 = parametersVirtualMachineDomainJoin0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineDomainJoin0.command('domain-join')
  .description($('Set catparametersVirtualMachineDomainJoin0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--credentials <credentials>', $('Set the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Set the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Set the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Set the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var paramPath = options.path + '/' + 'credentials';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = options.path + '/' + 'domainToJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = options.path + '/' + 'ldapMachineObjectOU';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = options.path + '/' + 'provisioning';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove domain-join
  var catparametersVirtualMachineDomainJoin1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDomainJoin1 = catparametersVirtualMachineDomainJoin1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineDomainJoin1 = parametersVirtualMachineDomainJoin1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineDomainJoin1.command('domain-join')
  .description($('Remove catparametersVirtualMachineDomainJoin1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add domain-join
  var catparametersVirtualMachineDomainJoin2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDomainJoin2 = catparametersVirtualMachineDomainJoin2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineDomainJoin2 = parametersVirtualMachineDomainJoin2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineDomainJoin2.command('domain-join')
  .description($('Remove catparametersVirtualMachineDomainJoin2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--credentials <credentials>', $('Add the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Add the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Add the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Add the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'credentials';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'domainToJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'ldapMachineObjectOU';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'provisioning';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set credentials
  var catparametersVirtualMachineCredentials0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineCredentials0 = catparametersVirtualMachineCredentials0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineCredentials0 = parametersVirtualMachineCredentials0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineCredentials0.command('credentials')
  .description($('Set catparametersVirtualMachineCredentials0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain <domain>', $('Set the domain value.'))
  .option('--password <password>', $('Set the password value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var paramPath = options.path + '/' + 'domain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = options.path + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove credentials
  var catparametersVirtualMachineCredentials1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineCredentials1 = catparametersVirtualMachineCredentials1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineCredentials1 = parametersVirtualMachineCredentials1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineCredentials1.command('credentials')
  .description($('Remove catparametersVirtualMachineCredentials1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add credentials
  var catparametersVirtualMachineCredentials2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineCredentials2 = catparametersVirtualMachineCredentials2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineCredentials2 = parametersVirtualMachineCredentials2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineCredentials2.command('credentials')
  .description($('Remove catparametersVirtualMachineCredentials2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain <domain>', $('Add the domain value.'))
  .option('--password <password>', $('Add the password value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'domain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set provisioning
  var catparametersVirtualMachineProvisioning0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProvisioning0 = catparametersVirtualMachineProvisioning0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineProvisioning0 = parametersVirtualMachineProvisioning0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineProvisioning0.command('provisioning')
  .description($('Set catparametersVirtualMachineProvisioning0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--account-data <accountData>', $('Set the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var paramPath = options.path + '/' + 'accountData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove provisioning
  var catparametersVirtualMachineProvisioning1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProvisioning1 = catparametersVirtualMachineProvisioning1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineProvisioning1 = parametersVirtualMachineProvisioning1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineProvisioning1.command('provisioning')
  .description($('Remove catparametersVirtualMachineProvisioning1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add provisioning
  var catparametersVirtualMachineProvisioning2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProvisioning2 = catparametersVirtualMachineProvisioning2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineProvisioning2 = parametersVirtualMachineProvisioning2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineProvisioning2.command('provisioning')
  .description($('Remove catparametersVirtualMachineProvisioning2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--account-data <accountData>', $('Add the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + 'accountData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set input-endpoints
  var catparametersVirtualMachineInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineInputEndpoints0 = catparametersVirtualMachineInputEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineInputEndpoints0 = parametersVirtualMachineInputEndpoints0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineInputEndpoints0.command('input-endpoints')
  .description($('Set catparametersVirtualMachineInputEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Set the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'endpointAcl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove input-endpoints
  var catparametersVirtualMachineInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineInputEndpoints1 = catparametersVirtualMachineInputEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineInputEndpoints1 = parametersVirtualMachineInputEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineInputEndpoints1.command('input-endpoints')
  .description($('Remove catparametersVirtualMachineInputEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add input-endpoints
  var catparametersVirtualMachineInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineInputEndpoints2 = catparametersVirtualMachineInputEndpoints2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineInputEndpoints2 = parametersVirtualMachineInputEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineInputEndpoints2.command('input-endpoints')
  .description($('Remove catparametersVirtualMachineInputEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Add the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Add the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Add the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Add the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Add the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Add the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Add the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Add the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'endpointAcl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set endpoint-acl
  var catparametersVirtualMachineEndpointAcl0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineEndpointAcl0 = catparametersVirtualMachineEndpointAcl0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineEndpointAcl0 = parametersVirtualMachineEndpointAcl0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineEndpointAcl0.command('endpoint-acl')
  .description($('Set catparametersVirtualMachineEndpointAcl0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--rules <rules>', $('Set the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var paramPath = options.path + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove endpoint-acl
  var catparametersVirtualMachineEndpointAcl1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineEndpointAcl1 = catparametersVirtualMachineEndpointAcl1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineEndpointAcl1 = parametersVirtualMachineEndpointAcl1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineEndpointAcl1.command('endpoint-acl')
  .description($('Remove catparametersVirtualMachineEndpointAcl1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add endpoint-acl
  var catparametersVirtualMachineEndpointAcl2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineEndpointAcl2 = catparametersVirtualMachineEndpointAcl2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineEndpointAcl2 = parametersVirtualMachineEndpointAcl2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineEndpointAcl2.command('endpoint-acl')
  .description($('Remove catparametersVirtualMachineEndpointAcl2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--rules <rules>', $('Add the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set rules
  var catparametersVirtualMachineRules0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRules0 = catparametersVirtualMachineRules0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineRules0 = parametersVirtualMachineRules0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineRules0.command('rules')
  .description($('Set catparametersVirtualMachineRules0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove rules
  var catparametersVirtualMachineRules1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRules1 = catparametersVirtualMachineRules1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineRules1 = parametersVirtualMachineRules1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineRules1.command('rules')
  .description($('Remove catparametersVirtualMachineRules1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add rules
  var catparametersVirtualMachineRules2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRules2 = catparametersVirtualMachineRules2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineRules2 = parametersVirtualMachineRules2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineRules2.command('rules')
  .description($('Remove catparametersVirtualMachineRules2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--action <action>', $('Add the action value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--order <order>', $('Add the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Add the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancer-probe
  var catparametersVirtualMachineLoadBalancerProbe0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancerProbe0 = catparametersVirtualMachineLoadBalancerProbe0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineLoadBalancerProbe0 = parametersVirtualMachineLoadBalancerProbe0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineLoadBalancerProbe0.command('load-balancer-probe')
  .description($('Set catparametersVirtualMachineLoadBalancerProbe0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var paramPath = options.path + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancer-probe
  var catparametersVirtualMachineLoadBalancerProbe1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancerProbe1 = catparametersVirtualMachineLoadBalancerProbe1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineLoadBalancerProbe1 = parametersVirtualMachineLoadBalancerProbe1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineLoadBalancerProbe1.command('load-balancer-probe')
  .description($('Remove catparametersVirtualMachineLoadBalancerProbe1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancer-probe
  var catparametersVirtualMachineLoadBalancerProbe2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancerProbe2 = catparametersVirtualMachineLoadBalancerProbe2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineLoadBalancerProbe2 = parametersVirtualMachineLoadBalancerProbe2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineLoadBalancerProbe2.command('load-balancer-probe')
  .description($('Remove catparametersVirtualMachineLoadBalancerProbe2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Add the interval-in-seconds value.'))
  .option('--path <path>', $('Add the path value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Add the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove protocol
  var catparametersVirtualMachineProtocol1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProtocol1 = catparametersVirtualMachineProtocol1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineProtocol1 = parametersVirtualMachineProtocol1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineProtocol1.command('protocol')
  .description($('Remove catparametersVirtualMachineProtocol1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add protocol
  var catparametersVirtualMachineProtocol2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProtocol2 = catparametersVirtualMachineProtocol2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineProtocol2 = parametersVirtualMachineProtocol2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineProtocol2.command('protocol')
  .description($('Remove catparametersVirtualMachineProtocol2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set network-interfaces
  var catparametersVirtualMachineNetworkInterfaces0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineNetworkInterfaces0 = catparametersVirtualMachineNetworkInterfaces0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineNetworkInterfaces0 = parametersVirtualMachineNetworkInterfaces0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineNetworkInterfaces0.command('network-interfaces')
  .description($('Set catparametersVirtualMachineNetworkInterfaces0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove network-interfaces
  var catparametersVirtualMachineNetworkInterfaces1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineNetworkInterfaces1 = catparametersVirtualMachineNetworkInterfaces1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineNetworkInterfaces1 = parametersVirtualMachineNetworkInterfaces1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineNetworkInterfaces1.command('network-interfaces')
  .description($('Remove catparametersVirtualMachineNetworkInterfaces1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add network-interfaces
  var catparametersVirtualMachineNetworkInterfaces2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineNetworkInterfaces2 = catparametersVirtualMachineNetworkInterfaces2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineNetworkInterfaces2 = parametersVirtualMachineNetworkInterfaces2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineNetworkInterfaces2.command('network-interfaces')
  .description($('Remove catparametersVirtualMachineNetworkInterfaces2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ip-configurations
  var catparametersVirtualMachineIPConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineIPConfigurations0 = catparametersVirtualMachineIPConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineIPConfigurations0 = parametersVirtualMachineIPConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineIPConfigurations0.command('ip-configurations')
  .description($('Set catparametersVirtualMachineIPConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ip-configurations
  var catparametersVirtualMachineIPConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineIPConfigurations1 = catparametersVirtualMachineIPConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineIPConfigurations1 = parametersVirtualMachineIPConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineIPConfigurations1.command('ip-configurations')
  .description($('Remove catparametersVirtualMachineIPConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ip-configurations
  var catparametersVirtualMachineIPConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineIPConfigurations2 = catparametersVirtualMachineIPConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineIPConfigurations2 = parametersVirtualMachineIPConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineIPConfigurations2.command('ip-configurations')
  .description($('Remove catparametersVirtualMachineIPConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set public-ip
  var catparametersVirtualMachinePublicIPs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicIPs0 = catparametersVirtualMachinePublicIPs0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachinePublicIPs0 = parametersVirtualMachinePublicIPs0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachinePublicIPs0.command('public-ip')
  .description($('Set catparametersVirtualMachinePublicIPs0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain-name-label <domainNameLabel>', $('Set the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'domainNameLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove public-ip
  var catparametersVirtualMachinePublicIPs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicIPs1 = catparametersVirtualMachinePublicIPs1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachinePublicIPs1 = parametersVirtualMachinePublicIPs1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachinePublicIPs1.command('public-ip')
  .description($('Remove catparametersVirtualMachinePublicIPs1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add public-ip
  var catparametersVirtualMachinePublicIPs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicIPs2 = catparametersVirtualMachinePublicIPs2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachinePublicIPs2 = parametersVirtualMachinePublicIPs2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachinePublicIPs2.command('public-ip')
  .description($('Remove catparametersVirtualMachinePublicIPs2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain-name-label <domainNameLabel>', $('Add the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'domainNameLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ssh-settings
  var catparametersVirtualMachineSshSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSshSettings0 = catparametersVirtualMachineSshSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineSshSettings0 = parametersVirtualMachineSshSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineSshSettings0.command('ssh-settings')
  .description($('Set catparametersVirtualMachineSshSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--key-pairs <keyPairs>', $('Set the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Set the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var paramPath = options.path + '/' + 'keyPairs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = options.path + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ssh-settings
  var catparametersVirtualMachineSshSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSshSettings1 = catparametersVirtualMachineSshSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineSshSettings1 = parametersVirtualMachineSshSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineSshSettings1.command('ssh-settings')
  .description($('Remove catparametersVirtualMachineSshSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ssh-settings
  var catparametersVirtualMachineSshSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSshSettings2 = catparametersVirtualMachineSshSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineSshSettings2 = parametersVirtualMachineSshSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineSshSettings2.command('ssh-settings')
  .description($('Remove catparametersVirtualMachineSshSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--key-pairs <keyPairs>', $('Add the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Add the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'keyPairs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set key-pairs
  var catparametersVirtualMachineKeyPairs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineKeyPairs0 = catparametersVirtualMachineKeyPairs0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineKeyPairs0 = parametersVirtualMachineKeyPairs0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineKeyPairs0.command('key-pairs')
  .description($('Set catparametersVirtualMachineKeyPairs0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove key-pairs
  var catparametersVirtualMachineKeyPairs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineKeyPairs1 = catparametersVirtualMachineKeyPairs1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineKeyPairs1 = parametersVirtualMachineKeyPairs1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineKeyPairs1.command('key-pairs')
  .description($('Remove catparametersVirtualMachineKeyPairs1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add key-pairs
  var catparametersVirtualMachineKeyPairs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineKeyPairs2 = catparametersVirtualMachineKeyPairs2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineKeyPairs2 = parametersVirtualMachineKeyPairs2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineKeyPairs2.command('key-pairs')
  .description($('Remove catparametersVirtualMachineKeyPairs2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set public-keys
  var catparametersVirtualMachinePublicKeys0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicKeys0 = catparametersVirtualMachinePublicKeys0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachinePublicKeys0 = parametersVirtualMachinePublicKeys0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachinePublicKeys0.command('public-keys')
  .description($('Set catparametersVirtualMachinePublicKeys0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove public-keys
  var catparametersVirtualMachinePublicKeys1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicKeys1 = catparametersVirtualMachinePublicKeys1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachinePublicKeys1 = parametersVirtualMachinePublicKeys1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachinePublicKeys1.command('public-keys')
  .description($('Remove catparametersVirtualMachinePublicKeys1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add public-keys
  var catparametersVirtualMachinePublicKeys2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicKeys2 = catparametersVirtualMachinePublicKeys2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachinePublicKeys2 = parametersVirtualMachinePublicKeys2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachinePublicKeys2.command('public-keys')
  .description($('Remove catparametersVirtualMachinePublicKeys2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set stored-certificate-settings
  var catparametersVirtualMachineStoredCertificateSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineStoredCertificateSettings0 = catparametersVirtualMachineStoredCertificateSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineStoredCertificateSettings0 = parametersVirtualMachineStoredCertificateSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineStoredCertificateSettings0.command('stored-certificate-settings')
  .description($('Set catparametersVirtualMachineStoredCertificateSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove stored-certificate-settings
  var catparametersVirtualMachineStoredCertificateSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineStoredCertificateSettings1 = catparametersVirtualMachineStoredCertificateSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineStoredCertificateSettings1 = parametersVirtualMachineStoredCertificateSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineStoredCertificateSettings1.command('stored-certificate-settings')
  .description($('Remove catparametersVirtualMachineStoredCertificateSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add stored-certificate-settings
  var catparametersVirtualMachineStoredCertificateSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineStoredCertificateSettings2 = catparametersVirtualMachineStoredCertificateSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineStoredCertificateSettings2 = parametersVirtualMachineStoredCertificateSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineStoredCertificateSettings2.command('stored-certificate-settings')
  .description($('Remove catparametersVirtualMachineStoredCertificateSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set subnet-names
  var catparametersVirtualMachineSubnetNames0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSubnetNames0 = catparametersVirtualMachineSubnetNames0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineSubnetNames0 = parametersVirtualMachineSubnetNames0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineSubnetNames0.command('subnet-names')
  .description($('Set catparametersVirtualMachineSubnetNames0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove subnet-names
  var catparametersVirtualMachineSubnetNames1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSubnetNames1 = catparametersVirtualMachineSubnetNames1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineSubnetNames1 = parametersVirtualMachineSubnetNames1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineSubnetNames1.command('subnet-names')
  .description($('Remove catparametersVirtualMachineSubnetNames1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add subnet-names
  var catparametersVirtualMachineSubnetNames2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSubnetNames2 = catparametersVirtualMachineSubnetNames2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineSubnetNames2 = parametersVirtualMachineSubnetNames2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineSubnetNames2.command('subnet-names')
  .description($('Remove catparametersVirtualMachineSubnetNames2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set windows-remote-management
  var catparametersVirtualMachineWindowsRemoteManagement0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineWindowsRemoteManagement0 = catparametersVirtualMachineWindowsRemoteManagement0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineWindowsRemoteManagement0 = parametersVirtualMachineWindowsRemoteManagement0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineWindowsRemoteManagement0.command('windows-remote-management')
  .description($('Set catparametersVirtualMachineWindowsRemoteManagement0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--listeners <listeners>', $('Set the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var paramPath = options.path + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove windows-remote-management
  var catparametersVirtualMachineWindowsRemoteManagement1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineWindowsRemoteManagement1 = catparametersVirtualMachineWindowsRemoteManagement1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineWindowsRemoteManagement1 = parametersVirtualMachineWindowsRemoteManagement1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineWindowsRemoteManagement1.command('windows-remote-management')
  .description($('Remove catparametersVirtualMachineWindowsRemoteManagement1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add windows-remote-management
  var catparametersVirtualMachineWindowsRemoteManagement2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineWindowsRemoteManagement2 = catparametersVirtualMachineWindowsRemoteManagement2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineWindowsRemoteManagement2 = parametersVirtualMachineWindowsRemoteManagement2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineWindowsRemoteManagement2.command('windows-remote-management')
  .description($('Remove catparametersVirtualMachineWindowsRemoteManagement2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--listeners <listeners>', $('Add the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set listeners
  var catparametersVirtualMachineListeners0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListeners0 = catparametersVirtualMachineListeners0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineListeners0 = parametersVirtualMachineListeners0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineListeners0.command('listeners')
  .description($('Set catparametersVirtualMachineListeners0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Set the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Set the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'listenerType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove listeners
  var catparametersVirtualMachineListeners1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListeners1 = catparametersVirtualMachineListeners1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineListeners1 = parametersVirtualMachineListeners1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineListeners1.command('listeners')
  .description($('Remove catparametersVirtualMachineListeners1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add listeners
  var catparametersVirtualMachineListeners2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListeners2 = catparametersVirtualMachineListeners2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineListeners2 = parametersVirtualMachineListeners2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineListeners2.command('listeners')
  .description($('Remove catparametersVirtualMachineListeners2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Add the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Add the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'listenerType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove listener-type
  var catparametersVirtualMachineListenerType1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListenerType1 = catparametersVirtualMachineListenerType1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineListenerType1 = parametersVirtualMachineListenerType1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineListenerType1.command('listener-type')
  .description($('Remove catparametersVirtualMachineListenerType1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners-index <listeners-index>', $('Indexer: listeners-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add listener-type
  var catparametersVirtualMachineListenerType2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListenerType2 = catparametersVirtualMachineListenerType2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineListenerType2 = parametersVirtualMachineListenerType2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineListenerType2.command('listener-type')
  .description($('Remove catparametersVirtualMachineListenerType2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set data-virtual-hard-disks
  var catparametersVirtualMachineDataVirtualHardDisks0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDataVirtualHardDisks0 = catparametersVirtualMachineDataVirtualHardDisks0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineDataVirtualHardDisks0 = parametersVirtualMachineDataVirtualHardDisks0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineDataVirtualHardDisks0.command('data-virtual-hard-disks')
  .description($('Set catparametersVirtualMachineDataVirtualHardDisks0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Set the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sourceMediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove data-virtual-hard-disks
  var catparametersVirtualMachineDataVirtualHardDisks1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDataVirtualHardDisks1 = catparametersVirtualMachineDataVirtualHardDisks1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineDataVirtualHardDisks1 = parametersVirtualMachineDataVirtualHardDisks1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineDataVirtualHardDisks1.command('data-virtual-hard-disks')
  .description($('Remove catparametersVirtualMachineDataVirtualHardDisks1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add data-virtual-hard-disks
  var catparametersVirtualMachineDataVirtualHardDisks2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDataVirtualHardDisks2 = catparametersVirtualMachineDataVirtualHardDisks2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineDataVirtualHardDisks2 = parametersVirtualMachineDataVirtualHardDisks2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineDataVirtualHardDisks2.command('data-virtual-hard-disks')
  .description($('Remove catparametersVirtualMachineDataVirtualHardDisks2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Add the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Add the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'sourceMediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set os-virtual-hard-disk
  var catparametersVirtualMachineOSVirtualHardDisk0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineOSVirtualHardDisk0 = catparametersVirtualMachineOSVirtualHardDisk0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineOSVirtualHardDisk0 = parametersVirtualMachineOSVirtualHardDisk0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineOSVirtualHardDisk0.command('os-virtual-hard-disk')
  .description($('Set catparametersVirtualMachineOSVirtualHardDisk0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system <operatingSystem>', $('Set the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Set the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Set the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/oSVirtualHardDisk';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = options.path + '/' + 'remoteSourceImageLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = options.path + '/' + 'sourceImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove os-virtual-hard-disk
  var catparametersVirtualMachineOSVirtualHardDisk1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineOSVirtualHardDisk1 = catparametersVirtualMachineOSVirtualHardDisk1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineOSVirtualHardDisk1 = parametersVirtualMachineOSVirtualHardDisk1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineOSVirtualHardDisk1.command('os-virtual-hard-disk')
  .description($('Remove catparametersVirtualMachineOSVirtualHardDisk1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/oSVirtualHardDisk';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add os-virtual-hard-disk
  var catparametersVirtualMachineOSVirtualHardDisk2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineOSVirtualHardDisk2 = catparametersVirtualMachineOSVirtualHardDisk2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineOSVirtualHardDisk2 = parametersVirtualMachineOSVirtualHardDisk2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineOSVirtualHardDisk2.command('os-virtual-hard-disk')
  .description($('Remove catparametersVirtualMachineOSVirtualHardDisk2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system <operatingSystem>', $('Add the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Add the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Add the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/oSVirtualHardDisk' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/oSVirtualHardDisk' + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'operatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'remoteSourceImageLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'sourceImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set resource-extension-references
  var catparametersVirtualMachineResourceExtensionReferences0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionReferences0 = catparametersVirtualMachineResourceExtensionReferences0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineResourceExtensionReferences0 = parametersVirtualMachineResourceExtensionReferences0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineResourceExtensionReferences0.command('resource-extension-references')
  .description($('Set catparametersVirtualMachineResourceExtensionReferences0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--force-update <forceUpdate>', $('Set the force-update value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--reference-name <referenceName>', $('Set the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Set the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Set the state value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'forceUpdate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'referenceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionParameterValues';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = options.path + '/' + 'state';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove resource-extension-references
  var catparametersVirtualMachineResourceExtensionReferences1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionReferences1 = catparametersVirtualMachineResourceExtensionReferences1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineResourceExtensionReferences1 = parametersVirtualMachineResourceExtensionReferences1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineResourceExtensionReferences1.command('resource-extension-references')
  .description($('Remove catparametersVirtualMachineResourceExtensionReferences1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add resource-extension-references
  var catparametersVirtualMachineResourceExtensionReferences2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionReferences2 = catparametersVirtualMachineResourceExtensionReferences2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineResourceExtensionReferences2 = parametersVirtualMachineResourceExtensionReferences2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineResourceExtensionReferences2.command('resource-extension-references')
  .description($('Remove catparametersVirtualMachineResourceExtensionReferences2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--force-update <forceUpdate>', $('Add the force-update value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .option('--reference-name <referenceName>', $('Add the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Add the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Add the state value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'forceUpdate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'referenceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'resourceExtensionParameterValues';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'state';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set resource-extension-parameter-values
  var catparametersVirtualMachineResourceExtensionParameterValues0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionParameterValues0 = catparametersVirtualMachineResourceExtensionParameterValues0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineResourceExtensionParameterValues0 = parametersVirtualMachineResourceExtensionParameterValues0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineResourceExtensionParameterValues0.command('resource-extension-parameter-values')
  .description($('Set catparametersVirtualMachineResourceExtensionParameterValues0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--key <key>', $('Set the key value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--value <value>', $('Set the value value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'key';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'value';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove resource-extension-parameter-values
  var catparametersVirtualMachineResourceExtensionParameterValues1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionParameterValues1 = catparametersVirtualMachineResourceExtensionParameterValues1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineResourceExtensionParameterValues1 = parametersVirtualMachineResourceExtensionParameterValues1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineResourceExtensionParameterValues1.command('resource-extension-parameter-values')
  .description($('Remove catparametersVirtualMachineResourceExtensionParameterValues1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add resource-extension-parameter-values
  var catparametersVirtualMachineResourceExtensionParameterValues2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionParameterValues2 = catparametersVirtualMachineResourceExtensionParameterValues2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineResourceExtensionParameterValues2 = parametersVirtualMachineResourceExtensionParameterValues2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineResourceExtensionParameterValues2.command('resource-extension-parameter-values')
  .description($('Remove catparametersVirtualMachineResourceExtensionParameterValues2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--key <key>', $('Add the key value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--value <value>', $('Add the value value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'key';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'value';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set vm-image-input
  var catparametersVirtualMachineVMImageInput0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVMImageInput0 = catparametersVirtualMachineVMImageInput0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineVMImageInput0 = parametersVirtualMachineVMImageInput0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineVMImageInput0.command('vm-image-input')
  .description($('Set catparametersVirtualMachineVMImageInput0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Set the data-disk-configurations value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Set the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/vmImageInput';
    var paramPath = options.path + '/' + 'dataDiskConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = options.path + '/' + 'oSDiskConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove vm-image-input
  var catparametersVirtualMachineVMImageInput1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVMImageInput1 = catparametersVirtualMachineVMImageInput1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineVMImageInput1 = parametersVirtualMachineVMImageInput1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineVMImageInput1.command('vm-image-input')
  .description($('Remove catparametersVirtualMachineVMImageInput1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/vmImageInput';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add vm-image-input
  var catparametersVirtualMachineVMImageInput2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVMImageInput2 = catparametersVirtualMachineVMImageInput2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineVMImageInput2 = parametersVirtualMachineVMImageInput2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineVMImageInput2.command('vm-image-input')
  .description($('Remove catparametersVirtualMachineVMImageInput2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Add the data-disk-configurations value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Add the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/vmImageInput' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/vmImageInput' + '/' + 'dataDiskConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = '/vmImageInput' + '/' + 'oSDiskConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set data-disk-configurations
  var catparametersVirtualMachineDataDiskConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDataDiskConfigurations0 = catparametersVirtualMachineDataDiskConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineDataDiskConfigurations0 = parametersVirtualMachineDataDiskConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineDataDiskConfigurations0.command('data-disk-configurations')
  .description($('Set catparametersVirtualMachineDataDiskConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--disk-name <diskName>', $('Set the disk-name value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'diskName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.diskName) {
      if (options.parse && options.diskName) {
        options.diskName = JSON.parse(options.diskName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskName}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove data-disk-configurations
  var catparametersVirtualMachineDataDiskConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDataDiskConfigurations1 = catparametersVirtualMachineDataDiskConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineDataDiskConfigurations1 = parametersVirtualMachineDataDiskConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineDataDiskConfigurations1.command('data-disk-configurations')
  .description($('Remove catparametersVirtualMachineDataDiskConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add data-disk-configurations
  var catparametersVirtualMachineDataDiskConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDataDiskConfigurations2 = catparametersVirtualMachineDataDiskConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineDataDiskConfigurations2 = parametersVirtualMachineDataDiskConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineDataDiskConfigurations2.command('data-disk-configurations')
  .description($('Remove catparametersVirtualMachineDataDiskConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--disk-name <diskName>', $('Add the disk-name value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'diskName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.diskName) {
      if (options.parse && options.diskName) {
        options.diskName = JSON.parse(options.diskName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskName}]);
    }
    paramPath = '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set os-disk-configuration
  var catparametersVirtualMachineOSDiskConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineOSDiskConfiguration0 = catparametersVirtualMachineOSDiskConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineOSDiskConfiguration0 = parametersVirtualMachineOSDiskConfiguration0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineOSDiskConfiguration0.command('os-disk-configuration')
  .description($('Set catparametersVirtualMachineOSDiskConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/vmImageInput/oSDiskConfiguration';
    var paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove os-disk-configuration
  var catparametersVirtualMachineOSDiskConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineOSDiskConfiguration1 = catparametersVirtualMachineOSDiskConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineOSDiskConfiguration1 = parametersVirtualMachineOSDiskConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineOSDiskConfiguration1.command('os-disk-configuration')
  .description($('Remove catparametersVirtualMachineOSDiskConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/vmImageInput/oSDiskConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add os-disk-configuration
  var catparametersVirtualMachineOSDiskConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineOSDiskConfiguration2 = catparametersVirtualMachineOSDiskConfiguration2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineOSDiskConfiguration2 = parametersVirtualMachineOSDiskConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineOSDiskConfiguration2.command('os-disk-configuration')
  .description($('Remove catparametersVirtualMachineOSDiskConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/vmImageInput/oSDiskConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/vmImageInput/oSDiskConfiguration' + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine CreateDeployment
  --service-name
  --parameters
=============================================
{
  "deploymentSlot":0,
  "dnsSettings":{
    "dnsServers":[
      {
        "address":"",
        "name":""
      }
    ]
  },
  "label":"",
  "loadBalancers":[
    {
      "frontendIPConfiguration":{
        "staticVirtualNetworkIPAddress":"",
        "subnetName":"",
        "type":""
      },
      "name":""
    }
  ],
  "name":"",
  "reservedIPName":"",
  "roles":[
    {
      "availabilitySetName":"",
      "configurationSets":[
        {
          "adminPassword":"",
          "adminUserName":"",
          "computerName":"",
          "configurationSetType":"",
          "customData":"",
          "disableSshPasswordAuthentication":null,
          "domainJoin":{
            "credentials":{
              "domain":"",
              "password":"",
              "userName":""
            },
            "domainToJoin":"",
            "ldapMachineObjectOU":"",
            "provisioning":{
              "accountData":""
            }
          },
          "enableAutomaticUpdates":null,
          "hostName":"",
          "inputEndpoints":[
            {
              "enableDirectServerReturn":null,
              "endpointAcl":{
                "rules":[
                  {
                    "action":"",
                    "description":"",
                    "order":null,
                    "remoteSubnet":""
                  }
                ]
              },
              "idleTimeoutInMinutes":null,
              "loadBalancedEndpointSetName":"",
              "loadBalancerDistribution":"",
              "loadBalancerName":"",
              "loadBalancerProbe":{
                "intervalInSeconds":null,
                "path":"",
                "port":0,
                "protocol":0,
                "timeoutInSeconds":null
              },
              "localPort":null,
              "name":"",
              "port":null,
              "protocol":"",
              "virtualIPAddress":"",
              "virtualIPName":""
            }
          ],
          "iPForwarding":"",
          "networkInterfaces":[
            {
              "iPConfigurations":[
                {
                  "staticVirtualNetworkIPAddress":"",
                  "subnetName":""
                }
              ],
              "iPForwarding":"",
              "name":"",
              "networkSecurityGroup":""
            }
          ],
          "networkSecurityGroup":"",
          "publicIPs":[
            {
              "domainNameLabel":"",
              "idleTimeoutInMinutes":null,
              "name":""
            }
          ],
          "resetPasswordOnFirstLogon":null,
          "sshSettings":{
            "keyPairs":[
              {
                "fingerprint":"",
                "path":""
              }
            ],
            "publicKeys":[
              {
                "fingerprint":"",
                "path":""
              }
            ]
          },
          "staticVirtualNetworkIPAddress":"",
          "storedCertificateSettings":[
            {
              "storeName":"",
              "thumbprint":""
            }
          ],
          "subnetNames":[
            ""
          ],
          "timeZone":"",
          "userName":"",
          "userPassword":"",
          "windowsRemoteManagement":{
            "listeners":[
              {
                "certificateThumbprint":"",
                "listenerType":0
              }
            ]
          }
        }
      ],
      "dataVirtualHardDisks":[
        {
          "hostCaching":"",
          "iOType":"",
          "label":"",
          "logicalDiskSizeInGB":null,
          "logicalUnitNumber":null,
          "mediaLink":"",
          "name":"",
          "sourceMediaLink":""
        }
      ],
      "defaultWinRmCertificateThumbprint":"",
      "label":"",
      "mediaLocation":"",
      "oSVersion":"",
      "oSVirtualHardDisk":{
        "hostCaching":"",
        "iOType":"",
        "label":"",
        "mediaLink":"",
        "name":"",
        "operatingSystem":"",
        "remoteSourceImageLink":"",
        "resizedSizeInGB":null,
        "sourceImageName":""
      },
      "provisionGuestAgent":null,
      "resourceExtensionReferences":[
        {
          "forceUpdate":null,
          "name":"",
          "publisher":"",
          "referenceName":"",
          "resourceExtensionParameterValues":[
            {
              "key":"",
              "type":"",
              "value":""
            }
          ],
          "state":"",
          "version":""
        }
      ],
      "roleName":"",
      "roleSize":"",
      "roleType":"",
      "vMImageInput":{
        "dataDiskConfigurations":[
          {
            "diskName":"",
            "resizedSizeInGB":null
          }
        ],
        "oSDiskConfiguration":{
          "resizedSizeInGB":null
        }
      },
      "vMImageName":""
    }
  ],
  "virtualNetworkName":""
}
*/
  var virtualMachineCreateDeployment = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineCreateDeployment.command('create-deployment')
  .description($('create-deployment method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.createDeployment(options.serviceName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineCreateDeploymentcreateDeploymentParameters1 = virtualMachineCreateDeployment.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineCreateDeploymentcreateDeploymentGenerate1 = virtualMachineCreateDeploymentcreateDeploymentParameters1.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineCreateDeploymentcreateDeploymentGenerate1.command('create-deployment')
  .description($('Generate virtualMachineCreateDeployment parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"deploymentSlot\":0,\"dnsSettings\":{\"dnsServers\":[{\"address\":\"\",\"name\":\"\"}]},\"label\":\"\",\"loadBalancers\":[{\"frontendIPConfiguration\":{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\",\"type\":\"\"},\"name\":\"\"}],\"name\":\"\",\"reservedIPName\":\"\",\"roles\":[{\"availabilitySetName\":\"\",\"configurationSets\":[{\"adminPassword\":\"\",\"adminUserName\":\"\",\"computerName\":\"\",\"configurationSetType\":\"\",\"customData\":\"\",\"disableSshPasswordAuthentication\":null,\"domainJoin\":{\"credentials\":{\"domain\":\"\",\"password\":\"\",\"userName\":\"\"},\"domainToJoin\":\"\",\"ldapMachineObjectOU\":\"\",\"provisioning\":{\"accountData\":\"\"}},\"enableAutomaticUpdates\":null,\"hostName\":\"\",\"inputEndpoints\":[{\"enableDirectServerReturn\":null,\"endpointAcl\":{\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}]},\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":0,\"protocol\":0,\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}],\"iPForwarding\":\"\",\"networkInterfaces\":[{\"iPConfigurations\":[{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\"}],\"iPForwarding\":\"\",\"name\":\"\",\"networkSecurityGroup\":\"\"}],\"networkSecurityGroup\":\"\",\"publicIPs\":[{\"domainNameLabel\":\"\",\"idleTimeoutInMinutes\":null,\"name\":\"\"}],\"resetPasswordOnFirstLogon\":null,\"sshSettings\":{\"keyPairs\":[{\"fingerprint\":\"\",\"path\":\"\"}],\"publicKeys\":[{\"fingerprint\":\"\",\"path\":\"\"}]},\"staticVirtualNetworkIPAddress\":\"\",\"storedCertificateSettings\":[{\"storeName\":\"\",\"thumbprint\":\"\"}],\"subnetNames\":[\"\"],\"timeZone\":\"\",\"userName\":\"\",\"userPassword\":\"\",\"windowsRemoteManagement\":{\"listeners\":[{\"certificateThumbprint\":\"\",\"listenerType\":0}]}}],\"dataVirtualHardDisks\":[{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":null,\"logicalUnitNumber\":null,\"mediaLink\":\"\",\"name\":\"\",\"sourceMediaLink\":\"\"}],\"defaultWinRmCertificateThumbprint\":\"\",\"label\":\"\",\"mediaLocation\":\"\",\"oSVersion\":\"\",\"oSVirtualHardDisk\":{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"mediaLink\":\"\",\"name\":\"\",\"operatingSystem\":\"\",\"remoteSourceImageLink\":\"\",\"resizedSizeInGB\":null,\"sourceImageName\":\"\"},\"provisionGuestAgent\":null,\"resourceExtensionReferences\":[{\"forceUpdate\":null,\"name\":\"\",\"publisher\":\"\",\"referenceName\":\"\",\"resourceExtensionParameterValues\":[{\"key\":\"\",\"type\":\"\",\"value\":\"\"}],\"state\":\"\",\"version\":\"\"}],\"roleName\":\"\",\"roleSize\":\"\",\"roleType\":\"\",\"vMImageInput\":{\"dataDiskConfigurations\":[{\"diskName\":\"\",\"resizedSizeInGB\":null}],\"oSDiskConfiguration\":{\"resizedSizeInGB\":null}},\"vMImageName\":\"\"}],\"virtualNetworkName\":\"\"}', _);
    var filePath = 'virtualMachineCreateDeployment_createDeployment.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"deploymentSlot\":0,\r\n\"dnsSettings\":{\r\n\"dnsServers\":[\r\n{\r\n\"address\":\"\",\r\n\"name\":\"\"\r\n}\r\n]\r\n},\r\n\"label\":\"\",\r\n\"loadBalancers\":[\r\n{\r\n\"frontendIPConfiguration\":{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\",\r\n\"type\":\"\"\r\n},\r\n\"name\":\"\"\r\n}\r\n],\r\n\"name\":\"\",\r\n\"reservedIPName\":\"\",\r\n\"roles\":[\r\n{\r\n\"availabilitySetName\":\"\",\r\n\"configurationSets\":[\r\n{\r\n\"adminPassword\":\"\",\r\n\"adminUserName\":\"\",\r\n\"computerName\":\"\",\r\n\"configurationSetType\":\"\",\r\n\"customData\":\"\",\r\n\"disableSshPasswordAuthentication\":null,\r\n\"domainJoin\":{\r\n\"credentials\":{\r\n\"domain\":\"\",\r\n\"password\":\"\",\r\n\"userName\":\"\"\r\n},\r\n\"domainToJoin\":\"\",\r\n\"ldapMachineObjectOU\":\"\",\r\n\"provisioning\":{\r\n\"accountData\":\"\"\r\n}\r\n},\r\n\"enableAutomaticUpdates\":null,\r\n\"hostName\":\"\",\r\n\"inputEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"endpointAcl\":{\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n]\r\n},\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":0,\r\n\"protocol\":0,\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"networkInterfaces\":[\r\n{\r\n\"iPConfigurations\":[\r\n{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"name\":\"\",\r\n\"networkSecurityGroup\":\"\"\r\n}\r\n],\r\n\"networkSecurityGroup\":\"\",\r\n\"publicIPs\":[\r\n{\r\n\"domainNameLabel\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"resetPasswordOnFirstLogon\":null,\r\n\"sshSettings\":{\r\n\"keyPairs\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n],\r\n\"publicKeys\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n]\r\n},\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"storedCertificateSettings\":[\r\n{\r\n\"storeName\":\"\",\r\n\"thumbprint\":\"\"\r\n}\r\n],\r\n\"subnetNames\":[\r\n\"\"\r\n],\r\n\"timeZone\":\"\",\r\n\"userName\":\"\",\r\n\"userPassword\":\"\",\r\n\"windowsRemoteManagement\":{\r\n\"listeners\":[\r\n{\r\n\"certificateThumbprint\":\"\",\r\n\"listenerType\":0\r\n}\r\n]\r\n}\r\n}\r\n],\r\n\"dataVirtualHardDisks\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":null,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"sourceMediaLink\":\"\"\r\n}\r\n],\r\n\"defaultWinRmCertificateThumbprint\":\"\",\r\n\"label\":\"\",\r\n\"mediaLocation\":\"\",\r\n\"oSVersion\":\"\",\r\n\"oSVirtualHardDisk\":{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystem\":\"\",\r\n\"remoteSourceImageLink\":\"\",\r\n\"resizedSizeInGB\":null,\r\n\"sourceImageName\":\"\"\r\n},\r\n\"provisionGuestAgent\":null,\r\n\"resourceExtensionReferences\":[\r\n{\r\n\"forceUpdate\":null,\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"referenceName\":\"\",\r\n\"resourceExtensionParameterValues\":[\r\n{\r\n\"key\":\"\",\r\n\"type\":\"\",\r\n\"value\":\"\"\r\n}\r\n],\r\n\"state\":\"\",\r\n\"version\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\",\r\n\"roleSize\":\"\",\r\n\"roleType\":\"\",\r\n\"vMImageInput\":{\r\n\"dataDiskConfigurations\":[\r\n{\r\n\"diskName\":\"\",\r\n\"resizedSizeInGB\":null\r\n}\r\n],\r\n\"oSDiskConfiguration\":{\r\n\"resizedSizeInGB\":null\r\n}\r\n},\r\n\"vMImageName\":\"\"\r\n}\r\n],\r\n\"virtualNetworkName\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineCreateDeploymentcreateDeploymentParameters1.command('patch')
  .description($('Command to patch virtualMachineCreateDeployment parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-create-deployment-parameters
  var catparametersVirtualMachineVirtualMachineCreateDeploymentParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineCreateDeploymentParameters0 = catparametersVirtualMachineVirtualMachineCreateDeploymentParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineVirtualMachineCreateDeploymentParameters0 = parametersVirtualMachineVirtualMachineCreateDeploymentParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineVirtualMachineCreateDeploymentParameters0.command('virtual-machine-create-deployment-parameters')
  .description($('Set catparametersVirtualMachineVirtualMachineCreateDeploymentParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--deployment-slot <deploymentSlot>', $('Set the deployment-slot value.'))
  .option('--dns-settings <dnsSettings>', $('Set the dns-settings value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--load-balancers <loadBalancers>', $('Set the load-balancers value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--reserved-ip-name <reservedIPName>', $('Set the reserved-ip-name value.'))
  .option('--roles <roles>', $('Set the roles value.'))
  .option('--virtual-network-name <virtualNetworkName>', $('Set the virtual-network-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'deploymentSlot';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.deploymentSlot) {
      if (options.parse && options.deploymentSlot) {
        options.deploymentSlot = JSON.parse(options.deploymentSlot);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.deploymentSlot}]);
    }
    paramPath = options.path + '/' + 'dnsSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dnsSettings) {
      if (options.parse && options.dnsSettings) {
        options.dnsSettings = JSON.parse(options.dnsSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsSettings}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'loadBalancers';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancers) {
      if (options.parse && options.loadBalancers) {
        options.loadBalancers = JSON.parse(options.loadBalancers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancers}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'reservedIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.reservedIPName) {
      if (options.parse && options.reservedIPName) {
        options.reservedIPName = JSON.parse(options.reservedIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reservedIPName}]);
    }
    paramPath = options.path + '/' + 'roles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    paramPath = options.path + '/' + 'virtualNetworkName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualNetworkName) {
      if (options.parse && options.virtualNetworkName) {
        options.virtualNetworkName = JSON.parse(options.virtualNetworkName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-create-deployment-parameters
  var catparametersVirtualMachineVirtualMachineCreateDeploymentParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineCreateDeploymentParameters1 = catparametersVirtualMachineVirtualMachineCreateDeploymentParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineVirtualMachineCreateDeploymentParameters1 = parametersVirtualMachineVirtualMachineCreateDeploymentParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineVirtualMachineCreateDeploymentParameters1.command('virtual-machine-create-deployment-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineCreateDeploymentParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-create-deployment-parameters
  var catparametersVirtualMachineVirtualMachineCreateDeploymentParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineCreateDeploymentParameters2 = catparametersVirtualMachineVirtualMachineCreateDeploymentParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineVirtualMachineCreateDeploymentParameters2 = parametersVirtualMachineVirtualMachineCreateDeploymentParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineVirtualMachineCreateDeploymentParameters2.command('virtual-machine-create-deployment-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineCreateDeploymentParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--deployment-slot <deploymentSlot>', $('Add the deployment-slot value.'))
  .option('--dns-settings <dnsSettings>', $('Add the dns-settings value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--load-balancers <loadBalancers>', $('Add the load-balancers value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--reserved-ip-name <reservedIPName>', $('Add the reserved-ip-name value.'))
  .option('--roles <roles>', $('Add the roles value.'))
  .option('--virtual-network-name <virtualNetworkName>', $('Add the virtual-network-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'deploymentSlot';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.deploymentSlot) {
      if (options.parse && options.deploymentSlot) {
        options.deploymentSlot = JSON.parse(options.deploymentSlot);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.deploymentSlot}]);
    }
    paramPath = '' + '/' + 'dnsSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dnsSettings) {
      if (options.parse && options.dnsSettings) {
        options.dnsSettings = JSON.parse(options.dnsSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsSettings}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'loadBalancers';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancers) {
      if (options.parse && options.loadBalancers) {
        options.loadBalancers = JSON.parse(options.loadBalancers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancers}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'reservedIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.reservedIPName) {
      if (options.parse && options.reservedIPName) {
        options.reservedIPName = JSON.parse(options.reservedIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reservedIPName}]);
    }
    paramPath = '' + '/' + 'roles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    paramPath = '' + '/' + 'virtualNetworkName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualNetworkName) {
      if (options.parse && options.virtualNetworkName) {
        options.virtualNetworkName = JSON.parse(options.virtualNetworkName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove deployment-slot
  var catparametersVirtualMachineDeploymentSlot1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDeploymentSlot1 = catparametersVirtualMachineDeploymentSlot1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineDeploymentSlot1 = parametersVirtualMachineDeploymentSlot1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineDeploymentSlot1.command('deployment-slot')
  .description($('Remove catparametersVirtualMachineDeploymentSlot1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/deploymentSlot';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add deployment-slot
  var catparametersVirtualMachineDeploymentSlot2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDeploymentSlot2 = catparametersVirtualMachineDeploymentSlot2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineDeploymentSlot2 = parametersVirtualMachineDeploymentSlot2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineDeploymentSlot2.command('deployment-slot')
  .description($('Remove catparametersVirtualMachineDeploymentSlot2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/deploymentSlot' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set dns-settings
  var catparametersVirtualMachineDnsSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDnsSettings0 = catparametersVirtualMachineDnsSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineDnsSettings0 = parametersVirtualMachineDnsSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineDnsSettings0.command('dns-settings')
  .description($('Set catparametersVirtualMachineDnsSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--dns-servers <dnsServers>', $('Set the dns-servers value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dnsSettings';
    var paramPath = options.path + '/' + 'dnsServers';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dnsServers) {
      if (options.parse && options.dnsServers) {
        options.dnsServers = JSON.parse(options.dnsServers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsServers}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove dns-settings
  var catparametersVirtualMachineDnsSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDnsSettings1 = catparametersVirtualMachineDnsSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineDnsSettings1 = parametersVirtualMachineDnsSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineDnsSettings1.command('dns-settings')
  .description($('Remove catparametersVirtualMachineDnsSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dnsSettings';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add dns-settings
  var catparametersVirtualMachineDnsSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDnsSettings2 = catparametersVirtualMachineDnsSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineDnsSettings2 = parametersVirtualMachineDnsSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineDnsSettings2.command('dns-settings')
  .description($('Remove catparametersVirtualMachineDnsSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--dns-servers <dnsServers>', $('Add the dns-servers value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dnsSettings' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dnsSettings' + '/' + 'dnsServers';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dnsServers) {
      if (options.parse && options.dnsServers) {
        options.dnsServers = JSON.parse(options.dnsServers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsServers}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set dns-servers
  var catparametersVirtualMachineDnsServers0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDnsServers0 = catparametersVirtualMachineDnsServers0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineDnsServers0 = parametersVirtualMachineDnsServers0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineDnsServers0.command('dns-servers')
  .description($('Set catparametersVirtualMachineDnsServers0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--address <address>', $('Set the address value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'address';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.address) {
      if (options.parse && options.address) {
        options.address = JSON.parse(options.address);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.address}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove dns-servers
  var catparametersVirtualMachineDnsServers1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDnsServers1 = catparametersVirtualMachineDnsServers1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineDnsServers1 = parametersVirtualMachineDnsServers1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineDnsServers1.command('dns-servers')
  .description($('Remove catparametersVirtualMachineDnsServers1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add dns-servers
  var catparametersVirtualMachineDnsServers2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDnsServers2 = catparametersVirtualMachineDnsServers2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineDnsServers2 = parametersVirtualMachineDnsServers2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineDnsServers2.command('dns-servers')
  .description($('Remove catparametersVirtualMachineDnsServers2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--address <address>', $('Add the address value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '') + '/' + 'address';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.address) {
      if (options.parse && options.address) {
        options.address = JSON.parse(options.address);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.address}]);
    }
    paramPath = '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancers
  var catparametersVirtualMachineLoadBalancers0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancers0 = catparametersVirtualMachineLoadBalancers0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineLoadBalancers0 = parametersVirtualMachineLoadBalancers0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineLoadBalancers0.command('load-balancers')
  .description($('Set catparametersVirtualMachineLoadBalancers0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancers' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'frontendIPConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancers
  var catparametersVirtualMachineLoadBalancers1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancers1 = catparametersVirtualMachineLoadBalancers1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineLoadBalancers1 = parametersVirtualMachineLoadBalancers1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineLoadBalancers1.command('load-balancers')
  .description($('Remove catparametersVirtualMachineLoadBalancers1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancers' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancers
  var catparametersVirtualMachineLoadBalancers2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancers2 = catparametersVirtualMachineLoadBalancers2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineLoadBalancers2 = parametersVirtualMachineLoadBalancers2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineLoadBalancers2.command('load-balancers')
  .description($('Remove catparametersVirtualMachineLoadBalancers2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Add the frontend-ip-configuration value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancers' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/loadBalancers' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendIPConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = '/loadBalancers' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set frontend-ip-configuration
  var catparametersVirtualMachineFrontendIPConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineFrontendIPConfiguration0 = catparametersVirtualMachineFrontendIPConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineFrontendIPConfiguration0 = parametersVirtualMachineFrontendIPConfiguration0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineFrontendIPConfiguration0.command('frontend-ip-configuration')
  .description($('Set catparametersVirtualMachineFrontendIPConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--load-balancers-index <load-balancers-index>', $('Indexer: load-balancers-index.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .option('--type <type>', $('Set the type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration';
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove frontend-ip-configuration
  var catparametersVirtualMachineFrontendIPConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineFrontendIPConfiguration1 = catparametersVirtualMachineFrontendIPConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineFrontendIPConfiguration1 = parametersVirtualMachineFrontendIPConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineFrontendIPConfiguration1.command('frontend-ip-configuration')
  .description($('Remove catparametersVirtualMachineFrontendIPConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balancers-index <load-balancers-index>', $('Indexer: load-balancers-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add frontend-ip-configuration
  var catparametersVirtualMachineFrontendIPConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineFrontendIPConfiguration2 = catparametersVirtualMachineFrontendIPConfiguration2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineFrontendIPConfiguration2 = parametersVirtualMachineFrontendIPConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineFrontendIPConfiguration2.command('frontend-ip-configuration')
  .description($('Remove catparametersVirtualMachineFrontendIPConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .option('--type <type>', $('Add the type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration' + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration' + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    paramPath = '/loadBalancers/' + options.loadBalancersIndex + '/frontendIPConfiguration' + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set roles
  var catparametersVirtualMachineRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRoles0 = catparametersVirtualMachineRoles0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineRoles0 = parametersVirtualMachineRoles0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineRoles0.command('roles')
  .description($('Set catparametersVirtualMachineRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--availability-set-name <availabilitySetName>', $('Set the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Set the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Set the data-virtual-hard-disks value.'))
  .option('--default-win-rm-certificate-thumbprint <defaultWinRmCertificateThumbprint>', $('Set the default-win-rm-certificate-thumbprint value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-location <mediaLocation>', $('Set the media-location value.'))
  .option('--os-version <oSVersion>', $('Set the os-version value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Set the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Set the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Set the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .option('--role-size <roleSize>', $('Set the role-size value.'))
  .option('--role-type <roleType>', $('Set the role-type value.'))
  .option('--vm-image-input <vmImageInput>', $('Set the vm-image-input value.'))
  .option('--vm-image-name <vmImageName>', $('Set the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'availabilitySetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = options.path + '/' + 'configurationSets';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = options.path + '/' + 'dataVirtualHardDisks';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = options.path + '/' + 'defaultWinRmCertificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.defaultWinRmCertificateThumbprint) {
      if (options.parse && options.defaultWinRmCertificateThumbprint) {
        options.defaultWinRmCertificateThumbprint = JSON.parse(options.defaultWinRmCertificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.defaultWinRmCertificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLocation';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLocation) {
      if (options.parse && options.mediaLocation) {
        options.mediaLocation = JSON.parse(options.mediaLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLocation}]);
    }
    paramPath = options.path + '/' + 'oSVersion';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSVersion) {
      if (options.parse && options.oSVersion) {
        options.oSVersion = JSON.parse(options.oSVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVersion}]);
    }
    paramPath = options.path + '/' + 'oSVirtualHardDisk';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = options.path + '/' + 'provisionGuestAgent';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionReferences';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = options.path + '/' + 'roleSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    paramPath = options.path + '/' + 'roleType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleType) {
      if (options.parse && options.roleType) {
        options.roleType = JSON.parse(options.roleType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleType}]);
    }
    paramPath = options.path + '/' + 'vmImageInput';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageInput) {
      if (options.parse && options.vmImageInput) {
        options.vmImageInput = JSON.parse(options.vmImageInput);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageInput}]);
    }
    paramPath = options.path + '/' + 'vmImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageName) {
      if (options.parse && options.vmImageName) {
        options.vmImageName = JSON.parse(options.vmImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove roles
  var catparametersVirtualMachineRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRoles1 = catparametersVirtualMachineRoles1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineRoles1 = parametersVirtualMachineRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineRoles1.command('roles')
  .description($('Remove catparametersVirtualMachineRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add roles
  var catparametersVirtualMachineRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRoles2 = catparametersVirtualMachineRoles2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineRoles2 = parametersVirtualMachineRoles2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineRoles2.command('roles')
  .description($('Remove catparametersVirtualMachineRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--availability-set-name <availabilitySetName>', $('Add the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Add the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Add the data-virtual-hard-disks value.'))
  .option('--default-win-rm-certificate-thumbprint <defaultWinRmCertificateThumbprint>', $('Add the default-win-rm-certificate-thumbprint value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-location <mediaLocation>', $('Add the media-location value.'))
  .option('--os-version <oSVersion>', $('Add the os-version value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Add the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Add the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Add the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .option('--role-size <roleSize>', $('Add the role-size value.'))
  .option('--role-type <roleType>', $('Add the role-type value.'))
  .option('--vm-image-input <vmImageInput>', $('Add the vm-image-input value.'))
  .option('--vm-image-name <vmImageName>', $('Add the vm-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'availabilitySetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'configurationSets';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'dataVirtualHardDisks';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'defaultWinRmCertificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.defaultWinRmCertificateThumbprint) {
      if (options.parse && options.defaultWinRmCertificateThumbprint) {
        options.defaultWinRmCertificateThumbprint = JSON.parse(options.defaultWinRmCertificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.defaultWinRmCertificateThumbprint}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'mediaLocation';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLocation) {
      if (options.parse && options.mediaLocation) {
        options.mediaLocation = JSON.parse(options.mediaLocation);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLocation}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'oSVersion';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSVersion) {
      if (options.parse && options.oSVersion) {
        options.oSVersion = JSON.parse(options.oSVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVersion}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'oSVirtualHardDisk';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'provisionGuestAgent';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'resourceExtensionReferences';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'roleType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleType) {
      if (options.parse && options.roleType) {
        options.roleType = JSON.parse(options.roleType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleType}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'vmImageInput';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageInput) {
      if (options.parse && options.vmImageInput) {
        options.vmImageInput = JSON.parse(options.vmImageInput);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageInput}]);
    }
    paramPath = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + 'vmImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vmImageName) {
      if (options.parse && options.vmImageName) {
        options.vmImageName = JSON.parse(options.vmImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vmImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set configuration-sets
  var catparametersVirtualMachineConfigurationSets0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineConfigurationSets0 = catparametersVirtualMachineConfigurationSets0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineConfigurationSets0 = parametersVirtualMachineConfigurationSets0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineConfigurationSets0.command('configuration-sets')
  .description($('Set catparametersVirtualMachineConfigurationSets0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Set the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Set the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Set the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Set the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Set the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Set the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Set the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Set the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Set the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Set the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Set the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .option('--user-password <userPassword>', $('Set the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Set the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'adminUserName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = options.path + '/' + 'computerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = options.path + '/' + 'configurationSetType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = options.path + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'disableSshPasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'domainJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'hostName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = options.path + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'networkInterfaces';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'publicIPs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = options.path + '/' + 'resetPasswordOnFirstLogon';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = options.path + '/' + 'sshSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'storedCertificateSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = options.path + '/' + 'subnetNames';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = options.path + '/' + 'userPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = options.path + '/' + 'windowsRemoteManagement';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove configuration-sets
  var catparametersVirtualMachineConfigurationSets1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineConfigurationSets1 = catparametersVirtualMachineConfigurationSets1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineConfigurationSets1 = parametersVirtualMachineConfigurationSets1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineConfigurationSets1.command('configuration-sets')
  .description($('Remove catparametersVirtualMachineConfigurationSets1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add configuration-sets
  var catparametersVirtualMachineConfigurationSets2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineConfigurationSets2 = catparametersVirtualMachineConfigurationSets2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineConfigurationSets2 = parametersVirtualMachineConfigurationSets2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineConfigurationSets2.command('configuration-sets')
  .description($('Remove catparametersVirtualMachineConfigurationSets2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--admin-password <adminPassword>', $('Add the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Add the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Add the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Add the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Add the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Add the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Add the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Add the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Add the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Add the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Add the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Add the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Add the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Add the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Add the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Add the time-zone value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .option('--user-password <userPassword>', $('Add the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Add the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminUserName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'computerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'configurationSetType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'disableSshPasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'domainJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'hostName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkInterfaces';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'resetPasswordOnFirstLogon';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'sshSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'storedCertificateSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetNames';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'windowsRemoteManagement';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set domain-join
  var catparametersVirtualMachineDomainJoin0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDomainJoin0 = catparametersVirtualMachineDomainJoin0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineDomainJoin0 = parametersVirtualMachineDomainJoin0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineDomainJoin0.command('domain-join')
  .description($('Set catparametersVirtualMachineDomainJoin0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--credentials <credentials>', $('Set the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Set the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Set the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Set the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var paramPath = options.path + '/' + 'credentials';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = options.path + '/' + 'domainToJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = options.path + '/' + 'ldapMachineObjectOU';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = options.path + '/' + 'provisioning';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove domain-join
  var catparametersVirtualMachineDomainJoin1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDomainJoin1 = catparametersVirtualMachineDomainJoin1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineDomainJoin1 = parametersVirtualMachineDomainJoin1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineDomainJoin1.command('domain-join')
  .description($('Remove catparametersVirtualMachineDomainJoin1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add domain-join
  var catparametersVirtualMachineDomainJoin2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDomainJoin2 = catparametersVirtualMachineDomainJoin2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineDomainJoin2 = parametersVirtualMachineDomainJoin2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineDomainJoin2.command('domain-join')
  .description($('Remove catparametersVirtualMachineDomainJoin2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--credentials <credentials>', $('Add the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Add the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Add the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Add the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'credentials';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'domainToJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'ldapMachineObjectOU';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'provisioning';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set credentials
  var catparametersVirtualMachineCredentials0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineCredentials0 = catparametersVirtualMachineCredentials0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineCredentials0 = parametersVirtualMachineCredentials0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineCredentials0.command('credentials')
  .description($('Set catparametersVirtualMachineCredentials0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--domain <domain>', $('Set the domain value.'))
  .option('--password <password>', $('Set the password value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var paramPath = options.path + '/' + 'domain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = options.path + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove credentials
  var catparametersVirtualMachineCredentials1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineCredentials1 = catparametersVirtualMachineCredentials1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineCredentials1 = parametersVirtualMachineCredentials1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineCredentials1.command('credentials')
  .description($('Remove catparametersVirtualMachineCredentials1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add credentials
  var catparametersVirtualMachineCredentials2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineCredentials2 = catparametersVirtualMachineCredentials2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineCredentials2 = parametersVirtualMachineCredentials2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineCredentials2.command('credentials')
  .description($('Remove catparametersVirtualMachineCredentials2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain <domain>', $('Add the domain value.'))
  .option('--password <password>', $('Add the password value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'domain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set provisioning
  var catparametersVirtualMachineProvisioning0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProvisioning0 = catparametersVirtualMachineProvisioning0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineProvisioning0 = parametersVirtualMachineProvisioning0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineProvisioning0.command('provisioning')
  .description($('Set catparametersVirtualMachineProvisioning0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--account-data <accountData>', $('Set the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var paramPath = options.path + '/' + 'accountData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove provisioning
  var catparametersVirtualMachineProvisioning1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProvisioning1 = catparametersVirtualMachineProvisioning1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineProvisioning1 = parametersVirtualMachineProvisioning1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineProvisioning1.command('provisioning')
  .description($('Remove catparametersVirtualMachineProvisioning1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add provisioning
  var catparametersVirtualMachineProvisioning2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProvisioning2 = catparametersVirtualMachineProvisioning2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineProvisioning2 = parametersVirtualMachineProvisioning2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineProvisioning2.command('provisioning')
  .description($('Remove catparametersVirtualMachineProvisioning2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--account-data <accountData>', $('Add the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + 'accountData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set input-endpoints
  var catparametersVirtualMachineInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineInputEndpoints0 = catparametersVirtualMachineInputEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineInputEndpoints0 = parametersVirtualMachineInputEndpoints0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineInputEndpoints0.command('input-endpoints')
  .description($('Set catparametersVirtualMachineInputEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Set the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'endpointAcl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove input-endpoints
  var catparametersVirtualMachineInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineInputEndpoints1 = catparametersVirtualMachineInputEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineInputEndpoints1 = parametersVirtualMachineInputEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineInputEndpoints1.command('input-endpoints')
  .description($('Remove catparametersVirtualMachineInputEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add input-endpoints
  var catparametersVirtualMachineInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineInputEndpoints2 = catparametersVirtualMachineInputEndpoints2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineInputEndpoints2 = parametersVirtualMachineInputEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineInputEndpoints2.command('input-endpoints')
  .description($('Remove catparametersVirtualMachineInputEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Add the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Add the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Add the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Add the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Add the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Add the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Add the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Add the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'endpointAcl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set endpoint-acl
  var catparametersVirtualMachineEndpointAcl0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineEndpointAcl0 = catparametersVirtualMachineEndpointAcl0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineEndpointAcl0 = parametersVirtualMachineEndpointAcl0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineEndpointAcl0.command('endpoint-acl')
  .description($('Set catparametersVirtualMachineEndpointAcl0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--rules <rules>', $('Set the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var paramPath = options.path + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove endpoint-acl
  var catparametersVirtualMachineEndpointAcl1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineEndpointAcl1 = catparametersVirtualMachineEndpointAcl1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineEndpointAcl1 = parametersVirtualMachineEndpointAcl1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineEndpointAcl1.command('endpoint-acl')
  .description($('Remove catparametersVirtualMachineEndpointAcl1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add endpoint-acl
  var catparametersVirtualMachineEndpointAcl2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineEndpointAcl2 = catparametersVirtualMachineEndpointAcl2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineEndpointAcl2 = parametersVirtualMachineEndpointAcl2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineEndpointAcl2.command('endpoint-acl')
  .description($('Remove catparametersVirtualMachineEndpointAcl2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--rules <rules>', $('Add the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set rules
  var catparametersVirtualMachineRules0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRules0 = catparametersVirtualMachineRules0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineRules0 = parametersVirtualMachineRules0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineRules0.command('rules')
  .description($('Set catparametersVirtualMachineRules0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove rules
  var catparametersVirtualMachineRules1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRules1 = catparametersVirtualMachineRules1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineRules1 = parametersVirtualMachineRules1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineRules1.command('rules')
  .description($('Remove catparametersVirtualMachineRules1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add rules
  var catparametersVirtualMachineRules2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRules2 = catparametersVirtualMachineRules2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineRules2 = parametersVirtualMachineRules2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineRules2.command('rules')
  .description($('Remove catparametersVirtualMachineRules2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--action <action>', $('Add the action value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--order <order>', $('Add the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Add the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancer-probe
  var catparametersVirtualMachineLoadBalancerProbe0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancerProbe0 = catparametersVirtualMachineLoadBalancerProbe0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineLoadBalancerProbe0 = parametersVirtualMachineLoadBalancerProbe0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineLoadBalancerProbe0.command('load-balancer-probe')
  .description($('Set catparametersVirtualMachineLoadBalancerProbe0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var paramPath = options.path + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancer-probe
  var catparametersVirtualMachineLoadBalancerProbe1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancerProbe1 = catparametersVirtualMachineLoadBalancerProbe1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineLoadBalancerProbe1 = parametersVirtualMachineLoadBalancerProbe1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineLoadBalancerProbe1.command('load-balancer-probe')
  .description($('Remove catparametersVirtualMachineLoadBalancerProbe1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancer-probe
  var catparametersVirtualMachineLoadBalancerProbe2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancerProbe2 = catparametersVirtualMachineLoadBalancerProbe2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineLoadBalancerProbe2 = parametersVirtualMachineLoadBalancerProbe2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineLoadBalancerProbe2.command('load-balancer-probe')
  .description($('Remove catparametersVirtualMachineLoadBalancerProbe2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Add the interval-in-seconds value.'))
  .option('--path <path>', $('Add the path value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Add the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove protocol
  var catparametersVirtualMachineProtocol1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProtocol1 = catparametersVirtualMachineProtocol1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineProtocol1 = parametersVirtualMachineProtocol1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineProtocol1.command('protocol')
  .description($('Remove catparametersVirtualMachineProtocol1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add protocol
  var catparametersVirtualMachineProtocol2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProtocol2 = catparametersVirtualMachineProtocol2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineProtocol2 = parametersVirtualMachineProtocol2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineProtocol2.command('protocol')
  .description($('Remove catparametersVirtualMachineProtocol2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set network-interfaces
  var catparametersVirtualMachineNetworkInterfaces0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineNetworkInterfaces0 = catparametersVirtualMachineNetworkInterfaces0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineNetworkInterfaces0 = parametersVirtualMachineNetworkInterfaces0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineNetworkInterfaces0.command('network-interfaces')
  .description($('Set catparametersVirtualMachineNetworkInterfaces0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove network-interfaces
  var catparametersVirtualMachineNetworkInterfaces1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineNetworkInterfaces1 = catparametersVirtualMachineNetworkInterfaces1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineNetworkInterfaces1 = parametersVirtualMachineNetworkInterfaces1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineNetworkInterfaces1.command('network-interfaces')
  .description($('Remove catparametersVirtualMachineNetworkInterfaces1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add network-interfaces
  var catparametersVirtualMachineNetworkInterfaces2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineNetworkInterfaces2 = catparametersVirtualMachineNetworkInterfaces2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineNetworkInterfaces2 = parametersVirtualMachineNetworkInterfaces2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineNetworkInterfaces2.command('network-interfaces')
  .description($('Remove catparametersVirtualMachineNetworkInterfaces2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ip-configurations
  var catparametersVirtualMachineIPConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineIPConfigurations0 = catparametersVirtualMachineIPConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineIPConfigurations0 = parametersVirtualMachineIPConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineIPConfigurations0.command('ip-configurations')
  .description($('Set catparametersVirtualMachineIPConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ip-configurations
  var catparametersVirtualMachineIPConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineIPConfigurations1 = catparametersVirtualMachineIPConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineIPConfigurations1 = parametersVirtualMachineIPConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineIPConfigurations1.command('ip-configurations')
  .description($('Remove catparametersVirtualMachineIPConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ip-configurations
  var catparametersVirtualMachineIPConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineIPConfigurations2 = catparametersVirtualMachineIPConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineIPConfigurations2 = parametersVirtualMachineIPConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineIPConfigurations2.command('ip-configurations')
  .description($('Remove catparametersVirtualMachineIPConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set public-ip
  var catparametersVirtualMachinePublicIPs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicIPs0 = catparametersVirtualMachinePublicIPs0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachinePublicIPs0 = parametersVirtualMachinePublicIPs0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachinePublicIPs0.command('public-ip')
  .description($('Set catparametersVirtualMachinePublicIPs0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--domain-name-label <domainNameLabel>', $('Set the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'domainNameLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove public-ip
  var catparametersVirtualMachinePublicIPs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicIPs1 = catparametersVirtualMachinePublicIPs1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachinePublicIPs1 = parametersVirtualMachinePublicIPs1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachinePublicIPs1.command('public-ip')
  .description($('Remove catparametersVirtualMachinePublicIPs1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add public-ip
  var catparametersVirtualMachinePublicIPs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicIPs2 = catparametersVirtualMachinePublicIPs2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachinePublicIPs2 = parametersVirtualMachinePublicIPs2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachinePublicIPs2.command('public-ip')
  .description($('Remove catparametersVirtualMachinePublicIPs2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain-name-label <domainNameLabel>', $('Add the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'domainNameLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ssh-settings
  var catparametersVirtualMachineSshSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSshSettings0 = catparametersVirtualMachineSshSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineSshSettings0 = parametersVirtualMachineSshSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineSshSettings0.command('ssh-settings')
  .description($('Set catparametersVirtualMachineSshSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--key-pairs <keyPairs>', $('Set the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Set the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var paramPath = options.path + '/' + 'keyPairs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = options.path + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ssh-settings
  var catparametersVirtualMachineSshSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSshSettings1 = catparametersVirtualMachineSshSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineSshSettings1 = parametersVirtualMachineSshSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineSshSettings1.command('ssh-settings')
  .description($('Remove catparametersVirtualMachineSshSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ssh-settings
  var catparametersVirtualMachineSshSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSshSettings2 = catparametersVirtualMachineSshSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineSshSettings2 = parametersVirtualMachineSshSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineSshSettings2.command('ssh-settings')
  .description($('Remove catparametersVirtualMachineSshSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--key-pairs <keyPairs>', $('Add the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Add the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'keyPairs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set key-pairs
  var catparametersVirtualMachineKeyPairs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineKeyPairs0 = catparametersVirtualMachineKeyPairs0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineKeyPairs0 = parametersVirtualMachineKeyPairs0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineKeyPairs0.command('key-pairs')
  .description($('Set catparametersVirtualMachineKeyPairs0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove key-pairs
  var catparametersVirtualMachineKeyPairs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineKeyPairs1 = catparametersVirtualMachineKeyPairs1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineKeyPairs1 = parametersVirtualMachineKeyPairs1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineKeyPairs1.command('key-pairs')
  .description($('Remove catparametersVirtualMachineKeyPairs1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add key-pairs
  var catparametersVirtualMachineKeyPairs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineKeyPairs2 = catparametersVirtualMachineKeyPairs2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineKeyPairs2 = parametersVirtualMachineKeyPairs2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineKeyPairs2.command('key-pairs')
  .description($('Remove catparametersVirtualMachineKeyPairs2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set public-keys
  var catparametersVirtualMachinePublicKeys0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicKeys0 = catparametersVirtualMachinePublicKeys0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachinePublicKeys0 = parametersVirtualMachinePublicKeys0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachinePublicKeys0.command('public-keys')
  .description($('Set catparametersVirtualMachinePublicKeys0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove public-keys
  var catparametersVirtualMachinePublicKeys1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicKeys1 = catparametersVirtualMachinePublicKeys1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachinePublicKeys1 = parametersVirtualMachinePublicKeys1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachinePublicKeys1.command('public-keys')
  .description($('Remove catparametersVirtualMachinePublicKeys1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add public-keys
  var catparametersVirtualMachinePublicKeys2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicKeys2 = catparametersVirtualMachinePublicKeys2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachinePublicKeys2 = parametersVirtualMachinePublicKeys2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachinePublicKeys2.command('public-keys')
  .description($('Remove catparametersVirtualMachinePublicKeys2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set stored-certificate-settings
  var catparametersVirtualMachineStoredCertificateSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineStoredCertificateSettings0 = catparametersVirtualMachineStoredCertificateSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineStoredCertificateSettings0 = parametersVirtualMachineStoredCertificateSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineStoredCertificateSettings0.command('stored-certificate-settings')
  .description($('Set catparametersVirtualMachineStoredCertificateSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove stored-certificate-settings
  var catparametersVirtualMachineStoredCertificateSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineStoredCertificateSettings1 = catparametersVirtualMachineStoredCertificateSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineStoredCertificateSettings1 = parametersVirtualMachineStoredCertificateSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineStoredCertificateSettings1.command('stored-certificate-settings')
  .description($('Remove catparametersVirtualMachineStoredCertificateSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add stored-certificate-settings
  var catparametersVirtualMachineStoredCertificateSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineStoredCertificateSettings2 = catparametersVirtualMachineStoredCertificateSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineStoredCertificateSettings2 = parametersVirtualMachineStoredCertificateSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineStoredCertificateSettings2.command('stored-certificate-settings')
  .description($('Remove catparametersVirtualMachineStoredCertificateSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set subnet-names
  var catparametersVirtualMachineSubnetNames0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSubnetNames0 = catparametersVirtualMachineSubnetNames0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineSubnetNames0 = parametersVirtualMachineSubnetNames0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineSubnetNames0.command('subnet-names')
  .description($('Set catparametersVirtualMachineSubnetNames0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove subnet-names
  var catparametersVirtualMachineSubnetNames1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSubnetNames1 = catparametersVirtualMachineSubnetNames1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineSubnetNames1 = parametersVirtualMachineSubnetNames1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineSubnetNames1.command('subnet-names')
  .description($('Remove catparametersVirtualMachineSubnetNames1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add subnet-names
  var catparametersVirtualMachineSubnetNames2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSubnetNames2 = catparametersVirtualMachineSubnetNames2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineSubnetNames2 = parametersVirtualMachineSubnetNames2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineSubnetNames2.command('subnet-names')
  .description($('Remove catparametersVirtualMachineSubnetNames2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set windows-remote-management
  var catparametersVirtualMachineWindowsRemoteManagement0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineWindowsRemoteManagement0 = catparametersVirtualMachineWindowsRemoteManagement0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineWindowsRemoteManagement0 = parametersVirtualMachineWindowsRemoteManagement0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineWindowsRemoteManagement0.command('windows-remote-management')
  .description($('Set catparametersVirtualMachineWindowsRemoteManagement0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--listeners <listeners>', $('Set the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var paramPath = options.path + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove windows-remote-management
  var catparametersVirtualMachineWindowsRemoteManagement1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineWindowsRemoteManagement1 = catparametersVirtualMachineWindowsRemoteManagement1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineWindowsRemoteManagement1 = parametersVirtualMachineWindowsRemoteManagement1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineWindowsRemoteManagement1.command('windows-remote-management')
  .description($('Remove catparametersVirtualMachineWindowsRemoteManagement1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add windows-remote-management
  var catparametersVirtualMachineWindowsRemoteManagement2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineWindowsRemoteManagement2 = catparametersVirtualMachineWindowsRemoteManagement2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineWindowsRemoteManagement2 = parametersVirtualMachineWindowsRemoteManagement2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineWindowsRemoteManagement2.command('windows-remote-management')
  .description($('Remove catparametersVirtualMachineWindowsRemoteManagement2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--listeners <listeners>', $('Add the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set listeners
  var catparametersVirtualMachineListeners0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListeners0 = catparametersVirtualMachineListeners0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineListeners0 = parametersVirtualMachineListeners0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineListeners0.command('listeners')
  .description($('Set catparametersVirtualMachineListeners0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Set the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Set the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'listenerType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove listeners
  var catparametersVirtualMachineListeners1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListeners1 = catparametersVirtualMachineListeners1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineListeners1 = parametersVirtualMachineListeners1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineListeners1.command('listeners')
  .description($('Remove catparametersVirtualMachineListeners1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add listeners
  var catparametersVirtualMachineListeners2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListeners2 = catparametersVirtualMachineListeners2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineListeners2 = parametersVirtualMachineListeners2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineListeners2.command('listeners')
  .description($('Remove catparametersVirtualMachineListeners2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Add the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Add the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'listenerType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove listener-type
  var catparametersVirtualMachineListenerType1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListenerType1 = catparametersVirtualMachineListenerType1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineListenerType1 = parametersVirtualMachineListenerType1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineListenerType1.command('listener-type')
  .description($('Remove catparametersVirtualMachineListenerType1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners-index <listeners-index>', $('Indexer: listeners-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add listener-type
  var catparametersVirtualMachineListenerType2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListenerType2 = catparametersVirtualMachineListenerType2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineListenerType2 = parametersVirtualMachineListenerType2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineListenerType2.command('listener-type')
  .description($('Remove catparametersVirtualMachineListenerType2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set data-virtual-hard-disks
  var catparametersVirtualMachineDataVirtualHardDisks0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDataVirtualHardDisks0 = catparametersVirtualMachineDataVirtualHardDisks0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineDataVirtualHardDisks0 = parametersVirtualMachineDataVirtualHardDisks0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineDataVirtualHardDisks0.command('data-virtual-hard-disks')
  .description($('Set catparametersVirtualMachineDataVirtualHardDisks0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Set the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sourceMediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove data-virtual-hard-disks
  var catparametersVirtualMachineDataVirtualHardDisks1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDataVirtualHardDisks1 = catparametersVirtualMachineDataVirtualHardDisks1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineDataVirtualHardDisks1 = parametersVirtualMachineDataVirtualHardDisks1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineDataVirtualHardDisks1.command('data-virtual-hard-disks')
  .description($('Remove catparametersVirtualMachineDataVirtualHardDisks1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add data-virtual-hard-disks
  var catparametersVirtualMachineDataVirtualHardDisks2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDataVirtualHardDisks2 = catparametersVirtualMachineDataVirtualHardDisks2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineDataVirtualHardDisks2 = parametersVirtualMachineDataVirtualHardDisks2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineDataVirtualHardDisks2.command('data-virtual-hard-disks')
  .description($('Remove catparametersVirtualMachineDataVirtualHardDisks2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Add the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Add the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'sourceMediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set os-virtual-hard-disk
  var catparametersVirtualMachineOSVirtualHardDisk0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineOSVirtualHardDisk0 = catparametersVirtualMachineOSVirtualHardDisk0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineOSVirtualHardDisk0 = parametersVirtualMachineOSVirtualHardDisk0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineOSVirtualHardDisk0.command('os-virtual-hard-disk')
  .description($('Set catparametersVirtualMachineOSVirtualHardDisk0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system <operatingSystem>', $('Set the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Set the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Set the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = options.path + '/' + 'remoteSourceImageLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = options.path + '/' + 'sourceImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove os-virtual-hard-disk
  var catparametersVirtualMachineOSVirtualHardDisk1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineOSVirtualHardDisk1 = catparametersVirtualMachineOSVirtualHardDisk1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineOSVirtualHardDisk1 = parametersVirtualMachineOSVirtualHardDisk1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineOSVirtualHardDisk1.command('os-virtual-hard-disk')
  .description($('Remove catparametersVirtualMachineOSVirtualHardDisk1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add os-virtual-hard-disk
  var catparametersVirtualMachineOSVirtualHardDisk2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineOSVirtualHardDisk2 = catparametersVirtualMachineOSVirtualHardDisk2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineOSVirtualHardDisk2 = parametersVirtualMachineOSVirtualHardDisk2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineOSVirtualHardDisk2.command('os-virtual-hard-disk')
  .description($('Remove catparametersVirtualMachineOSVirtualHardDisk2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system <operatingSystem>', $('Add the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Add the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Add the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'operatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'remoteSourceImageLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/oSVirtualHardDisk' + '/' + 'sourceImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set resource-extension-references
  var catparametersVirtualMachineResourceExtensionReferences0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionReferences0 = catparametersVirtualMachineResourceExtensionReferences0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineResourceExtensionReferences0 = parametersVirtualMachineResourceExtensionReferences0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineResourceExtensionReferences0.command('resource-extension-references')
  .description($('Set catparametersVirtualMachineResourceExtensionReferences0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--force-update <forceUpdate>', $('Set the force-update value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--reference-name <referenceName>', $('Set the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Set the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Set the state value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'forceUpdate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'referenceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionParameterValues';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = options.path + '/' + 'state';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove resource-extension-references
  var catparametersVirtualMachineResourceExtensionReferences1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionReferences1 = catparametersVirtualMachineResourceExtensionReferences1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineResourceExtensionReferences1 = parametersVirtualMachineResourceExtensionReferences1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineResourceExtensionReferences1.command('resource-extension-references')
  .description($('Remove catparametersVirtualMachineResourceExtensionReferences1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add resource-extension-references
  var catparametersVirtualMachineResourceExtensionReferences2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionReferences2 = catparametersVirtualMachineResourceExtensionReferences2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineResourceExtensionReferences2 = parametersVirtualMachineResourceExtensionReferences2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineResourceExtensionReferences2.command('resource-extension-references')
  .description($('Remove catparametersVirtualMachineResourceExtensionReferences2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--force-update <forceUpdate>', $('Add the force-update value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .option('--reference-name <referenceName>', $('Add the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Add the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Add the state value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'forceUpdate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'referenceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'resourceExtensionParameterValues';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'state';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set resource-extension-parameter-values
  var catparametersVirtualMachineResourceExtensionParameterValues0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionParameterValues0 = catparametersVirtualMachineResourceExtensionParameterValues0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineResourceExtensionParameterValues0 = parametersVirtualMachineResourceExtensionParameterValues0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineResourceExtensionParameterValues0.command('resource-extension-parameter-values')
  .description($('Set catparametersVirtualMachineResourceExtensionParameterValues0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--key <key>', $('Set the key value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--value <value>', $('Set the value value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'key';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'value';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove resource-extension-parameter-values
  var catparametersVirtualMachineResourceExtensionParameterValues1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionParameterValues1 = catparametersVirtualMachineResourceExtensionParameterValues1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineResourceExtensionParameterValues1 = parametersVirtualMachineResourceExtensionParameterValues1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineResourceExtensionParameterValues1.command('resource-extension-parameter-values')
  .description($('Remove catparametersVirtualMachineResourceExtensionParameterValues1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add resource-extension-parameter-values
  var catparametersVirtualMachineResourceExtensionParameterValues2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionParameterValues2 = catparametersVirtualMachineResourceExtensionParameterValues2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineResourceExtensionParameterValues2 = parametersVirtualMachineResourceExtensionParameterValues2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineResourceExtensionParameterValues2.command('resource-extension-parameter-values')
  .description($('Remove catparametersVirtualMachineResourceExtensionParameterValues2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--key <key>', $('Add the key value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--value <value>', $('Add the value value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'key';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'value';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set vm-image-input
  var catparametersVirtualMachineVMImageInput0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVMImageInput0 = catparametersVirtualMachineVMImageInput0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineVMImageInput0 = parametersVirtualMachineVMImageInput0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineVMImageInput0.command('vm-image-input')
  .description($('Set catparametersVirtualMachineVMImageInput0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Set the data-disk-configurations value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Set the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput';
    var paramPath = options.path + '/' + 'dataDiskConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = options.path + '/' + 'oSDiskConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove vm-image-input
  var catparametersVirtualMachineVMImageInput1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVMImageInput1 = catparametersVirtualMachineVMImageInput1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineVMImageInput1 = parametersVirtualMachineVMImageInput1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineVMImageInput1.command('vm-image-input')
  .description($('Remove catparametersVirtualMachineVMImageInput1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add vm-image-input
  var catparametersVirtualMachineVMImageInput2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVMImageInput2 = catparametersVirtualMachineVMImageInput2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineVMImageInput2 = parametersVirtualMachineVMImageInput2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineVMImageInput2.command('vm-image-input')
  .description($('Remove catparametersVirtualMachineVMImageInput2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Add the data-disk-configurations value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Add the os-disk-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/vmImageInput' + '/' + 'dataDiskConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/vmImageInput' + '/' + 'oSDiskConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set data-disk-configurations
  var catparametersVirtualMachineDataDiskConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDataDiskConfigurations0 = catparametersVirtualMachineDataDiskConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineDataDiskConfigurations0 = parametersVirtualMachineDataDiskConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineDataDiskConfigurations0.command('data-disk-configurations')
  .description($('Set catparametersVirtualMachineDataDiskConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--disk-name <diskName>', $('Set the disk-name value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'diskName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.diskName) {
      if (options.parse && options.diskName) {
        options.diskName = JSON.parse(options.diskName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskName}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove data-disk-configurations
  var catparametersVirtualMachineDataDiskConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDataDiskConfigurations1 = catparametersVirtualMachineDataDiskConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineDataDiskConfigurations1 = parametersVirtualMachineDataDiskConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineDataDiskConfigurations1.command('data-disk-configurations')
  .description($('Remove catparametersVirtualMachineDataDiskConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add data-disk-configurations
  var catparametersVirtualMachineDataDiskConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDataDiskConfigurations2 = catparametersVirtualMachineDataDiskConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineDataDiskConfigurations2 = parametersVirtualMachineDataDiskConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineDataDiskConfigurations2.command('data-disk-configurations')
  .description($('Remove catparametersVirtualMachineDataDiskConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--disk-name <diskName>', $('Add the disk-name value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'diskName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.diskName) {
      if (options.parse && options.diskName) {
        options.diskName = JSON.parse(options.diskName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskName}]);
    }
    paramPath = '/roles/' + options.rolesIndex + '/vmImageInput/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set os-disk-configuration
  var catparametersVirtualMachineOSDiskConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineOSDiskConfiguration0 = catparametersVirtualMachineOSDiskConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineOSDiskConfiguration0 = parametersVirtualMachineOSDiskConfiguration0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineOSDiskConfiguration0.command('os-disk-configuration')
  .description($('Set catparametersVirtualMachineOSDiskConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput/oSDiskConfiguration';
    var paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove os-disk-configuration
  var catparametersVirtualMachineOSDiskConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineOSDiskConfiguration1 = catparametersVirtualMachineOSDiskConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineOSDiskConfiguration1 = parametersVirtualMachineOSDiskConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineOSDiskConfiguration1.command('os-disk-configuration')
  .description($('Remove catparametersVirtualMachineOSDiskConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--roles-index <roles-index>', $('Indexer: roles-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput/oSDiskConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add os-disk-configuration
  var catparametersVirtualMachineOSDiskConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineOSDiskConfiguration2 = catparametersVirtualMachineOSDiskConfiguration2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineOSDiskConfiguration2 = parametersVirtualMachineOSDiskConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineOSDiskConfiguration2.command('os-disk-configuration')
  .description($('Remove catparametersVirtualMachineOSDiskConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles/' + options.rolesIndex + '/vmImageInput/oSDiskConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/roles/' + options.rolesIndex + '/vmImageInput/oSDiskConfiguration' + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine Delete
  --service-name
  --deployment-name
  --virtual-machine-name
  --delete-from-storage
*/
  var virtualMachineDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineDelete.command('delete')
  .description($('delete method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(fileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.info('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.deleteMethod(options.serviceName, options.deploymentName, options.virtualMachineName, options.deleteFromStorage, _);
    cli.output.json(result);
  });
/*
  VirtualMachine Get
  --service-name
  --deployment-name
  --virtual-machine-name
*/
  var virtualMachineGet = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineGet.command('get')
  .description($('get method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.get(options.serviceName, options.deploymentName, options.virtualMachineName, _);
    cli.output.json(result);
  });
/*
  VirtualMachine GetRemoteDesktopFile
  --service-name
  --deployment-name
  --virtual-machine-name
*/
  var virtualMachineGetRemoteDesktopFile = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineGetRemoteDesktopFile.command('get-remote-desktop-file')
  .description($('get-remote-desktop-file method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.getRemoteDesktopFile(options.serviceName, options.deploymentName, options.virtualMachineName, _);
    cli.output.json(result);
  });
/*
  VirtualMachine Restart
  --service-name
  --deployment-name
  --virtual-machine-name
*/
  var virtualMachineRestart = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineRestart.command('restart')
  .description($('restart method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.restart(options.serviceName, options.deploymentName, options.virtualMachineName, _);
    cli.output.json(result);
  });
/*
  VirtualMachine Shutdown
  --service-name
  --deployment-name
  --virtual-machine-name
  --parameters
=============================================
{
  "postShutdownAction":0
}
*/
  var virtualMachineShutdown = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineShutdown.command('shutdown')
  .description($('shutdown method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.shutdown(options.serviceName, options.deploymentName, options.virtualMachineName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineShutdownshutdownParameters3 = virtualMachineShutdown.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineShutdownshutdownGenerate3 = virtualMachineShutdownshutdownParameters3.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineShutdownshutdownGenerate3.command('shutdown')
  .description($('Generate virtualMachineShutdown parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"postShutdownAction\":0}', _);
    var filePath = 'virtualMachineShutdown_shutdown.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"postShutdownAction\":0\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineShutdownshutdownParameters3.command('patch')
  .description($('Command to patch virtualMachineShutdown parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-shutdown-parameters
  var catparametersVirtualMachineVirtualMachineShutdownParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineShutdownParameters0 = catparametersVirtualMachineVirtualMachineShutdownParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineVirtualMachineShutdownParameters0 = parametersVirtualMachineVirtualMachineShutdownParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineVirtualMachineShutdownParameters0.command('virtual-machine-shutdown-parameters')
  .description($('Set catparametersVirtualMachineVirtualMachineShutdownParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--post-shutdown-action <postShutdownAction>', $('Set the post-shutdown-action value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'postShutdownAction';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.postShutdownAction) {
      if (options.parse && options.postShutdownAction) {
        options.postShutdownAction = JSON.parse(options.postShutdownAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postShutdownAction}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-shutdown-parameters
  var catparametersVirtualMachineVirtualMachineShutdownParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineShutdownParameters1 = catparametersVirtualMachineVirtualMachineShutdownParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineVirtualMachineShutdownParameters1 = parametersVirtualMachineVirtualMachineShutdownParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineVirtualMachineShutdownParameters1.command('virtual-machine-shutdown-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineShutdownParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-shutdown-parameters
  var catparametersVirtualMachineVirtualMachineShutdownParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineShutdownParameters2 = catparametersVirtualMachineVirtualMachineShutdownParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineVirtualMachineShutdownParameters2 = parametersVirtualMachineVirtualMachineShutdownParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineVirtualMachineShutdownParameters2.command('virtual-machine-shutdown-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineShutdownParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--post-shutdown-action <postShutdownAction>', $('Add the post-shutdown-action value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'postShutdownAction';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.postShutdownAction) {
      if (options.parse && options.postShutdownAction) {
        options.postShutdownAction = JSON.parse(options.postShutdownAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postShutdownAction}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove post-shutdown-action
  var catparametersVirtualMachinePostShutdownAction1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePostShutdownAction1 = catparametersVirtualMachinePostShutdownAction1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachinePostShutdownAction1 = parametersVirtualMachinePostShutdownAction1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachinePostShutdownAction1.command('post-shutdown-action')
  .description($('Remove catparametersVirtualMachinePostShutdownAction1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/postShutdownAction';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add post-shutdown-action
  var catparametersVirtualMachinePostShutdownAction2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePostShutdownAction2 = catparametersVirtualMachinePostShutdownAction2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachinePostShutdownAction2 = parametersVirtualMachinePostShutdownAction2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachinePostShutdownAction2.command('post-shutdown-action')
  .description($('Remove catparametersVirtualMachinePostShutdownAction2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/postShutdownAction' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine ShutdownRoles
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "postShutdownAction":null,
  "roles":[
    ""
  ]
}
*/
  var virtualMachineShutdownRoles = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineShutdownRoles.command('shutdown-roles')
  .description($('shutdown-roles method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.shutdownRoles(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineShutdownRolesshutdownRolesParameters2 = virtualMachineShutdownRoles.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineShutdownRolesshutdownRolesGenerate2 = virtualMachineShutdownRolesshutdownRolesParameters2.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineShutdownRolesshutdownRolesGenerate2.command('shutdown-roles')
  .description($('Generate virtualMachineShutdownRoles parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"postShutdownAction\":null,\"roles\":[\"\"]}', _);
    var filePath = 'virtualMachineShutdownRoles_shutdownRoles.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"postShutdownAction\":null,\r\n\"roles\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineShutdownRolesshutdownRolesParameters2.command('patch')
  .description($('Command to patch virtualMachineShutdownRoles parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-shutdown-roles-parameters
  var catparametersVirtualMachineVirtualMachineShutdownRolesParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineShutdownRolesParameters0 = catparametersVirtualMachineVirtualMachineShutdownRolesParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineVirtualMachineShutdownRolesParameters0 = parametersVirtualMachineVirtualMachineShutdownRolesParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineVirtualMachineShutdownRolesParameters0.command('virtual-machine-shutdown-roles-parameters')
  .description($('Set catparametersVirtualMachineVirtualMachineShutdownRolesParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--post-shutdown-action <postShutdownAction>', $('Set the post-shutdown-action value.'))
  .option('--roles <roles>', $('Set the roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'postShutdownAction';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.postShutdownAction) {
      if (options.parse && options.postShutdownAction) {
        options.postShutdownAction = JSON.parse(options.postShutdownAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postShutdownAction}]);
    }
    paramPath = options.path + '/' + 'roles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-shutdown-roles-parameters
  var catparametersVirtualMachineVirtualMachineShutdownRolesParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineShutdownRolesParameters1 = catparametersVirtualMachineVirtualMachineShutdownRolesParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineVirtualMachineShutdownRolesParameters1 = parametersVirtualMachineVirtualMachineShutdownRolesParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineVirtualMachineShutdownRolesParameters1.command('virtual-machine-shutdown-roles-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineShutdownRolesParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-shutdown-roles-parameters
  var catparametersVirtualMachineVirtualMachineShutdownRolesParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineShutdownRolesParameters2 = catparametersVirtualMachineVirtualMachineShutdownRolesParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineVirtualMachineShutdownRolesParameters2 = parametersVirtualMachineVirtualMachineShutdownRolesParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineVirtualMachineShutdownRolesParameters2.command('virtual-machine-shutdown-roles-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineShutdownRolesParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--post-shutdown-action <postShutdownAction>', $('Add the post-shutdown-action value.'))
  .option('--roles <roles>', $('Add the roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'postShutdownAction';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.postShutdownAction) {
      if (options.parse && options.postShutdownAction) {
        options.postShutdownAction = JSON.parse(options.postShutdownAction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.postShutdownAction}]);
    }
    paramPath = '' + '/' + 'roles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set roles
  var catparametersVirtualMachineRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRoles0 = catparametersVirtualMachineRoles0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineRoles0 = parametersVirtualMachineRoles0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineRoles0.command('roles')
  .description($('Set catparametersVirtualMachineRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove roles
  var catparametersVirtualMachineRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRoles1 = catparametersVirtualMachineRoles1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineRoles1 = parametersVirtualMachineRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineRoles1.command('roles')
  .description($('Remove catparametersVirtualMachineRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add roles
  var catparametersVirtualMachineRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRoles2 = catparametersVirtualMachineRoles2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineRoles2 = parametersVirtualMachineRoles2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineRoles2.command('roles')
  .description($('Remove catparametersVirtualMachineRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine Start
  --service-name
  --deployment-name
  --virtual-machine-name
*/
  var virtualMachineStart = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineStart.command('start')
  .description($('start method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.start(options.serviceName, options.deploymentName, options.virtualMachineName, _);
    cli.output.json(result);
  });
/*
  VirtualMachine StartRoles
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "roles":[
    ""
  ]
}
*/
  var virtualMachineStartRoles = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineStartRoles.command('start-roles')
  .description($('start-roles method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      var parametersValArr = options.parameters.split(',');
      cli.output.info('parametersValArr : ' + parametersValArr);
      parametersObj = {};
      parametersObj.instanceIDs = parametersValArr;
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.startRoles(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineStartRolesstartRolesParameters2 = virtualMachineStartRoles.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineStartRolesstartRolesGenerate2 = virtualMachineStartRolesstartRolesParameters2.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineStartRolesstartRolesGenerate2.command('start-roles')
  .description($('Generate virtualMachineStartRoles parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"roles\":[\"\"]}', _);
    var filePath = 'virtualMachineStartRoles_startRoles.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"roles\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineStartRolesstartRolesParameters2.command('patch')
  .description($('Command to patch virtualMachineStartRoles parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-start-roles-parameters
  var catparametersVirtualMachineVirtualMachineStartRolesParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineStartRolesParameters0 = catparametersVirtualMachineVirtualMachineStartRolesParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineVirtualMachineStartRolesParameters0 = parametersVirtualMachineVirtualMachineStartRolesParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineVirtualMachineStartRolesParameters0.command('virtual-machine-start-roles-parameters')
  .description($('Set catparametersVirtualMachineVirtualMachineStartRolesParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--roles <roles>', $('Set the roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'roles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-start-roles-parameters
  var catparametersVirtualMachineVirtualMachineStartRolesParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineStartRolesParameters1 = catparametersVirtualMachineVirtualMachineStartRolesParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineVirtualMachineStartRolesParameters1 = parametersVirtualMachineVirtualMachineStartRolesParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineVirtualMachineStartRolesParameters1.command('virtual-machine-start-roles-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineStartRolesParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-start-roles-parameters
  var catparametersVirtualMachineVirtualMachineStartRolesParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineStartRolesParameters2 = catparametersVirtualMachineVirtualMachineStartRolesParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineVirtualMachineStartRolesParameters2 = parametersVirtualMachineVirtualMachineStartRolesParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineVirtualMachineStartRolesParameters2.command('virtual-machine-start-roles-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineStartRolesParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--roles <roles>', $('Add the roles value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'roles';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roles) {
      if (options.parse && options.roles) {
        options.roles = JSON.parse(options.roles);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roles}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set roles
  var catparametersVirtualMachineRoles0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRoles0 = catparametersVirtualMachineRoles0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineRoles0 = parametersVirtualMachineRoles0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineRoles0.command('roles')
  .description($('Set catparametersVirtualMachineRoles0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove roles
  var catparametersVirtualMachineRoles1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRoles1 = catparametersVirtualMachineRoles1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineRoles1 = parametersVirtualMachineRoles1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineRoles1.command('roles')
  .description($('Remove catparametersVirtualMachineRoles1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add roles
  var catparametersVirtualMachineRoles2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRoles2 = catparametersVirtualMachineRoles2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineRoles2 = parametersVirtualMachineRoles2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineRoles2.command('roles')
  .description($('Remove catparametersVirtualMachineRoles2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/roles' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine Update
  --service-name
  --deployment-name
  --virtual-machine-name
  --parameters
=============================================
{
  "availabilitySetName":"",
  "configurationSets":[
    {
      "adminPassword":"",
      "adminUserName":"",
      "computerName":"",
      "configurationSetType":"",
      "customData":"",
      "disableSshPasswordAuthentication":null,
      "domainJoin":{
        "credentials":{
          "domain":"",
          "password":"",
          "userName":""
        },
        "domainToJoin":"",
        "ldapMachineObjectOU":"",
        "provisioning":{
          "accountData":""
        }
      },
      "enableAutomaticUpdates":null,
      "hostName":"",
      "inputEndpoints":[
        {
          "enableDirectServerReturn":null,
          "endpointAcl":{
            "rules":[
              {
                "action":"",
                "description":"",
                "order":null,
                "remoteSubnet":""
              }
            ]
          },
          "idleTimeoutInMinutes":null,
          "loadBalancedEndpointSetName":"",
          "loadBalancerDistribution":"",
          "loadBalancerName":"",
          "loadBalancerProbe":{
            "intervalInSeconds":null,
            "path":"",
            "port":0,
            "protocol":0,
            "timeoutInSeconds":null
          },
          "localPort":null,
          "name":"",
          "port":null,
          "protocol":"",
          "virtualIPAddress":"",
          "virtualIPName":""
        }
      ],
      "iPForwarding":"",
      "networkInterfaces":[
        {
          "iPConfigurations":[
            {
              "staticVirtualNetworkIPAddress":"",
              "subnetName":""
            }
          ],
          "iPForwarding":"",
          "name":"",
          "networkSecurityGroup":""
        }
      ],
      "networkSecurityGroup":"",
      "publicIPs":[
        {
          "domainNameLabel":"",
          "idleTimeoutInMinutes":null,
          "name":""
        }
      ],
      "resetPasswordOnFirstLogon":null,
      "sshSettings":{
        "keyPairs":[
          {
            "fingerprint":"",
            "path":""
          }
        ],
        "publicKeys":[
          {
            "fingerprint":"",
            "path":""
          }
        ]
      },
      "staticVirtualNetworkIPAddress":"",
      "storedCertificateSettings":[
        {
          "storeName":"",
          "thumbprint":""
        }
      ],
      "subnetNames":[
        ""
      ],
      "timeZone":"",
      "userName":"",
      "userPassword":"",
      "windowsRemoteManagement":{
        "listeners":[
          {
            "certificateThumbprint":"",
            "listenerType":0
          }
        ]
      }
    }
  ],
  "dataVirtualHardDisks":[
    {
      "hostCaching":"",
      "iOType":"",
      "label":"",
      "logicalDiskSizeInGB":null,
      "logicalUnitNumber":null,
      "mediaLink":"",
      "name":"",
      "sourceMediaLink":""
    }
  ],
  "label":"",
  "oSVirtualHardDisk":{
    "hostCaching":"",
    "iOType":"",
    "label":"",
    "mediaLink":"",
    "name":"",
    "operatingSystem":"",
    "remoteSourceImageLink":"",
    "resizedSizeInGB":null,
    "sourceImageName":""
  },
  "provisionGuestAgent":null,
  "resourceExtensionReferences":[
    {
      "forceUpdate":null,
      "name":"",
      "publisher":"",
      "referenceName":"",
      "resourceExtensionParameterValues":[
        {
          "key":"",
          "type":"",
          "value":""
        }
      ],
      "state":"",
      "version":""
    }
  ],
  "roleName":"",
  "roleSize":""
}
*/
  var virtualMachineUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineUpdate.command('update')
  .description($('update method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--virtual-machine-name <virtual-machine-name>', $('virtual-machine-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('virtualMachineName = ' + options.virtualMachineName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.update(options.serviceName, options.deploymentName, options.virtualMachineName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineUpdateupdateParameters3 = virtualMachineUpdate.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineUpdateupdateGenerate3 = virtualMachineUpdateupdateParameters3.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineUpdateupdateGenerate3.command('update')
  .description($('Generate virtualMachineUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"availabilitySetName\":\"\",\"configurationSets\":[{\"adminPassword\":\"\",\"adminUserName\":\"\",\"computerName\":\"\",\"configurationSetType\":\"\",\"customData\":\"\",\"disableSshPasswordAuthentication\":null,\"domainJoin\":{\"credentials\":{\"domain\":\"\",\"password\":\"\",\"userName\":\"\"},\"domainToJoin\":\"\",\"ldapMachineObjectOU\":\"\",\"provisioning\":{\"accountData\":\"\"}},\"enableAutomaticUpdates\":null,\"hostName\":\"\",\"inputEndpoints\":[{\"enableDirectServerReturn\":null,\"endpointAcl\":{\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}]},\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":0,\"protocol\":0,\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}],\"iPForwarding\":\"\",\"networkInterfaces\":[{\"iPConfigurations\":[{\"staticVirtualNetworkIPAddress\":\"\",\"subnetName\":\"\"}],\"iPForwarding\":\"\",\"name\":\"\",\"networkSecurityGroup\":\"\"}],\"networkSecurityGroup\":\"\",\"publicIPs\":[{\"domainNameLabel\":\"\",\"idleTimeoutInMinutes\":null,\"name\":\"\"}],\"resetPasswordOnFirstLogon\":null,\"sshSettings\":{\"keyPairs\":[{\"fingerprint\":\"\",\"path\":\"\"}],\"publicKeys\":[{\"fingerprint\":\"\",\"path\":\"\"}]},\"staticVirtualNetworkIPAddress\":\"\",\"storedCertificateSettings\":[{\"storeName\":\"\",\"thumbprint\":\"\"}],\"subnetNames\":[\"\"],\"timeZone\":\"\",\"userName\":\"\",\"userPassword\":\"\",\"windowsRemoteManagement\":{\"listeners\":[{\"certificateThumbprint\":\"\",\"listenerType\":0}]}}],\"dataVirtualHardDisks\":[{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"logicalDiskSizeInGB\":null,\"logicalUnitNumber\":null,\"mediaLink\":\"\",\"name\":\"\",\"sourceMediaLink\":\"\"}],\"label\":\"\",\"oSVirtualHardDisk\":{\"hostCaching\":\"\",\"iOType\":\"\",\"label\":\"\",\"mediaLink\":\"\",\"name\":\"\",\"operatingSystem\":\"\",\"remoteSourceImageLink\":\"\",\"resizedSizeInGB\":null,\"sourceImageName\":\"\"},\"provisionGuestAgent\":null,\"resourceExtensionReferences\":[{\"forceUpdate\":null,\"name\":\"\",\"publisher\":\"\",\"referenceName\":\"\",\"resourceExtensionParameterValues\":[{\"key\":\"\",\"type\":\"\",\"value\":\"\"}],\"state\":\"\",\"version\":\"\"}],\"roleName\":\"\",\"roleSize\":\"\"}', _);
    var filePath = 'virtualMachineUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"availabilitySetName\":\"\",\r\n\"configurationSets\":[\r\n{\r\n\"adminPassword\":\"\",\r\n\"adminUserName\":\"\",\r\n\"computerName\":\"\",\r\n\"configurationSetType\":\"\",\r\n\"customData\":\"\",\r\n\"disableSshPasswordAuthentication\":null,\r\n\"domainJoin\":{\r\n\"credentials\":{\r\n\"domain\":\"\",\r\n\"password\":\"\",\r\n\"userName\":\"\"\r\n},\r\n\"domainToJoin\":\"\",\r\n\"ldapMachineObjectOU\":\"\",\r\n\"provisioning\":{\r\n\"accountData\":\"\"\r\n}\r\n},\r\n\"enableAutomaticUpdates\":null,\r\n\"hostName\":\"\",\r\n\"inputEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"endpointAcl\":{\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n]\r\n},\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":0,\r\n\"protocol\":0,\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"networkInterfaces\":[\r\n{\r\n\"iPConfigurations\":[\r\n{\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"subnetName\":\"\"\r\n}\r\n],\r\n\"iPForwarding\":\"\",\r\n\"name\":\"\",\r\n\"networkSecurityGroup\":\"\"\r\n}\r\n],\r\n\"networkSecurityGroup\":\"\",\r\n\"publicIPs\":[\r\n{\r\n\"domainNameLabel\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"resetPasswordOnFirstLogon\":null,\r\n\"sshSettings\":{\r\n\"keyPairs\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n],\r\n\"publicKeys\":[\r\n{\r\n\"fingerprint\":\"\",\r\n\"path\":\"\"\r\n}\r\n]\r\n},\r\n\"staticVirtualNetworkIPAddress\":\"\",\r\n\"storedCertificateSettings\":[\r\n{\r\n\"storeName\":\"\",\r\n\"thumbprint\":\"\"\r\n}\r\n],\r\n\"subnetNames\":[\r\n\"\"\r\n],\r\n\"timeZone\":\"\",\r\n\"userName\":\"\",\r\n\"userPassword\":\"\",\r\n\"windowsRemoteManagement\":{\r\n\"listeners\":[\r\n{\r\n\"certificateThumbprint\":\"\",\r\n\"listenerType\":0\r\n}\r\n]\r\n}\r\n}\r\n],\r\n\"dataVirtualHardDisks\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"logicalDiskSizeInGB\":null,\r\n\"logicalUnitNumber\":null,\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"sourceMediaLink\":\"\"\r\n}\r\n],\r\n\"label\":\"\",\r\n\"oSVirtualHardDisk\":{\r\n\"hostCaching\":\"\",\r\n\"iOType\":\"\",\r\n\"label\":\"\",\r\n\"mediaLink\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystem\":\"\",\r\n\"remoteSourceImageLink\":\"\",\r\n\"resizedSizeInGB\":null,\r\n\"sourceImageName\":\"\"\r\n},\r\n\"provisionGuestAgent\":null,\r\n\"resourceExtensionReferences\":[\r\n{\r\n\"forceUpdate\":null,\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"referenceName\":\"\",\r\n\"resourceExtensionParameterValues\":[\r\n{\r\n\"key\":\"\",\r\n\"type\":\"\",\r\n\"value\":\"\"\r\n}\r\n],\r\n\"state\":\"\",\r\n\"version\":\"\"\r\n}\r\n],\r\n\"roleName\":\"\",\r\n\"roleSize\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineUpdateupdateParameters3.command('patch')
  .description($('Command to patch virtualMachineUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-update-parameters
  var catparametersVirtualMachineVirtualMachineUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineUpdateParameters0 = catparametersVirtualMachineVirtualMachineUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineVirtualMachineUpdateParameters0 = parametersVirtualMachineVirtualMachineUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineVirtualMachineUpdateParameters0.command('virtual-machine-update-parameters')
  .description($('Set catparametersVirtualMachineVirtualMachineUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--availability-set-name <availabilitySetName>', $('Set the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Set the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Set the data-virtual-hard-disks value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Set the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Set the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Set the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Set the role-name value.'))
  .option('--role-size <roleSize>', $('Set the role-size value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'availabilitySetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = options.path + '/' + 'configurationSets';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = options.path + '/' + 'dataVirtualHardDisks';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'oSVirtualHardDisk';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = options.path + '/' + 'provisionGuestAgent';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionReferences';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = options.path + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = options.path + '/' + 'roleSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-update-parameters
  var catparametersVirtualMachineVirtualMachineUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineUpdateParameters1 = catparametersVirtualMachineVirtualMachineUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineVirtualMachineUpdateParameters1 = parametersVirtualMachineVirtualMachineUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineVirtualMachineUpdateParameters1.command('virtual-machine-update-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-update-parameters
  var catparametersVirtualMachineVirtualMachineUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineUpdateParameters2 = catparametersVirtualMachineVirtualMachineUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineVirtualMachineUpdateParameters2 = parametersVirtualMachineVirtualMachineUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineVirtualMachineUpdateParameters2.command('virtual-machine-update-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--availability-set-name <availabilitySetName>', $('Add the availability-set-name value.'))
  .option('--configuration-sets <configurationSets>', $('Add the configuration-sets value.'))
  .option('--data-virtual-hard-disks <dataVirtualHardDisks>', $('Add the data-virtual-hard-disks value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--os-virtual-hard-disk <oSVirtualHardDisk>', $('Add the os-virtual-hard-disk value.'))
  .option('--provision-guest-agent <provisionGuestAgent>', $('Add the provision-guest-agent value.'))
  .option('--resource-extension-references <resourceExtensionReferences>', $('Add the resource-extension-references value.'))
  .option('--role-name <roleName>', $('Add the role-name value.'))
  .option('--role-size <roleSize>', $('Add the role-size value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'availabilitySetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.availabilitySetName) {
      if (options.parse && options.availabilitySetName) {
        options.availabilitySetName = JSON.parse(options.availabilitySetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.availabilitySetName}]);
    }
    paramPath = '' + '/' + 'configurationSets';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSets) {
      if (options.parse && options.configurationSets) {
        options.configurationSets = JSON.parse(options.configurationSets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSets}]);
    }
    paramPath = '' + '/' + 'dataVirtualHardDisks';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataVirtualHardDisks) {
      if (options.parse && options.dataVirtualHardDisks) {
        options.dataVirtualHardDisks = JSON.parse(options.dataVirtualHardDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataVirtualHardDisks}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'oSVirtualHardDisk';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSVirtualHardDisk) {
      if (options.parse && options.oSVirtualHardDisk) {
        options.oSVirtualHardDisk = JSON.parse(options.oSVirtualHardDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSVirtualHardDisk}]);
    }
    paramPath = '' + '/' + 'provisionGuestAgent';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisionGuestAgent) {
      if (options.parse && options.provisionGuestAgent) {
        options.provisionGuestAgent = JSON.parse(options.provisionGuestAgent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionGuestAgent}]);
    }
    paramPath = '' + '/' + 'resourceExtensionReferences';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionReferences) {
      if (options.parse && options.resourceExtensionReferences) {
        options.resourceExtensionReferences = JSON.parse(options.resourceExtensionReferences);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionReferences}]);
    }
    paramPath = '' + '/' + 'roleName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleName) {
      if (options.parse && options.roleName) {
        options.roleName = JSON.parse(options.roleName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleName}]);
    }
    paramPath = '' + '/' + 'roleSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.roleSize) {
      if (options.parse && options.roleSize) {
        options.roleSize = JSON.parse(options.roleSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.roleSize}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set configuration-sets
  var catparametersVirtualMachineConfigurationSets0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineConfigurationSets0 = catparametersVirtualMachineConfigurationSets0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineConfigurationSets0 = parametersVirtualMachineConfigurationSets0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineConfigurationSets0.command('configuration-sets')
  .description($('Set catparametersVirtualMachineConfigurationSets0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Set the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Set the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Set the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Set the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Set the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Set the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Set the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Set the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Set the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Set the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Set the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Set the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .option('--user-password <userPassword>', $('Set the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Set the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'adminUserName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = options.path + '/' + 'computerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = options.path + '/' + 'configurationSetType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = options.path + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'disableSshPasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'domainJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'hostName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = options.path + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'networkInterfaces';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'publicIPs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = options.path + '/' + 'resetPasswordOnFirstLogon';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = options.path + '/' + 'sshSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'storedCertificateSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = options.path + '/' + 'subnetNames';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = options.path + '/' + 'userPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = options.path + '/' + 'windowsRemoteManagement';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove configuration-sets
  var catparametersVirtualMachineConfigurationSets1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineConfigurationSets1 = catparametersVirtualMachineConfigurationSets1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineConfigurationSets1 = parametersVirtualMachineConfigurationSets1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineConfigurationSets1.command('configuration-sets')
  .description($('Remove catparametersVirtualMachineConfigurationSets1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add configuration-sets
  var catparametersVirtualMachineConfigurationSets2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineConfigurationSets2 = catparametersVirtualMachineConfigurationSets2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineConfigurationSets2 = parametersVirtualMachineConfigurationSets2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineConfigurationSets2.command('configuration-sets')
  .description($('Remove catparametersVirtualMachineConfigurationSets2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--admin-password <adminPassword>', $('Add the admin-password value.'))
  .option('--admin-user-name <adminUserName>', $('Add the admin-user-name value.'))
  .option('--computer-name <computerName>', $('Add the computer-name value.'))
  .option('--configuration-set-type <configurationSetType>', $('Add the configuration-set-type value.'))
  .option('--custom-data <customData>', $('Add the custom-data value.'))
  .option('--disable-ssh-password-authentication <disableSshPasswordAuthentication>', $('Add the disable-ssh-password-authentication value.'))
  .option('--domain-join <domainJoin>', $('Add the domain-join value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Add the enable-automatic-updates value.'))
  .option('--host-name <hostName>', $('Add the host-name value.'))
  .option('--input-endpoints <inputEndpoints>', $('Add the input-endpoints value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--network-interfaces <networkInterfaces>', $('Add the network-interfaces value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .option('--public-ip <publicIPs>', $('Add the public-ip value.'))
  .option('--reset-password-on-first-logon <resetPasswordOnFirstLogon>', $('Add the reset-password-on-first-logon value.'))
  .option('--ssh-settings <sshSettings>', $('Add the ssh-settings value.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--stored-certificate-settings <storedCertificateSettings>', $('Add the stored-certificate-settings value.'))
  .option('--subnet-names <subnetNames>', $('Add the subnet-names value.'))
  .option('--time-zone <timeZone>', $('Add the time-zone value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .option('--user-password <userPassword>', $('Add the user-password value.'))
  .option('--windows-remote-management <windowsRemoteManagement>', $('Add the windows-remote-management value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'adminUserName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUserName) {
      if (options.parse && options.adminUserName) {
        options.adminUserName = JSON.parse(options.adminUserName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUserName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'computerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerName) {
      if (options.parse && options.computerName) {
        options.computerName = JSON.parse(options.computerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'configurationSetType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.configurationSetType) {
      if (options.parse && options.configurationSetType) {
        options.configurationSetType = JSON.parse(options.configurationSetType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.configurationSetType}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'disableSshPasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disableSshPasswordAuthentication) {
      if (options.parse && options.disableSshPasswordAuthentication) {
        options.disableSshPasswordAuthentication = JSON.parse(options.disableSshPasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disableSshPasswordAuthentication}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'domainJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainJoin) {
      if (options.parse && options.domainJoin) {
        options.domainJoin = JSON.parse(options.domainJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainJoin}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'hostName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostName) {
      if (options.parse && options.hostName) {
        options.hostName = JSON.parse(options.hostName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'inputEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.inputEndpoints) {
      if (options.parse && options.inputEndpoints) {
        options.inputEndpoints = JSON.parse(options.inputEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.inputEndpoints}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkInterfaces';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicIPs) {
      if (options.parse && options.publicIPs) {
        options.publicIPs = JSON.parse(options.publicIPs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPs}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'resetPasswordOnFirstLogon';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resetPasswordOnFirstLogon) {
      if (options.parse && options.resetPasswordOnFirstLogon) {
        options.resetPasswordOnFirstLogon = JSON.parse(options.resetPasswordOnFirstLogon);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resetPasswordOnFirstLogon}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'sshSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshSettings) {
      if (options.parse && options.sshSettings) {
        options.sshSettings = JSON.parse(options.sshSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshSettings}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'storedCertificateSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storedCertificateSettings) {
      if (options.parse && options.storedCertificateSettings) {
        options.storedCertificateSettings = JSON.parse(options.storedCertificateSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storedCertificateSettings}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetNames';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetNames) {
      if (options.parse && options.subnetNames) {
        options.subnetNames = JSON.parse(options.subnetNames);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetNames}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'userPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userPassword) {
      if (options.parse && options.userPassword) {
        options.userPassword = JSON.parse(options.userPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userPassword}]);
    }
    paramPath = '/configurationSets' + (options.index ? ('/' + options.index) : '') + '/' + 'windowsRemoteManagement';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsRemoteManagement) {
      if (options.parse && options.windowsRemoteManagement) {
        options.windowsRemoteManagement = JSON.parse(options.windowsRemoteManagement);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsRemoteManagement}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set domain-join
  var catparametersVirtualMachineDomainJoin0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDomainJoin0 = catparametersVirtualMachineDomainJoin0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineDomainJoin0 = parametersVirtualMachineDomainJoin0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineDomainJoin0.command('domain-join')
  .description($('Set catparametersVirtualMachineDomainJoin0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--credentials <credentials>', $('Set the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Set the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Set the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Set the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    var paramPath = options.path + '/' + 'credentials';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = options.path + '/' + 'domainToJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = options.path + '/' + 'ldapMachineObjectOU';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = options.path + '/' + 'provisioning';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove domain-join
  var catparametersVirtualMachineDomainJoin1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDomainJoin1 = catparametersVirtualMachineDomainJoin1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineDomainJoin1 = parametersVirtualMachineDomainJoin1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineDomainJoin1.command('domain-join')
  .description($('Remove catparametersVirtualMachineDomainJoin1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add domain-join
  var catparametersVirtualMachineDomainJoin2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDomainJoin2 = catparametersVirtualMachineDomainJoin2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineDomainJoin2 = parametersVirtualMachineDomainJoin2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineDomainJoin2.command('domain-join')
  .description($('Remove catparametersVirtualMachineDomainJoin2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--credentials <credentials>', $('Add the credentials value.'))
  .option('--domain-to-join <domainToJoin>', $('Add the domain-to-join value.'))
  .option('--ldap-machine-object-o-u <ldapMachineObjectOU>', $('Add the ldap-machine-object-o-u value.'))
  .option('--provisioning <provisioning>', $('Add the provisioning value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'credentials';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.credentials) {
      if (options.parse && options.credentials) {
        options.credentials = JSON.parse(options.credentials);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.credentials}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'domainToJoin';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainToJoin) {
      if (options.parse && options.domainToJoin) {
        options.domainToJoin = JSON.parse(options.domainToJoin);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainToJoin}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'ldapMachineObjectOU';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ldapMachineObjectOU) {
      if (options.parse && options.ldapMachineObjectOU) {
        options.ldapMachineObjectOU = JSON.parse(options.ldapMachineObjectOU);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ldapMachineObjectOU}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin' + '/' + 'provisioning';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioning) {
      if (options.parse && options.provisioning) {
        options.provisioning = JSON.parse(options.provisioning);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioning}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set credentials
  var catparametersVirtualMachineCredentials0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineCredentials0 = catparametersVirtualMachineCredentials0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineCredentials0 = parametersVirtualMachineCredentials0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineCredentials0.command('credentials')
  .description($('Set catparametersVirtualMachineCredentials0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain <domain>', $('Set the domain value.'))
  .option('--password <password>', $('Set the password value.'))
  .option('--user-name <userName>', $('Set the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    var paramPath = options.path + '/' + 'domain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = options.path + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = options.path + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove credentials
  var catparametersVirtualMachineCredentials1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineCredentials1 = catparametersVirtualMachineCredentials1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineCredentials1 = parametersVirtualMachineCredentials1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineCredentials1.command('credentials')
  .description($('Remove catparametersVirtualMachineCredentials1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add credentials
  var catparametersVirtualMachineCredentials2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineCredentials2 = catparametersVirtualMachineCredentials2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineCredentials2 = parametersVirtualMachineCredentials2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineCredentials2.command('credentials')
  .description($('Remove catparametersVirtualMachineCredentials2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain <domain>', $('Add the domain value.'))
  .option('--password <password>', $('Add the password value.'))
  .option('--user-name <userName>', $('Add the user-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'domain';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domain) {
      if (options.parse && options.domain) {
        options.domain = JSON.parse(options.domain);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domain}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'password';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.password) {
      if (options.parse && options.password) {
        options.password = JSON.parse(options.password);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.password}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/credentials' + '/' + 'userName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.userName) {
      if (options.parse && options.userName) {
        options.userName = JSON.parse(options.userName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.userName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set provisioning
  var catparametersVirtualMachineProvisioning0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProvisioning0 = catparametersVirtualMachineProvisioning0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineProvisioning0 = parametersVirtualMachineProvisioning0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineProvisioning0.command('provisioning')
  .description($('Set catparametersVirtualMachineProvisioning0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--account-data <accountData>', $('Set the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    var paramPath = options.path + '/' + 'accountData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove provisioning
  var catparametersVirtualMachineProvisioning1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProvisioning1 = catparametersVirtualMachineProvisioning1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineProvisioning1 = parametersVirtualMachineProvisioning1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineProvisioning1.command('provisioning')
  .description($('Remove catparametersVirtualMachineProvisioning1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add provisioning
  var catparametersVirtualMachineProvisioning2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProvisioning2 = catparametersVirtualMachineProvisioning2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineProvisioning2 = parametersVirtualMachineProvisioning2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineProvisioning2.command('provisioning')
  .description($('Remove catparametersVirtualMachineProvisioning2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--account-data <accountData>', $('Add the account-data value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/domainJoin/provisioning' + '/' + 'accountData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.accountData) {
      if (options.parse && options.accountData) {
        options.accountData = JSON.parse(options.accountData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.accountData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set input-endpoints
  var catparametersVirtualMachineInputEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineInputEndpoints0 = catparametersVirtualMachineInputEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineInputEndpoints0 = parametersVirtualMachineInputEndpoints0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineInputEndpoints0.command('input-endpoints')
  .description($('Set catparametersVirtualMachineInputEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Set the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'endpointAcl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove input-endpoints
  var catparametersVirtualMachineInputEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineInputEndpoints1 = catparametersVirtualMachineInputEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineInputEndpoints1 = parametersVirtualMachineInputEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineInputEndpoints1.command('input-endpoints')
  .description($('Remove catparametersVirtualMachineInputEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add input-endpoints
  var catparametersVirtualMachineInputEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineInputEndpoints2 = catparametersVirtualMachineInputEndpoints2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineInputEndpoints2 = parametersVirtualMachineInputEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineInputEndpoints2.command('input-endpoints')
  .description($('Remove catparametersVirtualMachineInputEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Add the enable-direct-server-return value.'))
  .option('--endpoint-acl <endpointAcl>', $('Add the endpoint-acl value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Add the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Add the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Add the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Add the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Add the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Add the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'endpointAcl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.endpointAcl) {
      if (options.parse && options.endpointAcl) {
        options.endpointAcl = JSON.parse(options.endpointAcl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.endpointAcl}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set endpoint-acl
  var catparametersVirtualMachineEndpointAcl0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineEndpointAcl0 = catparametersVirtualMachineEndpointAcl0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineEndpointAcl0 = parametersVirtualMachineEndpointAcl0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineEndpointAcl0.command('endpoint-acl')
  .description($('Set catparametersVirtualMachineEndpointAcl0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--rules <rules>', $('Set the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    var paramPath = options.path + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove endpoint-acl
  var catparametersVirtualMachineEndpointAcl1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineEndpointAcl1 = catparametersVirtualMachineEndpointAcl1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineEndpointAcl1 = parametersVirtualMachineEndpointAcl1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineEndpointAcl1.command('endpoint-acl')
  .description($('Remove catparametersVirtualMachineEndpointAcl1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add endpoint-acl
  var catparametersVirtualMachineEndpointAcl2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineEndpointAcl2 = catparametersVirtualMachineEndpointAcl2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineEndpointAcl2 = parametersVirtualMachineEndpointAcl2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineEndpointAcl2.command('endpoint-acl')
  .description($('Remove catparametersVirtualMachineEndpointAcl2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--rules <rules>', $('Add the rules value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl' + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set rules
  var catparametersVirtualMachineRules0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRules0 = catparametersVirtualMachineRules0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineRules0 = parametersVirtualMachineRules0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineRules0.command('rules')
  .description($('Set catparametersVirtualMachineRules0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove rules
  var catparametersVirtualMachineRules1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRules1 = catparametersVirtualMachineRules1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineRules1 = parametersVirtualMachineRules1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineRules1.command('rules')
  .description($('Remove catparametersVirtualMachineRules1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add rules
  var catparametersVirtualMachineRules2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRules2 = catparametersVirtualMachineRules2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineRules2 = parametersVirtualMachineRules2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineRules2.command('rules')
  .description($('Remove catparametersVirtualMachineRules2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--action <action>', $('Add the action value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--order <order>', $('Add the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Add the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/endpointAcl/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancer-probe
  var catparametersVirtualMachineLoadBalancerProbe0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancerProbe0 = catparametersVirtualMachineLoadBalancerProbe0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineLoadBalancerProbe0 = parametersVirtualMachineLoadBalancerProbe0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineLoadBalancerProbe0.command('load-balancer-probe')
  .description($('Set catparametersVirtualMachineLoadBalancerProbe0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    var paramPath = options.path + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancer-probe
  var catparametersVirtualMachineLoadBalancerProbe1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancerProbe1 = catparametersVirtualMachineLoadBalancerProbe1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineLoadBalancerProbe1 = parametersVirtualMachineLoadBalancerProbe1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineLoadBalancerProbe1.command('load-balancer-probe')
  .description($('Remove catparametersVirtualMachineLoadBalancerProbe1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancer-probe
  var catparametersVirtualMachineLoadBalancerProbe2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancerProbe2 = catparametersVirtualMachineLoadBalancerProbe2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineLoadBalancerProbe2 = parametersVirtualMachineLoadBalancerProbe2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineLoadBalancerProbe2.command('load-balancer-probe')
  .description($('Remove catparametersVirtualMachineLoadBalancerProbe2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Add the interval-in-seconds value.'))
  .option('--path <path>', $('Add the path value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Add the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe' + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove protocol
  var catparametersVirtualMachineProtocol1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProtocol1 = catparametersVirtualMachineProtocol1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineProtocol1 = parametersVirtualMachineProtocol1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineProtocol1.command('protocol')
  .description($('Remove catparametersVirtualMachineProtocol1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--input-endpoints-index <input-endpoints-index>', $('Indexer: input-endpoints-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add protocol
  var catparametersVirtualMachineProtocol2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProtocol2 = catparametersVirtualMachineProtocol2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineProtocol2 = parametersVirtualMachineProtocol2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineProtocol2.command('protocol')
  .description($('Remove catparametersVirtualMachineProtocol2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/inputEndpoints/' + options.inputEndpointsIndex + '/loadBalancerProbe/protocol' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set network-interfaces
  var catparametersVirtualMachineNetworkInterfaces0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineNetworkInterfaces0 = catparametersVirtualMachineNetworkInterfaces0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineNetworkInterfaces0 = parametersVirtualMachineNetworkInterfaces0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineNetworkInterfaces0.command('network-interfaces')
  .description($('Set catparametersVirtualMachineNetworkInterfaces0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Set the ip-forwarding value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove network-interfaces
  var catparametersVirtualMachineNetworkInterfaces1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineNetworkInterfaces1 = catparametersVirtualMachineNetworkInterfaces1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineNetworkInterfaces1 = parametersVirtualMachineNetworkInterfaces1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineNetworkInterfaces1.command('network-interfaces')
  .description($('Remove catparametersVirtualMachineNetworkInterfaces1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add network-interfaces
  var catparametersVirtualMachineNetworkInterfaces2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineNetworkInterfaces2 = catparametersVirtualMachineNetworkInterfaces2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineNetworkInterfaces2 = parametersVirtualMachineNetworkInterfaces2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineNetworkInterfaces2.command('network-interfaces')
  .description($('Remove catparametersVirtualMachineNetworkInterfaces2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--ip-forwarding <ipForwarding>', $('Add the ip-forwarding value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipForwarding';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipForwarding) {
      if (options.parse && options.ipForwarding) {
        options.ipForwarding = JSON.parse(options.ipForwarding);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipForwarding}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ip-configurations
  var catparametersVirtualMachineIPConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineIPConfigurations0 = catparametersVirtualMachineIPConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineIPConfigurations0 = parametersVirtualMachineIPConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineIPConfigurations0.command('ip-configurations')
  .description($('Set catparametersVirtualMachineIPConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Set the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Set the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = options.path + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ip-configurations
  var catparametersVirtualMachineIPConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineIPConfigurations1 = catparametersVirtualMachineIPConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineIPConfigurations1 = parametersVirtualMachineIPConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineIPConfigurations1.command('ip-configurations')
  .description($('Remove catparametersVirtualMachineIPConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ip-configurations
  var catparametersVirtualMachineIPConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineIPConfigurations2 = catparametersVirtualMachineIPConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineIPConfigurations2 = parametersVirtualMachineIPConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineIPConfigurations2.command('ip-configurations')
  .description($('Remove catparametersVirtualMachineIPConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--static-virtual-network-ip-address <staticVirtualNetworkIPAddress>', $('Add the static-virtual-network-ip-address value.'))
  .option('--subnet-name <subnetName>', $('Add the subnet-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'staticVirtualNetworkIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.staticVirtualNetworkIPAddress) {
      if (options.parse && options.staticVirtualNetworkIPAddress) {
        options.staticVirtualNetworkIPAddress = JSON.parse(options.staticVirtualNetworkIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.staticVirtualNetworkIPAddress}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/networkInterfaces/' + options.networkInterfacesIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnetName) {
      if (options.parse && options.subnetName) {
        options.subnetName = JSON.parse(options.subnetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set public-ip
  var catparametersVirtualMachinePublicIPs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicIPs0 = catparametersVirtualMachinePublicIPs0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachinePublicIPs0 = parametersVirtualMachinePublicIPs0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachinePublicIPs0.command('public-ip')
  .description($('Set catparametersVirtualMachinePublicIPs0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--domain-name-label <domainNameLabel>', $('Set the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'domainNameLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove public-ip
  var catparametersVirtualMachinePublicIPs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicIPs1 = catparametersVirtualMachinePublicIPs1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachinePublicIPs1 = parametersVirtualMachinePublicIPs1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachinePublicIPs1.command('public-ip')
  .description($('Remove catparametersVirtualMachinePublicIPs1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add public-ip
  var catparametersVirtualMachinePublicIPs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicIPs2 = catparametersVirtualMachinePublicIPs2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachinePublicIPs2 = parametersVirtualMachinePublicIPs2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachinePublicIPs2.command('public-ip')
  .description($('Remove catparametersVirtualMachinePublicIPs2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--domain-name-label <domainNameLabel>', $('Add the domain-name-label value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'domainNameLabel';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/publicIPs' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ssh-settings
  var catparametersVirtualMachineSshSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSshSettings0 = catparametersVirtualMachineSshSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineSshSettings0 = parametersVirtualMachineSshSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineSshSettings0.command('ssh-settings')
  .description($('Set catparametersVirtualMachineSshSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--key-pairs <keyPairs>', $('Set the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Set the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    var paramPath = options.path + '/' + 'keyPairs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = options.path + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ssh-settings
  var catparametersVirtualMachineSshSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSshSettings1 = catparametersVirtualMachineSshSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineSshSettings1 = parametersVirtualMachineSshSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineSshSettings1.command('ssh-settings')
  .description($('Remove catparametersVirtualMachineSshSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ssh-settings
  var catparametersVirtualMachineSshSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSshSettings2 = catparametersVirtualMachineSshSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineSshSettings2 = parametersVirtualMachineSshSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineSshSettings2.command('ssh-settings')
  .description($('Remove catparametersVirtualMachineSshSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--key-pairs <keyPairs>', $('Add the key-pairs value.'))
  .option('--public-keys <publicKeys>', $('Add the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'keyPairs';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyPairs) {
      if (options.parse && options.keyPairs) {
        options.keyPairs = JSON.parse(options.keyPairs);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyPairs}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings' + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set key-pairs
  var catparametersVirtualMachineKeyPairs0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineKeyPairs0 = catparametersVirtualMachineKeyPairs0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineKeyPairs0 = parametersVirtualMachineKeyPairs0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineKeyPairs0.command('key-pairs')
  .description($('Set catparametersVirtualMachineKeyPairs0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove key-pairs
  var catparametersVirtualMachineKeyPairs1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineKeyPairs1 = catparametersVirtualMachineKeyPairs1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineKeyPairs1 = parametersVirtualMachineKeyPairs1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineKeyPairs1.command('key-pairs')
  .description($('Remove catparametersVirtualMachineKeyPairs1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add key-pairs
  var catparametersVirtualMachineKeyPairs2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineKeyPairs2 = catparametersVirtualMachineKeyPairs2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineKeyPairs2 = parametersVirtualMachineKeyPairs2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineKeyPairs2.command('key-pairs')
  .description($('Remove catparametersVirtualMachineKeyPairs2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/keyPairs' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set public-keys
  var catparametersVirtualMachinePublicKeys0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicKeys0 = catparametersVirtualMachinePublicKeys0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachinePublicKeys0 = parametersVirtualMachinePublicKeys0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachinePublicKeys0.command('public-keys')
  .description($('Set catparametersVirtualMachinePublicKeys0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--fingerprint <fingerprint>', $('Set the fingerprint value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove public-keys
  var catparametersVirtualMachinePublicKeys1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicKeys1 = catparametersVirtualMachinePublicKeys1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachinePublicKeys1 = parametersVirtualMachinePublicKeys1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachinePublicKeys1.command('public-keys')
  .description($('Remove catparametersVirtualMachinePublicKeys1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add public-keys
  var catparametersVirtualMachinePublicKeys2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachinePublicKeys2 = catparametersVirtualMachinePublicKeys2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachinePublicKeys2 = parametersVirtualMachinePublicKeys2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachinePublicKeys2.command('public-keys')
  .description($('Remove catparametersVirtualMachinePublicKeys2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--fingerprint <fingerprint>', $('Add the fingerprint value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'fingerprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.fingerprint) {
      if (options.parse && options.fingerprint) {
        options.fingerprint = JSON.parse(options.fingerprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fingerprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/sshSettings/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set stored-certificate-settings
  var catparametersVirtualMachineStoredCertificateSettings0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineStoredCertificateSettings0 = catparametersVirtualMachineStoredCertificateSettings0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineStoredCertificateSettings0 = parametersVirtualMachineStoredCertificateSettings0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineStoredCertificateSettings0.command('stored-certificate-settings')
  .description($('Set catparametersVirtualMachineStoredCertificateSettings0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--store-name <storeName>', $('Set the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove stored-certificate-settings
  var catparametersVirtualMachineStoredCertificateSettings1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineStoredCertificateSettings1 = catparametersVirtualMachineStoredCertificateSettings1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineStoredCertificateSettings1 = parametersVirtualMachineStoredCertificateSettings1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineStoredCertificateSettings1.command('stored-certificate-settings')
  .description($('Remove catparametersVirtualMachineStoredCertificateSettings1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add stored-certificate-settings
  var catparametersVirtualMachineStoredCertificateSettings2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineStoredCertificateSettings2 = catparametersVirtualMachineStoredCertificateSettings2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineStoredCertificateSettings2 = parametersVirtualMachineStoredCertificateSettings2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineStoredCertificateSettings2.command('stored-certificate-settings')
  .description($('Remove catparametersVirtualMachineStoredCertificateSettings2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--store-name <storeName>', $('Add the store-name value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'storeName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storeName) {
      if (options.parse && options.storeName) {
        options.storeName = JSON.parse(options.storeName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storeName}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/storedCertificateSettings' + (options.index ? ('/' + options.index) : '') + '/' + 'thumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set subnet-names
  var catparametersVirtualMachineSubnetNames0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSubnetNames0 = catparametersVirtualMachineSubnetNames0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineSubnetNames0 = parametersVirtualMachineSubnetNames0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineSubnetNames0.command('subnet-names')
  .description($('Set catparametersVirtualMachineSubnetNames0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove subnet-names
  var catparametersVirtualMachineSubnetNames1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSubnetNames1 = catparametersVirtualMachineSubnetNames1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineSubnetNames1 = parametersVirtualMachineSubnetNames1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineSubnetNames1.command('subnet-names')
  .description($('Remove catparametersVirtualMachineSubnetNames1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add subnet-names
  var catparametersVirtualMachineSubnetNames2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineSubnetNames2 = catparametersVirtualMachineSubnetNames2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineSubnetNames2 = parametersVirtualMachineSubnetNames2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineSubnetNames2.command('subnet-names')
  .description($('Remove catparametersVirtualMachineSubnetNames2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/subnetNames' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set windows-remote-management
  var catparametersVirtualMachineWindowsRemoteManagement0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineWindowsRemoteManagement0 = catparametersVirtualMachineWindowsRemoteManagement0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineWindowsRemoteManagement0 = parametersVirtualMachineWindowsRemoteManagement0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineWindowsRemoteManagement0.command('windows-remote-management')
  .description($('Set catparametersVirtualMachineWindowsRemoteManagement0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--listeners <listeners>', $('Set the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    var paramPath = options.path + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove windows-remote-management
  var catparametersVirtualMachineWindowsRemoteManagement1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineWindowsRemoteManagement1 = catparametersVirtualMachineWindowsRemoteManagement1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineWindowsRemoteManagement1 = parametersVirtualMachineWindowsRemoteManagement1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineWindowsRemoteManagement1.command('windows-remote-management')
  .description($('Remove catparametersVirtualMachineWindowsRemoteManagement1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add windows-remote-management
  var catparametersVirtualMachineWindowsRemoteManagement2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineWindowsRemoteManagement2 = catparametersVirtualMachineWindowsRemoteManagement2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineWindowsRemoteManagement2 = parametersVirtualMachineWindowsRemoteManagement2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineWindowsRemoteManagement2.command('windows-remote-management')
  .description($('Remove catparametersVirtualMachineWindowsRemoteManagement2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--listeners <listeners>', $('Add the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement' + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set listeners
  var catparametersVirtualMachineListeners0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListeners0 = catparametersVirtualMachineListeners0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineListeners0 = parametersVirtualMachineListeners0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineListeners0.command('listeners')
  .description($('Set catparametersVirtualMachineListeners0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Set the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Set the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = options.path + '/' + 'listenerType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove listeners
  var catparametersVirtualMachineListeners1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListeners1 = catparametersVirtualMachineListeners1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineListeners1 = parametersVirtualMachineListeners1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineListeners1.command('listeners')
  .description($('Remove catparametersVirtualMachineListeners1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add listeners
  var catparametersVirtualMachineListeners2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListeners2 = catparametersVirtualMachineListeners2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineListeners2 = parametersVirtualMachineListeners2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineListeners2.command('listeners')
  .description($('Remove catparametersVirtualMachineListeners2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--certificate-thumbprint <certificateThumbprint>', $('Add the certificate-thumbprint value.'))
  .option('--listener-type <listenerType>', $('Add the listener-type value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateThumbprint';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateThumbprint) {
      if (options.parse && options.certificateThumbprint) {
        options.certificateThumbprint = JSON.parse(options.certificateThumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateThumbprint}]);
    }
    paramPath = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'listenerType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listenerType) {
      if (options.parse && options.listenerType) {
        options.listenerType = JSON.parse(options.listenerType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listenerType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove listener-type
  var catparametersVirtualMachineListenerType1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListenerType1 = catparametersVirtualMachineListenerType1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineListenerType1 = parametersVirtualMachineListenerType1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineListenerType1.command('listener-type')
  .description($('Remove catparametersVirtualMachineListenerType1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners-index <listeners-index>', $('Indexer: listeners-index.'))
  .option('--configuration-sets-index <configuration-sets-index>', $('Indexer: configuration-sets-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add listener-type
  var catparametersVirtualMachineListenerType2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineListenerType2 = catparametersVirtualMachineListenerType2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineListenerType2 = parametersVirtualMachineListenerType2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineListenerType2.command('listener-type')
  .description($('Remove catparametersVirtualMachineListenerType2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/configurationSets/' + options.configurationSetsIndex + '/windowsRemoteManagement/listeners/' + options.listenersIndex + '/listenerType' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set data-virtual-hard-disks
  var catparametersVirtualMachineDataVirtualHardDisks0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDataVirtualHardDisks0 = catparametersVirtualMachineDataVirtualHardDisks0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineDataVirtualHardDisks0 = parametersVirtualMachineDataVirtualHardDisks0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineDataVirtualHardDisks0.command('data-virtual-hard-disks')
  .description($('Set catparametersVirtualMachineDataVirtualHardDisks0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Set the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Set the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'sourceMediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove data-virtual-hard-disks
  var catparametersVirtualMachineDataVirtualHardDisks1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDataVirtualHardDisks1 = catparametersVirtualMachineDataVirtualHardDisks1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineDataVirtualHardDisks1 = parametersVirtualMachineDataVirtualHardDisks1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineDataVirtualHardDisks1.command('data-virtual-hard-disks')
  .description($('Remove catparametersVirtualMachineDataVirtualHardDisks1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add data-virtual-hard-disks
  var catparametersVirtualMachineDataVirtualHardDisks2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineDataVirtualHardDisks2 = catparametersVirtualMachineDataVirtualHardDisks2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineDataVirtualHardDisks2 = parametersVirtualMachineDataVirtualHardDisks2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineDataVirtualHardDisks2.command('data-virtual-hard-disks')
  .description($('Remove catparametersVirtualMachineDataVirtualHardDisks2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--logical-disk-size-in-g-b <logicalDiskSizeInGB>', $('Add the logical-disk-size-in-g-b value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--source-media-link <sourceMediaLink>', $('Add the source-media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalDiskSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalDiskSizeInGB) {
      if (options.parse && options.logicalDiskSizeInGB) {
        options.logicalDiskSizeInGB = JSON.parse(options.logicalDiskSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalDiskSizeInGB}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/dataVirtualHardDisks' + (options.index ? ('/' + options.index) : '') + '/' + 'sourceMediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceMediaLink) {
      if (options.parse && options.sourceMediaLink) {
        options.sourceMediaLink = JSON.parse(options.sourceMediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceMediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set os-virtual-hard-disk
  var catparametersVirtualMachineOSVirtualHardDisk0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineOSVirtualHardDisk0 = catparametersVirtualMachineOSVirtualHardDisk0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineOSVirtualHardDisk0 = parametersVirtualMachineOSVirtualHardDisk0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineOSVirtualHardDisk0.command('os-virtual-hard-disk')
  .description($('Set catparametersVirtualMachineOSVirtualHardDisk0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--i-o-type <iOType>', $('Set the i-o-type value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system <operatingSystem>', $('Set the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Set the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Set the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Set the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/oSVirtualHardDisk';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = options.path + '/' + 'remoteSourceImageLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = options.path + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = options.path + '/' + 'sourceImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove os-virtual-hard-disk
  var catparametersVirtualMachineOSVirtualHardDisk1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineOSVirtualHardDisk1 = catparametersVirtualMachineOSVirtualHardDisk1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineOSVirtualHardDisk1 = parametersVirtualMachineOSVirtualHardDisk1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineOSVirtualHardDisk1.command('os-virtual-hard-disk')
  .description($('Remove catparametersVirtualMachineOSVirtualHardDisk1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/oSVirtualHardDisk';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add os-virtual-hard-disk
  var catparametersVirtualMachineOSVirtualHardDisk2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineOSVirtualHardDisk2 = catparametersVirtualMachineOSVirtualHardDisk2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineOSVirtualHardDisk2 = parametersVirtualMachineOSVirtualHardDisk2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineOSVirtualHardDisk2.command('os-virtual-hard-disk')
  .description($('Remove catparametersVirtualMachineOSVirtualHardDisk2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--i-o-type <iOType>', $('Add the i-o-type value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system <operatingSystem>', $('Add the operating-system value.'))
  .option('--remote-source-image-link <remoteSourceImageLink>', $('Add the remote-source-image-link value.'))
  .option('--resized-size-in-g-b <resizedSizeInGB>', $('Add the resized-size-in-g-b value.'))
  .option('--source-image-name <sourceImageName>', $('Add the source-image-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/oSVirtualHardDisk' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/oSVirtualHardDisk' + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'iOType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iOType) {
      if (options.parse && options.iOType) {
        options.iOType = JSON.parse(options.iOType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iOType}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'operatingSystem';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystem) {
      if (options.parse && options.operatingSystem) {
        options.operatingSystem = JSON.parse(options.operatingSystem);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystem}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'remoteSourceImageLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSourceImageLink) {
      if (options.parse && options.remoteSourceImageLink) {
        options.remoteSourceImageLink = JSON.parse(options.remoteSourceImageLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSourceImageLink}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'resizedSizeInGB';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resizedSizeInGB) {
      if (options.parse && options.resizedSizeInGB) {
        options.resizedSizeInGB = JSON.parse(options.resizedSizeInGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resizedSizeInGB}]);
    }
    paramPath = '/oSVirtualHardDisk' + '/' + 'sourceImageName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceImageName) {
      if (options.parse && options.sourceImageName) {
        options.sourceImageName = JSON.parse(options.sourceImageName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImageName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set resource-extension-references
  var catparametersVirtualMachineResourceExtensionReferences0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionReferences0 = catparametersVirtualMachineResourceExtensionReferences0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineResourceExtensionReferences0 = parametersVirtualMachineResourceExtensionReferences0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineResourceExtensionReferences0.command('resource-extension-references')
  .description($('Set catparametersVirtualMachineResourceExtensionReferences0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--force-update <forceUpdate>', $('Set the force-update value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--reference-name <referenceName>', $('Set the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Set the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Set the state value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'forceUpdate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'referenceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = options.path + '/' + 'resourceExtensionParameterValues';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = options.path + '/' + 'state';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove resource-extension-references
  var catparametersVirtualMachineResourceExtensionReferences1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionReferences1 = catparametersVirtualMachineResourceExtensionReferences1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineResourceExtensionReferences1 = parametersVirtualMachineResourceExtensionReferences1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineResourceExtensionReferences1.command('resource-extension-references')
  .description($('Remove catparametersVirtualMachineResourceExtensionReferences1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add resource-extension-references
  var catparametersVirtualMachineResourceExtensionReferences2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionReferences2 = catparametersVirtualMachineResourceExtensionReferences2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineResourceExtensionReferences2 = parametersVirtualMachineResourceExtensionReferences2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineResourceExtensionReferences2.command('resource-extension-references')
  .description($('Remove catparametersVirtualMachineResourceExtensionReferences2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--force-update <forceUpdate>', $('Add the force-update value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .option('--reference-name <referenceName>', $('Add the reference-name value.'))
  .option('--resource-extension-parameter-values <resourceExtensionParameterValues>', $('Add the resource-extension-parameter-values value.'))
  .option('--state <state>', $('Add the state value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'forceUpdate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.forceUpdate) {
      if (options.parse && options.forceUpdate) {
        options.forceUpdate = JSON.parse(options.forceUpdate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.forceUpdate}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'referenceName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceName) {
      if (options.parse && options.referenceName) {
        options.referenceName = JSON.parse(options.referenceName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceName}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'resourceExtensionParameterValues';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceExtensionParameterValues) {
      if (options.parse && options.resourceExtensionParameterValues) {
        options.resourceExtensionParameterValues = JSON.parse(options.resourceExtensionParameterValues);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceExtensionParameterValues}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'state';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.state) {
      if (options.parse && options.state) {
        options.state = JSON.parse(options.state);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.state}]);
    }
    paramPath = '/resourceExtensionReferences' + (options.index ? ('/' + options.index) : '') + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set resource-extension-parameter-values
  var catparametersVirtualMachineResourceExtensionParameterValues0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionParameterValues0 = catparametersVirtualMachineResourceExtensionParameterValues0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineResourceExtensionParameterValues0 = parametersVirtualMachineResourceExtensionParameterValues0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineResourceExtensionParameterValues0.command('resource-extension-parameter-values')
  .description($('Set catparametersVirtualMachineResourceExtensionParameterValues0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .option('--key <key>', $('Set the key value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--value <value>', $('Set the value value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'key';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'value';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove resource-extension-parameter-values
  var catparametersVirtualMachineResourceExtensionParameterValues1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionParameterValues1 = catparametersVirtualMachineResourceExtensionParameterValues1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineResourceExtensionParameterValues1 = parametersVirtualMachineResourceExtensionParameterValues1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineResourceExtensionParameterValues1.command('resource-extension-parameter-values')
  .description($('Remove catparametersVirtualMachineResourceExtensionParameterValues1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--resource-extension-references-index <resource-extension-references-index>', $('Indexer: resource-extension-references-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add resource-extension-parameter-values
  var catparametersVirtualMachineResourceExtensionParameterValues2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineResourceExtensionParameterValues2 = catparametersVirtualMachineResourceExtensionParameterValues2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineResourceExtensionParameterValues2 = parametersVirtualMachineResourceExtensionParameterValues2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineResourceExtensionParameterValues2.command('resource-extension-parameter-values')
  .description($('Remove catparametersVirtualMachineResourceExtensionParameterValues2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--key <key>', $('Add the key value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--value <value>', $('Add the value value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'key';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.key) {
      if (options.parse && options.key) {
        options.key = JSON.parse(options.key);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.key}]);
    }
    paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/resourceExtensionReferences/' + options.resourceExtensionReferencesIndex + '/resourceExtensionParameterValues' + (options.index ? ('/' + options.index) : '') + '/' + 'value';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.value) {
      if (options.parse && options.value) {
        options.value = JSON.parse(options.value);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachine UpdateLoadBalancedEndpointSet
  --service-name
  --deployment-name
  --parameters
=============================================
{
  "loadBalancedEndpoints":[
    {
      "enableDirectServerReturn":null,
      "idleTimeoutInMinutes":null,
      "loadBalancedEndpointSetName":"",
      "loadBalancerDistribution":"",
      "loadBalancerName":"",
      "loadBalancerProbe":{
        "intervalInSeconds":null,
        "path":"",
        "port":0,
        "protocol":0,
        "timeoutInSeconds":null
      },
      "localPort":null,
      "name":"",
      "port":null,
      "protocol":"",
      "rules":[
        {
          "action":"",
          "description":"",
          "order":null,
          "remoteSubnet":""
        }
      ],
      "virtualIPAddress":"",
      "virtualIPName":""
    }
  ]
}
*/
  var virtualMachineUpdateLoadBalancedEndpointSet = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine').description($('Commands to manage your virtual machine.'));
  virtualMachineUpdateLoadBalancedEndpointSet.command('update-load-balanced-endpoint-set')
  .description($('update-load-balanced-endpoint-set method to manage your virtual machine.'))
  .usage('[options]')
  .option('--service-name <service-name>', $('service-name'))
  .option('--deployment-name <deployment-name>', $('deployment-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('serviceName = ' + options.serviceName);
    cli.output.info('deploymentName = ' + options.deploymentName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachines.updateLoadBalancedEndpointSet(options.serviceName, options.deploymentName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineUpdateLoadBalancedEndpointSetupdateLoadBalancedEndpointSetParameters2 = virtualMachineUpdateLoadBalancedEndpointSet.category('parameters')
  .description($('Commands to manage parameter for your virtual machine.'));
  var virtualMachineUpdateLoadBalancedEndpointSetupdateLoadBalancedEndpointSetGenerate2 = virtualMachineUpdateLoadBalancedEndpointSetupdateLoadBalancedEndpointSetParameters2.category('generate')
  .description($('Commands to generate parameter file for your virtual machine.'));
  virtualMachineUpdateLoadBalancedEndpointSetupdateLoadBalancedEndpointSetGenerate2.command('update-load-balanced-endpoint-set')
  .description($('Generate virtualMachineUpdateLoadBalancedEndpointSet parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"loadBalancedEndpoints\":[{\"enableDirectServerReturn\":null,\"idleTimeoutInMinutes\":null,\"loadBalancedEndpointSetName\":\"\",\"loadBalancerDistribution\":\"\",\"loadBalancerName\":\"\",\"loadBalancerProbe\":{\"intervalInSeconds\":null,\"path\":\"\",\"port\":0,\"protocol\":0,\"timeoutInSeconds\":null},\"localPort\":null,\"name\":\"\",\"port\":null,\"protocol\":\"\",\"rules\":[{\"action\":\"\",\"description\":\"\",\"order\":null,\"remoteSubnet\":\"\"}],\"virtualIPAddress\":\"\",\"virtualIPName\":\"\"}]}', _);
    var filePath = 'virtualMachineUpdateLoadBalancedEndpointSet_updateLoadBalancedEndpointSet.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"loadBalancedEndpoints\":[\r\n{\r\n\"enableDirectServerReturn\":null,\r\n\"idleTimeoutInMinutes\":null,\r\n\"loadBalancedEndpointSetName\":\"\",\r\n\"loadBalancerDistribution\":\"\",\r\n\"loadBalancerName\":\"\",\r\n\"loadBalancerProbe\":{\r\n\"intervalInSeconds\":null,\r\n\"path\":\"\",\r\n\"port\":0,\r\n\"protocol\":0,\r\n\"timeoutInSeconds\":null\r\n},\r\n\"localPort\":null,\r\n\"name\":\"\",\r\n\"port\":null,\r\n\"protocol\":\"\",\r\n\"rules\":[\r\n{\r\n\"action\":\"\",\r\n\"description\":\"\",\r\n\"order\":null,\r\n\"remoteSubnet\":\"\"\r\n}\r\n],\r\n\"virtualIPAddress\":\"\",\r\n\"virtualIPName\":\"\"\r\n}\r\n]\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineUpdateLoadBalancedEndpointSetupdateLoadBalancedEndpointSetParameters2.command('patch')
  .description($('Command to patch virtualMachineUpdateLoadBalancedEndpointSet parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-update-load-balanced-set-parameters
  var catparametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0 = catparametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0 = parametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0.command('virtual-machine-update-load-balanced-set-parameters')
  .description($('Set catparametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--load-balanced-endpoints <loadBalancedEndpoints>', $('Set the load-balanced-endpoints value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'loadBalancedEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpoints) {
      if (options.parse && options.loadBalancedEndpoints) {
        options.loadBalancedEndpoints = JSON.parse(options.loadBalancedEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-update-load-balanced-set-parameters
  var catparametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1 = catparametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1 = parametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1.command('virtual-machine-update-load-balanced-set-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-update-load-balanced-set-parameters
  var catparametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2 = catparametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2 = parametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2.command('virtual-machine-update-load-balanced-set-parameters')
  .description($('Remove catparametersVirtualMachineVirtualMachineUpdateLoadBalancedSetParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--load-balanced-endpoints <loadBalancedEndpoints>', $('Add the load-balanced-endpoints value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'loadBalancedEndpoints';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpoints) {
      if (options.parse && options.loadBalancedEndpoints) {
        options.loadBalancedEndpoints = JSON.parse(options.loadBalancedEndpoints);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpoints}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balanced-endpoints
  var catparametersVirtualMachineLoadBalancedEndpoints0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancedEndpoints0 = catparametersVirtualMachineLoadBalancedEndpoints0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineLoadBalancedEndpoints0 = parametersVirtualMachineLoadBalancedEndpoints0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineLoadBalancedEndpoints0.command('load-balanced-endpoints')
  .description($('Set catparametersVirtualMachineLoadBalancedEndpoints0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Set the enable-direct-server-return value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Set the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Set the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Set the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Set the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Set the local-port value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--rules <rules>', $('Set the rules value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Set the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Set the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = options.path + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = options.path + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = options.path + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    paramPath = options.path + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = options.path + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balanced-endpoints
  var catparametersVirtualMachineLoadBalancedEndpoints1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancedEndpoints1 = catparametersVirtualMachineLoadBalancedEndpoints1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineLoadBalancedEndpoints1 = parametersVirtualMachineLoadBalancedEndpoints1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineLoadBalancedEndpoints1.command('load-balanced-endpoints')
  .description($('Remove catparametersVirtualMachineLoadBalancedEndpoints1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balanced-endpoints
  var catparametersVirtualMachineLoadBalancedEndpoints2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancedEndpoints2 = catparametersVirtualMachineLoadBalancedEndpoints2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineLoadBalancedEndpoints2 = parametersVirtualMachineLoadBalancedEndpoints2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineLoadBalancedEndpoints2.command('load-balanced-endpoints')
  .description($('Remove catparametersVirtualMachineLoadBalancedEndpoints2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--enable-direct-server-return <enableDirectServerReturn>', $('Add the enable-direct-server-return value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--load-balanced-endpoint-set-name <loadBalancedEndpointSetName>', $('Add the load-balanced-endpoint-set-name value.'))
  .option('--load-balancer-distribution <loadBalancerDistribution>', $('Add the load-balancer-distribution value.'))
  .option('--load-balancer-name <loadBalancerName>', $('Add the load-balancer-name value.'))
  .option('--load-balancer-probe <loadBalancerProbe>', $('Add the load-balancer-probe value.'))
  .option('--local-port <localPort>', $('Add the local-port value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--rules <rules>', $('Add the rules value.'))
  .option('--virtual-ip-address <virtualIPAddress>', $('Add the virtual-ip-address value.'))
  .option('--virtual-ip-name <virtualIPName>', $('Add the virtual-ip-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'enableDirectServerReturn';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableDirectServerReturn) {
      if (options.parse && options.enableDirectServerReturn) {
        options.enableDirectServerReturn = JSON.parse(options.enableDirectServerReturn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableDirectServerReturn}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancedEndpointSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancedEndpointSetName) {
      if (options.parse && options.loadBalancedEndpointSetName) {
        options.loadBalancedEndpointSetName = JSON.parse(options.loadBalancedEndpointSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancedEndpointSetName}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerDistribution';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerDistribution) {
      if (options.parse && options.loadBalancerDistribution) {
        options.loadBalancerDistribution = JSON.parse(options.loadBalancerDistribution);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerDistribution}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerName) {
      if (options.parse && options.loadBalancerName) {
        options.loadBalancerName = JSON.parse(options.loadBalancerName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerName}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerProbe';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerProbe) {
      if (options.parse && options.loadBalancerProbe) {
        options.loadBalancerProbe = JSON.parse(options.loadBalancerProbe);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerProbe}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'localPort';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.localPort) {
      if (options.parse && options.localPort) {
        options.localPort = JSON.parse(options.localPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localPort}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'rules';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.rules) {
      if (options.parse && options.rules) {
        options.rules = JSON.parse(options.rules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.rules}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPAddress';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPAddress) {
      if (options.parse && options.virtualIPAddress) {
        options.virtualIPAddress = JSON.parse(options.virtualIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPAddress}]);
    }
    paramPath = '/loadBalancedEndpoints' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualIPName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualIPName) {
      if (options.parse && options.virtualIPName) {
        options.virtualIPName = JSON.parse(options.virtualIPName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualIPName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancer-probe
  var catparametersVirtualMachineLoadBalancerProbe0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancerProbe0 = catparametersVirtualMachineLoadBalancerProbe0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineLoadBalancerProbe0 = parametersVirtualMachineLoadBalancerProbe0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineLoadBalancerProbe0.command('load-balancer-probe')
  .description($('Set catparametersVirtualMachineLoadBalancerProbe0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Set the interval-in-seconds value.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--port <port>', $('Set the port value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Set the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe';
    var paramPath = options.path + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancer-probe
  var catparametersVirtualMachineLoadBalancerProbe1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancerProbe1 = catparametersVirtualMachineLoadBalancerProbe1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineLoadBalancerProbe1 = parametersVirtualMachineLoadBalancerProbe1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineLoadBalancerProbe1.command('load-balancer-probe')
  .description($('Remove catparametersVirtualMachineLoadBalancerProbe1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancer-probe
  var catparametersVirtualMachineLoadBalancerProbe2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineLoadBalancerProbe2 = catparametersVirtualMachineLoadBalancerProbe2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineLoadBalancerProbe2 = parametersVirtualMachineLoadBalancerProbe2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineLoadBalancerProbe2.command('load-balancer-probe')
  .description($('Remove catparametersVirtualMachineLoadBalancerProbe2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--interval-in-seconds <intervalInSeconds>', $('Add the interval-in-seconds value.'))
  .option('--path <path>', $('Add the path value.'))
  .option('--port <port>', $('Add the port value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--timeout-in-seconds <timeoutInSeconds>', $('Add the timeout-in-seconds value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + 'intervalInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.intervalInSeconds) {
      if (options.parse && options.intervalInSeconds) {
        options.intervalInSeconds = JSON.parse(options.intervalInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.intervalInSeconds}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + 'port';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.port) {
      if (options.parse && options.port) {
        options.port = JSON.parse(options.port);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.port}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe' + '/' + 'timeoutInSeconds';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeoutInSeconds) {
      if (options.parse && options.timeoutInSeconds) {
        options.timeoutInSeconds = JSON.parse(options.timeoutInSeconds);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeoutInSeconds}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove protocol
  var catparametersVirtualMachineProtocol1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProtocol1 = catparametersVirtualMachineProtocol1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineProtocol1 = parametersVirtualMachineProtocol1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineProtocol1.command('protocol')
  .description($('Remove catparametersVirtualMachineProtocol1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe/protocol';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add protocol
  var catparametersVirtualMachineProtocol2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineProtocol2 = catparametersVirtualMachineProtocol2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineProtocol2 = parametersVirtualMachineProtocol2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineProtocol2.command('protocol')
  .description($('Remove catparametersVirtualMachineProtocol2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/loadBalancerProbe/protocol' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set rules
  var catparametersVirtualMachineRules0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRules0 = catparametersVirtualMachineRules0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine.'));
  var setparametersVirtualMachineRules0 = parametersVirtualMachineRules0.category('set')
  .description($('Commands to set parameter file for your virtual-machine.'));
  setparametersVirtualMachineRules0.command('rules')
  .description($('Set catparametersVirtualMachineRules0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .option('--action <action>', $('Set the action value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--order <order>', $('Set the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Set the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = options.path + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove rules
  var catparametersVirtualMachineRules1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRules1 = catparametersVirtualMachineRules1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine.'));
  var removeparametersVirtualMachineRules1 = parametersVirtualMachineRules1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine.'));
  removeparametersVirtualMachineRules1.command('rules')
  .description($('Remove catparametersVirtualMachineRules1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balanced-endpoints-index <load-balanced-endpoints-index>', $('Indexer: load-balanced-endpoints-index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add rules
  var catparametersVirtualMachineRules2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine');
  var parametersVirtualMachineRules2 = catparametersVirtualMachineRules2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine.'));
  var addparametersVirtualMachineRules2 = parametersVirtualMachineRules2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine.'));
  addparametersVirtualMachineRules2.command('rules')
  .description($('Remove catparametersVirtualMachineRules2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--action <action>', $('Add the action value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--order <order>', $('Add the order value.'))
  .option('--remote-subnet <remoteSubnet>', $('Add the remote-subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'action';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.action) {
      if (options.parse && options.action) {
        options.action = JSON.parse(options.action);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.action}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'order';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.order) {
      if (options.parse && options.order) {
        options.order = JSON.parse(options.order);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.order}]);
    }
    paramPath = '/loadBalancedEndpoints/' + options.loadBalancedEndpointsIndex + '/rules' + (options.index ? ('/' + options.index) : '') + '/' + 'remoteSubnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.remoteSubnet) {
      if (options.parse && options.remoteSubnet) {
        options.remoteSubnet = JSON.parse(options.remoteSubnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.remoteSubnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineOSImage Create
  --parameters
=============================================
{
  "description":"",
  "eula":"",
  "iconUri":"",
  "imageFamily":"",
  "isPremium":false,
  "label":"",
  "language":"",
  "mediaLinkUri":"",
  "name":"",
  "operatingSystemType":"",
  "privacyUri":"",
  "publishedDate":null,
  "recommendedVMSize":"",
  "showInGui":false,
  "smallIconUri":""
}
*/
  var virtualMachineOSImageCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageCreate.command('create')
  .description($('create method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.create(parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineOSImageCreatecreateParameters0 = virtualMachineOSImageCreate.category('parameters')
  .description($('Commands to manage parameter for your virtual machine os image.'));
  var virtualMachineOSImageCreatecreateGenerate0 = virtualMachineOSImageCreatecreateParameters0.category('generate')
  .description($('Commands to generate parameter file for your virtual machine os image.'));
  virtualMachineOSImageCreatecreateGenerate0.command('create')
  .description($('Generate virtualMachineOSImageCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"description\":\"\",\"eula\":\"\",\"iconUri\":\"\",\"imageFamily\":\"\",\"isPremium\":false,\"label\":\"\",\"language\":\"\",\"mediaLinkUri\":\"\",\"name\":\"\",\"operatingSystemType\":\"\",\"privacyUri\":\"\",\"publishedDate\":null,\"recommendedVMSize\":\"\",\"showInGui\":false,\"smallIconUri\":\"\"}', _);
    var filePath = 'virtualMachineOSImageCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"description\":\"\",\r\n\"eula\":\"\",\r\n\"iconUri\":\"\",\r\n\"imageFamily\":\"\",\r\n\"isPremium\":false,\r\n\"label\":\"\",\r\n\"language\":\"\",\r\n\"mediaLinkUri\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystemType\":\"\",\r\n\"privacyUri\":\"\",\r\n\"publishedDate\":null,\r\n\"recommendedVMSize\":\"\",\r\n\"showInGui\":false,\r\n\"smallIconUri\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineOSImageCreatecreateParameters0.command('patch')
  .description($('Command to patch virtualMachineOSImageCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-os-image-create-parameters
  var catparametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters0 = catparametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-os-image.'));
  var setparametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters0 = parametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-os-image.'));
  setparametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters0.command('virtual-machine-os-image-create-parameters')
  .description($('Set catparametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--icon-uri <iconUri>', $('Set the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Set the image-family value.'))
  .option('--is-premium <isPremium>', $('Set the is-premium value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--language <language>', $('Set the language value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Set the media-link-uri value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Set the operating-system-type value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Set the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Set the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Set the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'iconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = options.path + '/' + 'imageFamily';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = options.path + '/' + 'isPremium';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isPremium) {
      if (options.parse && options.isPremium) {
        options.isPremium = JSON.parse(options.isPremium);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isPremium}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'language';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = options.path + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'recommendedVMSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = options.path + '/' + 'showInGui';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = options.path + '/' + 'smallIconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-os-image-create-parameters
  var catparametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters1 = catparametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-os-image.'));
  var removeparametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters1 = parametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-os-image.'));
  removeparametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters1.command('virtual-machine-os-image-create-parameters')
  .description($('Remove catparametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-os-image-create-parameters
  var catparametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters2 = catparametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-os-image.'));
  var addparametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters2 = parametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-os-image.'));
  addparametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters2.command('virtual-machine-os-image-create-parameters')
  .description($('Remove catparametersVirtualMachineOSImageVirtualMachineOSImageCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--icon-uri <iconUri>', $('Add the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Add the image-family value.'))
  .option('--is-premium <isPremium>', $('Add the is-premium value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--language <language>', $('Add the language value.'))
  .option('--media-link-uri <mediaLinkUri>', $('Add the media-link-uri value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Add the operating-system-type value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Add the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Add the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Add the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'iconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = '' + '/' + 'imageFamily';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = '' + '/' + 'isPremium';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isPremium) {
      if (options.parse && options.isPremium) {
        options.isPremium = JSON.parse(options.isPremium);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isPremium}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'language';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = '' + '/' + 'mediaLinkUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLinkUri) {
      if (options.parse && options.mediaLinkUri) {
        options.mediaLinkUri = JSON.parse(options.mediaLinkUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLinkUri}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'recommendedVMSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = '' + '/' + 'showInGui';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = '' + '/' + 'smallIconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineOSImage Delete
  --image-name
  --delete-from-storage
*/
  var virtualMachineOSImageDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageDelete.command('delete')
  .description($('delete method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('imageName = ' + options.imageName);
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(fileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.info('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.deleteMethod(options.imageName, options.deleteFromStorage, _);
    cli.output.json(result);
  });
/*
  VirtualMachineOSImage Get
  --image-name
*/
  var virtualMachineOSImageGet = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageGet.command('get')
  .description($('get method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('imageName = ' + options.imageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.get(options.imageName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineOSImage GetDetails
  --image-name
*/
  var virtualMachineOSImageGetDetails = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageGetDetails.command('get-details')
  .description($('get-details method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('imageName = ' + options.imageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.getDetails(options.imageName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineOSImage List
*/
  var virtualMachineOSImageList = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageList.command('list')
  .description($('list method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.list(_);
    cli.output.json(result);
  });
/*
  VirtualMachineOSImage Replicate
  --image-name
  --parameters
=============================================
{
  "computeImageAttributes":{
    "offer":"",
    "sku":"",
    "version":""
  },
  "marketplaceImageAttributes":{
    "plan":{
      "name":"",
      "product":"",
      "publisher":""
    },
    "publisherId":""
  },
  "targetLocations":[
    ""
  ]
}
*/
  var virtualMachineOSImageReplicate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageReplicate.command('replicate')
  .description($('replicate method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('imageName = ' + options.imageName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.replicate(options.imageName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineOSImageReplicatereplicateParameters1 = virtualMachineOSImageReplicate.category('parameters')
  .description($('Commands to manage parameter for your virtual machine os image.'));
  var virtualMachineOSImageReplicatereplicateGenerate1 = virtualMachineOSImageReplicatereplicateParameters1.category('generate')
  .description($('Commands to generate parameter file for your virtual machine os image.'));
  virtualMachineOSImageReplicatereplicateGenerate1.command('replicate')
  .description($('Generate virtualMachineOSImageReplicate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"computeImageAttributes\":{\"offer\":\"\",\"sku\":\"\",\"version\":\"\"},\"marketplaceImageAttributes\":{\"plan\":{\"name\":\"\",\"product\":\"\",\"publisher\":\"\"},\"publisherId\":\"\"},\"targetLocations\":[\"\"]}', _);
    var filePath = 'virtualMachineOSImageReplicate_replicate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"computeImageAttributes\":{\r\n\"offer\":\"\",\r\n\"sku\":\"\",\r\n\"version\":\"\"\r\n},\r\n\"marketplaceImageAttributes\":{\r\n\"plan\":{\r\n\"name\":\"\",\r\n\"product\":\"\",\r\n\"publisher\":\"\"\r\n},\r\n\"publisherId\":\"\"\r\n},\r\n\"targetLocations\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineOSImageReplicatereplicateParameters1.command('patch')
  .description($('Command to patch virtualMachineOSImageReplicate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-os-image-replicate-parameters
  var catparametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0 = catparametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-os-image.'));
  var setparametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0 = parametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-os-image.'));
  setparametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0.command('virtual-machine-os-image-replicate-parameters')
  .description($('Set catparametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--compute-image-attributes <computeImageAttributes>', $('Set the compute-image-attributes value.'))
  .option('--marketplace-image-attributes <marketplaceImageAttributes>', $('Set the marketplace-image-attributes value.'))
  .option('--target-locations <targetLocations>', $('Set the target-locations value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'computeImageAttributes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computeImageAttributes) {
      if (options.parse && options.computeImageAttributes) {
        options.computeImageAttributes = JSON.parse(options.computeImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computeImageAttributes}]);
    }
    paramPath = options.path + '/' + 'marketplaceImageAttributes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.marketplaceImageAttributes) {
      if (options.parse && options.marketplaceImageAttributes) {
        options.marketplaceImageAttributes = JSON.parse(options.marketplaceImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.marketplaceImageAttributes}]);
    }
    paramPath = options.path + '/' + 'targetLocations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.targetLocations) {
      if (options.parse && options.targetLocations) {
        options.targetLocations = JSON.parse(options.targetLocations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetLocations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-os-image-replicate-parameters
  var catparametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1 = catparametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-os-image.'));
  var removeparametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1 = parametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-os-image.'));
  removeparametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1.command('virtual-machine-os-image-replicate-parameters')
  .description($('Remove catparametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-os-image-replicate-parameters
  var catparametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2 = catparametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-os-image.'));
  var addparametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2 = parametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-os-image.'));
  addparametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2.command('virtual-machine-os-image-replicate-parameters')
  .description($('Remove catparametersVirtualMachineOSImageVirtualMachineOSImageReplicateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--compute-image-attributes <computeImageAttributes>', $('Add the compute-image-attributes value.'))
  .option('--marketplace-image-attributes <marketplaceImageAttributes>', $('Add the marketplace-image-attributes value.'))
  .option('--target-locations <targetLocations>', $('Add the target-locations value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'computeImageAttributes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computeImageAttributes) {
      if (options.parse && options.computeImageAttributes) {
        options.computeImageAttributes = JSON.parse(options.computeImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computeImageAttributes}]);
    }
    paramPath = '' + '/' + 'marketplaceImageAttributes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.marketplaceImageAttributes) {
      if (options.parse && options.marketplaceImageAttributes) {
        options.marketplaceImageAttributes = JSON.parse(options.marketplaceImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.marketplaceImageAttributes}]);
    }
    paramPath = '' + '/' + 'targetLocations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.targetLocations) {
      if (options.parse && options.targetLocations) {
        options.targetLocations = JSON.parse(options.targetLocations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetLocations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set compute-image-attributes
  var catparametersVirtualMachineOSImageComputeImageAttributes0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageComputeImageAttributes0 = catparametersVirtualMachineOSImageComputeImageAttributes0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-os-image.'));
  var setparametersVirtualMachineOSImageComputeImageAttributes0 = parametersVirtualMachineOSImageComputeImageAttributes0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-os-image.'));
  setparametersVirtualMachineOSImageComputeImageAttributes0.command('compute-image-attributes')
  .description($('Set catparametersVirtualMachineOSImageComputeImageAttributes0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--offer <offer>', $('Set the offer value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/computeImageAttributes';
    var paramPath = options.path + '/' + 'offer';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.offer) {
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = options.path + '/' + 'sku';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove compute-image-attributes
  var catparametersVirtualMachineOSImageComputeImageAttributes1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageComputeImageAttributes1 = catparametersVirtualMachineOSImageComputeImageAttributes1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-os-image.'));
  var removeparametersVirtualMachineOSImageComputeImageAttributes1 = parametersVirtualMachineOSImageComputeImageAttributes1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-os-image.'));
  removeparametersVirtualMachineOSImageComputeImageAttributes1.command('compute-image-attributes')
  .description($('Remove catparametersVirtualMachineOSImageComputeImageAttributes1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/computeImageAttributes';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add compute-image-attributes
  var catparametersVirtualMachineOSImageComputeImageAttributes2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageComputeImageAttributes2 = catparametersVirtualMachineOSImageComputeImageAttributes2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-os-image.'));
  var addparametersVirtualMachineOSImageComputeImageAttributes2 = parametersVirtualMachineOSImageComputeImageAttributes2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-os-image.'));
  addparametersVirtualMachineOSImageComputeImageAttributes2.command('compute-image-attributes')
  .description($('Remove catparametersVirtualMachineOSImageComputeImageAttributes2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--offer <offer>', $('Add the offer value.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/computeImageAttributes' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/computeImageAttributes' + '/' + 'offer';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.offer) {
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = '/computeImageAttributes' + '/' + 'sku';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '/computeImageAttributes' + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set marketplace-image-attributes
  var catparametersVirtualMachineOSImageMarketplaceImageAttributes0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageMarketplaceImageAttributes0 = catparametersVirtualMachineOSImageMarketplaceImageAttributes0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-os-image.'));
  var setparametersVirtualMachineOSImageMarketplaceImageAttributes0 = parametersVirtualMachineOSImageMarketplaceImageAttributes0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-os-image.'));
  setparametersVirtualMachineOSImageMarketplaceImageAttributes0.command('marketplace-image-attributes')
  .description($('Set catparametersVirtualMachineOSImageMarketplaceImageAttributes0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--plan <plan>', $('Set the plan value.'))
  .option('--publisher-id <publisherId>', $('Set the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/marketplaceImageAttributes';
    var paramPath = options.path + '/' + 'plan';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.plan) {
      if (options.parse && options.plan) {
        options.plan = JSON.parse(options.plan);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.plan}]);
    }
    paramPath = options.path + '/' + 'publisherId';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisherId) {
      if (options.parse && options.publisherId) {
        options.publisherId = JSON.parse(options.publisherId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherId}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove marketplace-image-attributes
  var catparametersVirtualMachineOSImageMarketplaceImageAttributes1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageMarketplaceImageAttributes1 = catparametersVirtualMachineOSImageMarketplaceImageAttributes1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-os-image.'));
  var removeparametersVirtualMachineOSImageMarketplaceImageAttributes1 = parametersVirtualMachineOSImageMarketplaceImageAttributes1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-os-image.'));
  removeparametersVirtualMachineOSImageMarketplaceImageAttributes1.command('marketplace-image-attributes')
  .description($('Remove catparametersVirtualMachineOSImageMarketplaceImageAttributes1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/marketplaceImageAttributes';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add marketplace-image-attributes
  var catparametersVirtualMachineOSImageMarketplaceImageAttributes2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageMarketplaceImageAttributes2 = catparametersVirtualMachineOSImageMarketplaceImageAttributes2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-os-image.'));
  var addparametersVirtualMachineOSImageMarketplaceImageAttributes2 = parametersVirtualMachineOSImageMarketplaceImageAttributes2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-os-image.'));
  addparametersVirtualMachineOSImageMarketplaceImageAttributes2.command('marketplace-image-attributes')
  .description($('Remove catparametersVirtualMachineOSImageMarketplaceImageAttributes2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--plan <plan>', $('Add the plan value.'))
  .option('--publisher-id <publisherId>', $('Add the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/marketplaceImageAttributes' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/marketplaceImageAttributes' + '/' + 'plan';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.plan) {
      if (options.parse && options.plan) {
        options.plan = JSON.parse(options.plan);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.plan}]);
    }
    paramPath = '/marketplaceImageAttributes' + '/' + 'publisherId';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisherId) {
      if (options.parse && options.publisherId) {
        options.publisherId = JSON.parse(options.publisherId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherId}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set plan
  var catparametersVirtualMachineOSImagePlan0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImagePlan0 = catparametersVirtualMachineOSImagePlan0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-os-image.'));
  var setparametersVirtualMachineOSImagePlan0 = parametersVirtualMachineOSImagePlan0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-os-image.'));
  setparametersVirtualMachineOSImagePlan0.command('plan')
  .description($('Set catparametersVirtualMachineOSImagePlan0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--product <product>', $('Set the product value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/marketplaceImageAttributes/plan';
    var paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'product';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.product) {
      if (options.parse && options.product) {
        options.product = JSON.parse(options.product);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.product}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove plan
  var catparametersVirtualMachineOSImagePlan1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImagePlan1 = catparametersVirtualMachineOSImagePlan1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-os-image.'));
  var removeparametersVirtualMachineOSImagePlan1 = parametersVirtualMachineOSImagePlan1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-os-image.'));
  removeparametersVirtualMachineOSImagePlan1.command('plan')
  .description($('Remove catparametersVirtualMachineOSImagePlan1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/marketplaceImageAttributes/plan';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add plan
  var catparametersVirtualMachineOSImagePlan2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImagePlan2 = catparametersVirtualMachineOSImagePlan2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-os-image.'));
  var addparametersVirtualMachineOSImagePlan2 = parametersVirtualMachineOSImagePlan2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-os-image.'));
  addparametersVirtualMachineOSImagePlan2.command('plan')
  .description($('Remove catparametersVirtualMachineOSImagePlan2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--product <product>', $('Add the product value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/marketplaceImageAttributes/plan' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/marketplaceImageAttributes/plan' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/marketplaceImageAttributes/plan' + '/' + 'product';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.product) {
      if (options.parse && options.product) {
        options.product = JSON.parse(options.product);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.product}]);
    }
    paramPath = '/marketplaceImageAttributes/plan' + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set target-locations
  var catparametersVirtualMachineOSImageTargetLocations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageTargetLocations0 = catparametersVirtualMachineOSImageTargetLocations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-os-image.'));
  var setparametersVirtualMachineOSImageTargetLocations0 = parametersVirtualMachineOSImageTargetLocations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-os-image.'));
  setparametersVirtualMachineOSImageTargetLocations0.command('target-locations')
  .description($('Set catparametersVirtualMachineOSImageTargetLocations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove target-locations
  var catparametersVirtualMachineOSImageTargetLocations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageTargetLocations1 = catparametersVirtualMachineOSImageTargetLocations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-os-image.'));
  var removeparametersVirtualMachineOSImageTargetLocations1 = parametersVirtualMachineOSImageTargetLocations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-os-image.'));
  removeparametersVirtualMachineOSImageTargetLocations1.command('target-locations')
  .description($('Remove catparametersVirtualMachineOSImageTargetLocations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add target-locations
  var catparametersVirtualMachineOSImageTargetLocations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageTargetLocations2 = catparametersVirtualMachineOSImageTargetLocations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-os-image.'));
  var addparametersVirtualMachineOSImageTargetLocations2 = parametersVirtualMachineOSImageTargetLocations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-os-image.'));
  addparametersVirtualMachineOSImageTargetLocations2.command('target-locations')
  .description($('Remove catparametersVirtualMachineOSImageTargetLocations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineOSImage Share
  --image-name
  --permission
*/
  var virtualMachineOSImageShare = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageShare.command('share')
  .description($('share method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--image-name <image-name>', $('image-name'))
  .option('--permission <permission>', $('permission'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('imageName = ' + options.imageName);
    cli.output.info('permission = ' + options.permission);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.share(options.imageName, options.permission, _);
    cli.output.json(result);
  });
/*
  VirtualMachineOSImage Unreplicate
  --image-name
*/
  var virtualMachineOSImageUnreplicate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageUnreplicate.command('unreplicate')
  .description($('unreplicate method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('imageName = ' + options.imageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.unreplicate(options.imageName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineOSImage Update
  --image-name
  --parameters
=============================================
{
  "description":"",
  "eula":"",
  "iconUri":"",
  "imageFamily":"",
  "isPremium":null,
  "label":"",
  "language":"",
  "privacyUri":"",
  "publishedDate":null,
  "recommendedVMSize":"",
  "showInGui":null,
  "smallIconUri":""
}
*/
  var virtualMachineOSImageUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image').description($('Commands to manage your virtual machine os image.'));
  virtualMachineOSImageUpdate.command('update')
  .description($('update method to manage your virtual machine os image.'))
  .usage('[options]')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('imageName = ' + options.imageName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineOSImages.update(options.imageName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineOSImageUpdateupdateParameters1 = virtualMachineOSImageUpdate.category('parameters')
  .description($('Commands to manage parameter for your virtual machine os image.'));
  var virtualMachineOSImageUpdateupdateGenerate1 = virtualMachineOSImageUpdateupdateParameters1.category('generate')
  .description($('Commands to generate parameter file for your virtual machine os image.'));
  virtualMachineOSImageUpdateupdateGenerate1.command('update')
  .description($('Generate virtualMachineOSImageUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"description\":\"\",\"eula\":\"\",\"iconUri\":\"\",\"imageFamily\":\"\",\"isPremium\":null,\"label\":\"\",\"language\":\"\",\"privacyUri\":\"\",\"publishedDate\":null,\"recommendedVMSize\":\"\",\"showInGui\":null,\"smallIconUri\":\"\"}', _);
    var filePath = 'virtualMachineOSImageUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"description\":\"\",\r\n\"eula\":\"\",\r\n\"iconUri\":\"\",\r\n\"imageFamily\":\"\",\r\n\"isPremium\":null,\r\n\"label\":\"\",\r\n\"language\":\"\",\r\n\"privacyUri\":\"\",\r\n\"publishedDate\":null,\r\n\"recommendedVMSize\":\"\",\r\n\"showInGui\":null,\r\n\"smallIconUri\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineOSImageUpdateupdateParameters1.command('patch')
  .description($('Command to patch virtualMachineOSImageUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-os-image-update-parameters
  var catparametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0 = catparametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-os-image.'));
  var setparametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0 = parametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-os-image.'));
  setparametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0.command('virtual-machine-os-image-update-parameters')
  .description($('Set catparametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--icon-uri <iconUri>', $('Set the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Set the image-family value.'))
  .option('--is-premium <isPremium>', $('Set the is-premium value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--language <language>', $('Set the language value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Set the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Set the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Set the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'iconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = options.path + '/' + 'imageFamily';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = options.path + '/' + 'isPremium';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isPremium) {
      if (options.parse && options.isPremium) {
        options.isPremium = JSON.parse(options.isPremium);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isPremium}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'language';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'recommendedVMSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = options.path + '/' + 'showInGui';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = options.path + '/' + 'smallIconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-os-image-update-parameters
  var catparametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1 = catparametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-os-image.'));
  var removeparametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1 = parametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-os-image.'));
  removeparametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1.command('virtual-machine-os-image-update-parameters')
  .description($('Remove catparametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-os-image-update-parameters
  var catparametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-os-image');
  var parametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2 = catparametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-os-image.'));
  var addparametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2 = parametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-os-image.'));
  addparametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2.command('virtual-machine-os-image-update-parameters')
  .description($('Remove catparametersVirtualMachineOSImageVirtualMachineOSImageUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--icon-uri <iconUri>', $('Add the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Add the image-family value.'))
  .option('--is-premium <isPremium>', $('Add the is-premium value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--language <language>', $('Add the language value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Add the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Add the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Add the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'iconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = '' + '/' + 'imageFamily';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = '' + '/' + 'isPremium';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.isPremium) {
      if (options.parse && options.isPremium) {
        options.isPremium = JSON.parse(options.isPremium);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.isPremium}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'language';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'recommendedVMSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = '' + '/' + 'showInGui';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = '' + '/' + 'smallIconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineVMImage Create
  --parameters
=============================================
{
  "dataDiskConfigurations":[
    {
      "hostCaching":"",
      "logicalUnitNumber":null,
      "mediaLink":""
    }
  ],
  "description":"",
  "eula":"",
  "iconUri":"",
  "imageFamily":"",
  "label":"",
  "language":"",
  "name":"",
  "oSDiskConfiguration":{
    "hostCaching":"",
    "mediaLink":"",
    "oS":"",
    "oSState":""
  },
  "privacyUri":"",
  "publishedDate":null,
  "recommendedVMSize":"",
  "showInGui":null,
  "smallIconUri":""
}
*/
  var virtualMachineVMImageCreate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image').description($('Commands to manage your virtual machine vm image.'));
  virtualMachineVMImageCreate.command('create')
  .description($('create method to manage your virtual machine vm image.'))
  .usage('[options]')
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.create(parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineVMImageCreatecreateParameters0 = virtualMachineVMImageCreate.category('parameters')
  .description($('Commands to manage parameter for your virtual machine vm image.'));
  var virtualMachineVMImageCreatecreateGenerate0 = virtualMachineVMImageCreatecreateParameters0.category('generate')
  .description($('Commands to generate parameter file for your virtual machine vm image.'));
  virtualMachineVMImageCreatecreateGenerate0.command('create')
  .description($('Generate virtualMachineVMImageCreate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"dataDiskConfigurations\":[{\"hostCaching\":\"\",\"logicalUnitNumber\":null,\"mediaLink\":\"\"}],\"description\":\"\",\"eula\":\"\",\"iconUri\":\"\",\"imageFamily\":\"\",\"label\":\"\",\"language\":\"\",\"name\":\"\",\"oSDiskConfiguration\":{\"hostCaching\":\"\",\"mediaLink\":\"\",\"oS\":\"\",\"oSState\":\"\"},\"privacyUri\":\"\",\"publishedDate\":null,\"recommendedVMSize\":\"\",\"showInGui\":null,\"smallIconUri\":\"\"}', _);
    var filePath = 'virtualMachineVMImageCreate_create.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"dataDiskConfigurations\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"logicalUnitNumber\":null,\r\n\"mediaLink\":\"\"\r\n}\r\n],\r\n\"description\":\"\",\r\n\"eula\":\"\",\r\n\"iconUri\":\"\",\r\n\"imageFamily\":\"\",\r\n\"label\":\"\",\r\n\"language\":\"\",\r\n\"name\":\"\",\r\n\"oSDiskConfiguration\":{\r\n\"hostCaching\":\"\",\r\n\"mediaLink\":\"\",\r\n\"oS\":\"\",\r\n\"oSState\":\"\"\r\n},\r\n\"privacyUri\":\"\",\r\n\"publishedDate\":null,\r\n\"recommendedVMSize\":\"\",\r\n\"showInGui\":null,\r\n\"smallIconUri\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineVMImageCreatecreateParameters0.command('patch')
  .description($('Command to patch virtualMachineVMImageCreate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-vm-image-create-parameters
  var catparametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters0 = catparametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters0 = parametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters0.command('virtual-machine-vm-image-create-parameters')
  .description($('Set catparametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Set the data-disk-configurations value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--icon-uri <iconUri>', $('Set the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Set the image-family value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--language <language>', $('Set the language value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Set the os-disk-configuration value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Set the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Set the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Set the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'dataDiskConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'iconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = options.path + '/' + 'imageFamily';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'language';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'oSDiskConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'recommendedVMSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = options.path + '/' + 'showInGui';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = options.path + '/' + 'smallIconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-vm-image-create-parameters
  var catparametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters1 = catparametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters1 = parametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters1.command('virtual-machine-vm-image-create-parameters')
  .description($('Remove catparametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-vm-image-create-parameters
  var catparametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters2 = catparametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters2 = parametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters2.command('virtual-machine-vm-image-create-parameters')
  .description($('Remove catparametersVirtualMachineVMImageVirtualMachineVMImageCreateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Add the data-disk-configurations value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--icon-uri <iconUri>', $('Add the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Add the image-family value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--language <language>', $('Add the language value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Add the os-disk-configuration value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Add the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Add the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Add the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'dataDiskConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = '' + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'iconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = '' + '/' + 'imageFamily';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'language';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'oSDiskConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'recommendedVMSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = '' + '/' + 'showInGui';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = '' + '/' + 'smallIconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set data-disk-configurations
  var catparametersVirtualMachineVMImageDataDiskConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageDataDiskConfigurations0 = catparametersVirtualMachineVMImageDataDiskConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersVirtualMachineVMImageDataDiskConfigurations0 = parametersVirtualMachineVMImageDataDiskConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersVirtualMachineVMImageDataDiskConfigurations0.command('data-disk-configurations')
  .description($('Set catparametersVirtualMachineVMImageDataDiskConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove data-disk-configurations
  var catparametersVirtualMachineVMImageDataDiskConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageDataDiskConfigurations1 = catparametersVirtualMachineVMImageDataDiskConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersVirtualMachineVMImageDataDiskConfigurations1 = parametersVirtualMachineVMImageDataDiskConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersVirtualMachineVMImageDataDiskConfigurations1.command('data-disk-configurations')
  .description($('Remove catparametersVirtualMachineVMImageDataDiskConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add data-disk-configurations
  var catparametersVirtualMachineVMImageDataDiskConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageDataDiskConfigurations2 = catparametersVirtualMachineVMImageDataDiskConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersVirtualMachineVMImageDataDiskConfigurations2 = parametersVirtualMachineVMImageDataDiskConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersVirtualMachineVMImageDataDiskConfigurations2.command('data-disk-configurations')
  .description($('Remove catparametersVirtualMachineVMImageDataDiskConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set os-disk-configuration
  var catparametersVirtualMachineVMImageOSDiskConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageOSDiskConfiguration0 = catparametersVirtualMachineVMImageOSDiskConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersVirtualMachineVMImageOSDiskConfiguration0 = parametersVirtualMachineVMImageOSDiskConfiguration0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersVirtualMachineVMImageOSDiskConfiguration0.command('os-disk-configuration')
  .description($('Set catparametersVirtualMachineVMImageOSDiskConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--media-link <mediaLink>', $('Set the media-link value.'))
  .option('--os <oS>', $('Set the os value.'))
  .option('--os-state <oSState>', $('Set the os-state value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/oSDiskConfiguration';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = options.path + '/' + 'oS';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oS) {
      if (options.parse && options.oS) {
        options.oS = JSON.parse(options.oS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oS}]);
    }
    paramPath = options.path + '/' + 'oSState';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSState) {
      if (options.parse && options.oSState) {
        options.oSState = JSON.parse(options.oSState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSState}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove os-disk-configuration
  var catparametersVirtualMachineVMImageOSDiskConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageOSDiskConfiguration1 = catparametersVirtualMachineVMImageOSDiskConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersVirtualMachineVMImageOSDiskConfiguration1 = parametersVirtualMachineVMImageOSDiskConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersVirtualMachineVMImageOSDiskConfiguration1.command('os-disk-configuration')
  .description($('Remove catparametersVirtualMachineVMImageOSDiskConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/oSDiskConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add os-disk-configuration
  var catparametersVirtualMachineVMImageOSDiskConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageOSDiskConfiguration2 = catparametersVirtualMachineVMImageOSDiskConfiguration2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersVirtualMachineVMImageOSDiskConfiguration2 = parametersVirtualMachineVMImageOSDiskConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersVirtualMachineVMImageOSDiskConfiguration2.command('os-disk-configuration')
  .description($('Remove catparametersVirtualMachineVMImageOSDiskConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--media-link <mediaLink>', $('Add the media-link value.'))
  .option('--os <oS>', $('Add the os value.'))
  .option('--os-state <oSState>', $('Add the os-state value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/oSDiskConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/oSDiskConfiguration' + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/oSDiskConfiguration' + '/' + 'mediaLink';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mediaLink) {
      if (options.parse && options.mediaLink) {
        options.mediaLink = JSON.parse(options.mediaLink);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mediaLink}]);
    }
    paramPath = '/oSDiskConfiguration' + '/' + 'oS';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oS) {
      if (options.parse && options.oS) {
        options.oS = JSON.parse(options.oS);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oS}]);
    }
    paramPath = '/oSDiskConfiguration' + '/' + 'oSState';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSState) {
      if (options.parse && options.oSState) {
        options.oSState = JSON.parse(options.oSState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSState}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineVMImage Delete
  --vm-image-name
  --delete-from-storage
*/
  var virtualMachineVMImageDelete = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image').description($('Commands to manage your virtual machine vm image.'));
  virtualMachineVMImageDelete.command('delete')
  .description($('delete method to manage your virtual machine vm image.'))
  .usage('[options]')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('vmImageName = ' + options.vmImageName);
    var deleteFromStorageObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      deleteFromStorageObj = JSON.parse(fileContent);
    }
    else {
      deleteFromStorageObj = {};
    }
    cli.output.info('deleteFromStorageObj = ' + JSON.stringify(deleteFromStorageObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.deleteMethod(options.vmImageName, options.deleteFromStorage, _);
    cli.output.json(result);
  });
/*
  VirtualMachineVMImage GetDetails
  --vm-image-name
*/
  var virtualMachineVMImageGetDetails = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image').description($('Commands to manage your virtual machine vm image.'));
  virtualMachineVMImageGetDetails.command('get-details')
  .description($('get-details method to manage your virtual machine vm image.'))
  .usage('[options]')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('vmImageName = ' + options.vmImageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.getDetails(options.vmImageName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineVMImage List
*/
  var virtualMachineVMImageList = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image').description($('Commands to manage your virtual machine vm image.'));
  virtualMachineVMImageList.command('list')
  .description($('list method to manage your virtual machine vm image.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.list(_);
    cli.output.json(result);
  });
/*
  VirtualMachineVMImage Replicate
  --vm-image-name
  --parameters
=============================================
{
  "computeImageAttributes":{
    "offer":"",
    "sku":"",
    "version":""
  },
  "marketplaceImageAttributes":{
    "plan":{
      "name":"",
      "product":"",
      "publisher":""
    },
    "publisherId":""
  },
  "targetLocations":[
    ""
  ]
}
*/
  var virtualMachineVMImageReplicate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image').description($('Commands to manage your virtual machine vm image.'));
  virtualMachineVMImageReplicate.command('replicate')
  .description($('replicate method to manage your virtual machine vm image.'))
  .usage('[options]')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('vmImageName = ' + options.vmImageName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.replicate(options.vmImageName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineVMImageReplicatereplicateParameters1 = virtualMachineVMImageReplicate.category('parameters')
  .description($('Commands to manage parameter for your virtual machine vm image.'));
  var virtualMachineVMImageReplicatereplicateGenerate1 = virtualMachineVMImageReplicatereplicateParameters1.category('generate')
  .description($('Commands to generate parameter file for your virtual machine vm image.'));
  virtualMachineVMImageReplicatereplicateGenerate1.command('replicate')
  .description($('Generate virtualMachineVMImageReplicate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"computeImageAttributes\":{\"offer\":\"\",\"sku\":\"\",\"version\":\"\"},\"marketplaceImageAttributes\":{\"plan\":{\"name\":\"\",\"product\":\"\",\"publisher\":\"\"},\"publisherId\":\"\"},\"targetLocations\":[\"\"]}', _);
    var filePath = 'virtualMachineVMImageReplicate_replicate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"computeImageAttributes\":{\r\n\"offer\":\"\",\r\n\"sku\":\"\",\r\n\"version\":\"\"\r\n},\r\n\"marketplaceImageAttributes\":{\r\n\"plan\":{\r\n\"name\":\"\",\r\n\"product\":\"\",\r\n\"publisher\":\"\"\r\n},\r\n\"publisherId\":\"\"\r\n},\r\n\"targetLocations\":[\r\n\"\"\r\n]\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineVMImageReplicatereplicateParameters1.command('patch')
  .description($('Command to patch virtualMachineVMImageReplicate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-vm-image-replicate-parameters
  var catparametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0 = catparametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0 = parametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0.command('virtual-machine-vm-image-replicate-parameters')
  .description($('Set catparametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--compute-image-attributes <computeImageAttributes>', $('Set the compute-image-attributes value.'))
  .option('--marketplace-image-attributes <marketplaceImageAttributes>', $('Set the marketplace-image-attributes value.'))
  .option('--target-locations <targetLocations>', $('Set the target-locations value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'computeImageAttributes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computeImageAttributes) {
      if (options.parse && options.computeImageAttributes) {
        options.computeImageAttributes = JSON.parse(options.computeImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computeImageAttributes}]);
    }
    paramPath = options.path + '/' + 'marketplaceImageAttributes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.marketplaceImageAttributes) {
      if (options.parse && options.marketplaceImageAttributes) {
        options.marketplaceImageAttributes = JSON.parse(options.marketplaceImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.marketplaceImageAttributes}]);
    }
    paramPath = options.path + '/' + 'targetLocations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.targetLocations) {
      if (options.parse && options.targetLocations) {
        options.targetLocations = JSON.parse(options.targetLocations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetLocations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-vm-image-replicate-parameters
  var catparametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1 = catparametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1 = parametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1.command('virtual-machine-vm-image-replicate-parameters')
  .description($('Remove catparametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-vm-image-replicate-parameters
  var catparametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2 = catparametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2 = parametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2.command('virtual-machine-vm-image-replicate-parameters')
  .description($('Remove catparametersVirtualMachineVMImageVirtualMachineVMImageReplicateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--compute-image-attributes <computeImageAttributes>', $('Add the compute-image-attributes value.'))
  .option('--marketplace-image-attributes <marketplaceImageAttributes>', $('Add the marketplace-image-attributes value.'))
  .option('--target-locations <targetLocations>', $('Add the target-locations value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'computeImageAttributes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computeImageAttributes) {
      if (options.parse && options.computeImageAttributes) {
        options.computeImageAttributes = JSON.parse(options.computeImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computeImageAttributes}]);
    }
    paramPath = '' + '/' + 'marketplaceImageAttributes';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.marketplaceImageAttributes) {
      if (options.parse && options.marketplaceImageAttributes) {
        options.marketplaceImageAttributes = JSON.parse(options.marketplaceImageAttributes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.marketplaceImageAttributes}]);
    }
    paramPath = '' + '/' + 'targetLocations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.targetLocations) {
      if (options.parse && options.targetLocations) {
        options.targetLocations = JSON.parse(options.targetLocations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.targetLocations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set compute-image-attributes
  var catparametersVirtualMachineVMImageComputeImageAttributes0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageComputeImageAttributes0 = catparametersVirtualMachineVMImageComputeImageAttributes0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersVirtualMachineVMImageComputeImageAttributes0 = parametersVirtualMachineVMImageComputeImageAttributes0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersVirtualMachineVMImageComputeImageAttributes0.command('compute-image-attributes')
  .description($('Set catparametersVirtualMachineVMImageComputeImageAttributes0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--offer <offer>', $('Set the offer value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/computeImageAttributes';
    var paramPath = options.path + '/' + 'offer';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.offer) {
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = options.path + '/' + 'sku';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove compute-image-attributes
  var catparametersVirtualMachineVMImageComputeImageAttributes1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageComputeImageAttributes1 = catparametersVirtualMachineVMImageComputeImageAttributes1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersVirtualMachineVMImageComputeImageAttributes1 = parametersVirtualMachineVMImageComputeImageAttributes1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersVirtualMachineVMImageComputeImageAttributes1.command('compute-image-attributes')
  .description($('Remove catparametersVirtualMachineVMImageComputeImageAttributes1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/computeImageAttributes';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add compute-image-attributes
  var catparametersVirtualMachineVMImageComputeImageAttributes2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageComputeImageAttributes2 = catparametersVirtualMachineVMImageComputeImageAttributes2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersVirtualMachineVMImageComputeImageAttributes2 = parametersVirtualMachineVMImageComputeImageAttributes2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersVirtualMachineVMImageComputeImageAttributes2.command('compute-image-attributes')
  .description($('Remove catparametersVirtualMachineVMImageComputeImageAttributes2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--offer <offer>', $('Add the offer value.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/computeImageAttributes' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/computeImageAttributes' + '/' + 'offer';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.offer) {
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = '/computeImageAttributes' + '/' + 'sku';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '/computeImageAttributes' + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set marketplace-image-attributes
  var catparametersVirtualMachineVMImageMarketplaceImageAttributes0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageMarketplaceImageAttributes0 = catparametersVirtualMachineVMImageMarketplaceImageAttributes0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersVirtualMachineVMImageMarketplaceImageAttributes0 = parametersVirtualMachineVMImageMarketplaceImageAttributes0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersVirtualMachineVMImageMarketplaceImageAttributes0.command('marketplace-image-attributes')
  .description($('Set catparametersVirtualMachineVMImageMarketplaceImageAttributes0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--plan <plan>', $('Set the plan value.'))
  .option('--publisher-id <publisherId>', $('Set the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/marketplaceImageAttributes';
    var paramPath = options.path + '/' + 'plan';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.plan) {
      if (options.parse && options.plan) {
        options.plan = JSON.parse(options.plan);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.plan}]);
    }
    paramPath = options.path + '/' + 'publisherId';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisherId) {
      if (options.parse && options.publisherId) {
        options.publisherId = JSON.parse(options.publisherId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherId}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove marketplace-image-attributes
  var catparametersVirtualMachineVMImageMarketplaceImageAttributes1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageMarketplaceImageAttributes1 = catparametersVirtualMachineVMImageMarketplaceImageAttributes1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersVirtualMachineVMImageMarketplaceImageAttributes1 = parametersVirtualMachineVMImageMarketplaceImageAttributes1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersVirtualMachineVMImageMarketplaceImageAttributes1.command('marketplace-image-attributes')
  .description($('Remove catparametersVirtualMachineVMImageMarketplaceImageAttributes1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/marketplaceImageAttributes';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add marketplace-image-attributes
  var catparametersVirtualMachineVMImageMarketplaceImageAttributes2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageMarketplaceImageAttributes2 = catparametersVirtualMachineVMImageMarketplaceImageAttributes2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersVirtualMachineVMImageMarketplaceImageAttributes2 = parametersVirtualMachineVMImageMarketplaceImageAttributes2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersVirtualMachineVMImageMarketplaceImageAttributes2.command('marketplace-image-attributes')
  .description($('Remove catparametersVirtualMachineVMImageMarketplaceImageAttributes2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--plan <plan>', $('Add the plan value.'))
  .option('--publisher-id <publisherId>', $('Add the publisher-id value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/marketplaceImageAttributes' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/marketplaceImageAttributes' + '/' + 'plan';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.plan) {
      if (options.parse && options.plan) {
        options.plan = JSON.parse(options.plan);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.plan}]);
    }
    paramPath = '/marketplaceImageAttributes' + '/' + 'publisherId';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisherId) {
      if (options.parse && options.publisherId) {
        options.publisherId = JSON.parse(options.publisherId);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisherId}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set plan
  var catparametersVirtualMachineVMImagePlan0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImagePlan0 = catparametersVirtualMachineVMImagePlan0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersVirtualMachineVMImagePlan0 = parametersVirtualMachineVMImagePlan0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersVirtualMachineVMImagePlan0.command('plan')
  .description($('Set catparametersVirtualMachineVMImagePlan0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--product <product>', $('Set the product value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/marketplaceImageAttributes/plan';
    var paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'product';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.product) {
      if (options.parse && options.product) {
        options.product = JSON.parse(options.product);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.product}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove plan
  var catparametersVirtualMachineVMImagePlan1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImagePlan1 = catparametersVirtualMachineVMImagePlan1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersVirtualMachineVMImagePlan1 = parametersVirtualMachineVMImagePlan1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersVirtualMachineVMImagePlan1.command('plan')
  .description($('Remove catparametersVirtualMachineVMImagePlan1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/marketplaceImageAttributes/plan';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add plan
  var catparametersVirtualMachineVMImagePlan2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImagePlan2 = catparametersVirtualMachineVMImagePlan2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersVirtualMachineVMImagePlan2 = parametersVirtualMachineVMImagePlan2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersVirtualMachineVMImagePlan2.command('plan')
  .description($('Remove catparametersVirtualMachineVMImagePlan2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--product <product>', $('Add the product value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/marketplaceImageAttributes/plan' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/marketplaceImageAttributes/plan' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/marketplaceImageAttributes/plan' + '/' + 'product';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.product) {
      if (options.parse && options.product) {
        options.product = JSON.parse(options.product);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.product}]);
    }
    paramPath = '/marketplaceImageAttributes/plan' + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set target-locations
  var catparametersVirtualMachineVMImageTargetLocations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageTargetLocations0 = catparametersVirtualMachineVMImageTargetLocations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersVirtualMachineVMImageTargetLocations0 = parametersVirtualMachineVMImageTargetLocations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersVirtualMachineVMImageTargetLocations0.command('target-locations')
  .description($('Set catparametersVirtualMachineVMImageTargetLocations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove target-locations
  var catparametersVirtualMachineVMImageTargetLocations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageTargetLocations1 = catparametersVirtualMachineVMImageTargetLocations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersVirtualMachineVMImageTargetLocations1 = parametersVirtualMachineVMImageTargetLocations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersVirtualMachineVMImageTargetLocations1.command('target-locations')
  .description($('Remove catparametersVirtualMachineVMImageTargetLocations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add target-locations
  var catparametersVirtualMachineVMImageTargetLocations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageTargetLocations2 = catparametersVirtualMachineVMImageTargetLocations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersVirtualMachineVMImageTargetLocations2 = parametersVirtualMachineVMImageTargetLocations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersVirtualMachineVMImageTargetLocations2.command('target-locations')
  .description($('Remove catparametersVirtualMachineVMImageTargetLocations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/targetLocations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineVMImage Share
  --vm-image-name
  --permission
*/
  var virtualMachineVMImageShare = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image').description($('Commands to manage your virtual machine vm image.'));
  virtualMachineVMImageShare.command('share')
  .description($('share method to manage your virtual machine vm image.'))
  .usage('[options]')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('--permission <permission>', $('permission'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('vmImageName = ' + options.vmImageName);
    cli.output.info('permission = ' + options.permission);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.share(options.vmImageName, options.permission, _);
    cli.output.json(result);
  });
/*
  VirtualMachineVMImage Unreplicate
  --vm-image-name
*/
  var virtualMachineVMImageUnreplicate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image').description($('Commands to manage your virtual machine vm image.'));
  virtualMachineVMImageUnreplicate.command('unreplicate')
  .description($('unreplicate method to manage your virtual machine vm image.'))
  .usage('[options]')
  .option('--vm-image-name <vm-image-name>', $('vm-image-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('vmImageName = ' + options.vmImageName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.unreplicate(options.vmImageName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineVMImage Update
  --image-name
  --parameters
=============================================
{
  "dataDiskConfigurations":[
    {
      "hostCaching":"",
      "logicalUnitNumber":null,
      "name":""
    }
  ],
  "description":"",
  "eula":"",
  "iconUri":"",
  "imageFamily":"",
  "label":"",
  "language":"",
  "oSDiskConfiguration":{
    "hostCaching":""
  },
  "privacyUri":"",
  "publishedDate":null,
  "recommendedVMSize":"",
  "showInGui":null,
  "smallIconUri":""
}
*/
  var virtualMachineVMImageUpdate = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image').description($('Commands to manage your virtual machine vm image.'));
  virtualMachineVMImageUpdate.command('update')
  .description($('update method to manage your virtual machine vm image.'))
  .usage('[options]')
  .option('--image-name <image-name>', $('image-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('imageName = ' + options.imageName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeClient(subscription);
    var result = computeManagementClient.virtualMachineVMImages.update(options.imageName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineVMImageUpdateupdateParameters1 = virtualMachineVMImageUpdate.category('parameters')
  .description($('Commands to manage parameter for your virtual machine vm image.'));
  var virtualMachineVMImageUpdateupdateGenerate1 = virtualMachineVMImageUpdateupdateParameters1.category('generate')
  .description($('Commands to generate parameter file for your virtual machine vm image.'));
  virtualMachineVMImageUpdateupdateGenerate1.command('update')
  .description($('Generate virtualMachineVMImageUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"dataDiskConfigurations\":[{\"hostCaching\":\"\",\"logicalUnitNumber\":null,\"name\":\"\"}],\"description\":\"\",\"eula\":\"\",\"iconUri\":\"\",\"imageFamily\":\"\",\"label\":\"\",\"language\":\"\",\"oSDiskConfiguration\":{\"hostCaching\":\"\"},\"privacyUri\":\"\",\"publishedDate\":null,\"recommendedVMSize\":\"\",\"showInGui\":null,\"smallIconUri\":\"\"}', _);
    var filePath = 'virtualMachineVMImageUpdate_update.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"dataDiskConfigurations\":[\r\n{\r\n\"hostCaching\":\"\",\r\n\"logicalUnitNumber\":null,\r\n\"name\":\"\"\r\n}\r\n],\r\n\"description\":\"\",\r\n\"eula\":\"\",\r\n\"iconUri\":\"\",\r\n\"imageFamily\":\"\",\r\n\"label\":\"\",\r\n\"language\":\"\",\r\n\"oSDiskConfiguration\":{\r\n\"hostCaching\":\"\"\r\n},\r\n\"privacyUri\":\"\",\r\n\"publishedDate\":null,\r\n\"recommendedVMSize\":\"\",\r\n\"showInGui\":null,\r\n\"smallIconUri\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineVMImageUpdateupdateParameters1.command('patch')
  .description($('Command to patch virtualMachineVMImageUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-vm-image-update-parameters
  var catparametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0 = catparametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0 = parametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0.command('virtual-machine-vm-image-update-parameters')
  .description($('Set catparametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Set the data-disk-configurations value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--eula <eula>', $('Set the eula value.'))
  .option('--icon-uri <iconUri>', $('Set the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Set the image-family value.'))
  .option('--label <label>', $('Set the label value.'))
  .option('--language <language>', $('Set the language value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Set the os-disk-configuration value.'))
  .option('--privacy-uri <privacyUri>', $('Set the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Set the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Set the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Set the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Set the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'dataDiskConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = options.path + '/' + 'iconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = options.path + '/' + 'imageFamily';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = options.path + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = options.path + '/' + 'language';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = options.path + '/' + 'oSDiskConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    paramPath = options.path + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = options.path + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = options.path + '/' + 'recommendedVMSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = options.path + '/' + 'showInGui';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = options.path + '/' + 'smallIconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-vm-image-update-parameters
  var catparametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1 = catparametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1 = parametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1.command('virtual-machine-vm-image-update-parameters')
  .description($('Remove catparametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-vm-image-update-parameters
  var catparametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2 = catparametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2 = parametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2.command('virtual-machine-vm-image-update-parameters')
  .description($('Remove catparametersVirtualMachineVMImageVirtualMachineVMImageUpdateParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--data-disk-configurations <dataDiskConfigurations>', $('Add the data-disk-configurations value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--eula <eula>', $('Add the eula value.'))
  .option('--icon-uri <iconUri>', $('Add the icon-uri value.'))
  .option('--image-family <imageFamily>', $('Add the image-family value.'))
  .option('--label <label>', $('Add the label value.'))
  .option('--language <language>', $('Add the language value.'))
  .option('--os-disk-configuration <oSDiskConfiguration>', $('Add the os-disk-configuration value.'))
  .option('--privacy-uri <privacyUri>', $('Add the privacy-uri value.'))
  .option('--published-date <publishedDate>', $('Add the published-date value.'))
  .option('--recommended-vm-size <recommendedVMSize>', $('Add the recommended-vm-size value.'))
  .option('--show-in-gui <showInGui>', $('Add the show-in-gui value.'))
  .option('--small-icon-uri <smallIconUri>', $('Add the small-icon-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'dataDiskConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.dataDiskConfigurations) {
      if (options.parse && options.dataDiskConfigurations) {
        options.dataDiskConfigurations = JSON.parse(options.dataDiskConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDiskConfigurations}]);
    }
    paramPath = '' + '/' + 'description';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '' + '/' + 'eula';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.eula) {
      if (options.parse && options.eula) {
        options.eula = JSON.parse(options.eula);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.eula}]);
    }
    paramPath = '' + '/' + 'iconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.iconUri) {
      if (options.parse && options.iconUri) {
        options.iconUri = JSON.parse(options.iconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.iconUri}]);
    }
    paramPath = '' + '/' + 'imageFamily';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageFamily) {
      if (options.parse && options.imageFamily) {
        options.imageFamily = JSON.parse(options.imageFamily);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageFamily}]);
    }
    paramPath = '' + '/' + 'label';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.label) {
      if (options.parse && options.label) {
        options.label = JSON.parse(options.label);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.label}]);
    }
    paramPath = '' + '/' + 'language';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.language) {
      if (options.parse && options.language) {
        options.language = JSON.parse(options.language);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.language}]);
    }
    paramPath = '' + '/' + 'oSDiskConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDiskConfiguration) {
      if (options.parse && options.oSDiskConfiguration) {
        options.oSDiskConfiguration = JSON.parse(options.oSDiskConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDiskConfiguration}]);
    }
    paramPath = '' + '/' + 'privacyUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.privacyUri) {
      if (options.parse && options.privacyUri) {
        options.privacyUri = JSON.parse(options.privacyUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privacyUri}]);
    }
    paramPath = '' + '/' + 'publishedDate';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publishedDate) {
      if (options.parse && options.publishedDate) {
        options.publishedDate = JSON.parse(options.publishedDate);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publishedDate}]);
    }
    paramPath = '' + '/' + 'recommendedVMSize';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.recommendedVMSize) {
      if (options.parse && options.recommendedVMSize) {
        options.recommendedVMSize = JSON.parse(options.recommendedVMSize);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.recommendedVMSize}]);
    }
    paramPath = '' + '/' + 'showInGui';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.showInGui) {
      if (options.parse && options.showInGui) {
        options.showInGui = JSON.parse(options.showInGui);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.showInGui}]);
    }
    paramPath = '' + '/' + 'smallIconUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.smallIconUri) {
      if (options.parse && options.smallIconUri) {
        options.smallIconUri = JSON.parse(options.smallIconUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.smallIconUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set data-disk-configurations
  var catparametersVirtualMachineVMImageDataDiskConfigurations0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageDataDiskConfigurations0 = catparametersVirtualMachineVMImageDataDiskConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersVirtualMachineVMImageDataDiskConfigurations0 = parametersVirtualMachineVMImageDataDiskConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersVirtualMachineVMImageDataDiskConfigurations0.command('data-disk-configurations')
  .description($('Set catparametersVirtualMachineVMImageDataDiskConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Set the logical-unit-number value.'))
  .option('--name <name>', $('Set the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = options.path + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove data-disk-configurations
  var catparametersVirtualMachineVMImageDataDiskConfigurations1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageDataDiskConfigurations1 = catparametersVirtualMachineVMImageDataDiskConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersVirtualMachineVMImageDataDiskConfigurations1 = parametersVirtualMachineVMImageDataDiskConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersVirtualMachineVMImageDataDiskConfigurations1.command('data-disk-configurations')
  .description($('Remove catparametersVirtualMachineVMImageDataDiskConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add data-disk-configurations
  var catparametersVirtualMachineVMImageDataDiskConfigurations2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageDataDiskConfigurations2 = catparametersVirtualMachineVMImageDataDiskConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersVirtualMachineVMImageDataDiskConfigurations2 = parametersVirtualMachineVMImageDataDiskConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersVirtualMachineVMImageDataDiskConfigurations2.command('data-disk-configurations')
  .description($('Remove catparametersVirtualMachineVMImageDataDiskConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .option('--logical-unit-number <logicalUnitNumber>', $('Add the logical-unit-number value.'))
  .option('--name <name>', $('Add the name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'logicalUnitNumber';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.logicalUnitNumber) {
      if (options.parse && options.logicalUnitNumber) {
        options.logicalUnitNumber = JSON.parse(options.logicalUnitNumber);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.logicalUnitNumber}]);
    }
    paramPath = '/dataDiskConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set os-disk-configuration
  var catparametersVirtualMachineVMImageOSDiskConfiguration0 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageOSDiskConfiguration0 = catparametersVirtualMachineVMImageOSDiskConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-vm-image.'));
  var setparametersVirtualMachineVMImageOSDiskConfiguration0 = parametersVirtualMachineVMImageOSDiskConfiguration0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-vm-image.'));
  setparametersVirtualMachineVMImageOSDiskConfiguration0.command('os-disk-configuration')
  .description($('Set catparametersVirtualMachineVMImageOSDiskConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Set the host-caching value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/oSDiskConfiguration';
    var paramPath = options.path + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove os-disk-configuration
  var catparametersVirtualMachineVMImageOSDiskConfiguration1 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageOSDiskConfiguration1 = catparametersVirtualMachineVMImageOSDiskConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-vm-image.'));
  var removeparametersVirtualMachineVMImageOSDiskConfiguration1 = parametersVirtualMachineVMImageOSDiskConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-vm-image.'));
  removeparametersVirtualMachineVMImageOSDiskConfiguration1.command('os-disk-configuration')
  .description($('Remove catparametersVirtualMachineVMImageOSDiskConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/oSDiskConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add os-disk-configuration
  var catparametersVirtualMachineVMImageOSDiskConfiguration2 = cli.category('invoke').description('Commands to invoke service management operations.').category('virtual-machine-vm-image');
  var parametersVirtualMachineVMImageOSDiskConfiguration2 = catparametersVirtualMachineVMImageOSDiskConfiguration2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-vm-image.'));
  var addparametersVirtualMachineVMImageOSDiskConfiguration2 = parametersVirtualMachineVMImageOSDiskConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-vm-image.'));
  addparametersVirtualMachineVMImageOSDiskConfiguration2.command('os-disk-configuration')
  .description($('Remove catparametersVirtualMachineVMImageOSDiskConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--host-caching <hostCaching>', $('Add the host-caching value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/oSDiskConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/oSDiskConfiguration' + '/' + 'hostCaching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.hostCaching) {
      if (options.parse && options.hostCaching) {
        options.hostCaching = JSON.parse(options.hostCaching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.hostCaching}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });




};
